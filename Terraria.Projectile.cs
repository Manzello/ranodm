// Warning: Some assembly references could not be resolved automatically. This might lead to incorrect decompilation of some parts,
// for ex. property getter/setter access. To get optimal decompilation results, please manually add the missing references to the list of loaded assemblies.
// Terraria.Projectile
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using Terraria;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Physics;
using Terraria.Utilities;
using Terraria.WorldBuilding;

public class Projectile : Entity
{
	private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
	{
		public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2)
		{
			return npcIndex1.Item2.CompareTo(npcIndex2.Item2);
		}
	}

	public struct HallowBossPelletStormInfo
	{
		public float StartAngle;

		public float AnglePerBullet;

		public int BulletsInStorm;

		public float BulletsProgressInStormStartNormalized;

		public float BulletsProgressInStormBonusByIndexNormalized;

		public float StormTotalRange;

		public Vector2 BulletSize;

		public float GetBulletProgress(int bulletIndex)
		{
			return BulletsProgressInStormStartNormalized + BulletsProgressInStormBonusByIndexNormalized * (float)bulletIndex;
		}

		public bool IsValid(int bulletIndex)
		{
			float bulletProgress = GetBulletProgress(bulletIndex);
			if (bulletProgress >= 0f)
			{
				return bulletProgress <= 1f;
			}
			return false;
		}

		public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint)
		{
			return centerPoint + Vector2.UnitX.RotatedBy(StartAngle + AnglePerBullet * (float)bulletIndex) * StormTotalRange * GetBulletProgress(bulletIndex);
		}

		public Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint)
		{
			return Utils.CenteredRectangle(GetBulletPosition(bulletIndex, centerPoint), BulletSize);
		}
	}

	public static uint[][] perIDStaticNPCImmunity = new uint[954][];

	public const int SentryLifeTime = 7200;

	public const int ArrowLifeTime = 1200;

	public float ownerHitCheckDistance = 1000f;

	public bool arrow;

	public int numHits;

	public bool bobber;

	public bool netImportant;

	public bool noDropItem;

	public static int maxAI = 2;

	public bool counterweight;

	public float scale = 1f;

	public float rotation;

	public int type;

	public int alpha;

	public bool sentry;

	public short glowMask;

	public int owner = 255;

	public float[] ai = new float[maxAI];

	public float[] localAI = new float[maxAI];

	public float gfxOffY;

	public float stepSpeed = 1f;

	public int aiStyle;

	public int timeLeft;

	public int soundDelay;

	public int damage;

	public int originalDamage;

	public int spriteDirection = 1;

	public bool hostile;

	public float knockBack;

	public bool friendly;

	public int penetrate = 1;

	private int[] localNPCImmunity = new int[200];

	private bool usesLocalNPCImmunity;

	private bool usesIDStaticNPCImmunity;

	public int maxPenetrate = 1;

	public int identity;

	public float light;

	public bool netUpdate;

	public bool netUpdate2;

	public int netSpam;

	public Vector2[] oldPos = new Vector2[10];

	public float[] oldRot = new float[10];

	public int[] oldSpriteDirection = new int[10];

	public bool minion;

	public float minionSlots;

	public int minionPos;

	public int restrikeDelay;

	public bool tileCollide;

	public int extraUpdates;

	public int numUpdates;

	public bool ignoreWater;

	public bool hide;

	public bool ownerHitCheck;

	public int[] playerImmune = new int[255];

	public string miscText = "";

	public bool melee;

	public bool ranged;

	public bool magic;

	public bool coldDamage;

	public bool noEnchantments;

	public bool noEnchantmentVisuals;

	public bool trap;

	public bool npcProj;

	public bool originatedFromActivableTile;

	public int frameCounter;

	public int frame;

	public bool manualDirectionChange;

	public int projUUID = -1;

	public bool decidesManualFallThrough;

	public bool shouldFallThrough;

	public int localNPCHitCooldown = -2;

	public int idStaticNPCHitCooldown = -1;

	private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();

	private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();

	private List<Vector2> _whipPointsForCollision = new List<Vector2>();

	private static Rectangle _lanceHitboxBounds = new Rectangle(0, 0, 300, 300);

	private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();

	private static NPCDistanceByIndexComparator _medusaTargetComparer = new NPCDistanceByIndexComparator();

	private static List<int> _ai164_blacklistedTargets = new List<int>();

	private static List<int> _ai158_blacklistedTargets = new List<int>();

	private static List<int> _ai156_blacklistedTargets = new List<int>();

	private static float[] _CompanionCubeScreamCooldown = new float[255];

	public string Name => Lang.GetProjectileName(type).Value;

	public bool WipableTurret
	{
		get
		{
			if (owner == Main.myPlayer && sentry)
			{
				return !TurretShouldPersist();
			}
			return false;
		}
	}

	public float Opacity
	{
		get
		{
			return 1f - (float)alpha / 255f;
		}
		set
		{
			alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
		}
	}

	public int MaxUpdates
	{
		get
		{
			return extraUpdates + 1;
		}
		set
		{
			extraUpdates = value - 1;
		}
	}

	public NPC OwnerMinionAttackTargetNPC
	{
		get
		{
			if (Main.player[owner].MinionAttackTargetNPC < 0)
			{
				return null;
			}
			return Main.npc[Main.player[owner].MinionAttackTargetNPC];
		}
	}

	public static void InitializeStaticThings()
	{
		perIDStaticNPCImmunity = new uint[954][];
		for (int i = 0; i < perIDStaticNPCImmunity.Length; i++)
		{
			perIDStaticNPCImmunity[i] = new uint[200];
		}
		WorldGen.Hooks.OnWorldLoad += ResetImmunity;
	}

	public static void ResetImmunity()
	{
		for (int i = 0; i < 954; i++)
		{
			for (int j = 0; j < 200; j++)
			{
				perIDStaticNPCImmunity[i][j] = 0u;
			}
		}
	}

	public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex)
	{
		return perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
	}

	public bool TurretShouldPersist()
	{
		switch (type)
		{
		case 663:
		case 665:
		case 667:
		case 677:
		case 678:
		case 679:
		case 688:
		case 689:
		case 690:
		case 691:
		case 692:
		case 693:
			return DD2Event.Ongoing;
		default:
			return false;
		}
	}

	public void SetDefaults(int Type)
	{
		ownerHitCheckDistance = 1000f;
		counterweight = false;
		sentry = false;
		arrow = false;
		bobber = false;
		numHits = 0;
		netImportant = false;
		manualDirectionChange = false;
		decidesManualFallThrough = false;
		shouldFallThrough = false;
		localNPCHitCooldown = -2;
		idStaticNPCHitCooldown = -1;
		usesLocalNPCImmunity = false;
		usesIDStaticNPCImmunity = false;
		int num = 10;
		if (Type >= 0)
		{
			num = ProjectileID.Sets.TrailCacheLength[Type];
		}
		if (num != oldPos.Length)
		{
			Array.Resize(ref oldPos, num);
			Array.Resize(ref oldRot, num);
			Array.Resize(ref oldSpriteDirection, num);
		}
		for (int i = 0; i < oldPos.Length; i++)
		{
			oldPos[i].X = 0f;
			oldPos[i].Y = 0f;
			oldRot[i] = 0f;
			oldSpriteDirection[i] = 0;
		}
		for (int j = 0; j < maxAI; j++)
		{
			ai[j] = 0f;
			localAI[j] = 0f;
		}
		for (int k = 0; k < 255; k++)
		{
			playerImmune[k] = 0;
		}
		ResetLocalNPCHitImmunity();
		noDropItem = false;
		minion = false;
		minionSlots = 0f;
		soundDelay = 0;
		spriteDirection = 1;
		melee = false;
		ranged = false;
		magic = false;
		ownerHitCheck = false;
		hide = false;
		lavaWet = false;
		wetCount = 0;
		wet = false;
		ignoreWater = false;
		hostile = false;
		netUpdate = false;
		netUpdate2 = false;
		netSpam = 0;
		numUpdates = 0;
		extraUpdates = 0;
		identity = 0;
		restrikeDelay = 0;
		light = 0f;
		penetrate = 1;
		tileCollide = true;
		position = Vector2.Zero;
		velocity = Vector2.Zero;
		aiStyle = 0;
		alpha = 0;
		glowMask = -1;
		type = Type;
		active = true;
		rotation = 0f;
		scale = 1f;
		owner = 255;
		timeLeft = 3600;
		friendly = false;
		damage = 0;
		originalDamage = 0;
		knockBack = 0f;
		miscText = "";
		coldDamage = false;
		noEnchantments = false;
		noEnchantmentVisuals = false;
		trap = false;
		npcProj = false;
		originatedFromActivableTile = false;
		projUUID = -1;
		frame = 0;
		frameCounter = 0;
		if (type == 1)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 2)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 3)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 4;
			ranged = true;
		}
		else if (type == 4)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 0.35f;
			penetrate = 5;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 5)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 0.4f;
			penetrate = -1;
			alpha = 100;
			ignoreWater = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 120;
		}
		else if (type == 6)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
		}
		else if (type == 7 || type == 8)
		{
			width = 28;
			height = 28;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 9)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			alpha = 50;
			scale = 0.8f;
			tileCollide = false;
			melee = true;
		}
		else if (type == 10)
		{
			width = 64;
			height = 64;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 11)
		{
			width = 48;
			height = 48;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 12)
		{
			width = 18;
			height = 18;
			aiStyle = 5;
			friendly = true;
			penetrate = -1;
			alpha = 50;
			light = 1f;
		}
		else if (type == 13)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 14)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 15)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
		}
		else if (type == 16)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 17)
		{
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ignoreWater = true;
		}
		else if (type == 18)
		{
			netImportant = true;
			width = 32;
			height = 32;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			alpha = 150;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 19)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			light = 1f;
			melee = true;
		}
		else if (type == 20)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.4f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 21)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			scale = 1.2f;
			friendly = true;
			ranged = true;
		}
		else if (type == 22)
		{
			width = 18;
			height = 18;
			aiStyle = 12;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 23)
		{
			width = 4;
			height = 4;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			ranged = true;
		}
		else if (type == 24)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			penetrate = 6;
			ranged = true;
		}
		else if (type == 25)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.9f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 26)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 27)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			alpha = 255;
			timeLeft /= 2;
			penetrate = 10;
			magic = true;
		}
		else if (type == 28)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 29)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 30)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 31)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 32)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 33)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 34)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			penetrate = 2;
			magic = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
		}
		else if (type == 35)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 36)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 2;
			light = 0.6f;
			alpha = 255;
			scale = 1.4f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 37)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 38)
		{
			width = 14;
			height = 14;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 39)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 40)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 41)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			penetrate = -1;
			ranged = true;
			light = 0.3f;
		}
		else if (type == 42)
		{
			knockBack = 8f;
			width = 10;
			height = 10;
			aiStyle = 10;
			ranged = true;
			friendly = true;
			extraUpdates = 1;
		}
		else if (type == 43)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 44)
		{
			width = 48;
			height = 48;
			alpha = 100;
			light = 0.2f;
			aiStyle = 18;
			hostile = true;
			penetrate = -1;
			tileCollide = true;
			scale = 0.9f;
		}
		else if (type == 45)
		{
			width = 48;
			height = 48;
			alpha = 100;
			light = 0.2f;
			aiStyle = 18;
			friendly = true;
			penetrate = 5;
			tileCollide = true;
			scale = 0.9f;
			magic = true;
		}
		else if (type == 46)
		{
			width = 20;
			height = 20;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 47)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 48)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			ranged = true;
		}
		else if (type == 49)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.2f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 50)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 51)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			ranged = true;
			friendly = true;
		}
		else if (type == 52)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 53)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
			tileCollide = false;
		}
		else if (type == 54)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			ranged = true;
		}
		else if (type == 55)
		{
			width = 10;
			height = 10;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 56)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 57)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 58)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.08f;
		}
		else if (type == 59)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 60)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 61)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.16f;
		}
		else if (type == 62)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.9f;
		}
		else if (type == 63)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 64)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.25f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 65)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 66)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.27f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 67)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 68)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 69)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 70)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 621)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 71)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 72)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 73 || type == 74)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.4f;
		}
		else if (type == 75)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 76 || type == 77 || type == 78)
		{
			if (type == 76)
			{
				width = 10;
				height = 22;
			}
			else if (type == 77)
			{
				width = 18;
				height = 24;
			}
			else
			{
				width = 22;
				height = 24;
			}
			aiStyle = 21;
			friendly = true;
			alpha = 100;
			light = 0.3f;
			penetrate = -1;
			timeLeft = 180;
			magic = true;
		}
		else if (type == 79)
		{
			width = 32;
			height = 32;
			aiStyle = 9;
			friendly = true;
			light = 0.8f;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
			ignoreWater = true;
		}
		else if (type == 80)
		{
			width = 16;
			height = 16;
			aiStyle = 22;
			friendly = true;
			magic = true;
			tileCollide = false;
			light = 0.5f;
			coldDamage = true;
		}
		else if (type == 81)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 82)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 83)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.7f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 84)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 85)
		{
			width = 6;
			height = 6;
			aiStyle = 23;
			friendly = true;
			alpha = 255;
			penetrate = 3;
			extraUpdates = 2;
			ranged = true;
		}
		else if (type == 86)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 87)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 11;
			friendly = true;
			light = 0.9f;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 88)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 4;
			scale = 1.4f;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 89)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 90)
		{
			width = 6;
			height = 6;
			aiStyle = 24;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 50;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			tileCollide = false;
		}
		else if (type == 91)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 92)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 1;
			alpha = 50;
			scale = 0.8f;
			tileCollide = false;
			ranged = true;
		}
		else if (type == 93)
		{
			light = 0.15f;
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			penetrate = 2;
			magic = true;
		}
		else if (type == 94)
		{
			ignoreWater = true;
			width = 8;
			height = 8;
			aiStyle = 24;
			friendly = true;
			light = 0.5f;
			alpha = 50;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
			tileCollide = true;
			penetrate = 1;
		}
		else if (type == 95)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			penetrate = 2;
		}
		else if (type == 96)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			hostile = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			penetrate = -1;
			scale = 0.9f;
			scale = 1.3f;
		}
		else if (type == 97)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 98)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 99 || type == 727)
		{
			width = 31;
			height = 31;
			aiStyle = 25;
			friendly = true;
			hostile = true;
			ranged = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 100)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.8f;
			timeLeft = 2700;
			magic = true;
		}
		else if (type == 101)
		{
			width = 6;
			height = 6;
			aiStyle = 23;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 3;
			magic = true;
		}
		else if (type == 102)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 103)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 104)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 2;
		}
		else if (type == 105)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.3f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 106)
		{
			width = 32;
			height = 32;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
		}
		else if (type == 107)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 108)
		{
			width = 260;
			height = 260;
			aiStyle = 16;
			friendly = true;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			timeLeft = 2;
			trap = true;
		}
		else if (type == 109)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			hostile = true;
			scale = 0.9f;
			penetrate = -1;
			coldDamage = true;
			ranged = true;
		}
		else if (type == 110)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 111)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 112)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 113)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.4f;
			coldDamage = true;
		}
		else if (type == 114)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			magic = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 115)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			hostile = true;
			magic = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
		}
		else if (type == 116)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 117)
		{
			arrow = true;
			extraUpdates = 2;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 118)
		{
			width = 10;
			height = 10;
			aiStyle = 28;
			alpha = 255;
			melee = true;
			penetrate = 1;
			friendly = true;
			coldDamage = true;
		}
		else if (type == 119)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			melee = true;
			penetrate = 2;
			friendly = true;
			coldDamage = true;
		}
		else if (type == 120)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			coldDamage = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 121)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 122)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 123)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 124)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 125)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 126)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 127)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 128)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			coldDamage = true;
		}
		else if (type == 129)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 130)
		{
			width = 22;
			height = 22;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.2f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 131)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 1;
			tileCollide = false;
			melee = true;
			light = 0.5f;
		}
		else if (type == 132)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 133)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 134)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 135)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 136)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 137)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 138)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 139)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 140)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 141)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 142)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 143)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 144)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 145)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 146)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 147)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 148)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 149)
		{
			width = 6;
			height = 6;
			aiStyle = 31;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 150 || type == 151 || type == 152)
		{
			width = 28;
			height = 28;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 153)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 154)
		{
			netImportant = true;
			width = 22;
			height = 22;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 0.8f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 155)
		{
			netImportant = true;
			width = 44;
			height = 44;
			aiStyle = 32;
			friendly = true;
		}
		else if (type == 156)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 2;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 157)
		{
			width = 32;
			height = 32;
			aiStyle = 27;
			melee = true;
			light = 0.5f;
			alpha = 255;
			friendly = true;
			scale = 1.2f;
		}
		else if (type == 158)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 159)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 160)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 161)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
			extraUpdates = 1;
		}
		else if (type == 162)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			friendly = true;
			penetrate = 4;
			alpha = 255;
		}
		else if (type == 163)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 164)
		{
			width = 128;
			height = 128;
			aiStyle = 16;
			friendly = true;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			timeLeft = 2;
		}
		else if (type == 165)
		{
			netImportant = true;
			width = 12;
			height = 12;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 166)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			ranged = true;
			coldDamage = true;
		}
		else if (type == 167 || type == 168 || type == 169 || type == 170)
		{
			width = 14;
			height = 14;
			aiStyle = 34;
			friendly = true;
			ranged = true;
			timeLeft = 45;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 3;
		}
		else if (type == 171 || type == 505 || type == 506)
		{
			width = 14;
			height = 14;
			aiStyle = 35;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 400;
		}
		else if (type == 172)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			coldDamage = true;
			timeLeft = 1200;
		}
		else if (type == 173)
		{
			width = 16;
			height = 16;
			aiStyle = 27;
			melee = true;
			penetrate = 1;
			light = 0.2f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 174)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			coldDamage = true;
		}
		else if (type == 175)
		{
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 176)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 177)
		{
			width = 10;
			height = 10;
			aiStyle = 28;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			coldDamage = true;
		}
		else if (type == 178)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			timeLeft = 2;
		}
		else if (type == 179)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 180)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.5f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			extraUpdates = 1;
		}
		else if (type == 181)
		{
			width = 8;
			height = 8;
			aiStyle = 36;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			extraUpdates = 3;
		}
		else if (type == 182)
		{
			light = 0.15f;
			width = 30;
			height = 30;
			aiStyle = 3;
			friendly = true;
			penetrate = 10;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 183)
		{
			width = 14;
			height = 22;
			aiStyle = 14;
			penetrate = 1;
			timeLeft = 180;
			ranged = true;
			friendly = true;
		}
		else if (type == 184)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 185)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			hostile = true;
			penetrate = -1;
			timeLeft = 900;
			trap = true;
		}
		else if (type == 186)
		{
			width = 10;
			height = 14;
			aiStyle = 37;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
			trap = true;
		}
		else if (type == 187)
		{
			width = 6;
			height = 6;
			aiStyle = 38;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 60;
			trap = true;
		}
		else if (type == 188)
		{
			width = 6;
			height = 6;
			aiStyle = 23;
			friendly = true;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			trap = true;
		}
		else if (type == 189)
		{
			width = 8;
			height = 8;
			aiStyle = 36;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			extraUpdates = 3;
		}
		else if (type == 190)
		{
			width = 22;
			height = 22;
			aiStyle = 39;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			ranged = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 14;
		}
		else if (type >= 191 && type <= 194)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			if (type == 192)
			{
				scale = 1.025f;
			}
			if (type == 193)
			{
				scale = 1.05f;
			}
			if (type == 194)
			{
				scale = 1.075f;
			}
		}
		else if (type == 195)
		{
			tileCollide = false;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
		}
		else if (type == 196)
		{
			width = 16;
			height = 16;
			aiStyle = 14;
			penetrate = -1;
			scale = 0.8f;
		}
		else if (type == 197)
		{
			netImportant = true;
			width = 42;
			height = 42;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 198)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 199)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			ignoreWater = true;
		}
		else if (type == 200)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 201)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 202)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 203)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 204)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 205)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 206)
		{
			width = 14;
			height = 14;
			aiStyle = 40;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 207)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 208)
		{
			netImportant = true;
			width = 18;
			height = 36;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 209)
		{
			width = 12;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			light = 0.5f;
		}
		else if (type == 210)
		{
			netImportant = true;
			width = 14;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 211)
		{
			netImportant = true;
			width = 24;
			height = 24;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
			light = 1f;
			ignoreWater = true;
		}
		else if (type == 212)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.12f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 213)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.92f;
		}
		else if (type == 214)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 215)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.27f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 216)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.93f;
		}
		else if (type == 217)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.12f;
		}
		else if (type == 218)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.28f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 219)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 0.95f;
		}
		else if (type == 220)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.2f;
		}
		else if (type == 221)
		{
			width = 20;
			height = 20;
			aiStyle = 41;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			penetrate = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 2;
		}
		else if (type == 222)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.3f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 223)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1f;
		}
		else if (type == 224)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 225)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 226)
		{
			netImportant = true;
			width = 22;
			height = 42;
			aiStyle = 42;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			timeLeft *= 5;
			light = 0.4f;
			ignoreWater = true;
		}
		else if (type == 227)
		{
			netImportant = true;
			tileCollide = false;
			light = 0.1f;
			width = 14;
			height = 14;
			aiStyle = 43;
			friendly = true;
			penetrate = 1;
			timeLeft = 180;
		}
		else if (type == 228)
		{
			tileCollide = false;
			width = 30;
			height = 30;
			aiStyle = 44;
			friendly = true;
			melee = true;
			scale = 1.1f;
			penetrate = -1;
			noEnchantmentVisuals = true;
		}
		else if (type == 229)
		{
			width = 30;
			height = 30;
			aiStyle = 44;
			friendly = true;
			melee = true;
			penetrate = -1;
			light = 0.2f;
			noEnchantmentVisuals = true;
		}
		else if (type >= 230 && type <= 235)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 236)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 237)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 238)
		{
			tileCollide = false;
			ignoreWater = true;
			width = 54;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 239)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			friendly = true;
			penetrate = -1;
			timeLeft = 300;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 240)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 241)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 242)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 7;
			scale = 1.18f;
			timeLeft = 600;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 243)
		{
			width = 28;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 244)
		{
			tileCollide = false;
			ignoreWater = true;
			width = 54;
			height = 28;
			aiStyle = 45;
			penetrate = -1;
		}
		else if (type == 245)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			friendly = true;
			penetrate = 2;
			timeLeft = 300;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 246)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			alpha = 255;
			extraUpdates = 1;
		}
		else if (type == 247)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 248)
		{
			width = 18;
			height = 18;
			aiStyle = 1;
			friendly = true;
			melee = true;
		}
		else if (type == 249)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = true;
			ranged = true;
		}
		else if (type == 250)
		{
			width = 12;
			height = 12;
			aiStyle = 46;
			penetrate = -1;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			scale = 1.25f;
		}
		else if (type == 251)
		{
			width = 14;
			height = 14;
			aiStyle = 46;
			friendly = true;
			penetrate = -1;
			magic = true;
			alpha = 255;
			light = 0.3f;
			tileCollide = false;
			ignoreWater = true;
			scale = 1.25f;
		}
		else if (type == 252)
		{
			width = 18;
			height = 18;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.1f;
		}
		else if (type == 253)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			light = 0.8f;
			alpha = 100;
			magic = true;
			coldDamage = true;
		}
		else if (type == 254)
		{
			width = 38;
			height = 38;
			aiStyle = 47;
			magic = true;
			timeLeft = 660;
			light = 0.5f;
		}
		else if (type == 255)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 100;
		}
		else if (type == 256)
		{
			netImportant = true;
			tileCollide = false;
			width = 6;
			height = 6;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			scale = 1f;
			timeLeft *= 10;
		}
		else if (type == 257)
		{
			ignoreWater = true;
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.75f;
			alpha = 255;
			scale = 1.2f;
			timeLeft = 600;
			magic = true;
			coldDamage = true;
			extraUpdates = 1;
		}
		else if (type == 258)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			hostile = true;
			penetrate = -1;
			alpha = 100;
			timeLeft = 300;
		}
		else if (type == 259)
		{
			ignoreWater = true;
			tileCollide = false;
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.3f;
			scale = 1.1f;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 260)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 200;
			penetrate = 1;
		}
		else if (type == 261)
		{
			width = 32;
			height = 34;
			aiStyle = 14;
			friendly = true;
			penetrate = 6;
			magic = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 262)
		{
			width = 30;
			height = 30;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 263)
		{
			width = 34;
			height = 34;
			alpha = 100;
			light = 0.5f;
			aiStyle = 18;
			friendly = true;
			penetrate = 5;
			tileCollide = true;
			scale = 1f;
			melee = true;
			timeLeft = 180;
			coldDamage = true;
		}
		else if (type == 264)
		{
			ignoreWater = true;
			width = 4;
			height = 40;
			aiStyle = 45;
			hostile = true;
			penetrate = -1;
			timeLeft = 120;
			scale = 1.1f;
			extraUpdates = 1;
		}
		else if (type == 265)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			timeLeft = 37;
		}
		else if (type == 266)
		{
			netImportant = true;
			alpha = 75;
			width = 24;
			height = 16;
			aiStyle = 26;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 12;
		}
		else if (type == 267)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			ranged = true;
		}
		else if (type == 268)
		{
			netImportant = true;
			width = 18;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 269)
		{
			netImportant = true;
			width = 20;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 270)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			hostile = true;
			penetrate = 3;
		}
		else if (type == 271)
		{
			width = 20;
			height = 20;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			scale = 1.2f;
		}
		else if (type == 272)
		{
			width = 32;
			height = 32;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 273)
		{
			width = 26;
			height = 26;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
		}
		else if (type == 274)
		{
			width = 42;
			height = 42;
			alpha = 100;
			light = 0.5f;
			aiStyle = 18;
			friendly = true;
			penetrate = 5;
			tileCollide = false;
			scale = 1.1f;
			melee = true;
			timeLeft = 180;
		}
		else if (type == 275)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 276)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
		}
		else if (type == 277)
		{
			alpha = 255;
			width = 38;
			height = 38;
			aiStyle = 14;
			hostile = true;
		}
		else if (type == 278)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			light = 1f;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 279)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.25f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 280)
		{
			width = 32;
			height = 32;
			aiStyle = 12;
			friendly = true;
			alpha = 255;
			penetrate = 5;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 281)
		{
			width = 28;
			height = 28;
			aiStyle = 49;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
		}
		else if (type == 282)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 283)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.25f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 284)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 285)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 286)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 287)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			light = 0.5f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.3f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 288)
		{
			width = 32;
			height = 32;
			aiStyle = 12;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
			magic = true;
		}
		else if (type == 289)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			timeLeft = 2;
		}
		else if (type == 290)
		{
			width = 4;
			height = 4;
			aiStyle = 48;
			hostile = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 100;
			penetrate = -1;
		}
		else if (type == 291)
		{
			width = 12;
			height = 12;
			aiStyle = 50;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 292)
		{
			width = 130;
			height = 130;
			aiStyle = 50;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 293)
		{
			width = 12;
			height = 12;
			aiStyle = 51;
			hostile = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 294)
		{
			width = 4;
			height = 4;
			aiStyle = 48;
			friendly = true;
			magic = true;
			extraUpdates = 100;
			timeLeft = 300;
			penetrate = -1;
		}
		else if (type == 295)
		{
			width = 12;
			height = 12;
			aiStyle = 50;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = true;
		}
		else if (type == 296)
		{
			width = 150;
			height = 150;
			aiStyle = 50;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 297)
		{
			width = 12;
			height = 12;
			aiStyle = 51;
			friendly = true;
			alpha = 255;
			magic = true;
			extraUpdates = 1;
			penetrate = 3;
		}
		else if (type == 298)
		{
			width = 6;
			height = 6;
			aiStyle = 52;
			alpha = 255;
			magic = true;
			tileCollide = false;
			extraUpdates = 3;
		}
		else if (type == 299)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			magic = true;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 300)
		{
			width = 38;
			height = 38;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 301)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			extraUpdates = 2;
		}
		else if (type == 302)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			light = 0.3f;
			alpha = 255;
			extraUpdates = 7;
			scale = 1.18f;
			timeLeft = 300;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 303)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 304)
		{
			alpha = 255;
			width = 30;
			height = 30;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			melee = true;
			light = 0.2f;
			ignoreWater = true;
			extraUpdates = 0;
		}
		else if (type == 305)
		{
			width = 6;
			height = 6;
			aiStyle = 52;
			alpha = 255;
			tileCollide = false;
			extraUpdates = 10;
		}
		else if (type == 306)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			melee = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 307)
		{
			width = 16;
			height = 16;
			aiStyle = 36;
			penetrate = 1;
			alpha = 255;
			timeLeft = 600;
			melee = true;
			extraUpdates = 3;
		}
		else if (type == 308)
		{
			width = 80;
			height = 74;
			aiStyle = 53;
			timeLeft = 7200;
			light = 0.25f;
			ignoreWater = true;
			coldDamage = true;
			sentry = true;
		}
		else if (type == 309)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			penetrate = 3;
			friendly = true;
			extraUpdates = 3;
			coldDamage = true;
		}
		else if (type == 310)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 33;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 36000;
		}
		else if (type == 311)
		{
			width = 10;
			height = 12;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 312)
		{
			alpha = 255;
			width = 32;
			height = 32;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 300;
			glowMask = 257;
		}
		else if (type == 313)
		{
			netImportant = true;
			width = 30;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 314)
		{
			netImportant = true;
			width = 24;
			height = 40;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 315)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 316)
		{
			alpha = 255;
			width = 16;
			height = 16;
			aiStyle = 36;
			friendly = true;
			penetrate = 1;
			timeLeft = 600;
			magic = true;
		}
		else if (type == 317)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 54;
			penetrate = 1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 318)
		{
			width = 12;
			height = 14;
			aiStyle = 2;
			friendly = true;
			ranged = true;
		}
		else if (type == 319)
		{
			netImportant = true;
			width = 36;
			height = 30;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 320)
		{
			width = 34;
			height = 34;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 321)
		{
			width = 30;
			height = 30;
			aiStyle = 55;
			friendly = true;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 322)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 323)
		{
			penetrate = 10;
			extraUpdates = 3;
			width = 14;
			height = 14;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			ranged = true;
			scale = 0.8f;
		}
		else if (type == 324)
		{
			netImportant = true;
			width = 26;
			height = 38;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 325)
		{
			alpha = 255;
			penetrate = -1;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
			tileCollide = false;
			timeLeft = 420;
		}
		else if (type >= 326 && type <= 328)
		{
			if (type == 326)
			{
				width = 14;
				height = 16;
			}
			else if (type == 327)
			{
				width = 12;
				height = 14;
			}
			else
			{
				width = 6;
				height = 12;
			}
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 360;
		}
		else if (type == 329)
		{
			width = 80;
			height = 80;
			light = 0.25f;
			aiStyle = 56;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 420;
		}
		else if (type == 330)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 6;
			ranged = true;
		}
		else if (type == 331)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 332)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.5f;
		}
		else if (type == 333)
		{
			width = 38;
			height = 38;
			aiStyle = 3;
			friendly = true;
			scale = 0.9f;
			penetrate = -1;
			melee = true;
		}
		else if (type == 334)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 335)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 1;
			melee = true;
		}
		else if (type == 336)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			magic = true;
			scale = 0.8f;
			extraUpdates = 1;
		}
		else if (type == 337)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			coldDamage = true;
			extraUpdates = 1;
		}
		else if (type == 338 || type == 339 || type == 340 || type == 341)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			penetrate = -1;
			friendly = true;
			ranged = true;
			scale = 0.9f;
		}
		else if (type == 342)
		{
			width = 22;
			height = 2;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			coldDamage = true;
		}
		else if (type == 343)
		{
			alpha = 255;
			width = 10;
			height = 10;
			aiStyle = 57;
			friendly = true;
			melee = true;
			scale = 1.1f;
			penetrate = 3;
			coldDamage = true;
		}
		else if (type == 344)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			friendly = true;
			scale = 0.9f;
			alpha = 255;
			melee = true;
			coldDamage = true;
			tileCollide = false;
			noEnchantmentVisuals = true;
		}
		else if (type == 345)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			scale = 0.8f;
		}
		else if (type == 346)
		{
			width = 18;
			height = 18;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
		}
		else if (type == 347)
		{
			width = 6;
			height = 6;
			aiStyle = 2;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 348)
		{
			aiStyle = 1;
			width = 48;
			height = 48;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			coldDamage = true;
			extraUpdates = 1;
			timeLeft = 900;
		}
		else if (type == 349)
		{
			aiStyle = 1;
			width = 12;
			height = 12;
			hostile = true;
			penetrate = -1;
			coldDamage = true;
			timeLeft = 900;
		}
		else if (type == 350)
		{
			alpha = 255;
			penetrate = -1;
			width = 14;
			height = 14;
			aiStyle = 1;
			hostile = true;
			tileCollide = false;
			timeLeft /= 2;
		}
		else if (type == 351)
		{
			alpha = 255;
			penetrate = -1;
			width = 24;
			height = 24;
			aiStyle = 58;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 352)
		{
			width = 30;
			height = 30;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft /= 3;
		}
		else if (type == 353)
		{
			netImportant = true;
			width = 18;
			height = 28;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 354)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			ranged = true;
			penetrate = -1;
			extraUpdates = 1;
		}
		else if (type == 355)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			timeLeft = 58;
		}
		else if (type == 356)
		{
			width = 6;
			height = 6;
			aiStyle = 59;
			alpha = 255;
			magic = true;
			tileCollide = false;
			extraUpdates = 3;
		}
		else if (type == 357)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 6;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 358)
		{
			width = 18;
			height = 18;
			aiStyle = 60;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 359)
		{
			width = 14;
			height = 14;
			aiStyle = 28;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
			coldDamage = true;
		}
		else if ((type >= 360 && type <= 366) || type == 381 || type == 382 || type == 760 || type == 775)
		{
			width = 14;
			height = 14;
			aiStyle = 61;
			penetrate = -1;
			netImportant = true;
			bobber = true;
		}
		else if (type == 367)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1.1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 368)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 369)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 370)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 371)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 372)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 373)
		{
			netImportant = true;
			width = 24;
			height = 26;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 374)
		{
			width = 10;
			height = 10;
			aiStyle = 0;
			friendly = true;
			penetrate = 1;
			aiStyle = 1;
			tileCollide = true;
			scale *= 0.9f;
		}
		else if (type == 375)
		{
			netImportant = true;
			width = 34;
			height = 26;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 376)
		{
			width = 12;
			height = 12;
			aiStyle = 0;
			friendly = true;
			penetrate = 5;
			aiStyle = 1;
			tileCollide = true;
			timeLeft = 100;
			alpha = 255;
			extraUpdates = 1;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 6;
		}
		else if (type == 377)
		{
			width = 66;
			height = 50;
			aiStyle = 53;
			timeLeft = 7200;
			ignoreWater = true;
			sentry = true;
		}
		else if (type == 378)
		{
			width = 16;
			height = 16;
			aiStyle = 14;
			friendly = true;
			penetrate = -1;
			timeLeft = 60;
			scale = 0.9f;
		}
		else if (type == 379)
		{
			width = 14;
			height = 10;
			aiStyle = 63;
			friendly = true;
			timeLeft = 300;
			penetrate = 1;
		}
		else if (type == 380)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 383)
		{
			width = 34;
			height = 34;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
		}
		else if (type == 384)
		{
			width = 150;
			height = 42;
			hostile = true;
			penetrate = -1;
			aiStyle = 64;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			timeLeft = 540;
		}
		else if (type == 385)
		{
			width = 30;
			height = 30;
			hostile = true;
			penetrate = -1;
			aiStyle = 65;
			alpha = 255;
			timeLeft = 300;
		}
		else if (type == 386)
		{
			width = 150;
			height = 42;
			hostile = true;
			penetrate = -1;
			aiStyle = 64;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			timeLeft = 840;
		}
		else if (type == 387)
		{
			netImportant = true;
			width = 40;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0.5f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 16;
		}
		else if (type == 388)
		{
			netImportant = true;
			width = 40;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0.5f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 12;
		}
		else if (type == 389)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 3;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 12;
		}
		else if (type == 390 || type == 391 || type == 392)
		{
			width = 18;
			height = 18;
			aiStyle = 26;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 15;
		}
		else if (type == 393 || type == 394 || type == 395)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 18;
			decidesManualFallThrough = true;
		}
		else if (type == 396)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			alpha = 100;
		}
		else if (type == 397)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			tileCollide = false;
		}
		else if (type == 398)
		{
			netImportant = true;
			width = 18;
			height = 38;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 399)
		{
			width = 14;
			height = 14;
			aiStyle = 68;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			noEnchantmentVisuals = true;
		}
		else if (type >= 400 && type <= 402)
		{
			if (type == 400)
			{
				width = 14;
				height = 16;
			}
			else if (type == 401)
			{
				width = 12;
				height = 14;
			}
			else
			{
				width = 6;
				height = 12;
			}
			penetrate = 3;
			aiStyle = 14;
			friendly = true;
			timeLeft = 360;
			ranged = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 403)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 404)
		{
			width = 26;
			height = 26;
			aiStyle = 69;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
		}
		else if (type == 405)
		{
			width = 14;
			height = 14;
			aiStyle = 70;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 90;
			melee = true;
			noEnchantments = true;
		}
		else if (type == 406)
		{
			width = 14;
			height = 14;
			aiStyle = 60;
			alpha = 255;
			penetrate = -1;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 407)
		{
			netImportant = true;
			width = 28;
			height = 40;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 408)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 409)
		{
			width = 30;
			height = 30;
			penetrate = -1;
			aiStyle = 71;
			alpha = 255;
			timeLeft = 360;
			friendly = true;
			tileCollide = true;
			extraUpdates = 2;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 410)
		{
			width = 14;
			height = 14;
			aiStyle = 72;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 50;
			magic = true;
			ignoreWater = true;
		}
		else if (type >= 411 && type <= 414)
		{
			switch (type)
			{
			}
			width = 10;
			height = 10;
			aiStyle = 10;
		}
		else if (type == 415 || type == 416 || type == 417 || type == 418)
		{
			width = 14;
			height = 14;
			aiStyle = 34;
			friendly = true;
			ranged = true;
			timeLeft = 45;
		}
		else if (type >= 419 && type <= 422)
		{
			width = 4;
			height = 4;
			aiStyle = 73;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 3;
		}
		else if (type == 423)
		{
			netImportant = true;
			width = 28;
			height = 28;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			ignoreWater = true;
		}
		else if (type >= 424 && type <= 426)
		{
			width = 24;
			height = 24;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			extraUpdates = 2;
		}
		else if (type == 427)
		{
			width = 22;
			height = 56;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 2;
		}
		else if (type == 428)
		{
			width = 26;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 3;
		}
		else if (type == 429)
		{
			width = 18;
			height = 56;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 7;
		}
		else if (type == 430)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 8;
		}
		else if (type == 431)
		{
			width = 28;
			height = 64;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 432)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 610)
		{
			width = 28;
			height = 64;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 179;
		}
		else if (type == 609)
		{
			width = 30;
			height = 54;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			glowMask = 180;
		}
		else if (type == 433)
		{
			width = 8;
			height = 8;
			aiStyle = 48;
			friendly = true;
			extraUpdates = 100;
			timeLeft = 100;
			ignoreWater = true;
		}
		else if (type == 434)
		{
			width = 1;
			height = 1;
			aiStyle = 74;
			friendly = true;
			extraUpdates = 100;
			penetrate = -1;
		}
		else if (type == 435)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
		}
		else if (type == 436)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
		}
		else if (type == 437)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			extraUpdates = 2;
			ignoreWater = true;
		}
		else if (type == 438)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
		}
		else if (type == 439)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 440)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 2;
			scale = 1f;
			timeLeft = 600;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 441)
		{
			width = 1;
			height = 1;
			aiStyle = 76;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 442)
		{
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			scale = 1f;
			timeLeft = 600;
			ranged = true;
		}
		else if (type == 443)
		{
			width = 80;
			height = 80;
			aiStyle = 77;
			friendly = true;
			alpha = 255;
			scale = 1f;
			ranged = true;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 444)
		{
			width = 10;
			height = 10;
			aiStyle = 78;
			friendly = true;
			alpha = 255;
			scale = 1f;
			ranged = true;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 445)
		{
			width = 10;
			height = 10;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			melee = true;
			ignoreWater = true;
			ownerHitCheck = true;
		}
		else if (type == 446)
		{
			netImportant = true;
			width = 14;
			height = 14;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			light = 0.7f;
		}
		else if (type == 447)
		{
			width = 30;
			height = 30;
			aiStyle = 79;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 240;
		}
		else if (type == 448)
		{
			width = 14;
			height = 14;
			aiStyle = 80;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 449)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 1;
			scale = 1f;
			timeLeft = 600;
			ignoreWater = true;
		}
		else if (type == 450)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 360;
		}
		else if (type == 451)
		{
			width = 16;
			height = 16;
			aiStyle = 81;
			melee = true;
			penetrate = 3;
			light = 0.2f;
			alpha = 255;
			friendly = true;
		}
		else if (type == 452)
		{
			width = 14;
			height = 14;
			aiStyle = 82;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
		}
		else if (type == 453)
		{
			width = 1;
			height = 1;
			aiStyle = 76;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 454)
		{
			width = 46;
			height = 46;
			aiStyle = 83;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 455)
		{
			width = 36;
			height = 36;
			aiStyle = 84;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 456)
		{
			width = 16;
			height = 16;
			aiStyle = 85;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 459)
		{
			width = 22;
			height = 22;
			aiStyle = 1;
			friendly = true;
			magic = true;
			alpha = 255;
			scale = 1f;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 460)
		{
			width = 14;
			height = 18;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 461)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			magic = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
			hide = true;
		}
		else if (type == 462)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 463)
		{
			width = 48;
			height = 48;
			aiStyle = 6;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 464)
		{
			width = 60;
			height = 60;
			aiStyle = 86;
			hostile = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
		}
		else if (type == 467)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 468)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
		}
		else if (type == 465)
		{
			width = 80;
			height = 80;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 466)
		{
			width = 14;
			height = 14;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = true;
			extraUpdates = 4;
			timeLeft = 120 * (extraUpdates + 1);
		}
		else if (type == 491)
		{
			width = 26;
			height = 26;
			aiStyle = 9;
			friendly = true;
			melee = true;
			penetrate = -1;
		}
		else if (type == 500)
		{
			width = 20;
			height = 20;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 499)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 469)
		{
			alpha = 255;
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
		}
		else if (type == 470)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 471)
		{
			width = 16;
			height = 16;
			aiStyle = 2;
			scale = 1.2f;
			hostile = true;
			ranged = true;
		}
		else if (type == 472)
		{
			width = 8;
			height = 8;
			aiStyle = 0;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
			timeLeft = 50;
		}
		else if (type == 474)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			timeLeft = 1200;
			penetrate = 2;
		}
		else if (type == 473)
		{
			netImportant = true;
			width = 8;
			height = 8;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 2;
		}
		else if (type == 475)
		{
			width = 14;
			height = 14;
			aiStyle = 35;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 400;
		}
		else if (type == 476)
		{
			width = 200;
			height = 200;
			aiStyle = 185;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 3;
			magic = true;
		}
		else if (type == 477)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			penetrate = 7;
			extraUpdates = 1;
			ranged = true;
		}
		else if (type == 478)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			timeLeft = 300;
			ranged = true;
		}
		else if (type == 479)
		{
			alpha = 255;
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			ranged = true;
		}
		else if (type == 480)
		{
			alpha = 255;
			width = 12;
			height = 12;
			penetrate = 3;
			aiStyle = 14;
			friendly = true;
			timeLeft = 120;
			ranged = true;
			noEnchantments = true;
		}
		else if (type == 481)
		{
			width = 22;
			height = 22;
			aiStyle = 13;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			melee = true;
			extraUpdates = 0;
		}
		else if (type == 482)
		{
			width = 16;
			height = 200;
			aiStyle = 87;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 2700;
			magic = true;
		}
		else if (type == 483)
		{
			width = 14;
			height = 14;
			aiStyle = 14;
			friendly = true;
			melee = true;
		}
		else if (type == 484)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 485)
		{
			arrow = true;
			width = 24;
			height = 24;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = -1;
			timeLeft = 1200;
		}
		else if (type >= 486 && type <= 489)
		{
			if (type == 486)
			{
				width = 12;
				height = 12;
			}
			else if (type == 487)
			{
				width = 22;
				height = 22;
			}
			else if (type == 488)
			{
				width = 12;
				height = 12;
				light = 0.3f;
			}
			else if (type == 489)
			{
				width = 20;
				height = 16;
			}
			netImportant = true;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 492)
		{
			netImportant = true;
			width = 18;
			height = 32;
			aiStyle = 90;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 490)
		{
			width = 14;
			height = 14;
			aiStyle = 89;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = false;
			timeLeft = 600;
			netImportant = true;
		}
		else if (type == 493 || type == 494)
		{
			width = 32;
			height = 32;
			aiStyle = 4;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			magic = true;
			light = 0.2f;
		}
		else if (type == 495)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = 3;
			timeLeft = 1200;
		}
		else if (type == 496)
		{
			alpha = 255;
			width = 40;
			height = 40;
			aiStyle = 91;
			friendly = true;
			magic = true;
			MaxUpdates = 3;
			penetrate = 3;
		}
		else if (type == 497)
		{
			width = 30;
			height = 30;
			aiStyle = 2;
			friendly = true;
			penetrate = 3;
			melee = true;
		}
		else if (type == 498)
		{
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			timeLeft = 180;
		}
		else if (type == 501)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			scale = 1.1f;
			hostile = true;
			ranged = true;
		}
		else if (type == 502)
		{
			width = 16;
			height = 16;
			aiStyle = 8;
			friendly = true;
			melee = true;
			penetrate = 5;
		}
		else if (type == 503)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			alpha = 255;
			tileCollide = false;
			melee = true;
			extraUpdates = 1;
		}
		else if (type == 504)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			melee = true;
			alpha = 255;
			penetrate = 2;
			noEnchantmentVisuals = true;
		}
		else if (type == 507)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			penetrate = 3;
		}
		else if (type == 508)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 509)
		{
			width = 22;
			height = 22;
			aiStyle = 20;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ownerHitCheck = true;
			melee = true;
			scale = 1.2f;
		}
		else if (type == 510)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			magic = true;
		}
		else if (type == 511)
		{
			width = 32;
			height = 32;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 512)
		{
			width = 40;
			height = 38;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 513)
		{
			width = 30;
			height = 28;
			aiStyle = 92;
			friendly = true;
			penetrate = -1;
			scale = 1.1f;
			magic = true;
		}
		else if (type == 514)
		{
			width = 10;
			height = 10;
			aiStyle = 93;
			friendly = true;
			penetrate = 3;
			alpha = 255;
			ranged = true;
		}
		else if (type == 515)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 516)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 517)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 518)
		{
			width = 32;
			height = 32;
			aiStyle = 94;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 519)
		{
			width = 24;
			height = 24;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 520)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 3;
			ranged = true;
			coldDamage = true;
		}
		else if (type == 521)
		{
			width = 14;
			height = 14;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 522)
		{
			width = 8;
			height = 8;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 523)
		{
			width = 32;
			height = 32;
			aiStyle = 95;
			alpha = 255;
			ranged = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 524)
		{
			width = 10;
			height = 10;
			aiStyle = 96;
			friendly = true;
			alpha = 255;
			penetrate = -1;
			ignoreWater = true;
			melee = true;
			extraUpdates = 5;
		}
		else if (type == 525)
		{
			width = 30;
			height = 24;
			aiStyle = 97;
			tileCollide = false;
			timeLeft = 10800;
			hide = true;
		}
		else if (type == 526)
		{
			width = 8;
			height = 8;
			aiStyle = 98;
			tileCollide = false;
			timeLeft = 120;
			alpha = 255;
		}
		else if (type >= 527 && type <= 531)
		{
			knockBack = 12f;
			width = 24;
			height = 24;
			aiStyle = 17;
			penetrate = -1;
		}
		else if (type == 532)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			scale = 1f;
			friendly = true;
			penetrate = 3;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 533)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 66;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			tileCollide = false;
			ignoreWater = true;
			friendly = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 8;
		}
		else if (type == 534)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
		}
		else if (type >= 541 && type <= 555)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			if (type == 547)
			{
				scale = 1.1f;
			}
			if (type == 554)
			{
				scale = 1.2f;
			}
			if (type == 555)
			{
				scale = 1.15f;
			}
			if (type == 551 || type == 550)
			{
				scale = 1.1f;
			}
		}
		else if (type >= 562 && type <= 564)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			if (type == 563)
			{
				scale = 1.05f;
			}
			if (type == 564)
			{
				scale = 1.075f;
			}
		}
		else if (type == 603)
		{
			extraUpdates = 0;
			width = 16;
			height = 16;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1.15f;
		}
		else if (type == 604)
		{
			extraUpdates = 0;
			width = 14;
			height = 14;
			aiStyle = 115;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1.2f;
		}
		else if (type >= 556 && type <= 561)
		{
			extraUpdates = 0;
			width = 10;
			height = 10;
			aiStyle = 99;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			counterweight = true;
		}
		else if (type == 535)
		{
			width = 18;
			height = 18;
			aiStyle = 100;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 536)
		{
			width = 10;
			height = 10;
			aiStyle = 101;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 537)
		{
			width = 22;
			height = 22;
			aiStyle = 84;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 240;
			tileCollide = false;
		}
		else if (type == 538)
		{
			width = 12;
			height = 12;
			aiStyle = 14;
			hostile = true;
			penetrate = -1;
			timeLeft = 120;
			extraUpdates = 1;
			alpha = 255;
		}
		else if (type == 539)
		{
			width = 18;
			height = 30;
			aiStyle = 102;
			hostile = true;
			penetrate = -1;
			timeLeft = 600;
		}
		else if (type == 540)
		{
			width = 20;
			height = 20;
			aiStyle = 103;
			hostile = true;
			penetrate = -1;
			timeLeft = 300;
			alpha = 255;
		}
		else if (type == 565)
		{
			width = 28;
			height = 28;
			aiStyle = 104;
			penetrate = -1;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			scale = 0.8f;
		}
		else if (type == 566)
		{
			width = 16;
			height = 16;
			aiStyle = 36;
			friendly = true;
			penetrate = 4;
			alpha = 255;
			timeLeft = 660;
			extraUpdates = 3;
		}
		else if (type == 567 || type == 568)
		{
			if (type == 567)
			{
				width = 14;
				height = 14;
			}
			else
			{
				width = 16;
				height = 16;
			}
			aiStyle = 105;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 3600;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type >= 569 && type <= 571)
		{
			width = 32;
			height = 32;
			aiStyle = 106;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			timeLeft = 3600;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 575)
		{
			width = 24;
			height = 24;
			aiStyle = 107;
			hostile = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft = 420;
			alpha = 255;
		}
		else if (type == 573)
		{
			width = 18;
			height = 30;
			aiStyle = 102;
			hostile = true;
			penetrate = -1;
			timeLeft = 600;
		}
		else if (type == 574)
		{
			width = 18;
			height = 18;
			aiStyle = 102;
			hostile = true;
			timeLeft = 600;
			tileCollide = false;
		}
		else if (type == 572)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 576)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
		}
		else if (type == 577)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
			alpha = 255;
			extraUpdates = 2;
			scale = 1.2f;
			timeLeft = 600;
		}
		else if (type == 578 || type == 579 || type == 813)
		{
			width = 32;
			height = 32;
			aiStyle = 108;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			hostile = true;
			hide = true;
		}
		else if (type == 580)
		{
			width = 14;
			height = 14;
			aiStyle = 88;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			tileCollide = true;
			extraUpdates = 4;
			timeLeft = 600;
		}
		else if (type == 581)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 582)
		{
			width = 20;
			height = 20;
			aiStyle = 109;
			friendly = true;
			penetrate = -1;
			MaxUpdates = 2;
		}
		else if (type == 583)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
			scale = 0.8f;
		}
		else if (type == 589)
		{
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
		}
		else if (type == 584)
		{
			width = 10;
			height = 10;
			aiStyle = 110;
			friendly = true;
			scale = 0.8f;
			penetrate = 3;
		}
		else if (type == 585)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			penetrate = 3;
		}
		else if (type == 586)
		{
			width = 26;
			height = 26;
			aiStyle = 111;
			alpha = 255;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 587)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			ranged = true;
		}
		else if (type == 588)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 590)
		{
			width = 14;
			height = 14;
			aiStyle = 112;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 591)
		{
			width = 8;
			height = 8;
			aiStyle = 101;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ignoreWater = true;
		}
		else if (type == 592)
		{
			width = 8;
			height = 8;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 3;
			ignoreWater = true;
		}
		else if (type == 593)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			alpha = 255;
			extraUpdates = 1;
			ignoreWater = true;
		}
		else if (type == 594)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 2;
		}
		else if (type == 595)
		{
			width = 68;
			height = 64;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 596)
		{
			width = 8;
			height = 8;
			aiStyle = 107;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 180;
			tileCollide = false;
		}
		else if (type == 597)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 2;
			friendly = true;
		}
		else if (type == 598)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			ranged = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
		}
		else if (type == 599)
		{
			width = 22;
			height = 22;
			aiStyle = 2;
			friendly = true;
			penetrate = 6;
			ranged = true;
		}
		else if (type == 600)
		{
			width = 14;
			height = 14;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ignoreWater = true;
		}
		else if (type == 601)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			extraUpdates = 30;
		}
		else if (type == 602)
		{
			width = 10;
			height = 10;
			aiStyle = 114;
			alpha = 255;
			friendly = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 605)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 606)
		{
			width = 5;
			height = 5;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 2;
			scale = 1f;
			timeLeft = 600;
			ignoreWater = true;
		}
		else if (type == 607)
		{
			width = 10;
			height = 10;
			aiStyle = 116;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 608)
		{
			width = 160;
			height = 160;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			timeLeft = 3;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
			hide = true;
		}
		else if (type == 611)
		{
			width = 16;
			height = 16;
			aiStyle = 75;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 612)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
		}
		else if (type == 613)
		{
			netImportant = true;
			width = 24;
			height = 24;
			aiStyle = 62;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 1f;
			ignoreWater = true;
		}
		else if (type == 614)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 615)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 616)
		{
			width = 14;
			height = 14;
			aiStyle = 1;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 90 * MaxUpdates;
		}
		else if (type == 617)
		{
			width = 32;
			height = 32;
			aiStyle = 118;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			hide = true;
			magic = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
		}
		else if (type == 618)
		{
			tileCollide = false;
			width = 18;
			height = 30;
			aiStyle = 119;
			penetrate = -1;
			timeLeft = 420;
			magic = true;
			friendly = true;
			usesLocalNPCImmunity = true;
		}
		else if (type == 619)
		{
			width = 14;
			height = 14;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 620)
		{
			width = 8;
			height = 8;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			penetrate = 1;
			friendly = true;
		}
		else if (type == 622)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 2;
		}
		else if (type == 623)
		{
			netImportant = true;
			width = 50;
			height = 80;
			aiStyle = 120;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			minionSlots = 0f;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
			manualDirectionChange = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 5;
		}
		else if (type == 624)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type >= 625 && type <= 628)
		{
			if (type == 625 || type == 628)
			{
				netImportant = true;
			}
			if (type == 626 || type == 627)
			{
				minionSlots = 0.5f;
			}
			width = 24;
			height = 24;
			aiStyle = 121;
			penetrate = -1;
			timeLeft *= 5;
			minion = true;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			hide = true;
			netImportant = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 7;
		}
		else if (type == 629)
		{
			width = 8;
			height = 8;
			aiStyle = 122;
			hostile = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 3600;
			tileCollide = false;
			penetrate = -1;
			extraUpdates = 2;
		}
		else if (type == 630 || type == 705)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 631)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 122;
			friendly = true;
			ranged = true;
			tileCollide = false;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
			timeLeft = 1200;
		}
		else if (type == 633)
		{
			width = 14;
			height = 18;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 632)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			magic = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
		}
		else if (type == 634)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 2;
			magic = true;
		}
		else if (type == 635)
		{
			width = 40;
			height = 40;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			friendly = true;
			extraUpdates = 3;
			magic = true;
		}
		else if (type == 636)
		{
			width = 16;
			height = 16;
			aiStyle = 113;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			MaxUpdates = 2;
		}
		else if (type == 637)
		{
			width = 10;
			height = 10;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 638)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			extraUpdates = 5;
			timeLeft = 600;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			penetrate = -1;
		}
		else if (type == 639)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			MaxUpdates = 2;
			timeLeft = MaxUpdates * 45;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			alpha = 255;
			penetrate = 4;
		}
		else if (type == 640)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			MaxUpdates = 3;
			timeLeft = 90;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			alpha = 255;
			penetrate = 4;
		}
		else if (type == 642)
		{
			width = 18;
			height = 18;
			aiStyle = 84;
			friendly = true;
			penetrate = -1;
			alpha = 255;
			tileCollide = false;
			usesLocalNPCImmunity = true;
		}
		else if (type == 641)
		{
			width = 32;
			height = 32;
			aiStyle = 123;
			timeLeft = 7200;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			hide = true;
			sentry = true;
		}
		else if (type == 643)
		{
			width = 32;
			height = 32;
			aiStyle = 123;
			timeLeft = 7200;
			ignoreWater = true;
			tileCollide = false;
			alpha = 255;
			sentry = true;
		}
		else if (type == 644)
		{
			width = 14;
			height = 14;
			aiStyle = 112;
			penetrate = 1;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
		}
		else if (type == 645)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			magic = true;
			tileCollide = false;
			extraUpdates = 5;
			penetrate = -1;
			usesLocalNPCImmunity = true;
		}
		else if (type >= 646 && type <= 649)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 650)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 651)
		{
			width = 10;
			height = 10;
			aiStyle = 125;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 652)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 653)
		{
			width = 30;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			scale = 0.8f;
		}
		else if (type == 654)
		{
			width = 30;
			height = 30;
			aiStyle = 126;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 655)
		{
			width = 31;
			height = 31;
			aiStyle = 25;
			friendly = true;
			hostile = true;
			penetrate = -1;
			trap = true;
		}
		else if (type == 656)
		{
			width = 10;
			height = 10;
			aiStyle = 127;
			friendly = true;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			timeLeft = 1200;
		}
		else if (type == 657)
		{
			width = 10;
			height = 10;
			aiStyle = 127;
			hostile = true;
			tileCollide = false;
			penetrate = -1;
			timeLeft = 1200;
		}
		else if (type == 658)
		{
			width = 14;
			height = 14;
			aiStyle = 128;
			penetrate = 1;
			timeLeft = 900;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			hostile = true;
		}
		else if (type == 659)
		{
			width = 8;
			height = 8;
			aiStyle = 129;
			friendly = true;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 180;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 660)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			ignoreWater = true;
		}
		else if (type == 661)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 40;
			extraUpdates = 1;
			ranged = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
		}
		else if (type == 662 || type == 685)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 663 || type == 665 || type == 667)
		{
			width = 30;
			height = 54;
			aiStyle = 130;
			timeLeft = 7200;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
			switch (type)
			{
			case 665:
				height = 58;
				width = 28;
				break;
			case 667:
				height = 60;
				width = 28;
				break;
			}
			sentry = true;
			netImportant = true;
		}
		else if (type == 664 || type == 666 || type == 668)
		{
			width = 16;
			height = 16;
			aiStyle = 131;
			friendly = true;
			alpha = 255;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 669)
		{
			width = 14;
			height = 14;
			aiStyle = 68;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			noEnchantments = true;
		}
		else if (type == 670)
		{
			width = 30;
			height = 30;
			aiStyle = 126;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 671)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 672)
		{
			width = 10;
			height = 10;
			aiStyle = 132;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 674 || type == 673)
		{
			width = 10;
			height = 10;
			aiStyle = 133;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
			hide = true;
		}
		else if (type == 675)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 676)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 677 || type == 678 || type == 679)
		{
			width = 26;
			height = 54;
			aiStyle = 134;
			timeLeft = 7200;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 680)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			friendly = true;
			penetrate = 4;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 681)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			hostile = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 682)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = true;
			ignoreWater = true;
			timeLeft = 30;
			scale = 1.2f;
		}
		else if (type == 683)
		{
			width = 30;
			height = 30;
			aiStyle = 135;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 684)
		{
			width = 16;
			height = 16;
			aiStyle = 1;
			melee = true;
			penetrate = 5;
			alpha = 255;
			friendly = true;
			tileCollide = false;
		}
		else if (type == 686)
		{
			width = 30;
			height = 30;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 687)
		{
			width = 30;
			height = 30;
			aiStyle = 136;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if (type == 688 || type == 689 || type == 690)
		{
			width = 16;
			height = 16;
			aiStyle = 137;
			friendly = true;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			timeLeft = 7200;
			localNPCHitCooldown = 3;
			tileCollide = false;
			penetrate = -1;
			sentry = true;
			netImportant = true;
		}
		else if (type == 691 || type == 692 || type == 693)
		{
			width = 16;
			height = 16;
			aiStyle = 138;
			ignoreWater = true;
			friendly = true;
			timeLeft = 7200;
			tileCollide = false;
			penetrate = -1;
			hide = true;
			sentry = true;
			netImportant = true;
		}
		else if (type == 694 || type == 695 || type == 696)
		{
			aiStyle = 139;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 30;
			alpha = 255;
			width = 144;
			height = 144;
		}
		else if (type == 697)
		{
			width = 16;
			height = 16;
			aiStyle = 140;
			friendly = true;
			melee = true;
			scale = 1.35f;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 12;
			ownerHitCheck = true;
		}
		else if (type == 698)
		{
			width = 50;
			height = 200;
			aiStyle = 141;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			friendly = true;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			melee = true;
		}
		else if (type == 699)
		{
			width = 24;
			height = 24;
			aiStyle = 142;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 20;
			ownerHitCheck = true;
		}
		else if (type == 700)
		{
			width = 40;
			height = 40;
			aiStyle = 143;
			alpha = 255;
			penetrate = -1;
			friendly = true;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			ignoreWater = true;
			tileCollide = false;
		}
		else if (type == 703 || type == 701 || type == 702)
		{
			width = 20;
			height = 20;
			aiStyle = 144;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			scale = 1f;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 704)
		{
			width = 60;
			height = 210;
			aiStyle = 145;
			friendly = true;
			magic = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			timeLeft = 600;
			localNPCHitCooldown = -1;
			ignoreWater = true;
		}
		else if (type == 706)
		{
			width = 66;
			height = 66;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 300;
			ranged = true;
			usesLocalNPCImmunity = true;
			penetrate = -1;
			localNPCHitCooldown = 10;
		}
		else if (type == 707)
		{
			width = 16;
			height = 16;
			aiStyle = 140;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			ownerHitCheck = true;
		}
		else if (type == 708)
		{
			width = 24;
			height = 24;
			aiStyle = 142;
			friendly = true;
			melee = true;
			penetrate = -1;
			alpha = 255;
			hide = true;
			tileCollide = false;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 6;
			ownerHitCheck = true;
		}
		else if (type == 709)
		{
			width = 12;
			height = 12;
			aiStyle = 1;
			friendly = true;
			melee = true;
			alpha = 255;
			ignoreWater = true;
			extraUpdates = 1;
			noEnchantmentVisuals = true;
			scale = 0.6f;
		}
		else if (type == 710)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			ranged = true;
			ignoreWater = true;
			extraUpdates = 1;
			timeLeft = extraUpdates * 60 * 5;
			usesLocalNPCImmunity = true;
			alpha = 255;
			localNPCHitCooldown = -1;
		}
		else if (type == 711)
		{
			width = 30;
			height = 30;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			extraUpdates = 1;
			scale = 0.7f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 712)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			friendly = true;
			alpha = 255;
			timeLeft = 600;
			magic = true;
			extraUpdates = 1;
		}
		else if (type == 713)
		{
			width = 10;
			height = 10;
			aiStyle = 146;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 900;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 714)
		{
			width = 22;
			height = 22;
			aiStyle = 75;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			hide = true;
			ranged = true;
			ignoreWater = true;
		}
		else if (type == 715 || type == 717)
		{
			width = 14;
			height = 14;
			aiStyle = 147;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 360 * MaxUpdates;
		}
		else if (type == 716 || type == 718)
		{
			width = 14;
			height = 14;
			aiStyle = 147;
			friendly = true;
			penetrate = 1;
			alpha = 255;
			ranged = true;
			extraUpdates = 2;
			timeLeft = 360 * MaxUpdates;
		}
		else if (type == 719)
		{
			width = 10;
			height = 10;
			hostile = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
		}
		else if (type == 720)
		{
			width = 16;
			height = 16;
			aiStyle = 148;
			tileCollide = false;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 721 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 745 || type == 746 || type == 747 || type == 748 || type == 749 || type == 750 || type == 751 || type == 752)
		{
			netImportant = true;
			width = 7;
			height = 7;
			friendly = true;
			penetrate = -1;
			aiStyle = 149;
			tileCollide = false;
		}
		else if (type == 722)
		{
			width = 2;
			height = 2;
			aiStyle = 150;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 723 || type == 724 || type == 725 || type == 726)
		{
			width = 24;
			height = 24;
			aiStyle = 5;
			friendly = true;
			penetrate = 2;
			alpha = 50;
			tileCollide = false;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 728)
		{
			width = 24;
			height = 24;
			aiStyle = 151;
			alpha = 255;
			tileCollide = true;
			ranged = true;
			friendly = true;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}
		else if (type == 729)
		{
			width = 20;
			height = 20;
			aiStyle = 152;
			friendly = true;
			tileCollide = false;
			ignoreWater = true;
			ranged = true;
			penetrate = -1;
			scale = 1f + (float)Main.rand.Next(30) * 0.01f;
			extraUpdates = 2;
			timeLeft = 10 * MaxUpdates;
		}
		else if (type == 730)
		{
			width = 18;
			height = 18;
			aiStyle = 19;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 731)
		{
			width = 10;
			height = 10;
			aiStyle = 29;
			alpha = 255;
			magic = true;
			friendly = true;
			extraUpdates = 1;
			timeLeft = 90;
		}
		else if (type == 732)
		{
			tileCollide = true;
			width = 15;
			height = 15;
			aiStyle = 44;
			friendly = true;
			penetrate = 1;
			melee = true;
			noEnchantmentVisuals = true;
		}
		else if (type == 733)
		{
			width = 2;
			height = 2;
			aiStyle = 153;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 734)
		{
			width = 30;
			height = 24;
			aiStyle = 154;
			tileCollide = false;
			timeLeft = 10800;
			alpha = 255;
			hide = true;
		}
		else if (type == 735)
		{
			width = 68;
			height = 64;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 736 || type == 737 || type == 738)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			penetrate = -1;
		}
		else if (type == 753)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 754)
		{
			width = 16;
			height = 16;
			aiStyle = 155;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			alpha = 255;
		}
		else if (type == 755)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
			aiStyle = 156;
		}
		else if (type == 756)
		{
			width = 32;
			height = 32;
			aiStyle = 157;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			ignoreWater = true;
			penetrate = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 25;
		}
		else if (type == 757)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 758)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			friendly = true;
			decidesManualFallThrough = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 759)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = true;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
			aiStyle = 158;
			hide = true;
		}
		else if (type == 761 || type == 762)
		{
			width = 10;
			height = 10;
			aiStyle = 159;
			friendly = true;
			ranged = true;
			manualDirectionChange = true;
		}
		else if (type == 763)
		{
			width = 10;
			height = 10;
			hostile = true;
			friendly = true;
			penetrate = -1;
			aiStyle = 1;
			tileCollide = true;
			extraUpdates = 1;
		}
		else if (type == 764)
		{
			width = 20;
			height = 20;
			aiStyle = 144;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 765)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if ((type >= 766 && type <= 770) || type == 771)
		{
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 772)
		{
			width = 22;
			height = 22;
			friendly = true;
			aiStyle = 1;
			tileCollide = true;
			extraUpdates = 1;
		}
		else if (type == 773)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type == 774)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 802)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			hide = true;
		}
		else if (type == 811 || type == 814)
		{
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
		}
		else if ((type >= 776 && type <= 801) || (type >= 803 && type <= 810))
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
			if (type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 800)
			{
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
		}
		else if (type == 812)
		{
			knockBack = 6f;
			width = 10;
			height = 10;
			aiStyle = 10;
			friendly = true;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 815)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 816)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 817)
		{
			netImportant = true;
			width = 26;
			height = 26;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 819)
		{
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 1;
			alpha = 255;
			extraUpdates = 1;
			hide = true;
			friendly = true;
			ranged = true;
		}
		else if (type == 818)
		{
			width = 132;
			height = 132;
			aiStyle = 162;
			friendly = true;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			penetrate = -1;
			extraUpdates = 3;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 820)
		{
			width = 12;
			height = 12;
			friendly = true;
			aiStyle = 163;
			tileCollide = true;
			netImportant = true;
			penetrate = -1;
			timeLeft = 86400;
		}
		else if (type == 821)
		{
			netImportant = true;
			width = 20;
			height = 36;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 822 && type <= 824)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 825)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 826 && type <= 830)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 836)
		{
			width = 4;
			height = 4;
			aiStyle = 112;
			hostile = true;
		}
		else if (type == 831)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft = 60;
			aiStyle = 164;
			hide = true;
		}
		else if (type == 833)
		{
			width = 26;
			height = 20;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 834)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 835)
		{
			width = 20;
			height = 30;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 0f;
			decidesManualFallThrough = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 837)
		{
			width = 26;
			height = 26;
			aiStyle = 1;
			alpha = 255;
			friendly = true;
			magic = true;
			penetrate = 3;
		}
		else if (type >= 838 && type <= 840)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 841)
		{
			DefaultToWhip();
		}
		else if (type == 842)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			hide = true;
		}
		else if (type >= 843 && type <= 846)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 847)
		{
			DefaultToWhip();
			extraUpdates = 2;
		}
		else if (type == 848)
		{
			DefaultToWhip();
		}
		else if (type == 849)
		{
			DefaultToWhip();
			extraUpdates = 2;
		}
		else if (type == 850)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 851)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 166;
			penetrate = -1;
			timeLeft = 300;
		}
		else if (type >= 852 && type <= 853)
		{
			netImportant = true;
			width = 4;
			height = 4;
			aiStyle = 160;
			penetrate = -1;
			extraUpdates = 60;
		}
		else if (type == 854)
		{
			netImportant = true;
			width = 26;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 855)
		{
			netImportant = true;
			width = 12;
			height = 12;
			aiStyle = 166;
			penetrate = -1;
			timeLeft = 1000;
		}
		else if (type == 856)
		{
			width = 32;
			height = 32;
			aiStyle = 167;
			friendly = true;
			alpha = 255;
			magic = true;
			tileCollide = false;
			ignoreWater = true;
			extraUpdates = 2;
			usesLocalNPCImmunity = true;
		}
		else if (type == 857)
		{
			width = 32;
			height = 32;
			aiStyle = 168;
			friendly = true;
			alpha = 255;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			manualDirectionChange = true;
			penetrate = -1;
			hide = true;
		}
		else if (type == 858)
		{
			netImportant = true;
			width = 26;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 859)
		{
			netImportant = true;
			width = 20;
			height = 32;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 860)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 861)
		{
			netImportant = true;
			width = 10;
			height = 10;
			aiStyle = 2;
			friendly = true;
		}
		else if (type == 862 || type == 863)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 864)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft = 60;
			aiStyle = 169;
			localNPCHitCooldown = 40;
		}
		else if (type == 865)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
		}
		else if (type == 866)
		{
			light = 0.15f;
			width = 30;
			height = 30;
			aiStyle = 3;
			friendly = true;
			penetrate = 5;
			melee = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
		}
		else if (type == 867)
		{
			width = 22;
			height = 22;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			light = 0.6f;
		}
		else if (type == 868 || type == 869)
		{
			width = 18;
			height = 18;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
		}
		else if (type == 870)
		{
			netImportant = true;
			width = 6;
			height = 6;
			aiStyle = 14;
			penetrate = -1;
			alpha = 75;
			light = 1f;
			timeLeft *= 5;
		}
		else if (type == 873)
		{
			width = 30;
			height = 30;
			aiStyle = 171;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 200;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 874)
		{
			width = 30;
			height = 30;
			aiStyle = 0;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 210;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 871)
		{
			width = 30;
			height = 30;
			aiStyle = 172;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 240;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 875)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 872)
		{
			width = 30;
			height = 30;
			aiStyle = 173;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 660;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 876)
		{
			width = 4;
			height = 4;
			aiStyle = 1;
			friendly = true;
			penetrate = 8;
			light = 0.75f;
			alpha = 255;
			extraUpdates = 3;
			scale = 1.4f;
			timeLeft = 3600;
			magic = true;
		}
		else if (type >= 877 && type <= 879)
		{
			netImportant = true;
			width = 25;
			height = 25;
			aiStyle = 19;
			alpha = 255;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			hide = true;
			ownerHitCheck = true;
			melee = true;
		}
		else if (type == 880)
		{
			width = 32;
			height = 32;
			aiStyle = 183;
			penetrate = -1;
			timeLeft = 18;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			hostile = false;
			manualDirectionChange = true;
		}
		else if (type == 881)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 882)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 883)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type >= 884 && type <= 886)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 887)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 888)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type >= 889 && type <= 892)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 893)
		{
			width = 20;
			height = 20;
			aiStyle = 174;
			penetrate = -1;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			netImportant = true;
		}
		else if (type == 894)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type >= 895 && type <= 896)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type == 897)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 898)
		{
			width = 20;
			height = 20;
			aiStyle = 124;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			friendly = true;
			ignoreWater = true;
			tileCollide = false;
			manualDirectionChange = true;
		}
		else if (type >= 899 && type <= 901)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 902)
		{
			width = 20;
			height = 20;
			aiStyle = 3;
			friendly = true;
			penetrate = -1;
			melee = true;
			MaxUpdates = 2;
		}
		else if (type >= 903 && type <= 906)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 907)
		{
			width = 22;
			height = 22;
			aiStyle = 30;
			friendly = true;
			penetrate = 2;
			melee = true;
		}
		else if (type == 908)
		{
			tileCollide = false;
			ignoreWater = true;
			width = 14;
			height = 14;
			aiStyle = 175;
			friendly = true;
			penetrate = 1;
			timeLeft = 3600;
			hide = true;
		}
		else if (type == 909)
		{
			width = 12;
			height = 12;
			aiStyle = 2;
			friendly = false;
			hostile = true;
			penetrate = 1;
		}
		else if (type == 910)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
		}
		else if (type == 911)
		{
			width = 22;
			height = 22;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
		}
		else if (type >= 912 && type <= 915)
		{
			DefaultToWhip();
			if (type == 915)
			{
				extraUpdates = 2;
			}
			if (type == 912)
			{
				coldDamage = true;
			}
		}
		else if (type == 916)
		{
			width = 18;
			height = 18;
			aiStyle = 176;
			friendly = true;
			tileCollide = false;
			penetrate = 2;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			extraUpdates = 2;
		}
		else if (type == 918)
		{
			aiStyle = 178;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			alpha = 255;
			width = 96;
			height = 96;
		}
		else if (type == 917)
		{
			width = 30;
			height = 30;
			aiStyle = 177;
			friendly = true;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			coldDamage = true;
			localNPCHitCooldown = 20;
		}
		else if (type == 919)
		{
			width = 8;
			height = 8;
			aiStyle = 179;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 240;
			tileCollide = false;
			ignoreWater = true;
		}
		else if (type == 920)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = 1;
		}
		else if (type == 921)
		{
			alpha = 255;
			width = 6;
			height = 6;
			aiStyle = 1;
			hostile = true;
			penetrate = 3;
		}
		else if (type == 922)
		{
			width = 30;
			height = 30;
			aiStyle = 135;
			alpha = 255;
			tileCollide = false;
			ignoreWater = true;
			timeLeft = 120;
			hostile = true;
			penetrate = -1;
		}
		else if (type == 923)
		{
			width = 30;
			height = 30;
			aiStyle = 180;
			alpha = 255;
			penetrate = -1;
			friendly = false;
			hostile = true;
			timeLeft = 180;
			tileCollide = false;
			ignoreWater = true;
			hide = true;
		}
		else if (type == 926)
		{
			alpha = 255;
			width = 12;
			height = 12;
			scale = 1f;
			aiStyle = 1;
			hostile = true;
			penetrate = 2;
		}
		else if (type == 927)
		{
			width = 40;
			height = 40;
			aiStyle = 75;
			friendly = true;
			tileCollide = false;
			melee = true;
			penetrate = -1;
			ownerHitCheck = true;
		}
		else if (type == 928)
		{
			netImportant = true;
			width = 34;
			height = 34;
			aiStyle = 14;
			friendly = true;
			penetrate = 2;
			melee = true;
			timeLeft = 250;
		}
		else if (type == 929)
		{
			width = 32;
			height = 32;
			aiStyle = 183;
			penetrate = -1;
			timeLeft = 18;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			hostile = false;
			manualDirectionChange = true;
		}
		else if (type == 930)
		{
			width = 14;
			height = 14;
			aiStyle = 16;
			friendly = true;
			penetrate = -1;
			ranged = true;
		}
		else if (type == 931)
		{
			width = 30;
			height = 30;
			aiStyle = 171;
			alpha = 255;
			penetrate = 3;
			friendly = true;
			timeLeft = 240;
			magic = true;
			tileCollide = true;
			ignoreWater = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 60;
		}
		else if (type == 932)
		{
			ranged = true;
			arrow = true;
			width = 10;
			height = 10;
			aiStyle = 181;
			penetrate = 5;
			friendly = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
			timeLeft = 120;
			alpha = 0;
			ignoreWater = true;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 60;
		}
		else if (type == 933)
		{
			width = 32;
			height = 32;
			aiStyle = 182;
			friendly = true;
			melee = true;
			tileCollide = false;
			ignoreWater = true;
			alpha = 255;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			manualDirectionChange = true;
			localNPCHitCooldown = 15;
			penetrate = -1;
			noEnchantmentVisuals = true;
		}
		else if (type == 934)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 26;
			friendly = true;
			penetrate = -1;
			timeLeft *= 5;
		}
		else if (type == 935)
		{
			netImportant = true;
			width = 18;
			height = 18;
			aiStyle = 7;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			timeLeft *= 10;
			extraUpdates = 3;
		}
		else if (type == 936)
		{
			width = 14;
			height = 14;
			aiStyle = 2;
			friendly = true;
			penetrate = 1;
			Opacity = 0.6f;
		}
		else if (type == 937)
		{
			alpha = 255;
			width = 10;
			height = 10;
			aiStyle = 1;
			hostile = false;
			friendly = true;
			penetrate = 3;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type >= 938 && type <= 945)
		{
			width = 18;
			height = 18;
			aiStyle = 161;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			melee = true;
			extraUpdates = 1;
			timeLeft = 360;
			hide = true;
		}
		else if (type == 946)
		{
			netImportant = true;
			width = 10;
			height = 10;
			penetrate = -1;
			ignoreWater = true;
			tileCollide = false;
			friendly = true;
			minion = true;
			minionSlots = 1f;
			timeLeft *= 5;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 15;
			aiStyle = 156;
			scale = 0.75f;
			manualDirectionChange = true;
			hide = true;
		}
		else if (type == 947 || type == 948)
		{
			netImportant = true;
			width = 20;
			height = 20;
			aiStyle = 15;
			friendly = true;
			penetrate = -1;
			melee = true;
			scale = 1f;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 10;
		}
		else if (type == 949)
		{
			width = 4;
			height = 4;
			aiStyle = 184;
			penetrate = -1;
			hostile = true;
			tileCollide = false;
		}
		else if (type == 950)
		{
			width = 104;
			height = 104;
			aiStyle = 186;
			friendly = true;
			magic = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 180;
			tileCollide = false;
			penetrate = -1;
		}
		else if (type == 951)
		{
			width = 26;
			height = 26;
			aiStyle = 67;
			penetrate = -1;
			netImportant = true;
			timeLeft *= 5;
			minion = true;
			minionSlots = 1f;
			friendly = true;
			decidesManualFallThrough = true;
			usesIDStaticNPCImmunity = true;
			idStaticNPCHitCooldown = 10;
		}
		else if (type == 952)
		{
			DefaultToWhip();
		}
		else if (type == 953)
		{
			width = 8;
			height = 8;
			aiStyle = 117;
			friendly = true;
			alpha = 255;
			ignoreWater = true;
			timeLeft = 60;
			tileCollide = false;
			penetrate = -1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = 80;
		}
		else
		{
			active = false;
		}
		width = (int)((float)width * scale);
		height = (int)((float)height * scale);
		maxPenetrate = penetrate;
	}

	private void DefaultToWhip()
	{
		width = 18;
		height = 18;
		aiStyle = 165;
		friendly = true;
		penetrate = -1;
		tileCollide = false;
		scale = 1f;
		ownerHitCheck = true;
		extraUpdates = 1;
		usesLocalNPCImmunity = true;
		localNPCHitCooldown = -1;
	}

	public static int GetNextSlot()
	{
		int result = 1000;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].active)
			{
				result = i;
				break;
			}
		}
		return result;
	}

	public static int NewProjectile(Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
	{
		return NewProjectile(position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1);
	}

	public static int FindOldestProjectile()
	{
		int result = 1000;
		int num = 9999999;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].netImportant && Main.projectile[i].timeLeft < num)
			{
				result = i;
				num = Main.projectile[i].timeLeft;
			}
		}
		return result;
	}

	public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
	{
		int num = 1000;
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].active)
			{
				num = i;
				break;
			}
		}
		if (num == 1000)
		{
			num = FindOldestProjectile();
		}
		Projectile projectile = Main.projectile[num];
		projectile.SetDefaults(Type);
		projectile.position.X = X - (float)projectile.width * 0.5f;
		projectile.position.Y = Y - (float)projectile.height * 0.5f;
		projectile.owner = Owner;
		projectile.velocity.X = SpeedX;
		projectile.velocity.Y = SpeedY;
		projectile.damage = Damage;
		projectile.knockBack = KnockBack;
		projectile.identity = num;
		projectile.gfxOffY = 0f;
		projectile.stepSpeed = 1f;
		projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
		if (projectile.ignoreWater)
		{
			projectile.wet = false;
		}
		projectile.honeyWet = Collision.honey;
		Main.projectileIdentity[Owner, num] = num;
		if (projectile.aiStyle == 1)
		{
			while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
			{
				projectile.velocity.X *= 0.97f;
				projectile.velocity.Y *= 0.97f;
			}
		}
		if (Owner == Main.myPlayer)
		{
			switch (Type)
			{
			case 206:
				projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
				projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
				break;
			case 335:
				projectile.ai[1] = Main.rand.Next(4);
				break;
			case 358:
				projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
				break;
			case 406:
				projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
				break;
			default:
				projectile.ai[0] = ai0;
				projectile.ai[1] = ai1;
				break;
			}
		}
		if (Type == 434)
		{
			projectile.ai[0] = projectile.position.X;
			projectile.ai[1] = projectile.position.Y;
		}
		if (Type > 0 && Type < 954)
		{
			if (ProjectileID.Sets.NeedsUUID[Type])
			{
				projectile.projUUID = projectile.identity;
			}
			if (ProjectileID.Sets.StardustDragon[Type])
			{
				int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
				if (num2 >= 0)
				{
					projectile.ai[0] = num2;
				}
			}
		}
		if (Main.netMode != 0 && Owner == Main.myPlayer)
		{
			NetMessage.SendData(27, -1, -1, null, num);
		}
		if (Owner == Main.myPlayer)
		{
			if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
			{
				int num3 = 0;
				int num4 = 0;
				int num5 = 99999999;
				for (int j = 0; j < 1000; j++)
				{
					if (Main.projectile[j].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[j].type] && Main.projectile[j].owner == Owner && Main.projectile[j].damage <= 0)
					{
						num3++;
						if (num5 > Main.projectile[j].timeLeft)
						{
							num4 = j;
							num5 = Main.projectile[j].timeLeft;
						}
					}
				}
				if (num3 > 10)
				{
					Main.projectile[num4].Kill();
				}
			}
			if (Type == 28)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 516)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 519)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 29)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 470)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 637)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 30)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 517)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 37)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 773)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 75)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 133)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 136)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 139)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 142)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 397)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 419)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 420)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 421)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 422)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 588)
			{
				projectile.timeLeft = 180;
			}
			if (Type == 779)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 783)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 862 || Type == 863)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 443)
			{
				projectile.timeLeft = 300;
			}
			if (Type == 681)
			{
				projectile.timeLeft = 600;
			}
			if (Type == 684)
			{
				projectile.timeLeft = 60;
			}
			if (Type == 706)
			{
				projectile.timeLeft = 120;
			}
			if (Type == 680 && Main.player[projectile.owner].setSquireT2)
			{
				projectile.penetrate = 7;
			}
			if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
			{
				projectile.timeLeft = 180;
			}
		}
		if (Type == 249)
		{
			projectile.frame = Main.rand.Next(5);
		}
		return num;
	}

	public static Color GetGolfTrailColor(Projectile proj)
	{
		return proj.type switch
		{
			739 => new Color(50, 50, 50, 80), 
			740 => new Color(30, 50, 255, 40), 
			741 => new Color(150, 90, 60, 90), 
			742 => new Color(30, 255, 170, 30), 
			743 => new Color(30, 255, 30, 40), 
			744 => new Color(190, 255, 30, 50), 
			745 => new Color(255, 130, 30, 50), 
			746 => new Color(255, 50, 110, 50), 
			747 => new Color(130, 10, 200, 40), 
			748 => new Color(255, 30, 50, 50), 
			749 => new Color(100, 180, 255, 30), 
			750 => new Color(50, 240, 160, 30), 
			751 => new Color(220, 80, 220, 70), 
			752 => new Color(255, 180, 50, 30), 
			_ => new Color(160, 160, 255, 50), 
		};
	}

	public void StatusNPC(int i)
	{
		NPC nPC = Main.npc[i];
		if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
		{
			byte meleeEnchant = Main.player[owner].meleeEnchant;
			if (meleeEnchant == 1)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 2)
			{
				nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 3)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 5)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(10, 20));
			}
			if (meleeEnchant == 6)
			{
				nPC.AddBuff(31, 60 * Main.rand.Next(1, 4));
			}
			if (meleeEnchant == 8)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 4)
			{
				nPC.AddBuff(72, 120);
			}
		}
		if (type == 195)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(5, 11));
			}
			else
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(10, 21));
			}
		}
		switch (type)
		{
		case 841:
			nPC.AddBuff(307, 240);
			break;
		case 952:
			nPC.AddBuff(326, 240);
			break;
		case 847:
			nPC.AddBuff(309, 240);
			break;
		case 849:
			nPC.AddBuff(310, 240);
			break;
		case 913:
			if (localAI[0] == 0f)
			{
				nPC.AddBuff(313, 240);
			}
			nPC.AddBuff(24, 240);
			break;
		case 912:
			nPC.AddBuff(44, 240);
			break;
		case 914:
			nPC.AddBuff(20, 240);
			nPC.AddBuff(315, 240);
			break;
		case 848:
			nPC.AddBuff(319, 240);
			break;
		case 915:
			nPC.AddBuff(316, 240);
			break;
		}
		if (type == 664 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 6));
		}
		if (type == 666 && Main.rand.Next(2) == 0)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 9));
		}
		if (type == 668 && Main.rand.Next(3) != 0)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(6, 9));
		}
		if (type == 567 || type == 568)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(5, 11));
		}
		if (type == 598 && ai[1] == (float)i)
		{
			nPC.AddBuff(169, 900);
		}
		if (type == 636 && ai[1] == (float)i)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 611)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 612)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 953)
		{
			nPC.AddBuff(189, 300);
		}
		if (type == 711)
		{
			nPC.AddBuff(203, 600);
		}
		if (type == 706)
		{
			nPC.AddBuff(24, 480);
		}
		if (type == 614 && ai[1] == (float)i)
		{
			nPC.AddBuff(183, 900);
		}
		if (type == 585)
		{
			nPC.AddBuff(153, 60 * Main.rand.Next(5, 11));
		}
		if (type == 583)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(3, 6));
		}
		if (type == 524)
		{
			nPC.AddBuff(69, 60 * Main.rand.Next(3, 8));
		}
		if (type == 504 && Main.rand.Next(2) == 0)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(60, 180));
			}
			else
			{
				nPC.AddBuff(24, Main.rand.Next(30, 120));
			}
		}
		if ((type == 694 || type == 695 || type == 696) && Main.player[owner].setHuntressT2)
		{
			nPC.AddBuff(204, Main.rand.Next(8, 18) * 30);
		}
		if (type == 545 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, Main.rand.Next(60, 240));
		}
		if (type == 553)
		{
			nPC.AddBuff(24, Main.rand.Next(180, 480));
		}
		if (type == 552 && Main.rand.Next(3) != 0)
		{
			nPC.AddBuff(44, Main.rand.Next(120, 320));
		}
		if (type == 495)
		{
			nPC.AddBuff(153, Main.rand.Next(120, 300));
		}
		if (type == 497)
		{
			nPC.AddBuff(153, Main.rand.Next(60, 180));
		}
		if (type == 496)
		{
			nPC.AddBuff(153, Main.rand.Next(240, 480));
		}
		if (type == 476)
		{
			nPC.AddBuff(151, 30);
		}
		if (type == 523)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(10, 30));
		}
		if (type == 478 || type == 480)
		{
			nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
		}
		if (type == 479)
		{
			nPC.AddBuff(69, 60 * Main.rand.Next(7, 15));
		}
		if (type == 379)
		{
			nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
		}
		if (type >= 390 && type <= 392)
		{
			nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
		}
		if (type == 374)
		{
			nPC.AddBuff(20, 60 * Main.rand.Next(4, 7));
		}
		if (type == 376)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type >= 399 && type <= 402)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type == 295 || type == 296)
		{
			nPC.AddBuff(24, 60 * Main.rand.Next(8, 16));
		}
		if ((melee || ranged) && !npcProj && Main.player[owner].frostBurn && !noEnchantments)
		{
			nPC.AddBuff(324, 60 * Main.rand.Next(5, 15));
		}
		if (melee && Main.player[owner].magmaStone && !noEnchantments)
		{
			if (Main.rand.Next(7) == 0)
			{
				nPC.AddBuff(323, 360);
			}
			else if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(323, 120);
			}
			else
			{
				nPC.AddBuff(323, 60);
			}
		}
		if (type == 287)
		{
			nPC.AddBuff(72, 120);
		}
		if (type == 285)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(31, 180);
			}
			else
			{
				nPC.AddBuff(31, 60);
			}
		}
		if (type == 2 && Main.rand.Next(3) == 0)
		{
			nPC.AddBuff(24, 180);
		}
		if (type == 172)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(44, 180);
			}
		}
		else if (type == 15)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 300);
			}
		}
		else if (type == 253)
		{
			nPC.AddBuff(44, 480);
		}
		else if (type == 19)
		{
			if (Main.rand.Next(5) == 0)
			{
				nPC.AddBuff(24, 180);
			}
		}
		else if (type == 33)
		{
			if (Main.rand.Next(5) == 0)
			{
				nPC.AddBuff(20, 420);
			}
		}
		else if (type == 34)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(240, 480));
			}
		}
		else if (type == 948)
		{
			if (Main.rand.Next(6) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(2, 4));
			}
		}
		else if (type == 35)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 300);
			}
		}
		else if (type == 54)
		{
			if (Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(20, 600);
			}
		}
		else if (type == 267)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(20, 3600);
			}
			else
			{
				nPC.AddBuff(20, 1800);
			}
		}
		else if (type == 63)
		{
			if (Main.rand.Next(5) != 0)
			{
				nPC.AddBuff(31, 60 * Main.rand.Next(2, 5));
			}
		}
		else if (type == 85 || type == 188)
		{
			nPC.AddBuff(24, 1200);
		}
		else if (type == 95 || type == 103 || type == 104 || type == 482)
		{
			nPC.AddBuff(39, 420);
		}
		else if (type == 278 || type == 279 || type == 280)
		{
			nPC.AddBuff(69, 600);
		}
		else if (type == 282 || type == 283)
		{
			nPC.AddBuff(70, 600);
		}
		if (type == 163 || type == 310)
		{
			if (Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 600);
			}
			else
			{
				nPC.AddBuff(24, 300);
			}
		}
		else if (type == 98)
		{
			nPC.AddBuff(20, 600);
		}
		else if (type == 184)
		{
			nPC.AddBuff(20, 900);
		}
		else if (type == 265)
		{
			nPC.AddBuff(20, 1800);
		}
		else if (type == 355)
		{
			nPC.AddBuff(70, 1800);
		}
	}

	public void StatusPvP(int i)
	{
		if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
		{
			byte meleeEnchant = Main.player[owner].meleeEnchant;
			if (meleeEnchant == 1)
			{
				Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), quiet: false);
			}
			if (meleeEnchant == 2)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 3)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 5)
			{
				Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), quiet: false);
			}
			if (meleeEnchant == 6)
			{
				Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), quiet: false);
			}
			if (meleeEnchant == 8)
			{
				Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), quiet: false);
			}
		}
		if (type == 295 || type == 296)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), quiet: false);
		}
		if (type >= 399 && type <= 402)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
		}
		if (type == 478 || type == 480)
		{
			Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
		}
		if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
		{
			Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), quiet: false);
		}
		if (melee && Main.player[owner].magmaStone && !noEnchantments)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(24, 360, quiet: false);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 240, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(24, 120, quiet: false);
			}
		}
		if (type == 2 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(24, 180, quiet: false);
		}
		if (type == 172)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(44, 240, quiet: false);
			}
		}
		else if (type == 15)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 300, quiet: false);
			}
		}
		else if (type == 253)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(44, 480, quiet: false);
			}
		}
		else if (type == 19)
		{
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
		}
		else if (type == 33)
		{
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(20, 420, quiet: false);
			}
		}
		else if (type == 34)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 240, quiet: false);
			}
		}
		else if (type == 35)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
		}
		else if (type == 54)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, 600, quiet: false);
			}
		}
		else if (type == 267)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(20, 3600, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(20, 1800, quiet: false);
			}
		}
		else if (type == 63)
		{
			if (Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(31, 120, quiet: false);
			}
		}
		else if (type == 85 || type == 188)
		{
			Main.player[i].AddBuff(24, 1200, quiet: false);
		}
		else if (type == 95 || type == 103 || type == 104 || type == 482)
		{
			Main.player[i].AddBuff(39, 420, quiet: false);
		}
		else if (type == 278 || type == 279 || type == 280)
		{
			Main.player[i].AddBuff(69, 900, quiet: false);
		}
		else if (type == 282 || type == 283)
		{
			Main.player[i].AddBuff(70, 600, quiet: false);
		}
		if (type == 163 || type == 310)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 600, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(24, 300, quiet: false);
			}
		}
		else if (type == 265)
		{
			Main.player[i].AddBuff(20, 1200, quiet: false);
		}
		else if (type == 355)
		{
			Main.player[i].AddBuff(70, 1800, quiet: false);
		}
	}

	public void ghostHurt(int dmg, Vector2 Position)
	{
		if (!magic || damage <= 0)
		{
			return;
		}
		int num = damage;
		if (dmg <= 1)
		{
			return;
		}
		int num2 = -1;
		int num3 = 1500;
		if (Main.player[Main.myPlayer].ghostDmg > (float)num3)
		{
			return;
		}
		Main.player[Main.myPlayer].ghostDmg += num;
		int[] array = new int[200];
		int num4 = 0;
		_ = new int[200];
		int num5 = 0;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].CanBeChasedBy(this))
			{
				continue;
			}
			float num6 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - position.Y + (float)(height / 2));
			if (num6 < 800f)
			{
				if (Collision.CanHit(position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num6 > 50f)
				{
					array[num5] = i;
					num5++;
				}
				else if (num5 == 0)
				{
					array[num4] = i;
					num4++;
				}
			}
		}
		if (num4 != 0 || num5 != 0)
		{
			num2 = ((num5 <= 0) ? array[Main.rand.Next(num4)] : array[Main.rand.Next(num5)]);
			float num7 = Main.rand.Next(-100, 101);
			float num8 = Main.rand.Next(-100, 101);
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			num9 = 4f / num9;
			num7 *= num9;
			num8 *= num9;
			NewProjectile(Position.X, Position.Y, num7, num8, 356, num, 0f, owner, num2);
		}
	}

	public void ghostHeal(int dmg, Vector2 Position)
	{
		float num = 0.2f;
		num -= (float)numHits * 0.05f;
		if (num <= 0f)
		{
			return;
		}
		float num2 = (float)dmg * num;
		if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
		{
			return;
		}
		Main.player[Main.myPlayer].lifeSteal -= num2;
		if (!magic)
		{
			return;
		}
		float num3 = 0f;
		int num4 = owner;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[owner].hostile && !Main.player[i].hostile) || Main.player[owner].team == Main.player[i].team) && Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2)) < 1200f && (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife) > num3)
			{
				num3 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
				num4 = i;
			}
		}
		NewProjectile(Position.X, Position.Y, 0f, 0f, 298, 0, 0f, owner, num4, num2);
	}

	public void vampireHeal(int dmg, Vector2 Position)
	{
		float num = (float)dmg * 0.075f;
		if ((int)num != 0 && !(Main.player[Main.myPlayer].lifeSteal <= 0f))
		{
			Main.player[Main.myPlayer].lifeSteal -= num;
			int num2 = owner;
			NewProjectile(Position.X, Position.Y, 0f, 0f, 305, 0, 0f, owner, num2, num);
		}
	}

	public void StatusPlayer(int i)
	{
		if (Main.player[i].creativeGodMode)
		{
			return;
		}
		if (type == 472)
		{
			Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
		}
		if (type == 467)
		{
			Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
		}
		if (type == 581)
		{
			if (Main.expertMode)
			{
				Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
			}
		}
		if (type == 687)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11));
		}
		if (type == 258 && Main.rand.Next(2) == 0)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8));
		}
		if (type == 572 && Main.rand.Next(3) != 0)
		{
			Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
		}
		if (type == 276)
		{
			if (Main.expertMode)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
			}
		}
		if (type == 436 && Main.rand.Next(5) >= 2)
		{
			Main.player[i].AddBuff(31, 300);
		}
		if (type == 435 && Main.rand.Next(3) != 0)
		{
			Main.player[i].AddBuff(144, 300);
		}
		if (type == 682)
		{
			Main.player[i].AddBuff(196, 300);
		}
		if (type == 437)
		{
			Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
		}
		if (type == 348)
		{
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(46, 600);
			}
			else
			{
				Main.player[i].AddBuff(46, 300);
			}
			if (Main.rand.Next(3) != 0)
			{
				if (Main.rand.Next(16) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
				else if (Main.rand.Next(12) == 0)
				{
					Main.player[i].AddBuff(47, 40);
				}
				else if (Main.rand.Next(8) == 0)
				{
					Main.player[i].AddBuff(47, 20);
				}
			}
		}
		if (type == 349)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(46, 600);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(46, 300);
			}
		}
		if (type >= 399 && type <= 402 && !hostile)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
		}
		if (type == 55 || type == 719)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(20, 600);
			}
			else if (Main.expertMode)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
			}
		}
		if (type == 44 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(22, 900);
		}
		if (type == 293)
		{
			Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
		}
		if (type == 299)
		{
			Main.player[i].AddBuff(23, 240);
		}
		if (type == 82 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(24, 420);
		}
		if (type == 285 && !hostile)
		{
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(31, 180);
			}
			else
			{
				Main.player[i].AddBuff(31, 60);
			}
		}
		if (type == 96 || type == 101)
		{
			if (Main.rand.Next(6) == 0)
			{
				Main.player[i].AddBuff(39, 180);
			}
			else if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(39, 180);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(39, 120);
			}
		}
		else if (type == 288)
		{
			Main.player[i].AddBuff(69, 900);
		}
		else if (type == 253 && !hostile)
		{
			Main.player[i].AddBuff(44, 600);
		}
		if (type == 291 || type == 292)
		{
			Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
		}
		if (type == 98)
		{
			Main.player[i].AddBuff(20, 600);
		}
		if (type == 184)
		{
			Main.player[i].AddBuff(20, 900);
		}
		if (type == 290)
		{
			Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
		}
		if (type == 174)
		{
			Main.player[i].AddBuff(46, 1200);
			if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
			{
				Main.player[i].AddBuff(47, 90);
			}
			else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
			{
				Main.player[i].AddBuff(47, 60);
			}
		}
		if (type == 257)
		{
			Main.player[i].AddBuff(46, 2700);
			if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(47, 60);
			}
		}
		if (type == 177)
		{
			Main.player[i].AddBuff(46, 1500);
			if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
			{
				Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
			}
		}
		if (type == 128 && Main.rand.Next(3) == 0)
		{
			Main.player[i].AddBuff(44, 360);
		}
		if (type == 176)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(20, 1200);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(20, 300);
			}
		}
	}

	public bool CanHitWithMeleeWeapon(Entity ent)
	{
		if (Distance(ent.Center) > ownerHitCheckDistance)
		{
			return false;
		}
		if (!Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center, 0, 0))
		{
			return Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
		}
		return true;
	}

	public bool CanHitWithOwnBody(Entity ent)
	{
		if (Distance(ent.Center) > ownerHitCheckDistance)
		{
			return false;
		}
		bool flag = Collision.CanHit(base.position, width, height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
		float num = ProjectileID.Sets.ExtendedCanHitCheckRange[type];
		if (num != 0f)
		{
			if (flag)
			{
				return flag;
			}
			GenSearch genSearch = ProjectileID.Sets.ExtendedCanHitCheckSearch[type];
			Vector2 position = base.Top + new Vector2(0f, 0f - num);
			Vector2 position2 = ent.Top + new Vector2(0f, 0f - num);
			if (genSearch != null)
			{
				if (WorldUtils.Find(base.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out var result))
				{
					position = result.ToWorldCoordinates();
				}
				if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out result))
				{
					position2 = result.ToWorldCoordinates();
				}
			}
			flag |= Collision.CanHitLine(position, 0, 0, position2, 0, 0);
		}
		return flag;
	}

	public void Damage()
	{
		if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && velocity.Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || ((type == 598 || type == 636 || type == 614) && ai[0] == 1f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && type != 951 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f)))
		{
			return;
		}
		Rectangle myRect = new Rectangle((int)position.X, (int)position.Y, width, height);
		if (type == 85 || type == 101)
		{
			int num = 30;
			myRect.X -= num;
			myRect.Y -= num;
			myRect.Width += num * 2;
			myRect.Height += num * 2;
		}
		if (type == 188)
		{
			int num2 = 20;
			myRect.X -= num2;
			myRect.Y -= num2;
			myRect.Width += num2 * 2;
			myRect.Height += num2 * 2;
		}
		if (aiStyle == 29)
		{
			int num3 = 4;
			myRect.X -= num3;
			myRect.Y -= num3;
			myRect.Width += num3 * 2;
			myRect.Height += num3 * 2;
		}
		if (friendly && owner == Main.myPlayer && !npcProj)
		{
			if ((aiStyle == 16 && !ProjectileID.Sets.RocketsSkipDamageForPlayers[type] && (timeLeft <= 1 || type == 108 || type == 164)) || (type == 286 && localAI[1] == -1f))
			{
				int myPlayer = Main.myPlayer;
				if (Main.player[myPlayer].active && !Main.player[myPlayer].dead && !Main.player[myPlayer].immune && (!ownerHitCheck || CanHitWithMeleeWeapon(Main.player[myPlayer])))
				{
					Rectangle value = new Rectangle((int)Main.player[myPlayer].position.X, (int)Main.player[myPlayer].position.Y, Main.player[myPlayer].width, Main.player[myPlayer].height);
					if (myRect.Intersects(value))
					{
						if (Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
						int num4 = Main.DamageVar(damage, 0f - Main.player[myPlayer].luck);
						int playerIndex = owner;
						bool pvp = true;
						if (type == 108)
						{
							playerIndex = -1;
							pvp = false;
						}
						if (Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(playerIndex, whoAmI), num4, direction, pvp) > 0.0 && !Main.player[myPlayer].dead)
						{
							StatusPlayer(myPlayer);
						}
						if (trap)
						{
							Main.player[myPlayer].trapDebuffSource = true;
							if (Main.player[myPlayer].dead)
							{
								AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
							}
						}
					}
				}
			}
			if (!minion)
			{
				CutTiles();
			}
		}
		if (owner == Main.myPlayer)
		{
			float num5 = 1f;
			if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[type] && timeLeft > 3)
			{
				num5 *= 2f;
			}
			if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[type] && velocity.Length() < 0.5f)
			{
				num5 *= 3f;
			}
			if (type == 34 && penetrate == 1)
			{
				num5 *= 1f;
			}
			if (aiStyle == 15 && ai[0] == 0f)
			{
				num5 *= 1.2f;
			}
			if (aiStyle == 15 && (ai[0] == 1f || ai[0] == 2f))
			{
				num5 *= 2f;
			}
			if (type == 877 || type == 879 || type == 878)
			{
				num5 = 0.1f + Main.player[owner].velocity.Length() / 7f * 0.9f;
			}
			if (damage > 0)
			{
				int[] array = localNPCImmunity;
				if (type == 626 || type == 627 || type == 628)
				{
					Projectile projectile = FindStardustDragonHeadOfOwner();
					if (projectile != null)
					{
						array = projectile.localNPCImmunity;
					}
				}
				for (int i = 0; i < 200; i++)
				{
					bool flag = (!usesLocalNPCImmunity && !usesIDStaticNPCImmunity) || (usesLocalNPCImmunity && array[i] == 0) || (usesIDStaticNPCImmunity && IsNPCIndexImmuneToProjectileType(type, i));
					if (!(Main.npc[i].active && !Main.npc[i].dontTakeDamage && flag) || (Main.npc[i].aiStyle == 112 && Main.npc[i].ai[2] > 1f))
					{
						continue;
					}
					Main.npc[i].position += Main.npc[i].netOffset;
					bool flag2 = !Main.npc[i].friendly;
					flag2 |= type == 318;
					flag2 |= Main.npc[i].type == 22 && owner < 255 && Main.player[owner].killGuide;
					flag2 |= Main.npc[i].type == 54 && owner < 255 && Main.player[owner].killClothier;
					if (owner < 255 && !Main.player[owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[i]))
					{
						flag2 = false;
					}
					bool flag3 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
					if (((friendly && flag2) || (hostile && flag3)) && (owner < 0 || Main.npc[i].immune[owner] == 0 || maxPenetrate == 1))
					{
						bool flag4 = false;
						if (type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
						{
							flag4 = true;
						}
						else if (type == 31 && Main.npc[i].type == 69)
						{
							flag4 = true;
						}
						else if (Main.npc[i].trapImmune && trap)
						{
							flag4 = true;
						}
						else if (Main.npc[i].immortal && npcProj)
						{
							flag4 = true;
						}
						if (!flag4 && (Main.npc[i].noTileCollide || !ownerHitCheck || CanHitWithMeleeWeapon(Main.npc[i])))
						{
							bool flag5 = false;
							if (Main.npc[i].type == 414)
							{
								Rectangle rect = Main.npc[i].getRect();
								int num6 = 8;
								rect.X -= num6;
								rect.Y -= num6;
								rect.Width += num6 * 2;
								rect.Height += num6 * 2;
								flag5 = Colliding(myRect, rect);
							}
							else
							{
								flag5 = Colliding(myRect, Main.npc[i].getRect());
							}
							if (flag5)
							{
								if (type == 876)
								{
									Vector2 vector = position;
									if (Main.rand.Next(20) == 0)
									{
										tileCollide = false;
										position.X += Main.rand.Next(-256, 257);
									}
									if (Main.rand.Next(20) == 0)
									{
										tileCollide = false;
										position.Y += Main.rand.Next(-256, 257);
									}
									if (Main.rand.Next(2) == 0)
									{
										tileCollide = false;
									}
									if (Main.rand.Next(3) != 0)
									{
										vector = position;
										position -= velocity * Main.rand.Next(0, 40);
										if (tileCollide && Collision.SolidTiles(position, width, height))
										{
											position = vector;
											position -= velocity * Main.rand.Next(0, 40);
											if (tileCollide && Collision.SolidTiles(position, width, height))
											{
												position = vector;
											}
										}
									}
									velocity *= 0.6f;
									if (Main.rand.Next(7) == 0)
									{
										velocity.X += (float)Main.rand.Next(30, 31) * 0.01f;
									}
									if (Main.rand.Next(7) == 0)
									{
										velocity.Y += (float)Main.rand.Next(30, 31) * 0.01f;
									}
									damage = (int)((double)damage * 0.9);
									knockBack *= 0.9f;
									if (Main.rand.Next(20) == 0)
									{
										knockBack *= 10f;
									}
									if (Main.rand.Next(50) == 0)
									{
										damage *= 10;
									}
									if (Main.rand.Next(7) == 0)
									{
										vector = position;
										position.X += Main.rand.Next(-64, 65);
										if (tileCollide && Collision.SolidTiles(position, width, height))
										{
											position = vector;
										}
									}
									if (Main.rand.Next(7) == 0)
									{
										vector = position;
										position.Y += Main.rand.Next(-64, 65);
										if (tileCollide && Collision.SolidTiles(position, width, height))
										{
											position = vector;
										}
									}
									if (Main.rand.Next(14) == 0)
									{
										velocity.X *= -1f;
									}
									if (Main.rand.Next(14) == 0)
									{
										velocity.Y *= -1f;
									}
									if (Main.rand.Next(10) == 0)
									{
										velocity *= (float)Main.rand.Next(1, 201) * 0.0005f;
									}
									if (tileCollide)
									{
										ai[1] = 0f;
									}
									else
									{
										ai[1] = 1f;
									}
									netUpdate = true;
								}
								NPC nPC = Main.npc[i];
								if (nPC.reflectsProjectiles && CanBeReflected() && nPC.CanReflectProjectile(this))
								{
									nPC.ReflectProjectile(this);
									Main.npc[i].position -= Main.npc[i].netOffset;
									return;
								}
								if (type == 604)
								{
									Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
								}
								float num7 = knockBack;
								bool flag6 = false;
								int num8 = Main.player[owner].armorPenetration;
								bool flag7 = !npcProj && !trap;
								switch (type)
								{
								case 864:
									num8 += 25;
									break;
								case 916:
									num8 += 50;
									break;
								case 917:
									num8 += 30;
									break;
								case 595:
									num8 += 20;
									break;
								case 493:
								case 494:
									num8 += 10;
									break;
								case 150:
								case 151:
								case 152:
									num8 += 10;
									break;
								case 189:
									num8 += 10;
									break;
								case 723:
								case 724:
								case 725:
								case 726:
									num8 += 25;
									break;
								case 532:
									num8 += 25;
									break;
								case 877:
								case 878:
								case 879:
									num7 *= Main.player[owner].velocity.Length() / 7f;
									break;
								}
								int num9 = (int)((float)damage * num5);
								if (type > 0 && type < 954 && ProjectileID.Sets.StardustDragon[type])
								{
									float value2 = (scale - 1f) * 100f;
									value2 = Utils.Clamp(value2, 0f, 50f);
									num9 = (int)((float)num9 * (1f + value2 * 0.23f));
								}
								if (type > 0 && type < 954 && ProjectileID.Sets.StormTiger[type])
								{
									int num10 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
									num9 = (int)((float)num9 * (1f + (float)num10 * 0.4f));
								}
								if (type == 818)
								{
									int num11 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
									num9 = (int)((float)num9 * (1.5f + (float)num11 * 0.4f));
								}
								if (flag7)
								{
									if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
									{
										flag6 = true;
									}
									if (ranged && Main.rand.Next(1, 101) <= Main.player[owner].rangedCrit)
									{
										flag6 = true;
									}
									if (magic && Main.rand.Next(1, 101) <= Main.player[owner].magicCrit)
									{
										flag6 = true;
									}
									int num12 = type;
									if ((uint)(num12 - 688) <= 2u)
									{
										if (Main.player[owner].setMonkT3)
										{
											if (Main.rand.Next(4) == 0)
											{
												flag6 = true;
											}
										}
										else if (Main.player[owner].setMonkT2 && Main.rand.Next(6) == 0)
										{
											flag6 = true;
										}
									}
								}
								ParticleOrchestraSettings settings;
								if (flag7 && (minion || ProjectileID.Sets.MinionShot[type]))
								{
									bool flag8 = false;
									bool flag9 = false;
									bool flag10 = false;
									bool flag11 = false;
									bool flag12 = false;
									bool flag13 = false;
									bool flag14 = false;
									bool flag15 = false;
									for (int j = 0; j < 5; j++)
									{
										if (nPC.buffTime[j] >= 1)
										{
											switch (nPC.buffType[j])
											{
											case 307:
												flag8 = true;
												break;
											case 309:
												flag9 = true;
												break;
											case 313:
												flag10 = true;
												break;
											case 310:
												flag11 = true;
												break;
											case 315:
												flag12 = true;
												break;
											case 326:
												flag13 = true;
												break;
											case 319:
												flag14 = true;
												break;
											case 316:
												flag15 = true;
												break;
											}
										}
									}
									if (flag8)
									{
										num9 += 4;
									}
									if (flag12)
									{
										num9 += 6;
									}
									if (flag13)
									{
										num9 += 7;
									}
									if (flag9)
									{
										num9 += 9;
									}
									if (flag14)
									{
										num9 += 5;
										if (Main.rand.Next(20) == 0)
										{
											flag6 = true;
										}
									}
									if (flag11)
									{
										int num13 = 10;
										int num14 = NewProjectile(nPC.Center, Vector2.Zero, 916, num13, 0f, owner);
										Main.projectile[num14].localNPCImmunity[i] = -1;
										EmitBlackLightningParticles(nPC);
									}
									if (flag15)
									{
										int num15 = 20;
										num9 += num15;
										if (Main.rand.Next(10) == 0)
										{
											flag6 = true;
										}
										settings = new ParticleOrchestraSettings
										{
											PositionInWorld = base.Center
										};
										ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
									}
									if (flag10)
									{
										nPC.RequestBuffRemoval(313);
										int num16 = (int)((float)num9 * 1.75f);
										int num17 = NewProjectile(nPC.Center, Vector2.Zero, 918, num16, 0f, owner);
										Main.projectile[num17].localNPCImmunity[i] = -1;
										num9 += num16;
									}
								}
								int num18 = ((!flag7) ? Main.DamageVar(num9) : Main.DamageVar(num9, Main.player[owner].luck));
								if (trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[nPC.type])
								{
									num18 /= 2;
								}
								if (type == 482 && (nPC.aiStyle == 6 || nPC.aiStyle == 37))
								{
									num18 /= 2;
								}
								if (type == 604)
								{
									friendly = false;
									ai[1] = 1000f;
								}
								if ((type == 400 || type == 401 || type == 402) && nPC.type >= 13 && nPC.type <= 15)
								{
									num18 = (int)((double)num18 * 0.65);
									if (penetrate > 1)
									{
										penetrate--;
									}
								}
								if (type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), _cachedConditions_notNull, _cachedConditions_solid), out var _))
								{
									num18 = (int)((float)num18 * 1.5f);
								}
								if (type == 504)
								{
									float num19 = (60f - ai[0]) / 2f;
									ai[0] += num19;
								}
								if (aiStyle == 3 && type != 301 && type != 866 && type != 902)
								{
									if (ai[0] == 0f)
									{
										velocity.X = 0f - velocity.X;
										velocity.Y = 0f - velocity.Y;
										netUpdate = true;
									}
									ai[0] = 1f;
								}
								else if (type == 951)
								{
									Vector2 vector2 = nPC.Center.DirectionTo(base.Center);
									vector2.X += (-0.5f + Main.rand.NextFloat()) * 13f;
									vector2.Y = -5f;
									velocity.X = vector2.X;
									velocity.Y = vector2.Y;
									netUpdate = true;
								}
								else if (type == 582 || type == 902)
								{
									if (ai[0] != 0f)
									{
										direction *= -1;
									}
								}
								else if (type == 612 || type == 953)
								{
									direction = Main.player[owner].direction;
								}
								else if (type == 624)
								{
									float num20 = 1f;
									if (nPC.knockBackResist > 0f)
									{
										num20 = 1f / nPC.knockBackResist;
									}
									knockBack = 4f * num20;
									num7 = knockBack;
									if (nPC.Center.X < base.Center.X)
									{
										direction = 1;
									}
									else
									{
										direction = -1;
									}
								}
								else if (aiStyle == 16)
								{
									if (timeLeft > 3)
									{
										timeLeft = 3;
									}
									if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
									{
										direction = -1;
									}
									else
									{
										direction = 1;
									}
								}
								else if (aiStyle == 68)
								{
									if (timeLeft > 3)
									{
										timeLeft = 3;
									}
									if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
									{
										direction = -1;
									}
									else
									{
										direction = 1;
									}
								}
								else if (aiStyle == 50)
								{
									if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
									{
										direction = -1;
									}
									else
									{
										direction = 1;
									}
								}
								else if (type == 908)
								{
									if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
									{
										direction = -1;
									}
									else
									{
										direction = 1;
									}
								}
								if (type == 509)
								{
									int num21 = Main.rand.Next(2, 6);
									for (int k = 0; k < num21; k++)
									{
										Vector2 vector3 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
										vector3 += velocity * 3f;
										vector3.Normalize();
										vector3 *= (float)Main.rand.Next(35, 81) * 0.1f;
										int num22 = (int)((double)damage * 0.5);
										NewProjectile(base.Center.X, base.Center.Y, vector3.X, vector3.Y, 504, num22, knockBack * 0.2f, owner);
									}
								}
								if (type == 598 || type == 636 || type == 614)
								{
									ai[0] = 1f;
									ai[1] = i;
									velocity = (nPC.Center - base.Center) * 0.75f;
									netUpdate = true;
								}
								if (type >= 511 && type <= 513)
								{
									timeLeft = 0;
								}
								if (type == 659)
								{
									timeLeft = 0;
								}
								if (type == 524)
								{
									netUpdate = true;
									ai[0] += 50f;
								}
								if ((type == 688 || type == 689 || type == 690) && nPC.type != 68 && nPC.defense < 999)
								{
									num18 += nPC.defense / 2;
								}
								if (aiStyle == 39)
								{
									if (ai[1] == 0f)
									{
										ai[1] = i + 1;
										netUpdate = true;
									}
									if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
									{
										direction = 1;
									}
									else
									{
										direction = -1;
									}
								}
								if (type == 41 && timeLeft > 1)
								{
									timeLeft = 1;
								}
								if (aiStyle == 99)
								{
									Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
									if (nPC.Center.X < Main.player[owner].Center.X)
									{
										direction = -1;
									}
									else
									{
										direction = 1;
									}
									if (ai[0] >= 0f)
									{
										Vector2 vector4 = base.Center - nPC.Center;
										vector4.Normalize();
										float num23 = 16f;
										velocity *= -0.5f;
										velocity += vector4 * num23;
										netUpdate = true;
										localAI[0] += 20f;
										if (!Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
										{
											localAI[0] += 40f;
											num18 = (int)((double)num18 * 0.75);
										}
									}
								}
								if (type == 856 && !Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
								{
									num18 = (int)((double)num18 * 0.75);
								}
								if (type == 684 && !Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
								{
									num18 = (int)((double)num18 * 0.5);
								}
								if (aiStyle == 93)
								{
									if (ai[0] == 0f)
									{
										ai[1] = 0f;
										int num24 = -i - 1;
										ai[0] = num24;
										velocity = nPC.Center - base.Center;
									}
									num18 = ((ai[0] != 2f) ? ((int)((double)num18 * 0.15)) : ((int)((double)num18 * 1.35)));
								}
								if (flag7)
								{
									int num25 = Item.NPCtoBanner(nPC.BannerID());
									if (num25 >= 0)
									{
										Main.player[Main.myPlayer].lastCreatureHit = num25;
									}
								}
								if (Main.netMode != 2 && flag7)
								{
									int num26 = Item.NPCtoBanner(nPC.BannerID());
									if (num26 > 0 && Main.player[owner].HasNPCBannerBuff(num26))
									{
										num18 = ((!Main.expertMode) ? ((int)((float)num18 * ItemID.Sets.BannerStrength[Item.BannerToItem(num26)].NormalDamageDealt)) : ((int)((float)num18 * ItemID.Sets.BannerStrength[Item.BannerToItem(num26)].ExpertDamageDealt)));
									}
								}
								if (Main.expertMode)
								{
									if ((type == 30 || type == 397 || type == 517 || type == 28 || type == 37 || type == 516 || type == 29 || type == 470 || type == 637 || type == 108 || type == 281 || type == 588 || type == 519 || type == 773 || type == 183 || type == 181 || type == 566) && nPC.type >= 13 && nPC.type <= 15)
									{
										num18 /= 5;
									}
									if (type == 280 && ((nPC.type >= 134 && nPC.type <= 136) || nPC.type == 139))
									{
										num18 = (int)((double)num18 * 0.75);
									}
								}
								if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && type <= 954 && ProjectileID.Sets.CountsAsHoming[type])
								{
									num18 = (int)((float)num18 * 0.75f);
								}
								if (type == 497 && penetrate != 1)
								{
									ai[0] = 25f;
									float num27 = velocity.Length();
									Vector2 vector5 = nPC.Center - base.Center;
									vector5.Normalize();
									vector5 *= num27;
									velocity = -vector5 * 0.9f;
									netUpdate = true;
								}
								if (type == 323 && (nPC.type == 158 || nPC.type == 159))
								{
									num18 *= 10;
								}
								if (type == 294)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 265)
								{
									damage = (int)((double)damage * 0.75);
								}
								if (type == 355)
								{
									damage = (int)((double)damage * 0.75);
								}
								if (type == 114)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 76 || type == 78 || type == 77)
								{
									damage = (int)((double)damage * 0.95);
								}
								if (type == 85)
								{
									damage = (int)((double)damage * 0.85);
								}
								if (type == 866)
								{
									damage = (int)((double)damage * 0.8);
								}
								if (type == 841)
								{
									damage = (int)((double)damage * 0.5);
								}
								if (type == 914)
								{
									damage = (int)((double)damage * 0.6);
								}
								if (type == 952)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 913)
								{
									damage = (int)((double)damage * 0.66);
								}
								if (type == 912)
								{
									damage = (int)((double)damage * 0.7);
								}
								if (type == 847)
								{
									damage = (int)((double)damage * 0.8);
								}
								if (type == 848)
								{
									damage = (int)((double)damage * 0.95);
								}
								if (type == 849)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 915)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 931)
								{
									damage = (int)((double)damage * 0.8);
								}
								if (type == 242)
								{
									damage = (int)((double)damage * 0.85);
								}
								if (type == 323)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 5)
								{
									damage = (int)((double)damage * 0.9);
								}
								if (type == 4)
								{
									damage = (int)((double)damage * 0.95);
								}
								if (type == 309)
								{
									damage = (int)((double)damage * 0.85);
								}
								if (type == 132)
								{
									damage = (int)((double)damage * 0.85);
								}
								if (type == 950)
								{
									damage = (int)((double)damage * 0.98);
								}
								if (type == 477 && penetrate > 1)
								{
									int[] array2 = new int[10];
									int num28 = 0;
									int num29 = 700;
									int num30 = 20;
									for (int l = 0; l < 200; l++)
									{
										if (l == i || !Main.npc[l].CanBeChasedBy(this))
										{
											continue;
										}
										float num31 = (base.Center - Main.npc[l].Center).Length();
										if (num31 > (float)num30 && num31 < (float)num29 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[l].Center, 1, 1))
										{
											array2[num28] = l;
											num28++;
											if (num28 >= 9)
											{
												break;
											}
										}
									}
									if (num28 > 0)
									{
										num28 = Main.rand.Next(num28);
										Vector2 vector6 = Main.npc[array2[num28]].Center - base.Center;
										float num32 = velocity.Length();
										vector6.Normalize();
										velocity = vector6 * num32;
										netUpdate = true;
									}
								}
								if (type == 261 && velocity.Length() < 3.5f)
								{
									num18 /= 2;
									num7 /= 2f;
								}
								if (flag7 && melee && Main.player[owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[type])
								{
									num18 *= 5;
									Main.player[owner].parryDamageBuff = false;
									Main.player[owner].ClearBuff(198);
								}
								StatusNPC(i);
								if (flag7 && nPC.life > 5)
								{
									TryDoingOnHitEffects(nPC);
								}
								if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[type])
								{
									nPC.UpdateNPC_BuffSetFlags(lowerBuffTime: false);
								}
								if (type == 317)
								{
									ai[1] = -1f;
									netUpdate = true;
								}
								int num33 = direction;
								switch (type)
								{
								case 697:
								case 699:
								case 707:
								case 708:
								case 759:
									num33 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
									break;
								}
								if (aiStyle == 15)
								{
									num33 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
									if (ai[0] == 0f)
									{
										num7 *= 0.25f;
									}
									if (ai[0] == 6f)
									{
										num7 *= 0.5f;
									}
								}
								if (flag7 && !hostile && num8 > 0)
								{
									num18 += nPC.checkArmorPenetration(num8);
								}
								int num34 = ((!flag7) ? ((int)nPC.StrikeNPCNoInteraction(num18, num7, num33, flag6)) : ((int)nPC.StrikeNPC(num18, num7, num33, flag6)));
								if (flag7 && Main.player[owner].accDreamCatcher)
								{
									Main.player[owner].addDPS(num34);
								}
								if (flag7 && !nPC.immortal)
								{
									if (type == 756)
									{
										if (penetrate == 1)
										{
											damage = 0;
											penetrate = -1;
										}
										else
										{
											damage = (int)((double)damage * 0.7);
										}
									}
									if (type == 304 && num34 > 0 && nPC.lifeMax > 5 && !Main.player[owner].moonLeech)
									{
										vampireHeal(num34, new Vector2(nPC.Center.X, nPC.Center.Y));
									}
									if (nPC.value > 0f && Main.player[owner].hasLuckyCoin && Main.rand.Next(5) == 0)
									{
										int num35 = 71;
										if (Main.rand.Next(10) == 0)
										{
											num35 = 72;
										}
										if (Main.rand.Next(100) == 0)
										{
											num35 = 73;
										}
										int num36 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num35);
										Main.item[num36].stack = Main.rand.Next(1, 11);
										Main.item[num36].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
										Main.item[num36].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num33;
										Main.item[num36].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
										if (Main.netMode == 1)
										{
											NetMessage.SendData(21, -1, -1, null, num36);
										}
									}
									if (num34 > 0 && nPC.lifeMax > 5 && friendly && !hostile && aiStyle != 59)
									{
										if (nPC.canGhostHeal)
										{
											if (Main.player[owner].ghostHeal && !Main.player[owner].moonLeech)
											{
												ghostHeal(num34, new Vector2(nPC.Center.X, nPC.Center.Y));
											}
											if (Main.player[owner].ghostHurt)
											{
												ghostHurt(num34, new Vector2(nPC.Center.X, nPC.Center.Y));
											}
											if (magic && Main.player[owner].setNebula && Main.player[owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
											{
												Main.player[owner].nebulaCD = 30;
												int num37 = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
												int num38 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num37);
												Main.item[num38].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
												Main.item[num38].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num33;
												if (Main.netMode == 1)
												{
													NetMessage.SendData(21, -1, -1, null, num38);
												}
											}
										}
										if (melee && Main.player[owner].beetleOffense && !nPC.immortal)
										{
											if (Main.player[owner].beetleOrbs == 0)
											{
												Main.player[owner].beetleCounter += num34 * 3;
											}
											else if (Main.player[owner].beetleOrbs == 1)
											{
												Main.player[owner].beetleCounter += num34 * 2;
											}
											else
											{
												Main.player[owner].beetleCounter += num34;
											}
											Main.player[owner].beetleCountdown = 0;
										}
										if (arrow && type != 631 && Main.player[owner].phantasmTime > 0)
										{
											Vector2 source = Main.player[owner].position + Main.player[owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
											Vector2 vector7 = nPC.DirectionFrom(source) * 6f;
											int num39 = (int)((float)damage * 0.3f);
											NewProjectile(source.X, source.Y, vector7.X, vector7.Y, 631, num39, 0f, owner, i);
											NewProjectile(source.X, source.Y, vector7.X, vector7.Y, 631, num39, 0f, owner, i, 15f);
											NewProjectile(source.X, source.Y, vector7.X, vector7.Y, 631, num39, 0f, owner, i, 30f);
										}
										Player player = Main.player[owner];
										switch (type)
										{
										case 914:
											player.AddBuff(314, 180);
											break;
										case 847:
											player.AddBuff(308, 180);
											break;
										case 849:
											player.AddBuff(311, 180);
											break;
										case 912:
										{
											int num40 = 10;
											if (!player.coolWhipBuff)
											{
												NewProjectile(nPC.Center, Vector2.Zero, 917, num40, 0f, owner);
												player.coolWhipBuff = true;
											}
											player.AddBuff(312, 180);
											break;
										}
										}
									}
								}
								if (flag7 && (melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
								{
									NewProjectile(nPC.Center.X, nPC.Center.Y, nPC.velocity.X, nPC.velocity.Y, 289, 0, 0f, owner);
								}
								if (flag7 && type == 913)
								{
									localAI[0] = 1f;
								}
								if (Main.netMode != 0)
								{
									if (flag6)
									{
										NetMessage.SendData(28, -1, -1, null, i, num18, knockBack, num33, 1);
									}
									else
									{
										NetMessage.SendData(28, -1, -1, null, i, num18, knockBack, num33);
									}
								}
								if (type == 916)
								{
									EmitBlackLightningParticles(nPC);
								}
								if (type >= 390 && type <= 392)
								{
									localAI[1] = 20f;
								}
								if (usesIDStaticNPCImmunity)
								{
									nPC.immune[owner] = 0;
									perIDStaticNPCImmunity[type][i] = Main.GameUpdateCount + (uint)idStaticNPCHitCooldown;
								}
								else if (type == 434)
								{
									numUpdates = 0;
								}
								else if (type == 598 || type == 636 || type == 614)
								{
									int num41 = 6;
									if (type == 614)
									{
										num41 = 10;
									}
									if (type == 636)
									{
										num41 = 8;
									}
									Point[] array3 = new Point[num41];
									int num42 = 0;
									for (int m = 0; m < 1000; m++)
									{
										if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type == type && Main.projectile[m].ai[0] == 1f && Main.projectile[m].ai[1] == (float)i)
										{
											array3[num42++] = new Point(m, Main.projectile[m].timeLeft);
											if (num42 >= array3.Length)
											{
												break;
											}
										}
									}
									if (num42 >= array3.Length)
									{
										int num43 = 0;
										for (int n = 1; n < array3.Length; n++)
										{
											if (array3[n].Y < array3[num43].Y)
											{
												num43 = n;
											}
										}
										Main.projectile[array3[num43].X].Kill();
									}
								}
								else if (type == 632)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 514)
								{
									nPC.immune[owner] = 1;
								}
								else if (type == 611)
								{
									if (localAI[1] <= 0f)
									{
										NewProjectile(nPC.Center.X, nPC.Center.Y, 0f, 0f, 612, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
									}
									localAI[1] = 4f;
								}
								else if (type == 595 || type == 735)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 927)
								{
									nPC.immune[owner] = 4;
								}
								else if (type == 286)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 443)
								{
									nPC.immune[owner] = 8;
								}
								else if (type >= 424 && type <= 426)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 634 || type == 635)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 659)
								{
									nPC.immune[owner] = 5;
								}
								else if (type == 246)
								{
									nPC.immune[owner] = 7;
								}
								else if (type == 249)
								{
									nPC.immune[owner] = 7;
								}
								else if (type == 16)
								{
									nPC.immune[owner] = 8;
								}
								else if (type == 409)
								{
									nPC.immune[owner] = 6;
								}
								else if (type == 407)
								{
									nPC.immune[owner] = 20;
								}
								else if (type == 311)
								{
									nPC.immune[owner] = 7;
								}
								else if (type == 582 || type == 902)
								{
									nPC.immune[owner] = 7;
									if (ai[0] != 1f)
									{
										ai[0] = 1f;
										netUpdate = true;
									}
								}
								else
								{
									if (type == 451)
									{
										if (ai[0] == 0f)
										{
											ai[0] += penetrate;
										}
										else
										{
											ai[0] -= penetrate + 1;
										}
										ai[1] = 0f;
										netUpdate = true;
										Main.npc[i].position -= Main.npc[i].netOffset;
										break;
									}
									if (type == 864)
									{
										array[i] = 10;
										nPC.immune[owner] = 0;
										if (ai[0] > 0f)
										{
											ai[0] = -1f;
											ai[1] = 0f;
											netUpdate = true;
										}
									}
									else if (type == 661 || type == 856)
									{
										array[i] = 8;
										nPC.immune[owner] = 0;
									}
									else if (type == 866)
									{
										array[i] = -1;
										nPC.immune[owner] = 0;
										penetrate--;
										if (penetrate == 0)
										{
											penetrate = 1;
											damage = 0;
											ai[1] = -1f;
											netUpdate = true;
											Main.npc[i].position -= Main.npc[i].netOffset;
											break;
										}
										if (owner == Main.myPlayer)
										{
											int num44 = FindTargetWithLineOfSight();
											float num45 = ai[1];
											ai[1] = num44;
											if (ai[1] != num45)
											{
												netUpdate = true;
											}
											if (num44 != -1)
											{
												velocity = velocity.Length() * DirectionTo(Main.npc[num44].Center);
											}
										}
									}
									else if (usesLocalNPCImmunity && localNPCHitCooldown != -2)
									{
										nPC.immune[owner] = 0;
										array[i] = localNPCHitCooldown;
									}
									else if (penetrate != 1)
									{
										nPC.immune[owner] = 10;
									}
								}
								if (type == 710)
								{
									BetsySharpnel(i);
								}
								if (penetrate > 0 && type != 317 && type != 866)
								{
									if (type == 357)
									{
										damage = (int)((double)damage * 0.8);
									}
									penetrate--;
									if (penetrate == 0)
									{
										Main.npc[i].position -= Main.npc[i].netOffset;
										break;
									}
								}
								if (aiStyle == 7)
								{
									ai[0] = 1f;
									damage = 0;
									netUpdate = true;
								}
								else if (aiStyle == 13)
								{
									ai[0] = 1f;
									netUpdate = true;
								}
								else if (aiStyle == 69)
								{
									ai[0] = 1f;
									netUpdate = true;
								}
								else if (type == 607)
								{
									ai[0] = 1f;
									netUpdate = true;
									friendly = false;
								}
								else if (type == 638 || type == 639 || type == 640)
								{
									array[i] = -1;
									nPC.immune[owner] = 0;
									damage = (int)((double)damage * 0.96);
								}
								else if (type == 617)
								{
									array[i] = 8;
									nPC.immune[owner] = 0;
								}
								else if (type == 656)
								{
									array[i] = 8;
									nPC.immune[owner] = 0;
									localAI[0] += 1f;
								}
								else if (type == 618)
								{
									array[i] = 20;
									nPC.immune[owner] = 0;
								}
								else if (type == 642)
								{
									array[i] = 10;
									nPC.immune[owner] = 0;
								}
								else if (type == 857)
								{
									array[i] = 10;
									nPC.immune[owner] = 0;
								}
								else if (type == 611 || type == 612)
								{
									array[i] = 6;
									nPC.immune[owner] = 4;
								}
								else if (type == 645)
								{
									array[i] = -1;
									nPC.immune[owner] = 0;
									if (ai[1] != -1f)
									{
										ai[0] = 0f;
										ai[1] = -1f;
										netUpdate = true;
									}
								}
								numHits++;
								if (type == 697)
								{
									if (ai[0] >= 42f)
									{
										localAI[1] = 1f;
									}
								}
								else if (type == 699)
								{
									SummonMonkGhast();
								}
								else if (type == 706)
								{
									damage = (int)((float)damage * 0.95f);
								}
								else if (type == 728)
								{
									SummonSuperStarSlash(nPC.Center);
								}
								else if (type == 34)
								{
									if (ai[0] == -1f)
									{
										ai[1] = -1f;
										netUpdate = true;
									}
								}
								else if (type == 79)
								{
									if (ai[0] == -1f)
									{
										ai[1] = -1f;
										netUpdate = true;
									}
									settings = new ParticleOrchestraSettings
									{
										PositionInWorld = nPC.Center,
										MovementVector = velocity
									};
									ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
								}
								else if (type == 931)
								{
									int num46 = FindTargetWithLineOfSight();
									if (num46 != -1)
									{
										ai[0] = num46;
										netUpdate = true;
									}
								}
								else if (aiStyle == 165)
								{
									if (nPC.active)
									{
										Main.player[owner].MinionAttackTargetNPC = i;
									}
								}
								else if (type == 623)
								{
									settings = new ParticleOrchestraSettings
									{
										PositionInWorld = Vector2.Lerp(base.Center, nPC.Hitbox.ClosestPointInRect(base.Center), 0.5f) + new Vector2(0f, Main.rand.NextFloatDirection() * 10f),
										MovementVector = new Vector2(direction, Main.rand.NextFloatDirection() * 0.5f) * (3f + 3f * Main.rand.NextFloat())
									};
									ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.StardustPunch, settings);
								}
							}
						}
					}
					Main.npc[i].position -= Main.npc[i].netOffset;
				}
			}
			if (damage > 0 && Main.player[Main.myPlayer].hostile)
			{
				for (int num47 = 0; num47 < 255; num47++)
				{
					if (num47 == owner)
					{
						continue;
					}
					Player player2 = Main.player[num47];
					if (!player2.active || player2.dead || player2.immune || !player2.hostile || playerImmune[num47] > 0 || (Main.player[Main.myPlayer].team != 0 && Main.player[Main.myPlayer].team == player2.team))
					{
						continue;
					}
					bool flag16 = !ownerHitCheck;
					if (ownerHitCheck)
					{
						flag16 |= CanHitWithMeleeWeapon(player2);
					}
					if (!flag16 || !Colliding(myRect, player2.getRect()))
					{
						continue;
					}
					if (aiStyle == 3)
					{
						if (ai[0] == 0f)
						{
							velocity.X = 0f - velocity.X;
							velocity.Y = 0f - velocity.Y;
							netUpdate = true;
						}
						ai[0] = 1f;
					}
					else if (aiStyle == 16)
					{
						if (timeLeft > 3)
						{
							timeLeft = 3;
						}
						if (player2.position.X + (float)(player2.width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					else if (aiStyle == 68)
					{
						if (timeLeft > 3)
						{
							timeLeft = 3;
						}
						if (player2.position.X + (float)(player2.width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else
						{
							direction = 1;
						}
					}
					PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(owner, whoAmI);
					if (type == 41 && timeLeft > 1)
					{
						timeLeft = 1;
					}
					bool flag17 = false;
					if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
					{
						flag17 = true;
					}
					int num48 = Main.DamageVar((int)((float)damage * num5), Main.player[owner].luck);
					if (!player2.immune)
					{
						StatusPvP(num47);
					}
					TryDoingOnHitEffects(player2);
					int num49 = (int)player2.Hurt(playerDeathReason, num48, direction, pvp: true, quiet: false, flag17);
					if (num49 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
					{
						ghostHeal(num49, new Vector2(player2.Center.X, player2.Center.Y));
					}
					if (type == 304 && num49 > 0)
					{
						vampireHeal(num49, new Vector2(player2.Center.X, player2.Center.Y));
					}
					if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
					{
						NewProjectile(player2.Center.X, player2.Center.Y, player2.velocity.X, player2.velocity.Y, 289, 0, 0f, owner);
					}
					if (Main.netMode != 0)
					{
						NetMessage.SendPlayerHurt(num47, playerDeathReason, num48, direction, flag17, pvp: true, -1);
					}
					playerImmune[num47] = 40;
					if (penetrate > 0)
					{
						penetrate--;
						if (penetrate == 0)
						{
							break;
						}
					}
					if (aiStyle == 7)
					{
						ai[0] = 1f;
						damage = 0;
						netUpdate = true;
					}
					else if (aiStyle == 13)
					{
						ai[0] = 1f;
						netUpdate = true;
					}
					else if (aiStyle == 69)
					{
						ai[0] = 1f;
						netUpdate = true;
					}
				}
			}
		}
		if (type == 10 && Main.netMode != 1)
		{
			for (int num50 = 0; num50 < 200; num50++)
			{
				if (Main.npc[num50].active && Main.npc[num50].type == 534)
				{
					Rectangle value3 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
					if (myRect.Intersects(value3))
					{
						Main.npc[num50].Transform(441);
					}
				}
			}
		}
		if (type == 11 && Main.netMode != 1)
		{
			for (int num51 = 0; num51 < 200; num51++)
			{
				if (!Main.npc[num51].active)
				{
					continue;
				}
				if (Main.npc[num51].type == 46 || Main.npc[num51].type == 303)
				{
					Rectangle value4 = new Rectangle((int)Main.npc[num51].position.X, (int)Main.npc[num51].position.Y, Main.npc[num51].width, Main.npc[num51].height);
					if (myRect.Intersects(value4))
					{
						Main.npc[num51].Transform(47);
					}
				}
				else if (Main.npc[num51].type == 55)
				{
					Rectangle value5 = new Rectangle((int)Main.npc[num51].position.X, (int)Main.npc[num51].position.Y, Main.npc[num51].width, Main.npc[num51].height);
					if (myRect.Intersects(value5))
					{
						Main.npc[num51].Transform(57);
					}
				}
				else if (Main.npc[num51].type == 148 || Main.npc[num51].type == 149)
				{
					Rectangle value6 = new Rectangle((int)Main.npc[num51].position.X, (int)Main.npc[num51].position.Y, Main.npc[num51].width, Main.npc[num51].height);
					if (myRect.Intersects(value6))
					{
						Main.npc[num51].Transform(168);
					}
				}
			}
		}
		if (type == 463 && Main.netMode != 1)
		{
			for (int num52 = 0; num52 < 200; num52++)
			{
				if (!Main.npc[num52].active)
				{
					continue;
				}
				if (Main.npc[num52].type == 46 || Main.npc[num52].type == 303)
				{
					Rectangle value7 = new Rectangle((int)Main.npc[num52].position.X, (int)Main.npc[num52].position.Y, Main.npc[num52].width, Main.npc[num52].height);
					if (myRect.Intersects(value7))
					{
						Main.npc[num52].Transform(464);
					}
				}
				else if (Main.npc[num52].type == 55)
				{
					Rectangle value8 = new Rectangle((int)Main.npc[num52].position.X, (int)Main.npc[num52].position.Y, Main.npc[num52].width, Main.npc[num52].height);
					if (myRect.Intersects(value8))
					{
						Main.npc[num52].Transform(465);
					}
				}
				else if (Main.npc[num52].type == 148 || Main.npc[num52].type == 149)
				{
					Rectangle value9 = new Rectangle((int)Main.npc[num52].position.X, (int)Main.npc[num52].position.Y, Main.npc[num52].width, Main.npc[num52].height);
					if (myRect.Intersects(value9))
					{
						Main.npc[num52].Transform(470);
					}
				}
			}
		}
		if (Main.netMode == 2 || !hostile || Main.myPlayer >= 255 || damage <= 0)
		{
			return;
		}
		int num53 = -1;
		switch (type)
		{
		case 452:
		case 454:
		case 455:
		case 462:
			num53 = 1;
			break;
		case 871:
		case 872:
		case 873:
		case 874:
		case 919:
		case 923:
		case 924:
			num53 = 1;
			break;
		}
		int myPlayer2 = Main.myPlayer;
		bool flag18 = Main.player[myPlayer2].active && !Main.player[myPlayer2].dead && (!Main.player[myPlayer2].immune || num53 != -1);
		if (flag18 && type == 281)
		{
			flag18 = ai[1] - 1f == (float)myPlayer2;
		}
		if (Main.getGoodWorld && type == 281)
		{
			flag18 = true;
		}
		if (!flag18 || !Colliding(myRect, Main.player[myPlayer2].getRect()))
		{
			return;
		}
		int num54 = direction;
		num54 = ((!(Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < position.X + (float)(width / 2))) ? 1 : (-1));
		if (!Main.player[myPlayer2].CanParryAgainst(Main.player[myPlayer2].Hitbox, base.Hitbox, velocity))
		{
			int num55 = Main.DamageVar(damage, 0f - Main.player[owner].luck);
			if (Main.player[myPlayer2].resistCold && coldDamage)
			{
				num55 = (int)((float)num55 * 0.7f);
			}
			float num56 = Main.GameModeInfo.EnemyDamageMultiplier;
			if (Main.GameModeInfo.IsJourneyMode)
			{
				CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
				if (power.GetIsUnlocked())
				{
					num56 = power.StrengthMultiplierToGiveNPCs;
				}
			}
			num55 = (int)((float)num55 * num56);
			int num57 = num55 * 2;
			if (Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, whoAmI), num57, num54, pvp: false, quiet: false, Crit: false, num53) > 0.0 && !Main.player[myPlayer2].dead)
			{
				StatusPlayer(myPlayer2);
			}
			if (trap)
			{
				Main.player[myPlayer2].trapDebuffSource = true;
				if (Main.player[myPlayer2].dead)
				{
					AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
				}
			}
		}
		if (true)
		{
			if (type == 435 || type == 682)
			{
				penetrate--;
			}
			if (type == 436)
			{
				penetrate--;
			}
			if (type == 681)
			{
				timeLeft = 0;
			}
			if (type == 437)
			{
				penetrate--;
			}
		}
	}

	private static void EmitBlackLightningParticles(NPC targetNPC)
	{
		ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings
		{
			PositionInWorld = targetNPC.Center
		});
	}

	private void TryDoingOnHitEffects(Entity entity)
	{
		switch (type)
		{
		case 221:
		case 227:
		case 614:
		case 729:
		case 908:
			return;
		}
		Main.player[owner].OnHit(entity.Center.X, entity.Center.Y, entity);
	}

	private void SummonSuperStarSlash(Vector2 target)
	{
		Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
		if (v.Y < 0f)
		{
			v.Y *= -1f;
		}
		v.Y += 100f;
		Vector2 vector = v.SafeNormalize(Vector2.UnitY) * 6f;
		NewProjectile(target - vector * 20f, vector, 729, damage / 2, 0f, owner, 0f, target.Y);
	}

	private void SummonMonkGhast()
	{
		if (localAI[0] > 0f)
		{
			return;
		}
		localAI[0] = 1000f;
		List<NPC> list = new List<NPC>();
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && Distance(nPC.Center) < 800f)
			{
				list.Add(nPC);
			}
		}
		Vector2 center = base.Center;
		Vector2 zero = Vector2.Zero;
		if (list.Count > 0)
		{
			NPC nPC2 = list[Main.rand.Next(list.Count)];
			center = nPC2.Center;
			zero = nPC2.velocity;
		}
		int num = Main.rand.Next(2) * 2 - 1;
		Vector2 vector = new Vector2((float)num * (4f + (float)Main.rand.Next(3)), 0f);
		Vector2 vector2 = center + new Vector2(-num * 120, 0f);
		vector += (center + zero * 15f - vector2).SafeNormalize(Vector2.Zero) * 2f;
		NewProjectile(vector2, vector, 700, damage, 0f, owner);
	}

	private void CutTiles()
	{
		if (!CanCutTiles())
		{
			return;
		}
		AchievementsHelper.CurrentlyMining = true;
		bool flag = true;
		if (type == 461 || type == 632 || type == 642)
		{
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CutTiles);
		}
		else if (ProjectileID.Sets.IsAWhip[type])
		{
			flag = false;
			_whipPointsForCollision.Clear();
			FillWhipControlPoints(this, _whipPointsForCollision);
			Vector2 vector = new Vector2((float)width * scale / 2f, 0f);
			for (int i = 0; i < _whipPointsForCollision.Count; i++)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(_whipPointsForCollision[i] - vector, _whipPointsForCollision[i] + vector, (float)height * scale, DelegateMethods.CutTiles);
			}
		}
		else if (type == 756)
		{
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 927)
		{
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Vector2 end = base.Center + velocity.SafeNormalize(Vector2.UnitX) * 220f * scale;
			Utils.PlotTileLine(base.Center, end, 80f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
		{
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 10f, 10f * scale, DelegateMethods.CutTiles);
		}
		else if (type == 611)
		{
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Utils.PlotTileLine(base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, (float)width * scale, DelegateMethods.CutTiles);
		}
		else if (type == 697 || type == 707)
		{
			float num = 40f;
			if (type == 707)
			{
				num = 60f;
			}
			float f = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
			DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
			Utils.PlotTileLine(base.Center + f.ToRotationVector2() * (0f - num), base.Center + f.ToRotationVector2() * num, (float)width * scale, DelegateMethods.CutTiles);
		}
		if (flag)
		{
			int num2 = (int)(position.X / 16f);
			int num3 = (int)((position.X + (float)width) / 16f) + 1;
			int num4 = (int)(position.Y / 16f);
			int num5 = (int)((position.Y + (float)height) / 16f) + 1;
			if (num2 < 0)
			{
				num2 = 0;
			}
			if (num3 > Main.maxTilesX)
			{
				num3 = Main.maxTilesX;
			}
			if (num4 < 0)
			{
				num4 = 0;
			}
			if (num5 > Main.maxTilesY)
			{
				num5 = Main.maxTilesY;
			}
			for (int j = num2; j < num3; j++)
			{
				for (int k = num4; k < num5; k++)
				{
					if (Main.tile[j, k] != null && Main.tileCut[Main.tile[j, k].type] && WorldGen.CanCutTile(j, k, TileCuttingContext.AttackProjectile))
					{
						WorldGen.KillTile(j, k);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 0, j, k);
						}
					}
				}
			}
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	private bool CanCutTiles()
	{
		if (aiStyle != 45 && aiStyle != 137 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[type] && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628) && type != 833 && type != 834 && type != 835 && type != 818 && type != 831 && type != 820)
		{
			return type != 864;
		}
		return false;
	}

	public bool Colliding(Rectangle myRect, Rectangle targetRect)
	{
		if (aiStyle == 15)
		{
			if (ai[0] == 0f)
			{
				Vector2 mountedCenter = Main.player[owner].MountedCenter;
				Vector2 vector = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
				vector.Y /= 0.8f;
				float num = 55f;
				return vector.Length() <= num;
			}
		}
		else if (type == 623)
		{
			if (ai[0] == 2f)
			{
				Rectangle value = Utils.CenteredRectangle(base.Center + new Vector2(direction * 40, 0f), new Vector2(80f, 40f));
				if (targetRect.Intersects(value))
				{
					return true;
				}
			}
		}
		else
		{
			if (type == 933)
			{
				float collisionPoint = 0f;
				float num2 = 40f;
				for (int i = 14; i < oldPos.Length; i += 15)
				{
					float num3 = localAI[0] - (float)i;
					if (!(num3 < 0f) && !(num3 > 60f))
					{
						Vector2 vector2 = oldPos[i] + base.Size / 2f;
						Vector2 vector3 = (oldRot[i] + (float)Math.PI / 2f).ToRotationVector2();
						_lanceHitboxBounds.X = (int)vector2.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)vector2.Y - _lanceHitboxBounds.Height / 2;
						if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), vector2 - vector3 * num2, vector2 + vector3 * num2, 20f, ref collisionPoint))
						{
							return true;
						}
					}
				}
				Vector2 vector4 = (rotation + (float)Math.PI / 2f).ToRotationVector2();
				_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
				_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
				if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector4 * num2, base.Center + vector4 * num2, 20f, ref collisionPoint))
				{
					return true;
				}
				return false;
			}
			if (type == 927)
			{
				for (int j = 1; j <= 5; j++)
				{
					Rectangle rectangle = myRect;
					Vector2 vector5 = velocity.SafeNormalize(Vector2.Zero) * width * j;
					rectangle.Offset((int)vector5.X, (int)vector5.Y);
					if (rectangle.Intersects(targetRect))
					{
						return true;
					}
				}
			}
			else
			{
				if (type == 877 || type == 878 || type == 879)
				{
					float f = rotation - (float)Math.PI / 4f - (float)Math.PI / 2f - ((spriteDirection == 1) ? ((float)Math.PI) : 0f);
					float collisionPoint2 = 0f;
					float num4 = 95f;
					_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
					_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
					if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f.ToRotationVector2() * num4, 23f * scale, ref collisionPoint2))
					{
						return true;
					}
					return false;
				}
				if (type == 919 || type == 932)
				{
					float f2 = rotation;
					float collisionPoint3 = 0f;
					float num5 = 40f;
					Vector2 vector6 = f2.ToRotationVector2();
					_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
					_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
					if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector6 * num5, base.Center + vector6 * num5, 8f, ref collisionPoint3))
					{
						return true;
					}
					return false;
				}
				if (type == 923)
				{
					float collisionPoint4 = 0f;
					_ = scale;
					float f3 = rotation;
					Vector2 objectPosition = targetRect.TopLeft();
					Vector2 objectDimensions = targetRect.Size();
					Vector2 vector7 = f3.ToRotationVector2();
					float num6 = scale * 0.7f;
					if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 510f, num6 * 100f, ref collisionPoint4))
					{
						return true;
					}
					if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 660f, num6 * 60f, ref collisionPoint4))
					{
						return true;
					}
					if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 800f, num6 * 10f, ref collisionPoint4))
					{
						return true;
					}
					return false;
				}
				if (type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
				{
					targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
				}
				else
				{
					if (type == 872)
					{
						Rectangle hitbox = base.Hitbox;
						int num7 = 80;
						for (int k = 0; k < num7; k += 2)
						{
							Vector2 vector8 = oldPos[k];
							if (!(vector8 == Vector2.Zero))
							{
								hitbox.X = (int)vector8.X;
								hitbox.Y = (int)vector8.Y;
								if (hitbox.Intersects(targetRect))
								{
									return true;
								}
							}
						}
						return false;
					}
					if (type == 871)
					{
						int num8 = AI_172_GetPelletStormsCount();
						for (int l = 0; l < num8; l++)
						{
							HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(l);
							for (int m = 0; m < hallowBossPelletStormInfo.BulletsInStorm; m++)
							{
								if (hallowBossPelletStormInfo.IsValid(m) && hallowBossPelletStormInfo.GetBulletHitbox(m, base.Center).Intersects(targetRect))
								{
									return true;
								}
							}
						}
						return false;
					}
					if (ProjectileID.Sets.IsAWhip[type])
					{
						_whipPointsForCollision.Clear();
						FillWhipControlPoints(this, _whipPointsForCollision);
						for (int n = 0; n < _whipPointsForCollision.Count; n++)
						{
							Point point = _whipPointsForCollision[n].ToPoint();
							myRect.Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
							if (myRect.Intersects(targetRect))
							{
								return true;
							}
						}
						return false;
					}
					if (type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
					{
						targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
					}
					else if (type == 758)
					{
						if (ai[0] == 2f && Utils.CenteredRectangle(base.Center + new Vector2(spriteDirection * 30, 0f), new Vector2(50f, 20f)).Intersects(targetRect))
						{
							return true;
						}
					}
					else if (type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
					{
						targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
					}
					else if (type == 607)
					{
						myRect.X += (int)velocity.X;
						myRect.Y += (int)velocity.Y;
					}
					else if (type == 661)
					{
						if (Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500f || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
						{
							return false;
						}
					}
					else if (aiStyle == 137)
					{
						if (myRect.Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(height / 2 - 20))
						{
							if (AI_137_CanHit(targetRect.Center.ToVector2()))
							{
								return true;
							}
							if (AI_137_CanHit(targetRect.TopLeft() + new Vector2(targetRect.Width / 2, 0f)))
							{
								return true;
							}
						}
						return false;
					}
				}
			}
		}
		if (myRect.Intersects(targetRect))
		{
			return true;
		}
		if (type == 461)
		{
			float collisionPoint5 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint5))
			{
				return true;
			}
			return false;
		}
		if (type == 697 || type == 707)
		{
			float f4 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
			float collisionPoint6 = 0f;
			float num9 = 50f;
			if (type == 697)
			{
				num9 = 65f;
			}
			if (type == 707)
			{
				num9 = 110f;
			}
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f4.ToRotationVector2() * (0f - num9), base.Center + f4.ToRotationVector2() * num9, 23f * scale, ref collisionPoint6))
			{
				return true;
			}
			return false;
		}
		if (type == 699)
		{
			float f5 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X) + ((spriteDirection == -1) ? ((float)Math.PI) : 0f);
			float collisionPoint7 = 0f;
			float num10 = -95f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f5.ToRotationVector2() * num10, 23f * scale, ref collisionPoint7))
			{
				return true;
			}
			return false;
		}
		if (type == 642)
		{
			float collisionPoint8 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 30f * scale, ref collisionPoint8))
			{
				return true;
			}
			return false;
		}
		if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
		{
			float collisionPoint9 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * 6f, 10f * scale, ref collisionPoint9))
			{
				return true;
			}
			return false;
		}
		if (type == 632)
		{
			float collisionPoint10 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint10))
			{
				return true;
			}
			return false;
		}
		if (type == 455)
		{
			float collisionPoint11 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 36f * scale, ref collisionPoint11))
			{
				return true;
			}
			return false;
		}
		if (type == 611)
		{
			float collisionPoint12 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * scale, ref collisionPoint12))
			{
				return true;
			}
			return false;
		}
		if (type == 684)
		{
			float collisionPoint13 = 0f;
			Vector2 vector9 = velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866) * scale;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector9 * 40f, base.Center + vector9 * 40f, 16f * scale, ref collisionPoint13))
			{
				return true;
			}
			return false;
		}
		if (type == 537)
		{
			float collisionPoint14 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint14))
			{
				return true;
			}
			return false;
		}
		if (type == 756)
		{
			float collisionPoint15 = 0f;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, ref collisionPoint15))
			{
				return true;
			}
			return false;
		}
		if (type == 687)
		{
			float collisionPoint16 = 0f;
			float num11 = ai[0] / 25f;
			if (num11 > 1f)
			{
				num11 = 1f;
			}
			float num12 = (ai[0] - 38f) / 40f;
			if (num12 < 0f)
			{
				num12 = 0f;
			}
			Vector2 lineStart = base.Center + rotation.ToRotationVector2() * 400f * num12;
			Vector2 lineEnd = base.Center + rotation.ToRotationVector2() * 400f * num11;
			if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * scale, ref collisionPoint16))
			{
				return true;
			}
			return false;
		}
		if (type == 466 || type == 580 || type == 686)
		{
			for (int num13 = 0; num13 < oldPos.Length && (oldPos[num13].X != 0f || oldPos[num13].Y != 0f); num13++)
			{
				myRect.X = (int)oldPos[num13].X;
				myRect.Y = (int)oldPos[num13].Y;
				if (myRect.Intersects(targetRect))
				{
					return true;
				}
			}
			return false;
		}
		if (type == 711)
		{
			if (penetrate != -1)
			{
				for (int num14 = 0; num14 < oldPos.Length && (oldPos[num14].X != 0f || oldPos[num14].Y != 0f); num14++)
				{
					myRect.X = (int)oldPos[num14].X;
					myRect.Y = (int)oldPos[num14].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
				}
			}
		}
		else if (type == 464 && ai[1] != 1f)
		{
			Vector2 vector10 = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
			float num15 = ai[0] % 45f / 45f;
			Vector2 spinningpoint = vector10 * num15;
			for (int num16 = 0; num16 < 6; num16++)
			{
				float num17 = (float)num16 * ((float)Math.PI * 2f) / 6f;
				if (Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy(num17), new Vector2(30f, 30f)).Intersects(targetRect))
				{
					return true;
				}
			}
		}
		return false;
	}

	public void ProjLight()
	{
		if (!(light > 0f))
		{
			return;
		}
		float num = light;
		float num2 = light;
		float num3 = light;
		if (type == 446)
		{
			num *= 0f;
			num3 *= 0.8f;
		}
		else if (type == 493 || type == 494)
		{
			num2 *= 0.3f;
		}
		else if (type == 876)
		{
			num *= 0.1f;
			num2 *= 0.7f;
			num3 *= 1f;
		}
		else if (type == 867)
		{
			float num4 = (float)Main.rand.Next(28, 42) * 0.005f;
			num4 += (float)(270 - Main.mouseTextColor) / 500f;
			num = 0.1f;
			num2 = 0.3f + num4 / 2f;
			num3 = 0.6f + num4;
		}
		else if (type == 332)
		{
			num3 *= 0.1f;
			num2 *= 0.6f;
		}
		else if (type == 259)
		{
			num3 *= 0.1f;
		}
		else if (type == 329)
		{
			num3 *= 0.1f;
			num2 *= 0.9f;
		}
		else if (type == 2 || type == 82)
		{
			num2 *= 0.75f;
			num3 *= 0.55f;
		}
		else if (type == 172)
		{
			num2 *= 0.55f;
			num *= 0.35f;
		}
		else if (type == 308)
		{
			num2 *= 0.7f;
			num *= 0.1f;
		}
		else if (type == 304)
		{
			num2 *= 0.2f;
			num3 *= 0.1f;
		}
		else if (type == 263)
		{
			num2 *= 0.7f;
			num *= 0.1f;
		}
		else if (type == 274)
		{
			num2 *= 0.1f;
			num *= 0.7f;
		}
		else if (type == 254)
		{
			num *= 0.1f;
		}
		else if (type == 94)
		{
			num *= 0.5f;
			num2 *= 0f;
		}
		else if (type == 95 || type == 96 || type == 103 || type == 104)
		{
			num *= 0.35f;
			num2 *= 1f;
			num3 *= 0f;
		}
		else if (type == 4)
		{
			num2 *= 0.1f;
			num *= 0.5f;
		}
		else if (type == 257)
		{
			num2 *= 0.9f;
			num *= 0.1f;
		}
		else if (type == 9)
		{
			num2 *= 0.1f;
			num3 *= 0.6f;
		}
		else if (type == 488)
		{
			num = 0.3f;
			num3 = 0.25f;
			num2 = 0f;
		}
		else if (type == 92)
		{
			num2 *= 0.6f;
			num *= 0.8f;
		}
		else if (type == 93)
		{
			num2 *= 1f;
			num *= 1f;
			num3 *= 0.01f;
		}
		else if (type == 12)
		{
			num *= 0.9f;
			num2 *= 0.8f;
			num3 *= 0.1f;
		}
		else if (type == 14 || type == 110 || type == 180 || type == 242 || type == 302)
		{
			num2 *= 0.7f;
			num3 *= 0.1f;
		}
		else if (type == 15)
		{
			num2 *= 0.4f;
			num3 *= 0.1f;
			num = 1f;
		}
		else if (type == 16)
		{
			num *= 0.1f;
			num2 *= 0.4f;
			num3 = 1f;
		}
		else if (type == 18)
		{
			num2 *= 0.1f;
			num *= 0.6f;
		}
		else if (type == 19)
		{
			num2 *= 0.5f;
			num3 *= 0.1f;
		}
		else if (type == 20)
		{
			num *= 0.1f;
			num3 *= 0.3f;
		}
		else if (type == 22)
		{
			num = 0f;
			num2 = 0f;
		}
		else if (type == 27)
		{
			num *= 0f;
			num2 *= 0.3f;
			num3 = 1f;
		}
		else if (type == 34)
		{
			num2 *= 0.1f;
			num3 *= 0.1f;
		}
		else if (type == 36)
		{
			num = 0.8f;
			num2 *= 0.2f;
			num3 *= 0.6f;
		}
		else if (type == 41)
		{
			num2 *= 0.8f;
			num3 *= 0.6f;
		}
		else if (type == 44 || type == 45)
		{
			num3 = 1f;
			num *= 0.6f;
			num2 *= 0.1f;
		}
		else if (type == 50)
		{
			num *= 0.7f;
			num3 *= 0.8f;
		}
		else if (type == 515)
		{
			num2 *= 0.6f;
			num3 *= 0.85f;
		}
		else if (type == 870)
		{
			num *= 0.7f;
			num2 = 0f;
		}
		else if (type == 53)
		{
			num *= 0.7f;
			num2 *= 0.8f;
		}
		else if (type == 473)
		{
			num *= 1.05f;
			num2 *= 0.95f;
			num3 *= 0.55f;
		}
		else if (type == 72)
		{
			num *= 0.45f;
			num2 *= 0.75f;
			num3 = 1f;
		}
		else if (type == 86)
		{
			num *= 1f;
			num2 *= 0.45f;
			num3 = 0.75f;
		}
		else if (type == 87)
		{
			num *= 0.45f;
			num2 = 1f;
			num3 *= 0.75f;
		}
		else if (type == 73)
		{
			num *= 0.4f;
			num2 *= 0.6f;
			num3 *= 1f;
		}
		else if (type == 74)
		{
			num *= 1f;
			num2 *= 0.4f;
			num3 *= 0.6f;
		}
		else if (type == 284)
		{
			num *= 1f;
			num2 *= 0.1f;
			num3 *= 0.8f;
		}
		else if (type == 285)
		{
			num *= 0.1f;
			num2 *= 0.5f;
			num3 *= 1f;
		}
		else if (type == 286)
		{
			num *= 1f;
			num2 *= 0.5f;
			num3 *= 0.1f;
		}
		else if (type == 287)
		{
			num *= 0.9f;
			num2 *= 1f;
			num3 *= 0.4f;
		}
		else if (type == 283)
		{
			num *= 0.8f;
			num2 *= 0.1f;
		}
		else if (type == 76 || type == 77 || type == 78)
		{
			num *= 1f;
			num2 *= 0.3f;
			num3 *= 0.6f;
		}
		else if (type == 79)
		{
			num = (float)Main.DiscoR / 255f;
			num2 = (float)Main.DiscoG / 255f;
			num3 = (float)Main.DiscoB / 255f;
		}
		else if (type == 80)
		{
			num *= 0f;
			num2 *= 0.8f;
			num3 *= 1f;
		}
		else if (type == 83 || type == 88)
		{
			num *= 0.7f;
			num2 *= 0f;
			num3 *= 1f;
		}
		else if (type == 100)
		{
			num *= 1f;
			num2 *= 0.5f;
			num3 *= 0f;
		}
		else if (type == 84 || type == 389)
		{
			num *= 0.8f;
			num2 *= 0f;
			num3 *= 0.5f;
		}
		else if (type == 89 || type == 90)
		{
			num2 *= 0.2f;
			num3 *= 1f;
			num *= 0.05f;
		}
		else if (type == 106)
		{
			num *= 0f;
			num2 *= 0.5f;
			num3 *= 1f;
		}
		else if (type == 113)
		{
			num *= 0.25f;
			num2 *= 0.75f;
			num3 *= 1f;
		}
		else if (type == 114 || type == 115)
		{
			num *= 0.5f;
			num2 *= 0.05f;
			num3 *= 1f;
		}
		else if (type == 116)
		{
			num3 *= 0.25f;
		}
		else if (type == 131)
		{
			num *= 0.1f;
			num2 *= 0.4f;
		}
		else if (type == 132 || type == 157)
		{
			num *= 0.2f;
			num3 *= 0.6f;
		}
		else if (type == 156)
		{
			num *= 1f;
			num3 *= 0.6f;
			num2 = 0f;
		}
		else if (type == 173)
		{
			num *= 0.3f;
			num3 *= 1f;
			num2 = 0.4f;
		}
		else if (type == 207)
		{
			num *= 0.4f;
			num3 *= 0.4f;
		}
		else if (type == 253)
		{
			num = 0f;
			num2 *= 0.4f;
		}
		else if (type == 211)
		{
			num *= 0.5f;
			num2 *= 0.9f;
			num3 *= 1f;
			if (localAI[0] == 0f)
			{
				light = 1.5f;
			}
			else
			{
				light = 1f;
			}
		}
		else if (type == 209)
		{
			float num5 = (255f - (float)alpha) / 255f;
			num *= 0.3f;
			num2 *= 0.4f;
			num3 *= 1.75f;
			num3 *= num5;
			num *= num5;
			num2 *= num5;
		}
		else if (type == 226 || ((type == 227) | (type == 229)))
		{
			num *= 0.25f;
			num2 *= 1f;
			num3 *= 0.5f;
		}
		else if (type == 251)
		{
			num = (float)Main.DiscoR / 255f;
			num2 = (float)Main.DiscoG / 255f;
			num3 = (float)Main.DiscoB / 255f;
			num = (num + 1f) / 2f;
			num2 = (num2 + 1f) / 2f;
			num3 = (num3 + 1f) / 2f;
			num *= light;
			num2 *= light;
			num3 *= light;
		}
		else if (type == 278 || type == 279)
		{
			num *= 1f;
			num2 *= 1f;
			num3 *= 0f;
		}
		Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num, num2, num3);
	}

	public Rectangle getRect()
	{
		return new Rectangle((int)position.X, (int)position.Y, width, height);
	}

	public void Update(int i)
	{
		if (!active)
		{
			return;
		}
		if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[type] || type == 820))
		{
			int num = (int)(position.X + (float)(width / 2)) / 16;
			int num2 = (int)(position.Y + (float)(height / 2)) / 16;
			if (Main.tile[num, num2] == null)
			{
				return;
			}
		}
		numUpdates = extraUpdates;
		while (numUpdates >= 0)
		{
			numUpdates--;
			if (type == 640 && ai[1] > 0f)
			{
				ai[1] -= 1f;
				continue;
			}
			if (position.X <= Main.leftWorld || position.X + (float)width >= Main.rightWorld || position.Y <= Main.topWorld || position.Y + (float)height >= Main.bottomWorld)
			{
				active = false;
				return;
			}
			if (!noEnchantmentVisuals)
			{
				UpdateEnchantmentVisuals();
			}
			if (numUpdates == -1 && (minion || sentry))
			{
				Player player = Main.player[owner];
				damage = (int)((float)originalDamage * player.minionDamage);
			}
			if (minion && numUpdates == -1 && type != 625 && type != 628)
			{
				minionPos = Main.player[owner].numMinions;
				if (Main.player[owner].slotsMinions + minionSlots > (float)Main.player[owner].maxMinions && owner == Main.myPlayer)
				{
					if ((type == 627 || type == 626) && owner == Main.myPlayer)
					{
						int byUUID = GetByUUID(owner, ai[0]);
						if (byUUID != -1)
						{
							Projectile projectile = Main.projectile[byUUID];
							if (projectile.type != 625)
							{
								projectile.localAI[1] = localAI[1];
							}
							projectile = Main.projectile[(int)localAI[1]];
							projectile.ai[0] = ai[0];
							projectile.ai[1] = 1f;
							projectile.netUpdate = true;
						}
					}
					Kill();
				}
				else
				{
					Main.player[owner].numMinions++;
					Main.player[owner].slotsMinions += minionSlots;
				}
			}
			float num3 = 1f + Math.Abs(velocity.X) / 3f;
			if (gfxOffY > 0f)
			{
				gfxOffY -= num3 * stepSpeed;
				if (gfxOffY < 0f)
				{
					gfxOffY = 0f;
				}
			}
			else if (gfxOffY < 0f)
			{
				gfxOffY += num3 * stepSpeed;
				if (gfxOffY > 0f)
				{
					gfxOffY = 0f;
				}
			}
			if (gfxOffY > 16f)
			{
				gfxOffY = 16f;
			}
			if (gfxOffY < -16f)
			{
				gfxOffY = -16f;
			}
			Vector2 wetVelocity = velocity;
			oldVelocity = velocity;
			whoAmI = i;
			if (soundDelay > 0)
			{
				soundDelay--;
			}
			netUpdate = false;
			for (int j = 0; j < 255; j++)
			{
				if (playerImmune[j] > 0)
				{
					playerImmune[j]--;
				}
			}
			if (usesLocalNPCImmunity)
			{
				for (int k = 0; k < 200; k++)
				{
					if (localNPCImmunity[k] > 0)
					{
						localNPCImmunity[k]--;
					}
				}
			}
			AI();
			if (ShouldUseWindPhysics() && (double)base.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16] != null && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall == 0 && ((velocity.X > 0f && Main.windSpeedCurrent < 0f) || (velocity.X < 0f && Main.windSpeedCurrent > 0f) || Math.Abs(velocity.X) < Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180f) && Math.Abs(velocity.X) < 16f)
			{
				velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
				MathHelper.Clamp(velocity.X, -16f, 16f);
			}
			if (owner < 255 && !Main.player[owner].active)
			{
				Kill();
			}
			if (type == 242 || type == 302 || type == 638)
			{
				wet = false;
			}
			if (!ignoreWater)
			{
				bool flag;
				bool flag2;
				try
				{
					flag = Collision.LavaCollision(position, width, height);
					flag2 = Collision.WetCollision(position, width, height);
					if (flag)
					{
						lavaWet = true;
					}
					if (Collision.honey)
					{
						honeyWet = true;
					}
				}
				catch
				{
					active = false;
					return;
				}
				if (wet && !lavaWet)
				{
					if (type == 85 || type == 15 || type == 188)
					{
						Kill();
					}
					if (type == 2)
					{
						type = 1;
						light = 0f;
					}
				}
				if (type == 34)
				{
					if (wet && !lavaWet)
					{
						Kill();
					}
					if (lavaWet)
					{
						flag2 = (wet = (lavaWet = false));
					}
				}
				if (type == 80)
				{
					flag2 = false;
					wet = false;
					if (flag && ai[0] >= 0f)
					{
						Kill();
					}
				}
				if (flag2)
				{
					if (type != 155 && wetCount == 0 && !wet)
					{
						if (!flag)
						{
							if (honeyWet)
							{
								for (int l = 0; l < 10; l++)
								{
									int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
									Main.dust[num4].velocity.Y -= 1f;
									Main.dust[num4].velocity.X *= 2.5f;
									Main.dust[num4].scale = 1.3f;
									Main.dust[num4].alpha = 100;
									Main.dust[num4].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
							else
							{
								for (int m = 0; m < 10; m++)
								{
									int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
									Main.dust[num5].velocity.Y -= 4f;
									Main.dust[num5].velocity.X *= 2.5f;
									Main.dust[num5].scale = 1.3f;
									Main.dust[num5].alpha = 100;
									Main.dust[num5].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else
						{
							for (int n = 0; n < 10; n++)
							{
								int num6 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
								Main.dust[num6].velocity.Y -= 1.5f;
								Main.dust[num6].velocity.X *= 2.5f;
								Main.dust[num6].scale = 1.3f;
								Main.dust[num6].alpha = 100;
								Main.dust[num6].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
					wet = true;
				}
				else if (wet)
				{
					wet = false;
					if (type == 155)
					{
						velocity.Y *= 0.5f;
					}
					else if (wetCount == 0)
					{
						wetCount = 10;
						if (!lavaWet)
						{
							if (honeyWet)
							{
								for (int num7 = 0; num7 < 10; num7++)
								{
									int num8 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
									Main.dust[num8].velocity.Y -= 1f;
									Main.dust[num8].velocity.X *= 2.5f;
									Main.dust[num8].scale = 1.3f;
									Main.dust[num8].alpha = 100;
									Main.dust[num8].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
							else
							{
								for (int num9 = 0; num9 < 10; num9++)
								{
									int num10 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, Dust.dustWater());
									Main.dust[num10].velocity.Y -= 4f;
									Main.dust[num10].velocity.X *= 2.5f;
									Main.dust[num10].scale = 1.3f;
									Main.dust[num10].alpha = 100;
									Main.dust[num10].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						else
						{
							for (int num11 = 0; num11 < 10; num11++)
							{
								int num12 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
								Main.dust[num12].velocity.Y -= 1.5f;
								Main.dust[num12].velocity.X *= 2.5f;
								Main.dust[num12].scale = 1.3f;
								Main.dust[num12].alpha = 100;
								Main.dust[num12].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
				if (!wet)
				{
					lavaWet = false;
					honeyWet = false;
				}
				if (wetCount > 0)
				{
					wetCount--;
				}
			}
			oldPosition = position;
			oldDirection = direction;
			HandleMovement(wetVelocity, out var _, out var _);
			if (AutomaticallyChangesDirection())
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
			}
			if (!active)
			{
				return;
			}
			ProjLight();
			if (!npcProj && friendly && Main.player[owner].magicQuiver && extraUpdates < 1 && arrow)
			{
				extraUpdates = 1;
			}
			if (type == 2 || type == 82)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
			}
			else if (type == 172)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
			}
			else if (type == 103)
			{
				int num13 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num13].noGravity = true;
					Main.dust[num13].scale *= 2f;
				}
			}
			else if (type == 278)
			{
				int num14 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num14].noGravity = true;
					Main.dust[num14].scale *= 1.5f;
				}
			}
			else if (type == 4)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
				}
			}
			else if (type == 5)
			{
				int num15 = Main.rand.Next(3);
				Dust.NewDust(position, width, height, num15 switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
			}
			Damage();
			if (type == 434 && localAI[0] == 0f && numUpdates == 0)
			{
				extraUpdates = 1;
				velocity = Vector2.Zero;
				localAI[0] = 1f;
				localAI[1] = 0.9999f;
				netUpdate = true;
			}
			if (Main.netMode != 1 && (type == 99 || type == 655 || type == 727))
			{
				Collision.SwitchTiles(position, width, height, oldPosition, 3);
			}
			if (ProjectileID.Sets.TrailingMode[type] == 0)
			{
				for (int num16 = oldPos.Length - 1; num16 > 0; num16--)
				{
					oldPos[num16] = oldPos[num16 - 1];
				}
				oldPos[0] = position;
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 1)
			{
				if (frameCounter == 0 || oldPos[0] == Vector2.Zero)
				{
					for (int num17 = oldPos.Length - 1; num17 > 0; num17--)
					{
						oldPos[num17] = oldPos[num17 - 1];
					}
					oldPos[0] = position;
					if (velocity == Vector2.Zero && type == 466)
					{
						float num18 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num19 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector = new Vector2((float)Math.Cos(num18) * num19, (float)Math.Sin(num18) * num19);
						int num20 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector.X, vector.Y);
						Main.dust[num20].noGravity = true;
						Main.dust[num20].scale = 1.7f;
					}
					if (velocity == Vector2.Zero && type == 580)
					{
						float num21 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num22 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector2 = new Vector2((float)Math.Cos(num21) * num22, (float)Math.Sin(num21) * num22);
						int num23 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
						Main.dust[num23].noGravity = true;
						Main.dust[num23].scale = 1.7f;
					}
				}
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 2)
			{
				for (int num24 = oldPos.Length - 1; num24 > 0; num24--)
				{
					oldPos[num24] = oldPos[num24 - 1];
					oldRot[num24] = oldRot[num24 - 1];
					oldSpriteDirection[num24] = oldSpriteDirection[num24 - 1];
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 3)
			{
				for (int num25 = oldPos.Length - 1; num25 > 0; num25--)
				{
					oldPos[num25] = oldPos[num25 - 1];
					oldRot[num25] = oldRot[num25 - 1];
					oldSpriteDirection[num25] = oldSpriteDirection[num25 - 1];
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
				float amount = 0.65f;
				int num26 = 1;
				for (int num27 = 0; num27 < num26; num27++)
				{
					for (int num28 = oldPos.Length - 1; num28 > 0; num28--)
					{
						if (!(oldPos[num28] == Vector2.Zero))
						{
							if (oldPos[num28].Distance(oldPos[num28 - 1]) > 2f)
							{
								oldPos[num28] = Vector2.Lerp(oldPos[num28], oldPos[num28 - 1], amount);
							}
							oldRot[num28] = (oldPos[num28 - 1] - oldPos[num28]).SafeNormalize(Vector2.Zero).ToRotation();
						}
					}
				}
			}
			else if (ProjectileID.Sets.TrailingMode[type] == 4)
			{
				Vector2 vector3 = Main.player[owner].position - Main.player[owner].oldPosition;
				for (int num29 = oldPos.Length - 1; num29 > 0; num29--)
				{
					oldPos[num29] = oldPos[num29 - 1];
					oldRot[num29] = oldRot[num29 - 1];
					oldSpriteDirection[num29] = oldSpriteDirection[num29 - 1];
					if (numUpdates == 0 && oldPos[num29] != Vector2.Zero)
					{
						oldPos[num29] += vector3;
					}
				}
				oldPos[0] = position;
				oldRot[0] = rotation;
				oldSpriteDirection[0] = spriteDirection;
			}
			if (ProjectileID.Sets.IsADD2Turret[type] && DD2Event.Ongoing)
			{
				timeLeft++;
			}
			timeLeft--;
			if (timeLeft <= 0)
			{
				Kill();
			}
			if (penetrate == 0)
			{
				Kill();
			}
			if (!active || owner != Main.myPlayer)
			{
				continue;
			}
			if (netUpdate2)
			{
				netUpdate = true;
			}
			if (!active)
			{
				netSpam = 0;
			}
			if (netUpdate)
			{
				if (netSpam < 60)
				{
					netSpam += 5;
					NetMessage.SendData(27, -1, -1, null, i);
					netUpdate2 = false;
				}
				else
				{
					netUpdate2 = true;
				}
			}
			if (netSpam > 0)
			{
				netSpam--;
			}
		}
		netUpdate = false;
	}

	private bool AutomaticallyChangesDirection()
	{
		if ((aiStyle != 3 || ai[0] != 1f) && (aiStyle != 7 || ai[0] != 1f) && (aiStyle != 13 || ai[0] != 1f) && aiStyle != 65 && aiStyle != 69 && aiStyle != 114 && aiStyle != 123 && aiStyle != 112 && !manualDirectionChange && aiStyle != 67 && aiStyle != 26 && aiStyle != 15)
		{
			return aiStyle != 150;
		}
		return false;
	}

	private void UpdateEnchantmentVisuals()
	{
		if (npcProj)
		{
			return;
		}
		if (Main.player[owner].frostBurn && (melee || ranged) && friendly && !hostile && !noEnchantments && Main.rand.Next(2 * (1 + extraUpdates)) == 0)
		{
			int num = Dust.NewDust(position, width, height, 135, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2f);
			Main.dust[num].noGravity = true;
			Main.dust[num].velocity *= 0.7f;
			Main.dust[num].velocity.Y -= 0.5f;
		}
		if (melee && Main.player[owner].magmaStone && !noEnchantments && Main.rand.Next(3) != 0)
		{
			int num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y - 4f), width + 8, height + 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
			if (Main.rand.Next(2) == 0)
			{
				Main.dust[num2].scale = 1.5f;
			}
			Main.dust[num2].noGravity = true;
			Main.dust[num2].velocity.X *= 2f;
			Main.dust[num2].velocity.Y *= 2f;
		}
		if (!melee || Main.player[owner].meleeEnchant <= 0 || noEnchantments)
		{
			return;
		}
		if (Main.player[owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
		{
			int num3 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
			Main.dust[num3].noGravity = true;
			Main.dust[num3].fadeIn = 1.5f;
			Main.dust[num3].velocity *= 0.25f;
		}
		if (Main.player[owner].meleeEnchant == 1)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num4 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].fadeIn = 1.5f;
				Main.dust[num4].velocity *= 0.25f;
			}
		}
		else if (Main.player[owner].meleeEnchant == 2)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num5 = Dust.NewDust(position, width, height, 75, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num5].noGravity = true;
				Main.dust[num5].velocity *= 0.7f;
				Main.dust[num5].velocity.Y -= 0.5f;
			}
		}
		else if (Main.player[owner].meleeEnchant == 3)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num6 = Dust.NewDust(position, width, height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity *= 0.7f;
				Main.dust[num6].velocity.Y -= 0.5f;
			}
		}
		else if (Main.player[owner].meleeEnchant == 4)
		{
			int num7 = 0;
			if (Main.rand.Next(2) == 0)
			{
				num7 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.1f);
				Main.dust[num7].noGravity = true;
				Main.dust[num7].velocity.X /= 2f;
				Main.dust[num7].velocity.Y /= 2f;
			}
		}
		else if (Main.player[owner].meleeEnchant == 5)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num8 = Dust.NewDust(position, width, height, 169, 0f, 0f, 100);
				Main.dust[num8].velocity.X += direction;
				Main.dust[num8].velocity.Y += 0.2f;
				Main.dust[num8].noGravity = true;
			}
		}
		else if (Main.player[owner].meleeEnchant == 6)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num9 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
				Main.dust[num9].velocity.X += direction;
				Main.dust[num9].velocity.Y += 0.2f;
				Main.dust[num9].noGravity = true;
			}
		}
		else if (Main.player[owner].meleeEnchant == 7)
		{
			Vector2 vector = velocity;
			if (vector.Length() > 4f)
			{
				vector *= 4f / vector.Length();
			}
			if (Main.rand.Next(20) == 0)
			{
				int num10 = Main.rand.Next(139, 143);
				int num11 = Dust.NewDust(position, width, height, num10, vector.X, vector.Y, 0, default(Color), 1.2f);
				Main.dust[num11].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num11].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num11].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num11].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num11].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			if (Main.rand.Next(40) == 0)
			{
				int num12 = Main.rand.Next(276, 283);
				int num13 = Gore.NewGore(position, vector, num12);
				Main.gore[num13].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num13].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num13].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num13].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num13].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (Main.player[owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
		{
			int num14 = Dust.NewDust(position, width, height, 46, 0f, 0f, 100);
			Main.dust[num14].noGravity = true;
			Main.dust[num14].fadeIn = 1.5f;
			Main.dust[num14].velocity *= 0.25f;
		}
	}

	private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
	{
		bool flag = false;
		overrideWidth = -1;
		overrideHeight = -1;
		bool flag2 = false;
		bool? flag3 = ProjectileID.Sets.ForcePlateDetection[type];
		bool flag4 = flag3.HasValue && !flag3.Value;
		bool flag5 = flag3.HasValue && flag3.Value;
		if (tileCollide)
		{
			Vector2 lastVelocity = velocity;
			bool flag6 = true;
			Vector2? vector = null;
			if (Main.projPet[type])
			{
				flag6 = false;
				if (Main.player[owner].position.Y + (float)Main.player[owner].height - 12f > position.Y + (float)height)
				{
					flag6 = true;
				}
			}
			if (type == 500)
			{
				flag6 = false;
				if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
				{
					flag6 = true;
				}
			}
			if (type == 653)
			{
				flag6 = false;
				if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
				{
					flag6 = true;
				}
			}
			if (aiStyle == 62)
			{
				flag6 = true;
			}
			if (aiStyle == 66)
			{
				flag6 = true;
			}
			if (type == 317)
			{
				flag6 = true;
			}
			if (type == 373)
			{
				flag6 = true;
			}
			if (aiStyle == 53)
			{
				flag6 = false;
			}
			if (type == 9 || type == 12 || type == 15 || type == 13)
			{
				flag6 = false;
			}
			if (aiStyle == 10 && ProjectileID.Sets.FallingBlockDoesNotFallThroughPlatforms[type])
			{
				flag6 = false;
			}
			if (type == 24)
			{
				flag6 = false;
			}
			switch (type)
			{
			case 663:
			case 665:
			case 667:
			case 677:
			case 678:
			case 679:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
				flag6 = false;
				break;
			case 759:
				flag6 = true;
				break;
			}
			if (decidesManualFallThrough)
			{
				flag6 = shouldFallThrough;
			}
			if (type == 771 || type == 822 || type == 823 || type == 843 || type == 846 || type == 845 || type == 852)
			{
				overrideWidth = width;
				overrideHeight = 34;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 824 || type == 839 || type == 840 || type == 850 || type == 853)
			{
				overrideWidth = width;
				overrideHeight = 58;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 826 || type == 830 || type == 838)
			{
				overrideWidth = width;
				overrideHeight = 38;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (type == 828 || type == 829 || type == 827 || type == 844)
			{
				overrideWidth = width;
				overrideHeight = 22;
				vector = new Vector2(0.75f, 0.75f);
			}
			if (aiStyle == 29 || type == 28 || aiStyle == 49 || type == 906 || type == 903 || type == 904 || type == 910)
			{
				overrideWidth = width - 8;
				overrideHeight = height - 8;
			}
			else if (type == 250 || type == 267 || type == 297 || type == 323 || type == 3 || type == 711)
			{
				overrideWidth = 6;
				overrideHeight = 6;
			}
			else if (type == 308)
			{
				overrideWidth = 26;
				overrideHeight = height;
			}
			else if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693)
			{
				overrideWidth = 16;
				overrideHeight = height;
			}
			else if (type == 688 || type == 689 || type == 690)
			{
				overrideWidth = 16;
				overrideHeight = height;
				vector = new Vector2(0.5f, 1f);
			}
			else if (type == 669 || type == 706)
			{
				overrideWidth = 10;
				overrideHeight = 10;
			}
			else if (type == 261 || type == 277)
			{
				overrideWidth = 26;
				overrideHeight = 26;
			}
			else if (type == 481 || type == 491 || type == 106 || type == 262 || type == 271 || type == 270 || type == 272 || type == 273 || type == 274 || type == 280 || type == 288 || type == 301 || type == 320 || type == 333 || type == 335 || type == 343 || type == 344 || type == 497 || type == 496 || type == 6 || type == 19 || type == 113 || type == 52 || type == 520 || type == 523 || type == 585 || type == 598 || type == 599 || type == 636 || type == 837 || type == 861 || type == 867)
			{
				overrideWidth = 10;
				overrideHeight = 10;
			}
			else if (type == 514)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (type == 248 || type == 247 || type == 507 || type == 508 || type == 662 || type == 680 || type == 685 || type == 757 || type == 928)
			{
				overrideWidth = width - 12;
				overrideHeight = height - 12;
			}
			else if (aiStyle == 18 || type == 254)
			{
				overrideWidth = width - 36;
				overrideHeight = height - 36;
			}
			else if (type == 182 || type == 190 || type == 33 || type == 229 || type == 237 || type == 243 || type == 866)
			{
				overrideWidth = width - 20;
				overrideHeight = height - 20;
			}
			else if (aiStyle == 27)
			{
				overrideWidth = width - 12;
				overrideHeight = height - 12;
			}
			else if (type == 533 && ai[0] >= 6f)
			{
				overrideWidth = width + 6;
				overrideHeight = height + 6;
			}
			else if (type == 755 && ai[0] >= 0f)
			{
				overrideWidth = width + 6;
				overrideHeight = height + 6;
			}
			else if (type == 759)
			{
				if (velocity.X != lastVelocity.X)
				{
					velocity.X = 0f - lastVelocity.X;
				}
				if (velocity.Y != lastVelocity.Y)
				{
					velocity.Y = 0f - lastVelocity.Y;
				}
			}
			else if (type == 582 || type == 634 || type == 635 || type == 902)
			{
				overrideWidth = 8;
				overrideHeight = 8;
			}
			else if (type == 617)
			{
				overrideWidth = (int)(20f * scale);
				overrideHeight = (int)(20f * scale);
			}
			else if (type == 304)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (aiStyle == 9)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			else if (type == 931)
			{
				overrideWidth = 4;
				overrideHeight = 4;
			}
			if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f)))
			{
				if (aiStyle == 10)
				{
					if (type >= 736 && type <= 738)
					{
						velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
					}
					else if (type == 42 || type == 65 || type == 68 || type == 354 || (type == 31 && ai[0] == 2f))
					{
						velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
					}
					else
					{
						velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
					}
				}
				else
				{
					Vector2 vector2 = position;
					int num = ((overrideWidth != -1) ? overrideWidth : width);
					int num2 = ((overrideHeight != -1) ? overrideHeight : height);
					if (overrideHeight != -1 || overrideWidth != -1)
					{
						vector2 = ((!vector.HasValue) ? new Vector2(position.X + (float)(width / 2) - (float)(num / 2), position.Y + (float)(height / 2) - (float)(num2 / 2)) : (base.Center - new Vector2(num, num2) * vector.Value));
					}
					if (wet)
					{
						if (honeyWet)
						{
							Vector2 vector3 = velocity;
							velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
							wetVelocity = velocity * 0.25f;
							if (velocity.X != vector3.X)
							{
								wetVelocity.X = velocity.X;
							}
							if (velocity.Y != vector3.Y)
							{
								wetVelocity.Y = velocity.Y;
							}
						}
						else
						{
							Vector2 vector4 = velocity;
							velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
							wetVelocity = velocity * 0.5f;
							if (velocity.X != vector4.X)
							{
								wetVelocity.X = velocity.X;
							}
							if (velocity.Y != vector4.Y)
							{
								wetVelocity.Y = velocity.Y;
							}
						}
						if (!Main.projPet[type])
						{
							Vector4 vector5 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
							Vector2 vector6 = position - vector2;
							if (aiStyle == 137)
							{
								if (vector2.Y != vector5.Y)
								{
									flag = true;
								}
								if (velocity.Y != vector5.W)
								{
									flag = true;
								}
								vector2.Y = vector5.Y;
								position.Y = vector2.Y + vector6.Y;
								velocity.Y = vector5.W;
							}
							else
							{
								if (vector2.X != vector5.X)
								{
									flag = true;
								}
								if (vector2.Y != vector5.Y)
								{
									flag = true;
								}
								if (velocity.X != vector5.Z)
								{
									flag = true;
								}
								if (velocity.Y != vector5.W)
								{
									flag = true;
								}
								vector2.X = vector5.X;
								vector2.Y = vector5.Y;
								position = vector2 + vector6;
								velocity.X = vector5.Z;
								velocity.Y = vector5.W;
							}
						}
					}
					else
					{
						int num3 = Math.Min(num, num2);
						if (num3 < 3)
						{
							num3 = 3;
						}
						if (num3 > 16)
						{
							num3 = 16;
						}
						if (velocity.Length() > (float)num3)
						{
							Vector2 vector7 = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
							float num4 = velocity.Length();
							float num5 = num3;
							Vector2 vector8 = Vector2.Normalize(velocity);
							if (vector7.Y == 0f)
							{
								vector8.Y = 0f;
							}
							Vector2 zero = Vector2.Zero;
							_ = Vector2.Zero;
							_ = Vector2.Zero;
							Vector2 vector9 = vector2;
							int num6 = 0;
							while (num4 > 0f)
							{
								num6++;
								if (num6 > 300)
								{
									break;
								}
								vector9 = vector2;
								float num7 = num4;
								if (num7 > num5)
								{
									num7 = num5;
								}
								num4 -= num7;
								Vector2 vector10 = vector8 * num7;
								Vector2 vector11 = Collision.TileCollision(vector2, vector10, num, num2, flag6, flag6);
								vector2 += vector11;
								velocity = vector11;
								if (!Main.projPet[type])
								{
									Vector4 vector12 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
									Vector2 vector13 = position - vector2;
									if (aiStyle == 137)
									{
										if (vector2.Y != vector12.Y)
										{
											flag = true;
										}
										if (velocity.Y != vector12.W)
										{
											flag = true;
										}
										vector2.Y = vector12.Y;
										position.Y = vector2.Y + vector13.Y;
										velocity.Y = vector12.W;
									}
									else
									{
										if (vector2.X != vector12.X)
										{
											flag = true;
										}
										if (vector2.Y != vector12.Y)
										{
											flag = true;
										}
										if (velocity.X != vector12.Z)
										{
											flag = true;
										}
										if (velocity.Y != vector12.W)
										{
											flag = true;
										}
										vector2.X = vector12.X;
										vector2.Y = vector12.Y;
										position = vector2 + vector13;
										velocity.X = vector12.Z;
										velocity.Y = vector12.W;
									}
								}
								flag2 = true;
								if (owner == Main.myPlayer && vector2 != vector9 && !flag4)
								{
									Collision.SwitchTiles(vector2, num, num2, vector9, 4);
								}
								vector11 = velocity;
								zero += vector11;
							}
							velocity = zero;
							if (Math.Abs(velocity.X - lastVelocity.X) < 0.0001f)
							{
								velocity.X = lastVelocity.X;
							}
							if (Math.Abs(velocity.Y - lastVelocity.Y) < 0.0001f)
							{
								velocity.Y = lastVelocity.Y;
							}
							if (!Main.projPet[type])
							{
								Vector4 vector14 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
								Vector2 vector15 = position - vector2;
								if (aiStyle == 137)
								{
									if (vector2.Y != vector14.Y)
									{
										flag = true;
									}
									if (velocity.Y != vector14.W)
									{
										flag = true;
									}
									vector2.Y = vector14.Y;
									position.Y = vector2.Y + vector15.Y;
									velocity.Y = vector14.W;
								}
								else
								{
									if (vector2.X != vector14.X)
									{
										flag = true;
									}
									if (vector2.Y != vector14.Y)
									{
										flag = true;
									}
									if (velocity.X != vector14.Z)
									{
										flag = true;
									}
									if (velocity.Y != vector14.W)
									{
										flag = true;
									}
									vector2.X = vector14.X;
									vector2.Y = vector14.Y;
									position = vector2 + vector15;
									velocity.X = vector14.Z;
									velocity.Y = vector14.W;
								}
							}
						}
						else
						{
							velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
							if (!Main.projPet[type])
							{
								Vector4 vector16 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
								Vector2 vector17 = position - vector2;
								if (aiStyle == 137)
								{
									if (vector2.Y != vector16.Y)
									{
										flag = true;
									}
									if (velocity.Y != vector16.W)
									{
										flag = true;
									}
									vector2.Y = vector16.Y;
									position.Y = vector2.Y + vector17.Y;
									velocity.Y = vector16.W;
								}
								else
								{
									if (vector2.X != vector16.X)
									{
										flag = true;
									}
									if (vector2.Y != vector16.Y)
									{
										flag = true;
									}
									if (velocity.X != vector16.Z)
									{
										flag = true;
									}
									if (velocity.Y != vector16.W)
									{
										flag = true;
									}
									vector2.X = vector16.X;
									vector2.Y = vector16.Y;
									position = vector2 + vector17;
									velocity.X = vector16.Z;
									velocity.Y = vector16.W;
								}
							}
						}
					}
				}
			}
			if (lastVelocity != velocity)
			{
				flag = true;
			}
			if (flag)
			{
				if (owner == Main.myPlayer && CanCutTiles() && (friendly || hostile) && damage > 0)
				{
					int num8 = (int)(position.X + velocity.X - 1f) / 16;
					int num9 = (int)((position.X + (float)width + velocity.X + 1f) / 16f) + 1;
					int num10 = (int)(position.Y + velocity.Y - 1f) / 16;
					int num11 = (int)((position.Y + (float)height + velocity.Y + 1f) / 16f) + 1;
					if (num8 < 0)
					{
						num8 = 0;
					}
					if (num9 > Main.maxTilesX)
					{
						num9 = Main.maxTilesX;
					}
					if (num10 < 0)
					{
						num10 = 0;
					}
					if (num11 > Main.maxTilesY)
					{
						num11 = Main.maxTilesY;
					}
					for (int i = num8; i < num9; i++)
					{
						for (int j = num10; j < num11; j++)
						{
							if (Main.tile[i, j] != null && Main.tile[i, j].type == 484 && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
							{
								WorldGen.KillTile(i, j);
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 0, i, j);
								}
							}
						}
					}
				}
				if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690)
				{
					position += velocity;
					velocity = Vector2.Zero;
				}
				else if (type == 434)
				{
					position += velocity;
					numUpdates = 0;
				}
				else if (type == 601)
				{
					if (Main.netMode != 2 && alpha > 0)
					{
						if (ai[1] != 0f)
						{
							SoundEngine.PlaySound(SoundID.Item114, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item115, position);
						}
					}
					if (owner == Main.myPlayer)
					{
						PortalHelper.TryPlacingPortal(this, lastVelocity, velocity);
					}
					position += velocity;
					Kill();
				}
				else if (type == 451)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					netUpdate = true;
					velocity = lastVelocity / 2f;
				}
				else if (type == 645)
				{
					ai[0] = 0f;
					ai[1] = -1f;
					netUpdate = true;
				}
				else if (type == 584)
				{
					bool flag7 = false;
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = lastVelocity.X * -0.75f;
						flag7 = true;
					}
					if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
					{
						velocity.Y = lastVelocity.Y * -0.75f;
						flag7 = true;
					}
					if (flag7)
					{
						float num12 = lastVelocity.Length() / velocity.Length();
						if (num12 == 0f)
						{
							num12 = 1f;
						}
						velocity /= num12;
						penetrate--;
					}
				}
				else if (type == 532)
				{
					bool flag8 = false;
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = lastVelocity.X * -0.75f;
						flag8 = true;
					}
					if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
					{
						velocity.Y = lastVelocity.Y * -0.75f;
						flag8 = true;
					}
					if (flag8)
					{
						float num13 = lastVelocity.Length() / velocity.Length();
						if (num13 == 0f)
						{
							num13 = 1f;
						}
						velocity /= num13;
						penetrate--;
						Collision.HitTiles(position, lastVelocity, width, height);
					}
				}
				else if (type == 533)
				{
					float num14 = 1f;
					bool flag9 = false;
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = lastVelocity.X * (0f - num14);
						flag9 = true;
					}
					if (velocity.Y != lastVelocity.Y || velocity.Y == 0f)
					{
						velocity.Y = lastVelocity.Y * (0f - num14) * 0.5f;
						flag9 = true;
					}
					if (flag9)
					{
						float num15 = lastVelocity.Length() / velocity.Length();
						if (num15 == 0f)
						{
							num15 = 1f;
						}
						velocity /= num15;
						if (ai[0] == 7f && (double)velocity.Y < -0.1)
						{
							velocity.Y += 0.1f;
						}
						if (ai[0] >= 6f && ai[0] < 9f)
						{
							Collision.HitTiles(position, lastVelocity, width, height);
						}
					}
				}
				else if (type == 502)
				{
					ai[0] += 1f;
					SoundEngine.PlaySound(37, (int)position.X, (int)position.Y, 5 + (int)ai[0]);
					if (ai[0] >= 5f)
					{
						position += velocity;
						Kill();
					}
					else
					{
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
						}
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
					}
					Vector2 spinningpoint = new Vector2(0f, -3f - ai[0]).RotatedByRandom(3.1415927410125732);
					float num16 = 10f + ai[0] * 4f;
					Vector2 vector18 = new Vector2(1.05f, 1f);
					for (float num17 = 0f; num17 < num16; num17 += 1f)
					{
						int num18 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
						Main.dust[num18].position = base.Center;
						Main.dust[num18].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num17 / num16) * vector18 * (0.8f + Main.rand.NextFloat() * 0.4f);
						Main.dust[num18].color = Main.hslToRgb(num17 / num16, 1f, 0.5f);
						Main.dust[num18].noGravity = true;
						Main.dust[num18].scale = 1f + ai[0] / 3f;
					}
					if (Main.myPlayer == owner)
					{
						int num19 = width;
						int num20 = height;
						int num21 = penetrate;
						position = base.Center;
						width = (height = 40 + 8 * (int)ai[0]);
						base.Center = position;
						penetrate = -1;
						Damage();
						penetrate = num21;
						position = base.Center;
						width = num19;
						height = num20;
						base.Center = position;
					}
				}
				else if (type == 444)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = 0f - lastVelocity.X;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = 0f - lastVelocity.Y;
					}
					ai[0] = velocity.ToRotation();
				}
				else if (type == 617)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = (0f - lastVelocity.X) * 0.35f;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = (0f - lastVelocity.Y) * 0.35f;
					}
				}
				else if (type == 440 || type == 449 || type == 606)
				{
					if (ai[1] != 1f)
					{
						ai[1] = 1f;
						position += velocity;
						velocity = lastVelocity;
					}
				}
				else if (type == 466 || type == 580 || type == 640)
				{
					if (localAI[1] < 1f)
					{
						localAI[1] += 2f;
						position += velocity;
						velocity = Vector2.Zero;
					}
				}
				else if (type == 851)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = (0f - lastVelocity.X) * 0.8f;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = (0f - lastVelocity.Y) * 0.5f;
					}
				}
				else if (type == 855)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = 0f - lastVelocity.X;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = 0f - lastVelocity.Y;
						if (lastVelocity.Y < 0f)
						{
							velocity.Y *= 0.25f;
						}
					}
				}
				else if (aiStyle == 54)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = lastVelocity.X * -0.6f;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = lastVelocity.Y * -0.6f;
					}
				}
				else if (type == 861)
				{
					float num22 = -1f;
					if (ai[1] == 1f)
					{
						num22 = -0.6f;
					}
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = lastVelocity.X * num22;
					}
					if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7)
					{
						velocity.Y = lastVelocity.Y * num22;
					}
					if (Math.Abs(velocity.Y) < 0.5f)
					{
						velocity.Y = 0f;
					}
					if (ai[1] != 1f)
					{
						netUpdate = true;
					}
					ai[1] = 1f;
				}
				else if (!Main.projPet[type] && type != 500 && type != 820 && aiStyle != 160 && type != 650 && type != 882 && type != 888 && type != 894 && type != 895 && type != 898 && type != 901)
				{
					if (aiStyle == 99)
					{
						if (type >= 556 && type <= 561)
						{
							bool flag10 = false;
							if (velocity.X != lastVelocity.X)
							{
								flag10 = true;
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								flag10 = true;
								velocity.Y = lastVelocity.Y * -1f;
							}
							if (flag10)
							{
								Vector2 vector19 = Main.player[owner].Center - base.Center;
								vector19.Normalize();
								vector19 *= velocity.Length();
								vector19 *= 0.25f;
								velocity *= 0.75f;
								velocity += vector19;
								if (velocity.Length() > 6f)
								{
									velocity *= 0.5f;
								}
							}
						}
					}
					else if (type == 604)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
						}
					}
					else if (type == 379)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.6f;
						}
						if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
						{
							velocity.Y = lastVelocity.Y * -0.6f;
						}
					}
					else if (type == 491)
					{
						if (ai[0] <= 0f)
						{
							ai[0] = -10f;
						}
						if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 0f)
						{
							velocity.X = lastVelocity.X * -1f;
						}
						if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 0f)
						{
							velocity.Y = lastVelocity.Y * -1f;
						}
					}
					else if ((type >= 515 && type <= 517) || type == 637)
					{
						if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
						{
							velocity.X = lastVelocity.X * -0.9f;
						}
						if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
						{
							velocity.Y = lastVelocity.Y * -0.9f;
						}
					}
					else if (type == 921 || type == 926 || type == 937)
					{
						if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
						{
							velocity.X = lastVelocity.X * -0.95f;
						}
						if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
						{
							velocity.Y = lastVelocity.Y * -0.95f;
						}
						penetrate--;
					}
					else if (type == 681)
					{
						timeLeft = 4;
					}
					else if (type == 409)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -1f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = lastVelocity.Y * -1f;
						}
					}
					else if (type == 254)
					{
						tileCollide = false;
						velocity = lastVelocity;
						if (timeLeft > 30)
						{
							timeLeft = 30;
						}
					}
					else if (type == 225)
					{
						ai[1] += 1f;
						if (ai[1] == 1f)
						{
							damage = (int)((float)damage * 0.66f);
						}
						if (ai[1] >= 4f)
						{
							Kill();
							return;
						}
						velocity.X = 0f - lastVelocity.X;
						velocity.Y = 0f - lastVelocity.Y;
						int num23 = FindTargetWithLineOfSight();
						if (num23 != -1)
						{
							NPC nPC = Main.npc[num23];
							float t = Distance(nPC.Center);
							Vector2 vector20 = -Vector2.UnitY * MathHelper.Lerp((float)nPC.height * 0.1f, (float)nPC.height * 0.5f, Utils.GetLerpValue(0f, 300f, t));
							velocity = DirectionTo(nPC.Center + vector20).SafeNormalize(-Vector2.UnitY) * velocity.Length();
							netUpdate = true;
						}
					}
					else if (type == 285)
					{
						ai[1] += 1f;
						if (ai[1] == 1f)
						{
							damage = (int)((float)damage * 0.66f);
						}
						if (ai[1] >= 2f)
						{
							Kill();
							return;
						}
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -1f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = lastVelocity.Y * -1f;
						}
						int num24 = FindTargetWithLineOfSight();
						if (num24 != -1)
						{
							NPC nPC2 = Main.npc[num24];
							Distance(nPC2.Center);
							velocity = DirectionTo(nPC2.Center).SafeNormalize(-Vector2.UnitY) * velocity.Length();
							netUpdate = true;
						}
					}
					else if (type == 931)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -1f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = lastVelocity.Y * -1f;
						}
					}
					else if (type == 155)
					{
						if (ai[1] > 10f)
						{
							NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", NetworkText.FromKey(Lang.GetProjectileName(type).Key), ai[1]);
							if (Main.netMode == 0)
							{
								Main.NewText(networkText.ToString(), byte.MaxValue, 240, 20);
							}
							else if (Main.netMode == 2)
							{
								ChatHelper.BroadcastChatMessage(networkText, new Color(255, 240, 20));
							}
						}
						ai[1] = 0f;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.6f;
						}
						if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
						{
							velocity.Y = lastVelocity.Y * -0.6f;
						}
					}
					else if (aiStyle == 33)
					{
						if (localAI[0] == 0f)
						{
							if (wet)
							{
								position += lastVelocity / 2f;
							}
							else
							{
								position += lastVelocity;
							}
							velocity *= 0f;
							localAI[0] = 1f;
						}
					}
					else if (type != 308 && type != 377)
					{
						if (type == 477)
						{
							if (velocity.Y != lastVelocity.Y || velocity.X != lastVelocity.X)
							{
								penetrate--;
								if (penetrate <= 0)
								{
									Kill();
								}
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							if (penetrate > 0 && owner == Main.myPlayer)
							{
								int[] array = new int[10];
								int num25 = 0;
								int num26 = 700;
								int num27 = 20;
								for (int k = 0; k < 200; k++)
								{
									if (!Main.npc[k].CanBeChasedBy(this))
									{
										continue;
									}
									float num28 = (base.Center - Main.npc[k].Center).Length();
									if (num28 > (float)num27 && num28 < (float)num26 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[k].Center, 1, 1))
									{
										array[num25] = k;
										num25++;
										if (num25 >= 9)
										{
											break;
										}
									}
								}
								if (num25 > 0)
								{
									num25 = Main.rand.Next(num25);
									Vector2 vector21 = Main.npc[array[num25]].Center - base.Center;
									float num29 = velocity.Length();
									vector21.Normalize();
									velocity = vector21 * num29;
									netUpdate = true;
								}
							}
						}
						else if (type == 94)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 496)
						{
							if (velocity.X != lastVelocity.X)
							{
								if (Math.Abs(velocity.X) < 1f)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								else
								{
									Kill();
								}
							}
							if (velocity.Y != lastVelocity.Y)
							{
								if (Math.Abs(velocity.Y) < 1f)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
								else
								{
									Kill();
								}
							}
						}
						else if (type == 311)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
								ai[1] += 1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
								ai[1] += 1f;
							}
							if (ai[1] > 4f)
							{
								Kill();
							}
						}
						else if (type == 312)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
								ai[1] += 1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
								ai[1] += 1f;
							}
						}
						else if (type == 522 || type == 620)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 524)
						{
							ai[0] += 100f;
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (aiStyle == 93)
						{
							if (velocity != lastVelocity)
							{
								ai[1] = 0f;
								ai[0] = 1f;
								netUpdate = true;
								tileCollide = false;
								position += velocity;
								velocity = lastVelocity;
								velocity.Normalize();
								velocity *= 3f;
							}
						}
						else if (type == 281)
						{
							bool flag11 = Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 2f || ai[0] == -1f;
							if (ai[0] == -2f || ai[0] == -3f)
							{
								flag11 = false;
							}
							if (flag11)
							{
								if (Main.myPlayer == owner)
								{
									int num30 = ((velocity.X > 0f) ? 1 : 2);
									if (damage == 0)
									{
										num30 += 2;
									}
									NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y - 4, 614, num30, owner);
									ai[0] = -3f;
									netUpdate = true;
								}
							}
							else
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = (0f - lastVelocity.X) * 0.5f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = (0f - lastVelocity.Y) * 0.5f;
								}
							}
						}
						else if (type == 290 || type == 294)
						{
							if (velocity.X != lastVelocity.X)
							{
								position.X += velocity.X;
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								position.Y += velocity.Y;
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if ((type == 181 || type == 189 || type == 357 || type == 566) && penetrate > 0)
						{
							if (type == 357)
							{
								damage = (int)((double)damage * 0.9);
							}
							penetrate--;
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 307 && ai[1] < 5f)
						{
							ai[1] += 1f;
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 99)
						{
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
							{
								Collision.HitTiles(position, velocity, width, height);
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
								velocity.Y = (0f - lastVelocity.Y) * 0.2f;
							}
							if (velocity.X != lastVelocity.X)
							{
								Kill();
							}
						}
						else if (type == 727)
						{
							int num31 = 30;
							float num32 = 2f;
							float num33 = 2f;
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
							{
								Collision.HitTiles(position, velocity, width, height);
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
								velocity.Y = (0f - lastVelocity.Y) * 0.65f;
								if (owner == Main.myPlayer)
								{
									int num34 = Main.rand.Next(3, 6);
									float num35 = Main.rand.NextFloat();
									for (float num36 = 0f; num36 < 1f; num36 += 1f / (float)num34)
									{
										Vector2 vector22 = ((num35 + num36) * ((float)Math.PI * 2f)).ToRotationVector2() * num33;
										if (vector22.Y > 0f)
										{
											vector22 *= -0.7f;
										}
										NewProjectile(base.Center, vector22, 763, num31, num32, Main.myPlayer);
									}
								}
							}
							if (velocity.X != lastVelocity.X)
							{
								Kill();
								if (owner == Main.myPlayer)
								{
									int num37 = Main.rand.Next(3, 6);
									float num38 = Main.rand.NextFloat();
									for (float num39 = 0f; num39 < 1f; num39 += 1f / (float)num37)
									{
										Vector2 vector23 = ((num38 + num39) * ((float)Math.PI * 2f)).ToRotationVector2() * num33;
										if (vector23.Y > 0f)
										{
											vector23 *= -0.7f;
										}
										NewProjectile(base.Center, vector23, 763, num31, num32, Main.myPlayer);
									}
								}
							}
						}
						else if (type == 655)
						{
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
							{
								Collision.HitTiles(position, velocity, width, height);
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
								velocity.Y = (0f - lastVelocity.Y) * 0.2f;
							}
							if (velocity.X != lastVelocity.X)
							{
								Kill();
							}
						}
						else if (type == 36)
						{
							if (penetrate > 1)
							{
								Collision.HitTiles(position, velocity, width, height);
								SoundEngine.PlaySound(SoundID.Item10, position);
								penetrate--;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else
							{
								Kill();
							}
						}
						else if (aiStyle == 21)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (aiStyle == 17)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.75f;
							}
							if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
							{
								velocity.Y = lastVelocity.Y * -0.7f;
							}
						}
						else if (aiStyle == 15)
						{
							AI_015_HandleMovementCollision(ref wetVelocity, ref lastVelocity);
						}
						else if (aiStyle == 9)
						{
							bool flag12 = owner == Main.myPlayer;
							if (type == 79)
							{
								bool flag13 = ai[0] >= 0f;
								flag12 = flag12 && !flag13;
								if (flag13)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X *= 0.1f;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y *= 0.1f;
									}
								}
							}
							if (flag12)
							{
								Kill();
							}
						}
						else if (aiStyle == 39)
						{
							Collision.HitTiles(position, velocity, width, height);
							if (type == 33 || type == 106)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else
							{
								ai[0] = 1f;
								if (aiStyle == 3)
								{
									velocity.X = 0f - lastVelocity.X;
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							netUpdate = true;
							SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						}
						else if (aiStyle == 3 || aiStyle == 13 || aiStyle == 69 || aiStyle == 109)
						{
							Collision.HitTiles(position, velocity, width, height);
							if (type == 33 || type == 106 || type == 866)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else
							{
								ai[0] = 1f;
								if ((aiStyle == 3 || aiStyle == 109) && type != 383)
								{
									velocity.X = 0f - lastVelocity.X;
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							netUpdate = true;
							SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						}
						else if (aiStyle == 8 && type != 96)
						{
							SoundEngine.PlaySound(SoundID.Item10, position);
							ai[0] += 1f;
							if ((ai[0] >= 5f && type != 253) || (type == 253 && ai[0] >= 8f))
							{
								position += velocity;
								Kill();
							}
							else
							{
								if (type == 15 && velocity.Y > 4f)
								{
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = (0f - lastVelocity.Y) * 0.8f;
									}
								}
								else if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
							}
						}
						else if (aiStyle == 61)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.3f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.3f;
							}
						}
						else if (aiStyle == 14)
						{
							if (type == 928)
							{
								int num40 = 0;
								for (int num41 = 1000; num41 >= 0; num41--)
								{
									if (num41 != whoAmI && Main.projectile[num41].active && Main.projectile[num41].owner == owner && Main.projectile[num41].type == type)
									{
										num40++;
										if (num40 >= 2 && timeLeft > Main.projectile[num41].timeLeft && Main.projectile[num41].timeLeft > 30)
										{
											Main.projectile[num41].timeLeft = 2;
										}
									}
								}
							}
							if (type == 261 && ((velocity.X != lastVelocity.X && (lastVelocity.X < -3f || lastVelocity.X > 3f)) || (velocity.Y != lastVelocity.Y && (lastVelocity.Y < -3f || lastVelocity.Y > 3f))))
							{
								for (int l = 0; l < 10; l++)
								{
									Collision.HitTiles(position, velocity, width, height);
								}
								SoundEngine.PlaySound(0, (int)base.Center.X, (int)base.Center.Y);
								MakeBoulderOfEarthExplosion();
							}
							if (type >= 326 && type <= 328 && velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.1f;
							}
							if (type >= 400 && type <= 402)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.1f;
								}
							}
							else if (type == 870 && ai[1] == 0f)
							{
								if (velocity.X != lastVelocity.X || velocity.Y != lastVelocity.Y)
								{
									velocity = -lastVelocity;
									ai[1] = 1f;
								}
							}
							else if (type == 50)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.2f;
								}
								if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
								{
									velocity.Y = lastVelocity.Y * -0.2f;
								}
							}
							else if (type == 185)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.9f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
								{
									velocity.Y = lastVelocity.Y * -0.9f;
								}
							}
							else if (type == 277)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.9f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 3f)
								{
									velocity.Y = lastVelocity.Y * -0.9f;
								}
							}
							else if (type != 480)
							{
								if (type == 450)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.1f;
									}
								}
								else
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.5f;
									}
									if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
									{
										velocity.Y = lastVelocity.Y * -0.5f;
									}
								}
							}
						}
						else if (aiStyle == 16)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.4f;
								if (type == 29)
								{
									velocity.X *= 0.8f;
								}
							}
							if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7 && type != 102)
							{
								velocity.Y = lastVelocity.Y * -0.4f;
								if (type == 29)
								{
									velocity.Y *= 0.8f;
								}
							}
							if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || (type >= 338 && type <= 341) || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
							{
								velocity *= 0f;
								alpha = 255;
								timeLeft = 3;
							}
						}
						else if (aiStyle == 68)
						{
							velocity *= 0f;
							alpha = 255;
							timeLeft = 3;
							netUpdate = true;
						}
						else if (type == 870)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.2f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 0f)
							{
								velocity.Y = lastVelocity.Y * -0.2f;
							}
						}
						else
						{
							position += velocity;
							Kill();
						}
					}
				}
			}
		}
		UpdatePosition(wetVelocity);
		if (!flag2 && !flag4 && owner == Main.myPlayer && (tileCollide || flag5) && position != oldPosition)
		{
			Vector2 vector24 = position;
			Vector2 vector25 = oldPosition;
			int num42 = ((overrideWidth != -1) ? overrideWidth : width);
			int num43 = ((overrideHeight != -1) ? overrideHeight : height);
			if (overrideHeight != -1 || overrideWidth != -1)
			{
				vector24 = new Vector2(position.X + (float)(width / 2) - (float)(num42 / 2), position.Y + (float)(height / 2) - (float)(num43 / 2));
				vector25 = new Vector2(oldPosition.X + (float)(width / 2) - (float)(num42 / 2), oldPosition.Y + (float)(height / 2) - (float)(num43 / 2));
			}
			Collision.SwitchTiles(vector24, num42, num43, vector25, 4);
		}
	}

	private void AI_149_GolfBall()
	{
		if (!npcProj && timeLeft < 10)
		{
			timeLeft = 10;
		}
		if (ai[1] == -1f)
		{
			Tile tileSafely = Framing.GetTileSafely(base.Bottom.ToTileCoordinates());
			if (!tileSafely.active() || tileSafely.type != 494)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		BallStepResult ballStepResult = GolfHelper.StepGolfBall(this, ref localAI[0]);
		if (ballStepResult.State == BallState.Resting)
		{
			damage = 0;
			if (Main.netMode == 1 && owner == Main.myPlayer && localAI[1] != (float)ballStepResult.State)
			{
				netUpdate = true;
			}
		}
		localAI[1] = (float)ballStepResult.State;
		rotation += localAI[0];
		if (velocity.Y != 0f && ballStepResult.State == BallState.Moving)
		{
			rotation += velocity.X * 0.1f + velocity.Y * 0.1f;
		}
		if (ballStepResult.State == BallState.Moving && owner == Main.myPlayer)
		{
			bool? flag = ProjectileID.Sets.ForcePlateDetection[135];
			if ((!flag.HasValue || flag.Value) && localAI[1] != 0f)
			{
				Collision.SwitchTiles(position, width, height, oldPosition, 4);
			}
		}
		if (ballStepResult.State == BallState.Moving && Main.netMode == 2 && Main.player.IndexInRange(owner) && Main.player[owner].active)
		{
			RemoteClient.CheckSection(owner, position);
		}
	}

	private void MakeBoulderOfEarthExplosion()
	{
		localAI[0] = 40f;
		float mAX_SPREAD = 20f;
		int fluff = 10;
		int distFluff = 50;
		int layerStart = 1;
		int num = 6;
		if (velocity.Length() < 8f || Math.Abs(velocity.Y) < 4f)
		{
			mAX_SPREAD = 15f;
			fluff = 7;
			distFluff = 30;
			num = 4;
		}
		if (velocity.Length() < 4f || Math.Abs(velocity.Y) < 2f)
		{
			mAX_SPREAD = 15f;
			fluff = 7;
			distFluff = 30;
			num = 2;
			layerStart = 0;
		}
		int layerEnd = num;
		int num2 = num - 2;
		if (num2 < 1)
		{
			num2 = 1;
		}
		CreateGroundExplosion(mAX_SPREAD, fluff, distFluff, layerStart, layerEnd, num2);
		for (int i = 0; i < 10; i++)
		{
			Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
			dust.scale = 0.6f;
			if (i < 5)
			{
				dust.noGravity = true;
				dust.scale = 1.8f;
			}
		}
	}

	private void UpdatePosition(Vector2 wetVelocity)
	{
		if (aiStyle == 4 || aiStyle == 38 || aiStyle == 84 || aiStyle == 148 || (aiStyle == 7 && ai[0] == 2f) || ((type == 440 || type == 449 || type == 606) && ai[1] == 1f) || (aiStyle == 93 && ai[0] < 0f) || type == 540 || type == 756 || type == 818 || type == 856 || type == 933 || ProjectileID.Sets.IsAGolfBall[type])
		{
			return;
		}
		if (wet)
		{
			position += wetVelocity;
		}
		else
		{
			position += velocity;
		}
		if (Main.projPet[type] && tileCollide)
		{
			bool fall = false;
			if (aiStyle == 62)
			{
				fall = true;
			}
			switch (type)
			{
			case 317:
			case 387:
			case 388:
			case 533:
			case 759:
				fall = true;
				break;
			}
			Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, 0f, fall);
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
		}
	}

	public void FishingCheck()
	{
		if (Main.player[owner].wet)
		{
			return;
		}
		FishingAttempt fisher = default(FishingAttempt);
		fisher.X = (int)(base.Center.X / 16f);
		fisher.Y = (int)(base.Center.Y / 16f);
		fisher.bobberType = type;
		GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
		if (fisher.waterTilesCount < 75)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
			return;
		}
		fisher.playerFishingConditions = Main.player[owner].GetFishingConditions();
		int baitItemType = fisher.playerFishingConditions.BaitItemType;
		if (baitItemType == 2673)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
			if ((fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000 && !NPC.AnyNPCs(370))
			{
				ai[1] = Main.rand.Next(-180, -60) - 100;
				localAI[1] = 1f;
				netUpdate = true;
			}
			return;
		}
		fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
		if (fisher.fishingLevel == 0)
		{
			return;
		}
		fisher.CanFishInLava = ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[owner].accLavaFishing;
		if (fisher.chumsInWater > 0)
		{
			fisher.fishingLevel += 11;
		}
		if (fisher.chumsInWater > 1)
		{
			fisher.fishingLevel += 6;
		}
		if (fisher.chumsInWater > 2)
		{
			fisher.fishingLevel += 3;
		}
		Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fisher.fishingLevel);
		fisher.waterNeededToFish = 300;
		float num = Main.maxTilesX / 4200;
		num *= num;
		fisher.atmo = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
		if ((double)fisher.atmo < 0.25)
		{
			fisher.atmo = 0.25f;
		}
		if (fisher.atmo > 1f)
		{
			fisher.atmo = 1f;
		}
		fisher.waterNeededToFish = (int)((float)fisher.waterNeededToFish * fisher.atmo);
		fisher.waterQuality = (float)fisher.waterTilesCount / (float)fisher.waterNeededToFish;
		if (fisher.waterQuality < 1f)
		{
			fisher.fishingLevel = (int)((float)fisher.fishingLevel * fisher.waterQuality);
		}
		fisher.waterQuality = 1f - fisher.waterQuality;
		if (fisher.waterTilesCount < fisher.waterNeededToFish)
		{
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", fisher.fishingLevel, 0.0 - Math.Round(fisher.waterQuality * 100f));
		}
		if (Main.player[owner].luck < 0f)
		{
			if (Main.rand.NextFloat() < 0f - Main.player[owner].luck)
			{
				fisher.fishingLevel = (int)((double)fisher.fishingLevel * (0.9 - (double)Main.rand.NextFloat() * 0.3));
			}
		}
		else if (Main.rand.NextFloat() < Main.player[owner].luck)
		{
			fisher.fishingLevel = (int)((double)fisher.fishingLevel * (1.1 + (double)Main.rand.NextFloat() * 0.3));
		}
		int num2 = (fisher.fishingLevel + 75) / 2;
		if (Main.rand.Next(100) > num2)
		{
			return;
		}
		fisher.heightLevel = 0;
		if ((double)fisher.Y < Main.worldSurface * 0.5)
		{
			fisher.heightLevel = 0;
		}
		else if ((double)fisher.Y < Main.worldSurface)
		{
			fisher.heightLevel = 1;
		}
		else if ((double)fisher.Y < Main.rockLayer)
		{
			fisher.heightLevel = 2;
		}
		else if (fisher.Y < Main.maxTilesY - 300)
		{
			fisher.heightLevel = 3;
		}
		else
		{
			fisher.heightLevel = 4;
		}
		FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
		FishingCheck_ProbeForQuestFish(ref fisher);
		FishingCheck_RollEnemySpawns(ref fisher);
		FishingCheck_RollItemDrop(ref fisher);
		bool flag = false;
		if (fisher.rolledItemDrop > 0)
		{
			if (Main.player[owner].sonarPotion)
			{
				Item item = new Item();
				item.SetDefaults(fisher.rolledItemDrop);
				item.position = position;
				PopupText.sonarText = PopupText.NewText(PopupTextContext.SonarAlert, item, 1, noStack: true);
				if (PopupText.sonarText > -1)
				{
					Main.popupText[PopupText.sonarText].sonar = true;
				}
			}
			float num3 = fisher.fishingLevel;
			ai[1] = (float)Main.rand.Next(-240, -90) - num3;
			localAI[1] = fisher.rolledItemDrop;
			netUpdate = true;
			flag = true;
		}
		if (fisher.rolledEnemySpawn > 0)
		{
			if (Main.player[owner].sonarPotion)
			{
				PopupText.sonarText = PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, base.Center, stay5TimesLonger: false);
				if (PopupText.sonarText > -1)
				{
					Main.popupText[PopupText.sonarText].sonar = true;
				}
			}
			float num4 = fisher.fishingLevel;
			ai[1] = (float)Main.rand.Next(-240, -90) - num4;
			localAI[1] = -fisher.rolledEnemySpawn;
			netUpdate = true;
			flag = true;
		}
		if (!flag)
		{
			int num5 = 0;
			if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
			{
				num5++;
			}
			if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
			{
				num5++;
			}
			if (Main.player[owner].accLavaFishing)
			{
				num5++;
			}
			if (num5 >= 2)
			{
				localAI[1] += 240f;
			}
		}
		if (fisher.CanFishInLava && fisher.inLava)
		{
			AchievementsHelper.HandleSpecialEvent(Main.player[owner], 19);
		}
	}

	private void FishingCheck_RollEnemySpawns(ref FishingAttempt fisher)
	{
		if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
		{
			return;
		}
		int maxValue = 6;
		if (fisher.bobberType == 760)
		{
			maxValue = 3;
		}
		if (Main.rand.Next(maxValue) != 0)
		{
			return;
		}
		if (Main.hardMode)
		{
			fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[4] { 620, 621, 586, 587 });
			if (Main.rand.Next(10) == 0)
			{
				fisher.rolledEnemySpawn = 618;
			}
		}
		else
		{
			fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[2] { 586, 587 });
		}
	}

	private void FishingCheck_RollItemDrop(ref FishingAttempt fisher)
	{
		if (fisher.rolledEnemySpawn > 0)
		{
			return;
		}
		if (fisher.inLava)
		{
			if (fisher.CanFishInLava)
			{
				if (fisher.crate && Main.rand.Next(5) == 0)
				{
					fisher.rolledItemDrop = (Main.hardMode ? 4878 : 4877);
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = Main.rand.NextFromList(new short[4] { 4819, 4820, 4872, 2331 });
				}
				else if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = Main.rand.NextFromList(new short[3] { 4819, 4820, 4872 });
				}
				else if (fisher.veryrare)
				{
					fisher.rolledItemDrop = 2312;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2315;
				}
			}
			return;
		}
		if (fisher.inHoney)
		{
			if (fisher.rare || (fisher.uncommon && Main.rand.Next(2) == 0))
			{
				fisher.rolledItemDrop = 2314;
			}
			else if (fisher.uncommon && fisher.questFish == 2451)
			{
				fisher.rolledItemDrop = 2451;
			}
			return;
		}
		if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
		{
			fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
			return;
		}
		if (fisher.crate)
		{
			bool hardMode = Main.hardMode;
			if (fisher.veryrare || fisher.legendary)
			{
				fisher.rolledItemDrop = (hardMode ? 3981 : 2336);
			}
			else if (fisher.rare && Main.player[owner].ZoneDungeon)
			{
				fisher.rolledItemDrop = (hardMode ? 3984 : 3205);
			}
			else if (fisher.rare && Main.player[owner].ZoneBeach)
			{
				fisher.rolledItemDrop = (hardMode ? 5003 : 5002);
			}
			else if (fisher.rare && Main.player[owner].ZoneCorrupt)
			{
				fisher.rolledItemDrop = (hardMode ? 3982 : 3203);
			}
			else if (fisher.rare && Main.player[owner].ZoneCrimson)
			{
				fisher.rolledItemDrop = (hardMode ? 3983 : 3204);
			}
			else if (fisher.rare && Main.player[owner].ZoneHallow)
			{
				fisher.rolledItemDrop = (hardMode ? 3986 : 3207);
			}
			else if (fisher.rare && Main.player[owner].ZoneJungle)
			{
				fisher.rolledItemDrop = (hardMode ? 3987 : 3208);
			}
			else if (fisher.rare && Main.player[owner].ZoneSnow)
			{
				fisher.rolledItemDrop = (hardMode ? 4406 : 4405);
			}
			else if (fisher.rare && Main.player[owner].ZoneDesert)
			{
				fisher.rolledItemDrop = (hardMode ? 4408 : 4407);
			}
			else if (fisher.rare && fisher.heightLevel == 0)
			{
				fisher.rolledItemDrop = (hardMode ? 3985 : 3206);
			}
			else if (fisher.uncommon)
			{
				fisher.rolledItemDrop = (hardMode ? 3980 : 2335);
			}
			else
			{
				fisher.rolledItemDrop = (hardMode ? 3979 : 2334);
			}
			return;
		}
		if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
		{
			fisher.rolledItemDrop = 4382;
			return;
		}
		if (fisher.legendary && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 2423;
			return;
		}
		if (fisher.legendary && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 3225;
			return;
		}
		if (fisher.legendary && Main.rand.Next(10) == 0)
		{
			fisher.rolledItemDrop = 2420;
			return;
		}
		if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
		{
			fisher.rolledItemDrop = 3196;
			return;
		}
		bool flag = Main.player[owner].ZoneDesert;
		if (Main.player[owner].ZoneDungeon)
		{
			flag = false;
			if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
			{
				fisher.rolledItemDrop = 3000;
			}
		}
		else
		{
			bool flag2 = Main.player[owner].ZoneCorrupt;
			bool flag3 = Main.player[owner].ZoneCrimson;
			if (flag2 && flag3)
			{
				if (Main.rand.Next(2) == 0)
				{
					flag3 = false;
				}
				else
				{
					flag2 = false;
				}
			}
			if (flag2)
			{
				if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3210;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2330;
				}
				else if (fisher.uncommon && fisher.questFish == 2454)
				{
					fisher.rolledItemDrop = 2454;
				}
				else if (fisher.uncommon && fisher.questFish == 2485)
				{
					fisher.rolledItemDrop = 2485;
				}
				else if (fisher.uncommon && fisher.questFish == 2457)
				{
					fisher.rolledItemDrop = 2457;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2318;
				}
			}
			else if (flag3)
			{
				if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3211;
				}
				else if (fisher.uncommon && fisher.questFish == 2477)
				{
					fisher.rolledItemDrop = 2477;
				}
				else if (fisher.uncommon && fisher.questFish == 2463)
				{
					fisher.rolledItemDrop = 2463;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2319;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2305;
				}
			}
			else if (Main.player[owner].ZoneHallow)
			{
				if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
				{
					fisher.rolledItemDrop = 2429;
				}
				else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 3209;
				}
				else if (fisher.heightLevel > 1 && fisher.veryrare)
				{
					fisher.rolledItemDrop = 2317;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2465)
				{
					fisher.rolledItemDrop = 2465;
				}
				else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2468)
				{
					fisher.rolledItemDrop = 2468;
				}
				else if (fisher.rare)
				{
					fisher.rolledItemDrop = 2310;
				}
				else if (fisher.uncommon && fisher.questFish == 2471)
				{
					fisher.rolledItemDrop = 2471;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2307;
				}
			}
			if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneSnow)
			{
				if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
				{
					fisher.rolledItemDrop = 2467;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
				{
					fisher.rolledItemDrop = 2470;
				}
				else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
				{
					fisher.rolledItemDrop = 2484;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
				{
					fisher.rolledItemDrop = 2466;
				}
				else if ((fisher.common && Main.rand.Next(12) == 0) || (fisher.uncommon && Main.rand.Next(6) == 0))
				{
					fisher.rolledItemDrop = 3197;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2306;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2299;
				}
				else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 2309;
				}
			}
			if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneJungle)
			{
				if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
				{
					fisher.rolledItemDrop = 2452;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
				{
					fisher.rolledItemDrop = 2483;
				}
				else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
				{
					fisher.rolledItemDrop = 2488;
				}
				else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
				{
					fisher.rolledItemDrop = 2486;
				}
				else if (fisher.heightLevel > 1 && fisher.uncommon)
				{
					fisher.rolledItemDrop = 2311;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2313;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2302;
				}
			}
			if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
			{
				fisher.rolledItemDrop = 2475;
			}
		}
		if (fisher.rolledItemDrop == 0)
		{
			if (fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000)
			{
				if (fisher.veryrare && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2341;
				}
				else if (fisher.veryrare)
				{
					fisher.rolledItemDrop = 2342;
				}
				else if (fisher.rare && Main.rand.Next(5) == 0)
				{
					fisher.rolledItemDrop = 2438;
				}
				else if (fisher.rare && Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 2332;
				}
				else if (fisher.uncommon && fisher.questFish == 2480)
				{
					fisher.rolledItemDrop = 2480;
				}
				else if (fisher.uncommon && fisher.questFish == 2481)
				{
					fisher.rolledItemDrop = 2481;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 2316;
				}
				else if (fisher.common && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2301;
				}
				else if (fisher.common)
				{
					fisher.rolledItemDrop = 2300;
				}
				else
				{
					fisher.rolledItemDrop = 2297;
				}
			}
			else if (flag)
			{
				if (fisher.uncommon && fisher.questFish == 4393)
				{
					fisher.rolledItemDrop = 4393;
				}
				else if (fisher.uncommon && fisher.questFish == 4394)
				{
					fisher.rolledItemDrop = 4394;
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = 4410;
				}
				else if (Main.rand.Next(3) == 0)
				{
					fisher.rolledItemDrop = 4402;
				}
				else
				{
					fisher.rolledItemDrop = 4401;
				}
			}
		}
		if (fisher.rolledItemDrop != 0)
		{
			return;
		}
		if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
		{
			fisher.rolledItemDrop = 2461;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
		{
			fisher.rolledItemDrop = 2453;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
		{
			fisher.rolledItemDrop = 2473;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
		{
			fisher.rolledItemDrop = 2476;
		}
		else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
		{
			fisher.rolledItemDrop = 2458;
		}
		else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
		{
			fisher.rolledItemDrop = 2459;
		}
		else if (fisher.heightLevel == 0 && fisher.uncommon)
		{
			fisher.rolledItemDrop = 2304;
		}
		else if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
		{
			fisher.rolledItemDrop = 2455;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
		{
			fisher.rolledItemDrop = 2479;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
		{
			fisher.rolledItemDrop = 2456;
		}
		else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
		{
			fisher.rolledItemDrop = 2474;
		}
		else if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
		{
			if (Main.hardMode && Main.rand.Next(2) == 0)
			{
				fisher.rolledItemDrop = 2437;
			}
			else
			{
				fisher.rolledItemDrop = 2436;
			}
		}
		else if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
		{
			fisher.rolledItemDrop = 2308;
		}
		else if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
		{
			fisher.rolledItemDrop = 2320;
		}
		else if (fisher.heightLevel > 1 && fisher.rare)
		{
			fisher.rolledItemDrop = 2321;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
		{
			fisher.rolledItemDrop = 2478;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
		{
			fisher.rolledItemDrop = 2450;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
		{
			fisher.rolledItemDrop = 2464;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
		{
			fisher.rolledItemDrop = 2469;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
		{
			fisher.rolledItemDrop = 2462;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
		{
			fisher.rolledItemDrop = 2482;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
		{
			fisher.rolledItemDrop = 2472;
		}
		else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
		{
			fisher.rolledItemDrop = 2460;
		}
		else if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
		{
			fisher.rolledItemDrop = 2303;
		}
		else if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
		{
			if (Main.rand.Next(4) == 0)
			{
				fisher.rolledItemDrop = 2303;
			}
			else
			{
				fisher.rolledItemDrop = 2309;
			}
		}
		else if (fisher.uncommon && fisher.questFish == 2487)
		{
			fisher.rolledItemDrop = 2487;
		}
		else if (fisher.waterTilesCount > 1000 && fisher.common)
		{
			fisher.rolledItemDrop = 2298;
		}
		else
		{
			fisher.rolledItemDrop = 2290;
		}
	}

	private void FishingCheck_ProbeForQuestFish(ref FishingAttempt fisher)
	{
		fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
		if (Main.player[owner].HasItem(fisher.questFish))
		{
			fisher.questFish = -1;
		}
		if (!NPC.AnyNPCs(369))
		{
			fisher.questFish = -1;
		}
		if (Main.anglerQuestFinished)
		{
			fisher.questFish = -1;
		}
	}

	private void FishingCheck_RollDropLevels(int fishingLevel, out bool common, out bool uncommon, out bool rare, out bool veryrare, out bool legendary, out bool crate)
	{
		int num = 150 / fishingLevel;
		int num2 = 150 * 2 / fishingLevel;
		int num3 = 150 * 7 / fishingLevel;
		int num4 = 150 * 15 / fishingLevel;
		int num5 = 150 * 30 / fishingLevel;
		int num6 = 10;
		if (Main.player[owner].cratePotion)
		{
			num6 += 10;
		}
		if (num < 2)
		{
			num = 2;
		}
		if (num2 < 3)
		{
			num2 = 3;
		}
		if (num3 < 4)
		{
			num3 = 4;
		}
		if (num4 < 5)
		{
			num4 = 5;
		}
		if (num5 < 6)
		{
			num5 = 6;
		}
		common = false;
		uncommon = false;
		rare = false;
		veryrare = false;
		legendary = false;
		crate = false;
		if (Main.rand.Next(num) == 0)
		{
			common = true;
		}
		if (Main.rand.Next(num2) == 0)
		{
			uncommon = true;
		}
		if (Main.rand.Next(num3) == 0)
		{
			rare = true;
		}
		if (Main.rand.Next(num4) == 0)
		{
			veryrare = true;
		}
		if (Main.rand.Next(num5) == 0)
		{
			legendary = true;
		}
		if (Main.rand.Next(100) < num6)
		{
			crate = true;
		}
	}

	private static void GetFishingPondState(int x, int y, out bool lava, out bool honey, out int numWaters, out int chumCount)
	{
		lava = false;
		honey = false;
		numWaters = 0;
		chumCount = 0;
		Point tileCoords = new Point(0, 0);
		GetFishingPondWidth(x, y, out var minX, out var maxX);
		for (int i = minX; i <= maxX; i++)
		{
			int num = y;
			while (Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num) && num < Main.maxTilesY - 10)
			{
				numWaters++;
				num++;
				if (Main.tile[i, num].lava())
				{
					lava = true;
				}
				else if (Main.tile[i, num].honey())
				{
					honey = true;
				}
				tileCoords.X = i;
				tileCoords.Y = num;
				chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
			}
		}
		if (honey)
		{
			numWaters = (int)((double)numWaters * 1.5);
		}
	}

	private static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
	{
		minX = x;
		maxX = x;
		while (minX > 10 && Main.tile[minX, y].liquid > 0 && !WorldGen.SolidTile(minX, y))
		{
			minX--;
		}
		while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y].liquid > 0 && !WorldGen.SolidTile(maxX, y))
		{
			maxX++;
		}
	}

	public bool CanBeReflected()
	{
		if (active && friendly && !hostile && damage > 0 && (aiStyle == 1 || aiStyle == 2 || aiStyle == 8 || aiStyle == 21 || aiStyle == 24 || aiStyle == 28 || aiStyle == 29 || aiStyle == 131))
		{
			return true;
		}
		return false;
	}

	public Color GetFairyQueenWeaponsColor(float alphaChannelMultiplier = 1f, float lerpToWhite = 0f, float? rawHueOverride = null)
	{
		float num = ai[1];
		if (rawHueOverride.HasValue)
		{
			num = rawHueOverride.Value;
		}
		float num2 = (num + 0.5f) % 1f;
		float saturation = 1f;
		float luminosity = 0.5f;
		if (Main.player[owner].active)
		{
			switch (Main.player[owner].name)
			{
			case "Cenx":
			{
				float amount3 = Utils.PingPongFrom01To010(num2);
				amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
				amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
				Color color2 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount3);
				if (lerpToWhite != 0f)
				{
					color2 = Color.Lerp(color2, Color.White, lerpToWhite);
				}
				color2.A = (byte)((float)(int)color2.A * alphaChannelMultiplier);
				return color2;
			}
			case "Crowno":
				luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(num2));
				num2 = MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(num2));
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Yoraiz0r":
				num2 = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Jaxrud":
				num2 = MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Lazure":
				num2 = MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Leinfors":
				num2 = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Grox The Great":
				num2 = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
				break;
			case "Acamaeda":
				num2 = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Alchemystics":
				num2 = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.6f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Antithesis":
			{
				num2 = 0.51f;
				float amount13 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.5f, amount13);
				break;
			}
			case "Aurora3500":
				num2 = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Criddle":
				num2 = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Darthkitten":
			{
				num2 = 1f;
				float amount12 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(1f, 0.4f, amount12);
				break;
			}
			case "darthmorf":
			{
				num2 = 0f;
				float amount11 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.2f, amount11);
				break;
			}
			case "Discipile":
			{
				num2 = 0.53f;
				float amount10 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.05f, 0.5f, amount10);
				break;
			}
			case "Doylee":
				num2 = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Ghostar":
			{
				num2 = 0.66f;
				float amount9 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.15f, 0.85f, amount9);
				break;
			}
			case "Jenosis":
				num2 = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(num2)) % 1f;
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Kazzymodus":
			{
				num2 = 0.33f;
				float amount8 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0.15f, 0.4f, amount8);
				break;
			}
			case "Khaios":
			{
				num2 = 0.33f;
				float amount7 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.2f, amount7);
				break;
			}
			case "Loki":
			{
				num2 = 0f;
				float amount6 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.25f, amount6);
				break;
			}
			case "ManaUser":
				num2 = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				break;
			case "Mid":
			{
				num2 = 0f;
				float amount5 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.9f, amount5);
				break;
			}
			case "Nike Leon":
				num2 = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "ppowersteef":
				num2 = MathHelper.Lerp(0f, 0.15f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "RBrandon":
				num2 = 0.03f;
				luminosity = 0.3f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Redigit":
				num2 = 0.7f;
				luminosity = 0.5f;
				break;
			case "Serenity":
			{
				num2 = 0.85f;
				float amount4 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(1f, 0.5f, amount4);
				break;
			}
			case "Sigma":
				num2 = MathHelper.Lerp(0f, 0.12f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Unit One":
			{
				float amount2 = Utils.PingPongFrom01To010(num2);
				amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
				Color color = Color.Lerp(Color.Yellow, Color.Blue, amount2);
				if (lerpToWhite != 0f)
				{
					color = Color.Lerp(color, Color.White, lerpToWhite);
				}
				color.A = (byte)((float)(int)color.A * alphaChannelMultiplier);
				return color;
			}
			case "Vulpes Inculta":
				num2 = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
				break;
			case "Waze3174":
				num2 = MathHelper.Lerp(0.33f, 0f, Utils.Turn01ToCyclic010(num2));
				luminosity = 0.3f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			case "Xman101":
			{
				num2 = 0.06f;
				float amount = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
				luminosity = MathHelper.Lerp(0f, 0.5f, amount);
				break;
			}
			case "Zoomo":
				num2 = 0.77f;
				luminosity = 0.5f;
				alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
				break;
			}
		}
		Color color3 = Main.hslToRgb(num2, saturation, luminosity);
		color3 *= Opacity;
		if (lerpToWhite != 0f)
		{
			color3 = Color.Lerp(color3, Color.White, lerpToWhite);
		}
		color3.A = (byte)((float)(int)color3.A * alphaChannelMultiplier);
		return color3;
	}

	public float GetLastPrismHue(float laserIndex, ref float laserLuminance, ref float laserAlphaMultiplier)
	{
		if (Main.player[owner].active)
		{
			double timeForVisualEffects = Main.timeForVisualEffects;
			switch (Main.player[owner].name)
			{
			case "Cenx":
			{
				float amount = Utils.PingPongFrom01To010(laserIndex / 6f);
				amount = MathHelper.SmoothStep(0f, 1f, amount);
				amount = MathHelper.SmoothStep(0f, 1f, amount);
				return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount)).X;
			}
			case "Crowno":
				laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.5f;
				return MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Tsuki":
			case "Yoraiz0r":
				return 0.92f;
			case "Lazure":
				return MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Jaxrud":
				return MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(laserIndex / 6f));
			case "Ghostar":
				laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.66f;
			case "Devalaous":
				return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
			case "Leinfors":
				return 0.73f + (float)Math.Cos(timeForVisualEffects / 3.0 * 6.2831854820251465) * 0.03f;
			case "Aeroblop":
				return 0.25f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
			case "Doylee":
				return 0.84f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.16f;
			case "Darkhalis":
			case "Arkhalis":
				return 0.75f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.07f;
			case "Nike Leon":
				return 0.07f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.04f;
			case "Suweeka":
				return 0.5f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
			case "W1K":
				return 0.75f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.05f;
			case "Grox The Great":
				return 0.41f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.1f;
			case "Acamaeda":
				return 0.18f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.1f;
			case "Alchemystics":
				return 0.73f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
			case "Antithesis":
				laserLuminance = 0.25f;
				laserAlphaMultiplier = 0.4f;
				return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
			case "Aurora3500":
				laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.35f;
			case "Criddle":
				return 0.91f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.19f;
			case "Darthkitten":
				laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 1f;
			case "darthmorf":
				laserLuminance = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 0f;
			case "Discipile":
				laserLuminance = MathHelper.Lerp(0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.35f;
				return 0.55f;
			case "Jenosis":
				return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.08f;
			case "Kazzymodus":
				laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.33f;
			case "Khaios":
				laserLuminance = MathHelper.Lerp(0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.35f;
			case "Loki":
				laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 5.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 0f;
			case "ManaUser":
				return 0.49f + (float)Math.Cos(timeForVisualEffects / 140.0 * 6.2831854820251465) * 0.08f;
			case "Mid":
				laserLuminance = 0.25f;
				laserAlphaMultiplier = 0.4f;
				return 0.86f + (float)Math.Cos(timeForVisualEffects / 270.0 * 6.2831854820251465) * 0.13f;
			case "ppowersteef":
				laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.25f;
				return 0.6f;
			case "RBrandon":
				laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.4f;
				return 1f;
			case "Redigit":
				return 0.7f;
			case "Serenity":
				laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.3f;
				return 0.85f;
			case "Sigma":
				return 0.06f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.06f;
			case "Unit One":
				return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
			case "Vulpes Inculta":
				return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
			case "Waze3174":
				return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
			case "Xman101":
				laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
				laserAlphaMultiplier = 0.2f;
				return 0.33f;
			case "Zoomo":
				return 0.77f;
			case "Random":
				return Main.rand.NextFloat();
			}
		}
		return (float)(int)laserIndex / 6f;
	}

	public static int GetByUUID(int owner, float uuid)
	{
		return GetByUUID(owner, (int)uuid);
	}

	public static int GetByUUID(int owner, int uuid)
	{
		if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
		{
			return -1;
		}
		int num = Main.projectileIdentity[owner, uuid];
		if (num >= 0 && Main.projectile[num].active)
		{
			return num;
		}
		return -1;
	}

	public void ProjectileFixDesperation()
	{
		if (owner < 0 || owner >= 1000)
		{
			return;
		}
		switch (type)
		{
		case 461:
		case 632:
		case 642:
		case 644:
		{
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].owner == owner && (float)Main.projectile[i].identity == ai[1] && Main.projectile[i].active)
				{
					ai[1] = i;
					break;
				}
			}
			break;
		}
		}
	}

	public bool ShouldUseWindPhysics()
	{
		if (Main.windPhysics)
		{
			bool? flag = ProjectileID.Sets.WindPhysicsImmunity[type];
			if (flag.HasValue)
			{
				return !flag.Value;
			}
			switch (aiStyle)
			{
			case 1:
			case 2:
			case 8:
			case 10:
			case 14:
			case 16:
			case 17:
			case 21:
			case 24:
			case 28:
			case 29:
			case 32:
			case 33:
			case 34:
			case 35:
			case 49:
			case 72:
			case 93:
			case 96:
			case 106:
				return true;
			}
		}
		return false;
	}

	private void AI_151_SuperStar()
	{
		alpha -= 10;
		int num = 100;
		if (alpha < num)
		{
			alpha = num;
		}
		if (soundDelay == 0)
		{
			soundDelay = 20 + Main.rand.Next(40);
			SoundEngine.PlaySound(SoundID.Item9, position);
		}
		rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.005f * (float)direction;
		Vector2 vector = new Vector2(Main.screenWidth, Main.screenHeight);
		if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector / 2f, vector + new Vector2(400f))) && Main.rand.Next(6) == 0)
		{
			Gore.NewGore(position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
		}
		for (int i = 0; i < 2; i++)
		{
			if (Main.rand.Next(8) == 0)
			{
				int num2 = 228;
				Dust dust = Dust.NewDustDirect(position, width, height, num2, 0f, 0f, 127);
				dust.velocity *= 0.25f;
				dust.scale = 1.3f;
				dust.noGravity = true;
				dust.velocity += velocity.RotatedBy((float)Math.PI / 8f * (1f - (float)(2 * i))) * 0.2f;
			}
		}
	}

	public bool IsInterruptible(Player player)
	{
		int num = aiStyle;
		if (num == 160)
		{
			return true;
		}
		return false;
	}

	public void Interrupt(Player player)
	{
		int num = aiStyle;
		if (num == 160)
		{
			Kill();
			player.heldProj = -1;
			player.itemAnimation = 0;
			player.itemTime = 0;
		}
	}

	private void AI_152_SuperStarSlash()
	{
		alpha -= 10;
		int num = 100;
		if (alpha < num)
		{
			alpha = num;
		}
		if (soundDelay == 0)
		{
			soundDelay = 20 + Main.rand.Next(40);
			SoundEngine.PlaySound(SoundID.Item9, position);
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		tileCollide = false;
	}

	private void Resize(int newWidth, int newHeight)
	{
		position = base.Center;
		width = newWidth;
		height = newHeight;
		base.Center = position;
	}

	public void AI()
	{
		//IL_19555: Unknown result type (might be due to invalid IL or missing references)
		//IL_19591: Unknown result type (might be due to invalid IL or missing references)
		//IL_19596: Unknown result type (might be due to invalid IL or missing references)
		//IL_195d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_195dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_2dc04: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e396: Unknown result type (might be due to invalid IL or missing references)
		//IL_2e485: Unknown result type (might be due to invalid IL or missing references)
		if (aiStyle == 1)
		{
			AI_001();
		}
		else if (aiStyle == 2)
		{
			if (Main.windPhysics)
			{
				velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
			}
			if (type == 93 && Main.rand.Next(5) == 0)
			{
				int num = Dust.NewDust(base.position, width, height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 0.3f);
				Main.dust[num].velocity.X *= 0.3f;
				Main.dust[num].velocity.Y *= 0.3f;
			}
			if (type == 304 && localAI[0] == 0f)
			{
				localAI[0] += 1f;
				alpha = 0;
			}
			if (type == 510)
			{
				rotation += Math.Abs(velocity.X) * 0.04f * (float)direction;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
			}
			if (type == 909)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					velocity.Y += 0.4f;
					velocity.X *= 0.97f;
				}
				if (Main.netMode != 1 && this.ai[1] == 0f)
				{
					this.ai[1] = 1 + Main.rand.Next(6);
					netUpdate = true;
				}
				if (this.ai[1] > 0f)
				{
					frame = (int)this.ai[1] - 1;
				}
			}
			else if (type == 162)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int i = 0; i < 10; i++)
						{
							int num2 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num2];
							dust.velocity *= 0.5f;
							dust = Main.dust[num2];
							dust.velocity += velocity * 0.1f;
						}
						for (int j = 0; j < 5; j++)
						{
							int num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num3].noGravity = true;
							Dust dust = Main.dust[num3];
							dust.velocity *= 3f;
							dust = Main.dust[num3];
							dust.velocity += velocity * 0.2f;
							num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust = Main.dust[num3];
							dust.velocity *= 2f;
							dust = Main.dust[num3];
							dust.velocity += velocity * 0.3f;
						}
						for (int k = 0; k < 1; k++)
						{
							int num4 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num4];
							gore.position += velocity * 1.25f;
							Main.gore[num4].scale = 1.5f;
							gore = Main.gore[num4];
							gore.velocity += velocity * 0.5f;
							gore = Main.gore[num4];
							gore.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 281)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int l = 0; l < 10; l++)
						{
							int num5 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num5];
							dust.velocity *= 0.5f;
							dust = Main.dust[num5];
							dust.velocity += velocity * 0.1f;
						}
						for (int m = 0; m < 5; m++)
						{
							int num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num6].noGravity = true;
							Dust dust = Main.dust[num6];
							dust.velocity *= 3f;
							dust = Main.dust[num6];
							dust.velocity += velocity * 0.2f;
							num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust = Main.dust[num6];
							dust.velocity *= 2f;
							dust = Main.dust[num6];
							dust.velocity += velocity * 0.3f;
						}
						for (int n = 0; n < 1; n++)
						{
							int num7 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num7];
							gore.position += velocity * 1.25f;
							Main.gore[num7].scale = 1.5f;
							gore = Main.gore[num7];
							gore.velocity += velocity * 0.5f;
							gore = Main.gore[num7];
							gore.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 240)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item14, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 16f)
				{
					velocity.Y += 0.18f;
					velocity.X *= 0.991f;
				}
				if (this.ai[0] > 2f)
				{
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int num8 = 0; num8 < 7; num8++)
						{
							int num9 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num9];
							dust.velocity *= 0.5f;
							dust = Main.dust[num9];
							dust.velocity += velocity * 0.1f;
						}
						for (int num10 = 0; num10 < 3; num10++)
						{
							int num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num11].noGravity = true;
							Dust dust = Main.dust[num11];
							dust.velocity *= 3f;
							dust = Main.dust[num11];
							dust.velocity += velocity * 0.2f;
							num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust = Main.dust[num11];
							dust.velocity *= 2f;
							dust = Main.dust[num11];
							dust.velocity += velocity * 0.3f;
						}
						for (int num12 = 0; num12 < 1; num12++)
						{
							int num13 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num13];
							gore.position += velocity * 1.25f;
							Main.gore[num13].scale = 1.25f;
							gore = Main.gore[num13];
							gore.velocity += velocity * 0.5f;
							gore = Main.gore[num13];
							gore.velocity *= 0.02f;
						}
					}
				}
			}
			else if (type == 497)
			{
				int num14 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num14].position = (Main.dust[num14].position + base.Center) / 2f;
				Main.dust[num14].noGravity = true;
				Dust dust = Main.dust[num14];
				dust.velocity *= 0.3f;
				dust = Main.dust[num14];
				dust.velocity -= velocity * 0.1f;
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					velocity.X *= 0.99f;
					velocity.Y += 0.5f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 861)
			{
				if (Main.myPlayer == owner)
				{
					localAI[0]++;
					if (localAI[0] > 30f)
					{
						localAI[0] = 30f;
					}
					Player player = Main.player[owner];
					for (int num15 = 0; num15 < 255; num15++)
					{
						Player player2 = Main.player[num15];
						if (player2 != null && player2.active && !player2.dead && (player2.whoAmI != player.whoAmI || !(localAI[0] < 30f)) && Colliding(base.Hitbox, player2.Hitbox))
						{
							Kill();
							break;
						}
					}
				}
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				else
				{
					velocity.X *= 0.995f;
				}
				if (Math.Abs(velocity.X) < 0.5f)
				{
					velocity.X = 0f;
				}
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					Kill();
				}
				velocity.Y += 0.1f;
				if (this.ai[1] == 1f)
				{
					frame = (frameCounter = 0);
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
				}
				else
				{
					if (frame == 0)
					{
						frame = 1;
					}
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 1;
						}
					}
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI / 2f;
					}
				}
			}
			else if (type == 249)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 0f)
				{
					velocity.Y += 0.25f;
				}
			}
			else if (type == 347)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 5f)
				{
					velocity.Y += 0.25f;
				}
			}
			else if (type == 501)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 18f)
				{
					velocity.X *= 0.995f;
					velocity.Y += 0.2f;
				}
			}
			else if (type == 504)
			{
				alpha = 255;
				this.ai[0] += 1f;
				if (this.ai[0] > 3f)
				{
					int num16 = 100;
					if (this.ai[0] > 20f)
					{
						int num17 = 40;
						float num18 = this.ai[0] - 20f;
						num16 = (int)(100f * (1f - num18 / (float)num17));
						if (num18 >= (float)num17)
						{
							Kill();
						}
					}
					if (this.ai[0] <= 10f)
					{
						num16 = (int)this.ai[0] * 10;
					}
					if (Main.rand.Next(100) < num16)
					{
						int num19 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 150);
						Main.dust[num19].position = (Main.dust[num19].position + base.Center) / 2f;
						Main.dust[num19].noGravity = true;
						Dust dust = Main.dust[num19];
						dust.velocity *= 2f;
						dust = Main.dust[num19];
						dust.scale *= 1.2f;
						dust = Main.dust[num19];
						dust.velocity += velocity;
					}
				}
				if (this.ai[0] >= 20f)
				{
					velocity.X *= 0.99f;
					velocity.Y += 0.1f;
				}
			}
			else if (type == 69 || type == 70 || type == 621)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 10f)
				{
					velocity.Y += 0.25f;
					velocity.X *= 0.99f;
				}
			}
			else if (type == 166)
			{
				if (owner == Main.myPlayer && this.ai[1] == 1f)
				{
					for (int num20 = 0; num20 < 200; num20++)
					{
						if (Main.npc[num20].active && Main.npc[num20].townNPC && Colliding(base.Hitbox, Main.npc[num20].Hitbox))
						{
							Kill();
							return;
						}
					}
					if (Main.netMode == 1)
					{
						for (int num21 = 0; num21 < 255; num21++)
						{
							if (num21 != owner && Main.player[num21].active && !Main.player[owner].InOpposingTeam(Main.player[num21]) && Colliding(base.Hitbox, Main.player[num21].Hitbox))
							{
								Kill();
								return;
							}
						}
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			else if (type == 300)
			{
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					velocity.Y += 0.2f;
					velocity.X *= 0.99f;
				}
			}
			else if (type == 306)
			{
				if (alpha <= 200)
				{
					for (int num22 = 0; num22 < 4; num22++)
					{
						float num23 = velocity.X / 4f * (float)num22;
						float num24 = velocity.Y / 4f * (float)num22;
						int num25 = Dust.NewDust(base.position, width, height, 184);
						Main.dust[num25].position.X = base.Center.X - num23;
						Main.dust[num25].position.Y = base.Center.Y - num24;
						Dust dust = Main.dust[num25];
						dust.velocity *= 0f;
						Main.dust[num25].scale = 0.7f;
					}
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
			}
			else if (type == 304)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 30f)
				{
					alpha += 10;
					damage = (int)((double)damage * 0.9);
					knockBack = (int)((double)knockBack * 0.9);
					if (alpha >= 255)
					{
						active = false;
					}
				}
				if (this.ai[0] < 30f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 370 || type == 371 || type == 936)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 15f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			else
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					velocity.Y += 0.4f;
					velocity.X *= 0.97f;
				}
				else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (type == 54 && Main.rand.Next(20) == 0)
			{
				Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
			}
		}
		else if (aiStyle == 3)
		{
			if (soundDelay == 0 && type != 383)
			{
				soundDelay = 8;
				SoundEngine.PlaySound(SoundID.Item7, base.position);
			}
			if (type == 19)
			{
				for (int num26 = 0; num26 < 2; num26++)
				{
					int num27 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num27].noGravity = true;
					Main.dust[num27].velocity.X *= 0.3f;
					Main.dust[num27].velocity.Y *= 0.3f;
				}
			}
			else if (type == 867)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num28 = Dust.NewDust(base.position, width, height, 165, velocity.X, velocity.Y, 50);
					Dust dust = Main.dust[num28];
					dust.velocity *= 0.5f;
					Main.dust[num28].noGravity = true;
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(1) == 0)
				{
					int num29 = Dust.NewDust(base.position, width, height, 40, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.4f);
					Main.dust[num29].noGravity = true;
				}
			}
			else if (type == 320)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num30 = Dust.NewDust(base.position, width, height, 5, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.1f);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num30].scale = 0.9f;
						Dust dust = Main.dust[num30];
						dust.velocity *= 0.2f;
					}
					else
					{
						Main.dust[num30].noGravity = true;
					}
				}
			}
			else if (type == 6)
			{
				if (Main.rand.Next(5) == 0)
				{
					int num31 = Main.rand.Next(3);
					Dust.NewDust(base.position, width, height, num31 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, velocity.X * 0.25f, velocity.Y * 0.25f, 150, default(Color), 0.7f);
				}
			}
			else if (type == 113 && Main.rand.Next(1) == 0)
			{
				int num32 = Dust.NewDust(base.position, width, height, 76, velocity.X * 0.15f, velocity.Y * 0.15f, 0, default(Color), 1.1f);
				Main.dust[num32].noGravity = true;
				Dust.NewDust(base.position, width, height, 15, velocity.X * 0.05f, velocity.Y * 0.05f, 150, default(Color), 0.6f);
			}
			if (this.ai[0] == 0f)
			{
				bool flag = true;
				int num33 = type;
				if (num33 == 866)
				{
					flag = false;
				}
				if (flag)
				{
					this.ai[1] += 1f;
				}
				if (type == 106 && this.ai[1] >= 45f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (type == 320 || type == 383)
				{
					if (this.ai[1] >= 10f)
					{
						velocity.Y += 0.5f;
						if (type == 383 && velocity.Y < 0f)
						{
							velocity.Y += 0.35f;
						}
						velocity.X *= 0.95f;
						if (velocity.Y > 16f)
						{
							velocity.Y = 16f;
						}
						if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
						{
							this.ai[0] = 1f;
						}
					}
				}
				else if (type == 182)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num34 = Dust.NewDust(base.position, width, height, 57, 0f, 0f, 255, default(Color), 0.75f);
						Dust dust = Main.dust[num34];
						dust.velocity *= 0.1f;
						Main.dust[num34].noGravity = true;
					}
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					float num35 = base.position.X;
					float num36 = base.position.Y;
					float num37 = 800f;
					bool flag2 = false;
					if (this.ai[1] > 10f && this.ai[1] < 360f)
					{
						for (int num38 = 0; num38 < 200; num38++)
						{
							if (Main.npc[num38].CanBeChasedBy(this))
							{
								float num39 = Main.npc[num38].position.X + (float)(Main.npc[num38].width / 2);
								float num40 = Main.npc[num38].position.Y + (float)(Main.npc[num38].height / 2);
								float num41 = Distance(Main.npc[num38].Center);
								if (num41 < num37 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num38].position, Main.npc[num38].width, Main.npc[num38].height))
								{
									num37 = num41;
									num35 = num39;
									num36 = num40;
									flag2 = true;
								}
							}
						}
					}
					if (!flag2)
					{
						num35 = base.position.X + (float)(width / 2) + velocity.X * 100f;
						num36 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
						if (this.ai[1] >= 30f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					float num42 = 12f;
					float num43 = 0.25f;
					Vector2 vector = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num44 = num35 - vector.X;
					float num45 = num36 - vector.Y;
					float num46 = (float)Math.Sqrt(num44 * num44 + num45 * num45);
					num46 = num42 / num46;
					num44 *= num46;
					num45 *= num46;
					if (velocity.X < num44)
					{
						velocity.X += num43;
						if (velocity.X < 0f && num44 > 0f)
						{
							velocity.X += num43 * 2f;
						}
					}
					else if (velocity.X > num44)
					{
						velocity.X -= num43;
						if (velocity.X > 0f && num44 < 0f)
						{
							velocity.X -= num43 * 2f;
						}
					}
					if (velocity.Y < num45)
					{
						velocity.Y += num43;
						if (velocity.Y < 0f && num45 > 0f)
						{
							velocity.Y += num43 * 2f;
						}
					}
					else if (velocity.Y > num45)
					{
						velocity.Y -= num43;
						if (velocity.Y > 0f && num45 < 0f)
						{
							velocity.Y -= num43 * 2f;
						}
					}
				}
				else if (type == 866)
				{
					if (owner == Main.myPlayer && damage > 0)
					{
						float num47 = this.ai[1];
						if (localAI[0] >= 10f && localAI[0] <= 360f)
						{
							int num48 = FindTargetWithLineOfSight();
							this.ai[1] = num48;
						}
						else
						{
							this.ai[1] = -1f;
						}
						if (this.ai[1] != num47)
						{
							netUpdate = true;
						}
					}
					localAI[0] += 1f;
					int num49 = (int)this.ai[1];
					Vector2 vector2;
					if (Main.npc.IndexInRange(num49) && Main.npc[num49].CanBeChasedBy(this))
					{
						vector2 = Main.npc[num49].Center;
					}
					else
					{
						vector2 = base.Center + velocity * 100f;
						int num50 = 30;
						if (owner != Main.myPlayer)
						{
							num50 = 60;
						}
						if (localAI[0] >= (float)num50)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					float num51 = 12f;
					float num52 = 0.25f;
					Vector2 vector3 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num53 = vector2.X - vector3.X;
					float num54 = vector2.Y - vector3.Y;
					float num55 = (float)Math.Sqrt(num53 * num53 + num54 * num54);
					num55 = num51 / num55;
					num53 *= num55;
					num54 *= num55;
					if (velocity.X < num53)
					{
						velocity.X += num52;
						if (velocity.X < 0f && num53 > 0f)
						{
							velocity.X += num52 * 2f;
						}
					}
					else if (velocity.X > num53)
					{
						velocity.X -= num52;
						if (velocity.X > 0f && num53 < 0f)
						{
							velocity.X -= num52 * 2f;
						}
					}
					if (velocity.Y < num54)
					{
						velocity.Y += num52;
						if (velocity.Y < 0f && num54 > 0f)
						{
							velocity.Y += num52 * 2f;
						}
					}
					else if (velocity.Y > num54)
					{
						velocity.Y -= num52;
						if (velocity.Y > 0f && num54 < 0f)
						{
							velocity.Y -= num52 * 2f;
						}
					}
				}
				else if (type == 301)
				{
					if (this.ai[1] >= 20f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else if (this.ai[1] >= 30f)
				{
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			else
			{
				tileCollide = false;
				float num56 = 9f;
				float num57 = 0.4f;
				if (type == 19)
				{
					num56 = 20f;
					num57 = 1.5f;
				}
				else if (type == 33)
				{
					num56 = 18f;
					num57 = 1.2f;
				}
				else if (type == 182)
				{
					num56 = 16f;
					num57 = 1.2f;
				}
				else if (type == 866)
				{
					num56 = 16f;
					num57 = 1.2f;
				}
				else if (type == 106)
				{
					num56 = 16f;
					num57 = 1.2f;
				}
				else if (type == 272)
				{
					num56 = 20f;
					num57 = 1.5f;
				}
				else if (type == 333)
				{
					num56 = 12f;
					num57 = 0.6f;
				}
				else if (type == 301)
				{
					num56 = 15f;
					num57 = 3f;
				}
				else if (type == 320)
				{
					num56 = 15f;
					num57 = 3f;
				}
				else if (type == 383)
				{
					num56 = 16f;
					num57 = 4f;
				}
				Vector2 vector4 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num58 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector4.X;
				float num59 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector4.Y;
				float num60 = (float)Math.Sqrt(num58 * num58 + num59 * num59);
				if (num60 > 3000f)
				{
					Kill();
				}
				num60 = num56 / num60;
				num58 *= num60;
				num59 *= num60;
				if (type == 383)
				{
					Vector2 vector5 = new Vector2(num58, num59) - velocity;
					if (vector5 != Vector2.Zero)
					{
						Vector2 vector6 = vector5;
						vector6.Normalize();
						velocity += vector6 * Math.Min(num57, vector5.Length());
					}
				}
				else
				{
					if (velocity.X < num58)
					{
						velocity.X += num57;
						if (velocity.X < 0f && num58 > 0f)
						{
							velocity.X += num57;
						}
					}
					else if (velocity.X > num58)
					{
						velocity.X -= num57;
						if (velocity.X > 0f && num58 < 0f)
						{
							velocity.X -= num57;
						}
					}
					if (velocity.Y < num59)
					{
						velocity.Y += num57;
						if (velocity.Y < 0f && num59 > 0f)
						{
							velocity.Y += num57;
						}
					}
					else if (velocity.Y > num59)
					{
						velocity.Y -= num57;
						if (velocity.Y > 0f && num59 < 0f)
						{
							velocity.Y -= num57;
						}
					}
				}
				if (Main.myPlayer == owner)
				{
					Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					Rectangle value = new Rectangle((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
					if (rectangle.Intersects(value))
					{
						Kill();
					}
				}
			}
			if (type == 106)
			{
				rotation += 0.3f * (float)direction;
			}
			else if (type == 866)
			{
				rotation = velocity.ToRotation();
				if (Main.rand.Next(2) == 0)
				{
					int num61 = Dust.NewDust(base.position, width, height, 212);
					Dust dust = Main.dust[num61];
					dust.velocity *= 0.1f;
					Main.dust[num61].noGravity = true;
				}
			}
			else if (type == 383)
			{
				if (this.ai[0] == 0f)
				{
					Vector2 vector7 = velocity;
					vector7.Normalize();
					rotation = (float)Math.Atan2(vector7.Y, vector7.X) + 1.57f;
				}
				else
				{
					Vector2 vector8 = base.Center - Main.player[owner].Center;
					vector8.Normalize();
					rotation = (float)Math.Atan2(vector8.Y, vector8.X) + 1.57f;
				}
			}
			else
			{
				rotation += 0.4f * (float)direction;
			}
		}
		else if (aiStyle == 4)
		{
			if (Main.netMode != 2 && this.ai[1] == 0f && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				LegacySoundStyle legacySoundStyle = SoundID.Item8;
				if (type == 494)
				{
					legacySoundStyle = SoundID.Item101;
				}
				SoundEngine.PlaySound(legacySoundStyle, base.Center);
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (this.ai[0] == 0f)
			{
				if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
				{
					type++;
					netUpdate = true;
				}
				alpha -= 50;
				if (type >= 150 && type <= 152)
				{
					alpha -= 25;
				}
				else if (type == 493 || type == 494)
				{
					alpha -= 50;
				}
				if (alpha > 0)
				{
					return;
				}
				alpha = 0;
				this.ai[0] = 1f;
				if (this.ai[1] == 0f)
				{
					this.ai[1] += 1f;
					base.position += velocity * 1f;
				}
				if (type == 7 && Main.myPlayer == owner)
				{
					int num62 = type;
					if (this.ai[1] >= 6f)
					{
						num62++;
					}
					int num63 = NewProjectile(base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num62, damage, knockBack, owner);
					Main.projectile[num63].damage = damage;
					Main.projectile[num63].ai[1] = this.ai[1] + 1f;
					NetMessage.SendData(27, -1, -1, null, num63);
				}
				else if (type == 494 && Main.myPlayer == owner)
				{
					int num64 = type;
					if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
					{
						num64--;
					}
					int num65 = damage;
					float num66 = knockBack;
					if (num64 == 493)
					{
						num65 = (int)((double)damage * 1.25);
						num66 = knockBack * 1.25f;
					}
					int number = NewProjectile(base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num64, num65, num66, owner, 0f, this.ai[1] + 1f);
					NetMessage.SendData(27, -1, -1, null, number);
				}
				else if ((type == 150 || type == 151) && Main.myPlayer == owner)
				{
					int num67 = type;
					if (type == 150)
					{
						num67 = 151;
					}
					else if (type == 151)
					{
						num67 = 150;
					}
					if (this.ai[1] >= 10f && type == 151)
					{
						num67 = 152;
					}
					int num68 = NewProjectile(base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num67, damage, knockBack, owner);
					Main.projectile[num68].damage = damage;
					Main.projectile[num68].ai[1] = this.ai[1] + 1f;
					NetMessage.SendData(27, -1, -1, null, num68);
				}
				return;
			}
			if (alpha < 170 && alpha + 5 >= 170)
			{
				if (type >= 150 && type <= 152)
				{
					for (int num69 = 0; num69 < 8; num69++)
					{
						int num70 = Dust.NewDust(base.position, width, height, 7, velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
						Main.dust[num70].noGravity = true;
						Dust dust = Main.dust[num70];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 493 || type == 494)
				{
					for (int num71 = 0; num71 < 8; num71++)
					{
						int num72 = Dust.NewDust(base.position, width, height, Main.rand.Next(68, 71), velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
						Main.dust[num72].noGravity = true;
						Dust dust = Main.dust[num72];
						dust.velocity *= 0.5f;
					}
				}
				else
				{
					for (int num73 = 0; num73 < 3; num73++)
					{
						Dust.NewDust(base.position, width, height, 18, velocity.X * 0.025f, velocity.Y * 0.025f, 170, default(Color), 1.2f);
					}
					Dust.NewDust(base.position, width, height, 14, 0f, 0f, 170, default(Color), 1.1f);
				}
			}
			if (type >= 150 && type <= 152)
			{
				alpha += 3;
			}
			else if (type == 493 || type == 494)
			{
				alpha += 4;
			}
			else
			{
				alpha += 5;
			}
			if (alpha >= 255)
			{
				Kill();
			}
		}
		else if (aiStyle == 5)
		{
			if (type == 12 && Main.dayTime && damage == 1000)
			{
				Kill();
			}
			if (type == 503 || type == 723 || type == 724 || type == 725 || type == 726)
			{
				if (base.Center.Y > this.ai[1])
				{
					tileCollide = true;
				}
			}
			else if (type == 92)
			{
				if (base.position.Y > this.ai[1])
				{
					tileCollide = true;
				}
			}
			else
			{
				if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, width, height))
				{
					this.ai[1] = 1f;
					netUpdate = true;
				}
				if (this.ai[1] != 0f)
				{
					tileCollide = true;
				}
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, base.position);
			}
			if (type == 503)
			{
				alpha -= 15;
				int num74 = 150;
				if (base.Center.Y >= this.ai[1])
				{
					num74 = 0;
				}
				if (alpha < num74)
				{
					alpha = num74;
				}
				localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				alpha -= 15;
				int num75 = 100;
				if (base.Center.Y >= this.ai[1])
				{
					num75 = 0;
				}
				if (alpha < num75)
				{
					alpha = num75;
				}
				localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			else
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
				}
				alpha += (int)(25f * localAI[0]);
				if (alpha > 200)
				{
					alpha = 200;
					localAI[0] = -1f;
				}
				if (alpha < 0)
				{
					alpha = 0;
					localAI[0] = 1f;
				}
			}
			if (type == 503)
			{
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
			}
			if (type == 503)
			{
				if (Main.rand.Next(16) == 0)
				{
					Vector2 vector9 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy(velocity.ToRotation());
					int num76 = Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
					Main.dust[num76].velocity = vector9 * 0.66f;
					Main.dust[num76].position = base.Center + vector9 * 12f;
				}
				if (Main.rand.Next(48) == 0)
				{
					int num77 = Gore.NewGore(base.Center, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), 16);
					Gore gore = Main.gore[num77];
					gore.velocity *= 0.66f;
					gore = Main.gore[num77];
					gore.velocity += velocity * 0.3f;
				}
			}
			if (type == 12)
			{
				Vector2 vector10 = new Vector2(Main.screenWidth, Main.screenHeight);
				if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector10 / 2f, vector10 + new Vector2(400f))) && Main.rand.Next(6) == 0)
				{
					Gore.NewGore(base.position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
				}
				light = 0.9f;
				if (Main.rand.Next(20) == 0)
				{
					Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				if (type == 726 || type == 725 || type == 726)
				{
					Vector2 vector11 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector11 / 2f, vector11 + new Vector2(400f))) && Main.rand.Next(24) == 0)
					{
						Gore.NewGore(base.position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17));
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(base.position, width, height, 86, 0f, 0f, 127);
						Dust dust = dust2;
						dust.velocity *= 0.5f;
						dust2.noGravity = true;
					}
				}
				if (type == 723)
				{
					Vector2 vector12 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector12 / 2f, vector12 + new Vector2(400f))) && Main.rand.Next(6) == 0)
					{
						Gore.NewGore(base.position, velocity * 0.2f, 17);
					}
					for (float num78 = 0f; num78 < 3f; num78 += 1f)
					{
						Vector2 vector13 = base.Center + new Vector2(0f, 12f * scale).RotatedBy(base.position.Y / 200f + num78 * ((float)Math.PI * 2f) + rotation) - velocity * 0.5f;
						Dust dust3 = Dust.NewDustPerfect(vector13, 267, velocity * 0.2f * num78, 0, Color.Blue);
						dust3.noLight = true;
						dust3.noGravity = true;
						dust3 = Dust.NewDustPerfect(vector13, 267, velocity * 0.2f * num78, 0, Color.White, 0.4f);
						dust3.noLight = true;
						dust3.noGravity = true;
					}
				}
			}
			else if (this.ai[1] == 1f || type == 92)
			{
				light = 0.9f;
				if (Main.rand.Next(10) == 0)
				{
					Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
				if (Main.rand.Next(20) == 0)
				{
					Gore.NewGore(base.position, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), Main.rand.Next(16, 18));
				}
			}
		}
		else if (aiStyle == 6)
		{
			velocity *= 0.95f;
			this.ai[0] += 1f;
			if (this.ai[0] == 180f)
			{
				Kill();
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				int num79 = 10 + type;
				if (type == 463)
				{
					num79 = 231;
				}
				for (int num80 = 0; num80 < 30; num80++)
				{
					Dust.NewDust(base.position, width, height, num79, velocity.X, velocity.Y, 50);
				}
			}
			if (type != 10 && type != 11 && type != 463)
			{
				return;
			}
			int num81 = (int)(base.position.X / 16f) - 1;
			int num82 = (int)((base.position.X + (float)width) / 16f) + 2;
			int num83 = (int)(base.position.Y / 16f) - 1;
			int num84 = (int)((base.position.Y + (float)height) / 16f) + 2;
			if (num81 < 0)
			{
				num81 = 0;
			}
			if (num82 > Main.maxTilesX)
			{
				num82 = Main.maxTilesX;
			}
			if (num83 < 0)
			{
				num83 = 0;
			}
			if (num84 > Main.maxTilesY)
			{
				num84 = Main.maxTilesY;
			}
			Vector2 vector14 = default(Vector2);
			for (int num85 = num81; num85 < num82; num85++)
			{
				for (int num86 = num83; num86 < num84; num86++)
				{
					vector14.X = num85 * 16;
					vector14.Y = num86 * 16;
					if (!(base.position.X + (float)width > vector14.X) || !(base.position.X < vector14.X + 16f) || !(base.position.Y + (float)height > vector14.Y) || !(base.position.Y < vector14.Y + 16f) || Main.myPlayer != owner || !Main.tile[num85, num86].active())
					{
						continue;
					}
					if (type == 10)
					{
						if (Main.tile[num85, num86].type == 23 || Main.tile[num85, num86].type == 199)
						{
							Main.tile[num85, num86].type = 2;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
						if (Main.tile[num85, num86].type == 25 || Main.tile[num85, num86].type == 203)
						{
							Main.tile[num85, num86].type = 1;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
						if (Main.tile[num85, num86].type == 112 || Main.tile[num85, num86].type == 234)
						{
							Main.tile[num85, num86].type = 53;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
						if (Main.tile[num85, num86].type == 163 || Main.tile[num85, num86].type == 200)
						{
							Main.tile[num85, num86].type = 161;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
						if (Main.tile[num85, num86].type == 400 || Main.tile[num85, num86].type == 401)
						{
							Main.tile[num85, num86].type = 396;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
						if (Main.tile[num85, num86].type == 398 || Main.tile[num85, num86].type == 399)
						{
							Main.tile[num85, num86].type = 397;
							WorldGen.SquareTileFrame(num85, num86);
							if (Main.netMode == 1)
							{
								NetMessage.SendTileSquare(-1, num85, num86);
							}
						}
					}
					if (type == 11 || type == 463)
					{
						if (type == 11)
						{
							WorldGen.Convert(num85, num86, 1, 1);
						}
						if (type == 463)
						{
							WorldGen.Convert(num85, num86, 4, 1);
						}
					}
				}
			}
		}
		else if (aiStyle == 7)
		{
			AI_007_GrapplingHooks();
		}
		else if (aiStyle == 8)
		{
			if (type == 258 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item20, base.position);
			}
			if (type == 96 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item20, base.position);
			}
			if (type == 27)
			{
				for (int num87 = 0; num87 < 5; num87++)
				{
					float num88 = velocity.X / 3f * (float)num87;
					float num89 = velocity.Y / 3f * (float)num87;
					int num90 = 4;
					int num91 = Dust.NewDust(new Vector2(base.position.X + (float)num90, base.position.Y + (float)num90), width - num90 * 2, height - num90 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num91].noGravity = true;
					Dust dust = Main.dust[num91];
					dust.velocity *= 0.1f;
					dust = Main.dust[num91];
					dust.velocity += velocity * 0.1f;
					Main.dust[num91].position.X -= num88;
					Main.dust[num91].position.Y -= num89;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num92 = 4;
					int num93 = Dust.NewDust(new Vector2(base.position.X + (float)num92, base.position.Y + (float)num92), width - num92 * 2, height - num92 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
					Dust dust = Main.dust[num93];
					dust.velocity *= 0.25f;
					dust = Main.dust[num93];
					dust.velocity += velocity * 0.5f;
				}
			}
			else if (type == 502)
			{
				float num94 = (float)Main.DiscoR / 255f;
				float num95 = (float)Main.DiscoG / 255f;
				float num96 = (float)Main.DiscoB / 255f;
				num94 = (0.5f + num94) / 2f;
				num95 = (0.5f + num95) / 2f;
				num96 = (0.5f + num96) / 2f;
				Lighting.AddLight(base.Center, num94, num95, num96);
			}
			else if (type == 95 || type == 96)
			{
				int num97 = Dust.NewDust(new Vector2(base.position.X + velocity.X, base.position.Y + velocity.Y), width, height, 75, velocity.X, velocity.Y, 100, default(Color), 3f * scale);
				Main.dust[num97].noGravity = true;
			}
			else if (type == 253)
			{
				for (int num98 = 0; num98 < 2; num98++)
				{
					int num99 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 135, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num99].noGravity = true;
					Main.dust[num99].velocity.X *= 0.3f;
					Main.dust[num99].velocity.Y *= 0.3f;
				}
			}
			else
			{
				for (int num100 = 0; num100 < 2; num100++)
				{
					int num101 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num101].noGravity = true;
					Main.dust[num101].velocity.X *= 0.3f;
					Main.dust[num101].velocity.Y *= 0.3f;
				}
			}
			if (type != 27 && type != 96 && type != 258)
			{
				this.ai[1] += 1f;
			}
			if (this.ai[1] >= 20f)
			{
				velocity.Y += 0.2f;
			}
			if (type == 502)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				if (velocity.X != 0f)
				{
					spriteDirection = (direction = Math.Sign(velocity.X));
				}
			}
			else
			{
				rotation += 0.3f * (float)direction;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 9)
		{
			AI_009_MagicMissiles();
		}
		else if (aiStyle == 10)
		{
			AI_010();
		}
		else if (aiStyle == 11)
		{
			if (type == 72 || type == 86 || type == 87)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
				}
				else if (velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 4)
				{
					frame = 0;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num102 = 56;
					if (type == 86)
					{
						num102 = 73;
					}
					else if (type == 87)
					{
						num102 = 74;
					}
					int num103 = Dust.NewDust(base.position, width, height, num102, 0f, 0f, 200, default(Color), 0.8f);
					Dust dust = Main.dust[num103];
					dust.velocity *= 0.3f;
					Main.dust[num103].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
				}
			}
			else
			{
				rotation += 0.02f;
			}
			if (type == 72)
			{
				if (Main.player[owner].blueFairy)
				{
					timeLeft = 2;
				}
			}
			else if (type == 86)
			{
				if (Main.player[owner].redFairy)
				{
					timeLeft = 2;
				}
			}
			else if (type == 87)
			{
				if (Main.player[owner].greenFairy)
				{
					timeLeft = 2;
				}
			}
			else if (Main.player[owner].lightOrb)
			{
				timeLeft = 2;
			}
			if (!Main.player[owner].dead)
			{
				float num104 = 3f;
				if (type == 72 || type == 86 || type == 87)
				{
					num104 = 3.75f;
				}
				Vector2 vector15 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num105 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector15.X;
				float num106 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector15.Y;
				int num107 = 70;
				if (type == 18)
				{
					if (Main.player[owner].controlUp)
					{
						num106 = Main.player[owner].position.Y - 40f - vector15.Y;
						num105 -= 6f;
						num107 = 4;
					}
					else if (Main.player[owner].controlDown)
					{
						num106 = Main.player[owner].position.Y + (float)Main.player[owner].height + 40f - vector15.Y;
						num105 -= 6f;
						num107 = 4;
					}
				}
				float num108 = (float)Math.Sqrt(num105 * num105 + num106 * num106);
				num108 = (float)Math.Sqrt(num105 * num105 + num106 * num106);
				if (type == 72 || type == 86 || type == 87)
				{
					num107 = 40;
				}
				if (num108 > 800f)
				{
					base.position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					base.position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
				}
				else if (num108 > (float)num107)
				{
					num108 = num104 / num108;
					num105 *= num108;
					num106 *= num108;
					velocity.X = num105;
					velocity.Y = num106;
				}
				else
				{
					velocity.X = 0f;
					velocity.Y = 0f;
				}
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 12)
		{
			if (type == 288 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.position);
			}
			if (type == 280 || type == 288)
			{
				scale -= 0.002f;
				if (scale <= 0f)
				{
					Kill();
				}
				if (type == 288)
				{
					this.ai[0] = 4f;
				}
				if (this.ai[0] > 3f)
				{
					velocity.Y += 0.075f;
					for (int num109 = 0; num109 < 3; num109++)
					{
						float num110 = velocity.X / 3f * (float)num109;
						float num111 = velocity.Y / 3f * (float)num109;
						int num112 = 14;
						int num113 = Dust.NewDust(new Vector2(base.position.X + (float)num112, base.position.Y + (float)num112), width - num112 * 2, height - num112 * 2, 170, 0f, 0f, 100);
						Main.dust[num113].noGravity = true;
						Dust dust = Main.dust[num113];
						dust.velocity *= 0.1f;
						dust = Main.dust[num113];
						dust.velocity += velocity * 0.5f;
						Main.dust[num113].position.X -= num110;
						Main.dust[num113].position.Y -= num111;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num114 = 16;
						int num115 = Dust.NewDust(new Vector2(base.position.X + (float)num114, base.position.Y + (float)num114), width - num114 * 2, height - num114 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
						Dust dust = Main.dust[num115];
						dust.velocity *= 0.25f;
						dust = Main.dust[num115];
						dust.velocity += velocity * 0.5f;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				return;
			}
			scale -= 0.02f;
			if (scale <= 0f)
			{
				Kill();
			}
			if (this.ai[0] > 3f)
			{
				velocity.Y += 0.2f;
				for (int num116 = 0; num116 < 1; num116++)
				{
					for (int num117 = 0; num117 < 3; num117++)
					{
						float num118 = velocity.X / 3f * (float)num117;
						float num119 = velocity.Y / 3f * (float)num117;
						int num120 = 6;
						int num121 = Dust.NewDust(new Vector2(base.position.X + (float)num120, base.position.Y + (float)num120), width - num120 * 2, height - num120 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num121].noGravity = true;
						Dust dust = Main.dust[num121];
						dust.velocity *= 0.3f;
						dust = Main.dust[num121];
						dust.velocity += velocity * 0.5f;
						Main.dust[num121].position.X -= num118;
						Main.dust[num121].position.Y -= num119;
					}
					if (Main.rand.Next(8) == 0)
					{
						int num122 = 6;
						int num123 = Dust.NewDust(new Vector2(base.position.X + (float)num122, base.position.Y + (float)num122), width - num122 * 2, height - num122 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
						Dust dust = Main.dust[num123];
						dust.velocity *= 0.5f;
						dust = Main.dust[num123];
						dust.velocity += velocity * 0.5f;
					}
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
		}
		else if (aiStyle == 13)
		{
			bool flag3 = Main.player[owner].dead;
			if (!flag3)
			{
				float num124 = (Main.player[owner].Center - base.Center).Length();
				flag3 = num124 > 2000f;
			}
			if (flag3)
			{
				Kill();
				return;
			}
			if (type != 481)
			{
				Main.player[owner].SetDummyItemTime(5);
			}
			if (alpha == 0)
			{
				if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
				}
			}
			if (type == 481)
			{
				if (this.ai[0] == 0f)
				{
					extraUpdates = 0;
				}
				else
				{
					extraUpdates = 1;
				}
			}
			Vector2 vector16 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num125 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector16.X;
			float num126 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector16.Y;
			float num127 = (float)Math.Sqrt(num125 * num125 + num126 * num126);
			if (this.ai[0] == 0f)
			{
				if (num127 > 700f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 262 && num127 > 500f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 271 && num127 > 200f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 273 && num127 > 150f)
				{
					this.ai[0] = 1f;
				}
				else if (type == 481 && num127 > 350f)
				{
					this.ai[0] = 1f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				this.ai[1] += 1f;
				if (this.ai[1] > 5f)
				{
					alpha = 0;
				}
				if (type == 262 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 271 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 273 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 481 && this.ai[1] > 8f)
				{
					this.ai[1] = 8f;
				}
				if (type == 404 && this.ai[1] > 8f)
				{
					this.ai[1] = 0f;
				}
				if (this.ai[1] >= 10f)
				{
					this.ai[1] = 15f;
					velocity.Y += 0.3f;
				}
				if (type == 262 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				else if (type == 262)
				{
					spriteDirection = 1;
				}
				if (type == 271 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				else if (type == 271)
				{
					spriteDirection = 1;
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = false;
				rotation = (float)Math.Atan2(num126, num125) - 1.57f;
				float num128 = 20f;
				if (type == 262)
				{
					num128 = 30f;
				}
				if (num127 < 50f)
				{
					Kill();
				}
				num127 = num128 / num127;
				num125 *= num127;
				num126 *= num127;
				velocity.X = num125;
				velocity.Y = num126;
				if (type == 262 && velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (type == 262)
				{
					spriteDirection = -1;
				}
				if (type == 271 && velocity.X < 0f)
				{
					spriteDirection = 1;
				}
				else if (type == 271)
				{
					spriteDirection = -1;
				}
			}
		}
		else if (aiStyle == 14)
		{
			if (type == 870 && this.ai[1] > 0f)
			{
				aiStyle = 170;
			}
			if (type == 473 && Main.netMode != 2)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 10f)
				{
					localAI[0] = 0f;
					int num129 = 30;
					if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num129 * 16))
					{
						Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
					}
				}
			}
			if (type == 352)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
				}
				alpha += (int)(25f * localAI[1]);
				if (alpha <= 0)
				{
					alpha = 0;
					localAI[1] = 1f;
				}
				else if (alpha >= 255)
				{
					alpha = 255;
					localAI[1] = -1f;
				}
				scale += localAI[1] * 0.01f;
			}
			if (type == 346)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item1, base.position);
				}
				frame = (int)this.ai[1];
				if (frame == 0)
				{
					Lighting.AddLight(base.Center, 0.25f, 0.2f, 0f);
				}
				else
				{
					Lighting.AddLight(base.Center, 0.15f, 0.15f, 0.15f);
				}
				if (owner == Main.myPlayer && timeLeft == 1)
				{
					for (int num130 = 0; num130 < 5; num130++)
					{
						float num131 = 10f;
						Vector2 vector17 = new Vector2(base.Center.X, base.Center.Y);
						float num132 = Main.rand.Next(-20, 21);
						float num133 = Main.rand.Next(-20, 0);
						float num134 = (float)Math.Sqrt(num132 * num132 + num133 * num133);
						num134 = num131 / num134;
						num132 *= num134;
						num133 *= num134;
						num132 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						num133 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						int num135 = NewProjectile(vector17.X, vector17.Y, num132, num133, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
					}
				}
			}
			if (type == 196)
			{
				int num136 = Main.rand.Next(1, 3);
				for (int num137 = 0; num137 < num136; num137++)
				{
					int num138 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
					Dust dust = Main.dust[num138];
					dust.alpha += Main.rand.Next(100);
					dust = Main.dust[num138];
					dust.velocity *= 0.3f;
					Main.dust[num138].velocity.X += (float)Main.rand.Next(-10, 11) * 0.025f;
					Main.dust[num138].velocity.Y -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
					Main.dust[num138].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
				}
			}
			if (type == 53)
			{
				try
				{
					int num139 = (int)(base.position.X / 16f) - 1;
					int num140 = (int)((base.position.X + (float)width) / 16f) + 2;
					int num141 = (int)(base.position.Y / 16f) - 1;
					int num142 = (int)((base.position.Y + (float)height) / 16f) + 2;
					if (num139 < 0)
					{
						num139 = 0;
					}
					if (num140 > Main.maxTilesX)
					{
						num140 = Main.maxTilesX;
					}
					if (num141 < 0)
					{
						num141 = 0;
					}
					if (num142 > Main.maxTilesY)
					{
						num142 = Main.maxTilesY;
					}
					Vector2 vector18 = default(Vector2);
					for (int num143 = num139; num143 < num140; num143++)
					{
						for (int num144 = num141; num144 < num142; num144++)
						{
							if (Main.tile[num143, num144] != null && Main.tile[num143, num144].nactive() && Main.tileSolid[Main.tile[num143, num144].type] && !Main.tileSolidTop[Main.tile[num143, num144].type])
							{
								vector18.X = num143 * 16;
								vector18.Y = num144 * 16;
								if (base.position.X + (float)width > vector18.X && base.position.X < vector18.X + 16f && base.position.Y + (float)height > vector18.Y && base.position.Y < vector18.Y + 16f)
								{
									velocity.X = 0f;
									velocity.Y = -0.2f;
								}
							}
						}
					}
				}
				catch
				{
				}
			}
			if (type == 277)
			{
				if (alpha > 0)
				{
					alpha -= 30;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.expertMode)
				{
					float num145 = 12f;
					int num146 = Player.FindClosest(base.Center, 1, 1);
					Vector2 vector19 = Main.player[num146].Center - base.Center;
					vector19.Normalize();
					vector19 *= num145;
					int num147 = 200;
					velocity.X = (velocity.X * (float)(num147 - 1) + vector19.X) / (float)num147;
					if (velocity.Length() > 16f)
					{
						velocity.Normalize();
						velocity *= 16f;
					}
				}
			}
			if (type == 261)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					localAI[0] = 80f;
				}
				rotation += velocity.X * 0.05f;
				if (velocity.Y != 0f)
				{
					rotation += (float)spriteDirection * 0.01f;
				}
				this.ai[0]++;
				if (this.ai[0] > 15f)
				{
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						Math.Abs(velocity.X);
						_ = 2f;
						if (Math.Abs(velocity.X) <= 0.01f)
						{
							Kill();
						}
					}
					this.ai[0] = 15f;
					velocity.Y += 0.2f;
				}
				if (localAI[0] > 0f)
				{
					localAI[0]--;
					int num148 = 5;
					int maxValue = num148;
					if (localAI[0] < 20f)
					{
						maxValue = num148 + num148;
					}
					if (localAI[0] < 10f)
					{
						maxValue = num148 + num148 + num148;
					}
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 31);
						Dust dust = dust4;
						dust.velocity *= 0.33f;
						dust4.scale = 0.7f;
					}
					if (Main.rand.Next(maxValue) == 0)
					{
						Dust dust5 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
						dust5.scale = 0.6f;
						Dust dust = dust5;
						dust.velocity *= 0.33f;
					}
				}
			}
			else if (type == 277)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 15f)
				{
					this.ai[0] = 15f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							Kill();
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.05f;
			}
			else if (type == 378)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, base.position);
					localAI[0] += 1f;
				}
				Rectangle rectangle2 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
				for (int num149 = 0; num149 < 200; num149++)
				{
					if (Main.npc[num149].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						Rectangle value2 = new Rectangle((int)Main.npc[num149].position.X, (int)Main.npc[num149].position.Y, Main.npc[num149].width, Main.npc[num149].height);
						if (rectangle2.Intersects(value2))
						{
							Kill();
							return;
						}
					}
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 10f)
				{
					this.ai[0] = 90f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.96f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							Kill();
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.1f;
			}
			else if (type == 483)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 5f)
				{
					if (owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
					{
						Kill();
					}
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							velocity.X = 0f;
							netUpdate = true;
						}
					}
					velocity.Y += 0.3f;
					velocity.X *= 0.99f;
				}
				rotation += velocity.X * 0.05f;
			}
			else if (type == 538)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 60f || velocity.Y >= 0f)
				{
					alpha += 6;
					velocity *= 0.5f;
				}
				else if (this.ai[0] > 5f)
				{
					velocity.Y += 0.1f;
					velocity.X *= 1.025f;
					alpha -= 23;
					scale = 0.8f * (255f - (float)alpha) / 255f;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (alpha >= 255 && this.ai[0] > 5f)
				{
					Kill();
					return;
				}
			}
			else
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 5f)
				{
					this.ai[0] = 5f;
					if (velocity.Y == 0f && velocity.X != 0f)
					{
						velocity.X *= 0.97f;
						if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
						{
							velocity.X = 0f;
							netUpdate = true;
						}
					}
					velocity.Y += 0.2f;
				}
				rotation += velocity.X * 0.1f;
			}
			if (type == 538)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
				}
				if (velocity.Y < 0f && this.ai[0] < 60f)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num150 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
						Main.dust[num150].position = base.Center;
						Dust dust = Main.dust[num150];
						dust.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num150].noGravity = true;
						Main.dust[num150].velocity.Y -= 2f;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num151 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
						Main.dust[num151].position = base.Center;
						Dust dust = Main.dust[num151];
						dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num151].noGravity = true;
						dust = Main.dust[num151];
						dust.velocity *= 0.1f;
					}
				}
			}
			if (type == 450)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item13, base.position);
				}
				if (Main.rand.Next(2) == 0)
				{
					int num152 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
					Main.dust[num152].position.X -= 2f;
					Main.dust[num152].position.Y += 2f;
					Dust dust = Main.dust[num152];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num152].noGravity = true;
					Main.dust[num152].velocity.Y -= 2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num153 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
					Main.dust[num153].position.X -= 2f;
					Main.dust[num153].position.Y += 2f;
					Dust dust = Main.dust[num153];
					dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num153].noGravity = true;
					dust = Main.dust[num153];
					dust.velocity *= 0.1f;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (type == 480)
			{
				alpha = 255;
				int num154 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
				Main.dust[num154].position.X -= 2f;
				Main.dust[num154].position.Y += 2f;
				Dust dust = Main.dust[num154];
				dust.scale += (float)Main.rand.Next(50) * 0.01f;
				Main.dust[num154].noGravity = true;
				Main.dust[num154].velocity.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num155 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num155].position.X -= 2f;
					Main.dust[num155].position.Y += 2f;
					dust = Main.dust[num155];
					dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num155].noGravity = true;
					dust = Main.dust[num155];
					dust.velocity *= 0.1f;
				}
			}
			if (type >= 326 && type <= 328)
			{
				if (wet)
				{
					Kill();
				}
				if (this.ai[1] == 0f && type >= 326 && type <= 328)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item13, base.position);
				}
				if (Main.rand.Next(3) != 0)
				{
					Dust dust6 = Dust.NewDustDirect(base.position, width, height, 6);
					dust6.velocity.Y -= 2f;
					dust6.noGravity = true;
					Dust dust = dust6;
					dust.scale += Main.rand.NextFloat() * 0.8f + 0.3f;
					dust = dust6;
					dust.velocity += velocity * 1f;
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (type >= 400 && type <= 402)
			{
				if (wet)
				{
					Kill();
				}
				if (this.ai[1] == 0f && type >= 326 && type <= 328)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item13, base.position);
				}
				int num156 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
				Main.dust[num156].position.X -= 2f;
				Main.dust[num156].position.Y += 2f;
				Dust dust = Main.dust[num156];
				dust.scale += (float)Main.rand.Next(50) * 0.01f;
				Main.dust[num156].noGravity = true;
				Main.dust[num156].velocity.Y -= 2f;
				if (Main.rand.Next(2) == 0)
				{
					int num157 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
					Main.dust[num157].position.X -= 2f;
					Main.dust[num157].position.Y += 2f;
					dust = Main.dust[num157];
					dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num157].noGravity = true;
					dust = Main.dust[num157];
					dust.velocity *= 0.1f;
				}
				if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
				{
					velocity.X *= 0.8f;
				}
				rotation = (0f - velocity.X) * 0.05f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 15)
		{
			AI_015_Flails();
		}
		else if (aiStyle == 16)
		{
			AI_016();
		}
		else if (aiStyle == 17)
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.98f;
			}
			rotation += velocity.X * 0.1f;
			velocity.Y += 0.2f;
			if (owner != Main.myPlayer)
			{
				return;
			}
			int num158 = (int)((base.position.X + (float)(width / 2)) / 16f);
			int num159 = (int)((base.position.Y + (float)height - 4f) / 16f);
			if (Main.tile[num158, num159] == null)
			{
				return;
			}
			int style = 0;
			if (type >= 201 && type <= 205)
			{
				style = type - 200;
			}
			if (type >= 527 && type <= 531)
			{
				style = type - 527 + 6;
			}
			bool flag4 = false;
			TileObject objectData = default(TileObject);
			if (TileObject.CanPlace(num158, num159, 85, style, direction, out objectData))
			{
				flag4 = TileObject.Place(objectData);
			}
			if (flag4)
			{
				NetMessage.SendObjectPlacment(-1, num158, num159, objectData.type, objectData.style, objectData.alternate, objectData.random, direction);
				SoundEngine.PlaySound(0, num158 * 16, num159 * 16);
				int num160 = Sign.ReadSign(num158, num159);
				if (num160 >= 0)
				{
					Sign.TextSign(num160, miscText);
					NetMessage.SendData(47, -1, -1, null, num160, 0f, (int)(byte)new BitsByte(b1: true));
				}
				Kill();
			}
		}
		else if (aiStyle == 18)
		{
			if (this.ai[1] == 0f && type == 44)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, base.position);
			}
			if (type == 263 || type == 274)
			{
				if (type == 274 && velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation += (float)direction * 0.05f;
				rotation += (float)direction * 0.5f * ((float)timeLeft / 180f);
				if (type == 274)
				{
					velocity *= 0.96f;
				}
				else
				{
					velocity *= 0.95f;
				}
				return;
			}
			rotation += (float)direction * 0.8f;
			this.ai[0] += 1f;
			if (!(this.ai[0] < 30f))
			{
				if (this.ai[0] < 100f)
				{
					velocity *= 1.06f;
				}
				else
				{
					this.ai[0] = 200f;
				}
			}
			for (int num161 = 0; num161 < 2; num161++)
			{
				int num162 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100);
				Main.dust[num162].noGravity = true;
			}
		}
		else if (aiStyle == 19)
		{
			AI_019_Spears();
		}
		else if (aiStyle == 20)
		{
			timeLeft = 60;
			if (type == 252)
			{
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 3)
				{
					frame = 0;
				}
			}
			if (type == 509)
			{
				frameCounter++;
				if (frameCounter >= 2)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 1)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(SoundID.Item22, base.position);
				soundDelay = 30;
			}
			Vector2 vector20 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
			if (Main.myPlayer == owner)
			{
				if (Main.player[owner].channel)
				{
					float num163 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
					Vector2 vector21 = vector20;
					float num164 = (float)Main.mouseX + Main.screenPosition.X - vector21.X;
					float num165 = (float)Main.mouseY + Main.screenPosition.Y - vector21.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num165 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector21.Y;
					}
					float num166 = (float)Math.Sqrt(num164 * num164 + num165 * num165);
					num166 = (float)Math.Sqrt(num164 * num164 + num165 * num165);
					num166 = num163 / num166;
					num164 *= num166;
					num165 *= num166;
					if (num164 != velocity.X || num165 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num164;
					velocity.Y = num165;
				}
				else
				{
					Kill();
				}
			}
			if (velocity.X > 0f)
			{
				Main.player[owner].ChangeDir(1);
			}
			else if (velocity.X < 0f)
			{
				Main.player[owner].ChangeDir(-1);
			}
			spriteDirection = direction;
			Main.player[owner].ChangeDir(direction);
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			base.position.X = vector20.X - (float)(width / 2);
			base.position.Y = vector20.Y - (float)(height / 2);
			rotation = (float)(Math.Atan2(velocity.Y, velocity.X) + 1.5700000524520874);
			if (Main.player[owner].direction == 1)
			{
				Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
			}
			else
			{
				Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
			}
			velocity.X *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
			if (Main.rand.Next(6) == 0)
			{
				int num167 = Dust.NewDust(base.position + velocity * Main.rand.Next(6, 10) * 0.1f, width, height, 31, 0f, 0f, 80, default(Color), 1.4f);
				Main.dust[num167].position.X -= 4f;
				Main.dust[num167].noGravity = true;
				Dust dust = Main.dust[num167];
				dust.velocity *= 0.2f;
				Main.dust[num167].velocity.Y = (float)(-Main.rand.Next(7, 13)) * 0.15f;
			}
		}
		else if (aiStyle == 21)
		{
			rotation = velocity.X * 0.1f;
			spriteDirection = -direction;
			if (Main.rand.Next(3) == 0)
			{
				int num168 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 80);
				Main.dust[num168].noGravity = true;
				Dust dust = Main.dust[num168];
				dust.velocity *= 0.2f;
			}
			if (this.ai[1] == 1f)
			{
				this.ai[1] = 0f;
				Main.musicPitch = this.ai[0];
				SoundEngine.PlaySound(SoundID.Item26, base.position);
			}
		}
		else if (aiStyle == 22)
		{
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				alpha = 255;
			}
			Dust dust;
			if (this.ai[1] < 0f)
			{
				if (timeLeft > 60)
				{
					timeLeft = 60;
				}
				if (velocity.X > 0f)
				{
					rotation += 0.3f;
				}
				else
				{
					rotation -= 0.3f;
				}
				int num169 = (int)(base.position.X / 16f) - 1;
				int num170 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num171 = (int)(base.position.Y / 16f) - 1;
				int num172 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num169 < 0)
				{
					num169 = 0;
				}
				if (num170 > Main.maxTilesX)
				{
					num170 = Main.maxTilesX;
				}
				if (num171 < 0)
				{
					num171 = 0;
				}
				if (num172 > Main.maxTilesY)
				{
					num172 = Main.maxTilesY;
				}
				int num173 = (int)base.position.X + 4;
				int num174 = (int)base.position.Y + 4;
				Vector2 vector22 = default(Vector2);
				for (int num175 = num169; num175 < num170; num175++)
				{
					for (int num176 = num171; num176 < num172; num176++)
					{
						if (Main.tile[num175, num176] != null && Main.tile[num175, num176].active() && Main.tile[num175, num176].type != 127 && Main.tileSolid[Main.tile[num175, num176].type] && !Main.tileSolidTop[Main.tile[num175, num176].type])
						{
							vector22.X = num175 * 16;
							vector22.Y = num176 * 16;
							if ((float)(num173 + 8) > vector22.X && (float)num173 < vector22.X + 16f && (float)(num174 + 8) > vector22.Y && (float)num174 < vector22.Y + 16f)
							{
								Kill();
							}
						}
					}
				}
				int num177 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
				Main.dust[num177].noGravity = true;
				dust = Main.dust[num177];
				dust.velocity *= 0.3f;
				return;
			}
			if (this.ai[0] < 0f)
			{
				if (this.ai[0] == -1f)
				{
					for (int num178 = 0; num178 < 10; num178++)
					{
						int num179 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 0, default(Color), 1.1f);
						Main.dust[num179].noGravity = true;
						dust = Main.dust[num179];
						dust.velocity *= 1.3f;
					}
				}
				else if (Main.rand.Next(30) == 0)
				{
					int num180 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 100);
					dust = Main.dust[num180];
					dust.velocity *= 0.2f;
				}
				int num181 = (int)base.position.X / 16;
				int num182 = (int)base.position.Y / 16;
				if (Main.tile[num181, num182] == null || !Main.tile[num181, num182].active())
				{
					Kill();
				}
				this.ai[0] -= 1f;
				if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) && Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 127)
				{
					WorldGen.KillTile(num181, num182);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, num181, num182);
					}
					Kill();
				}
				return;
			}
			int num183 = (int)(base.position.X / 16f) - 1;
			int num184 = (int)((base.position.X + (float)width) / 16f) + 2;
			int num185 = (int)(base.position.Y / 16f) - 1;
			int num186 = (int)((base.position.Y + (float)height) / 16f) + 2;
			if (num183 < 0)
			{
				num183 = 0;
			}
			if (num184 > Main.maxTilesX)
			{
				num184 = Main.maxTilesX;
			}
			if (num185 < 0)
			{
				num185 = 0;
			}
			if (num186 > Main.maxTilesY)
			{
				num186 = Main.maxTilesY;
			}
			int num187 = (int)base.position.X + 4;
			int num188 = (int)base.position.Y + 4;
			Vector2 vector23 = default(Vector2);
			for (int num189 = num183; num189 < num184; num189++)
			{
				for (int num190 = num185; num190 < num186; num190++)
				{
					if (Main.tile[num189, num190] != null && Main.tile[num189, num190].nactive() && Main.tile[num189, num190].type != 127 && Main.tileSolid[Main.tile[num189, num190].type] && !Main.tileSolidTop[Main.tile[num189, num190].type])
					{
						vector23.X = num189 * 16;
						vector23.Y = num190 * 16;
						if ((float)(num187 + 8) > vector23.X && (float)num187 < vector23.X + 16f && (float)(num188 + 8) > vector23.Y && (float)num188 < vector23.Y + 16f)
						{
							Kill();
						}
					}
				}
			}
			if (lavaWet)
			{
				Kill();
			}
			if (!active)
			{
				return;
			}
			int num191 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
			Main.dust[num191].noGravity = true;
			dust = Main.dust[num191];
			dust.velocity *= 0.3f;
			int num192 = (int)this.ai[0];
			int num193 = (int)this.ai[1];
			if (WorldGen.InWorld(num192, num193) && WorldGen.SolidTile(num192, num193))
			{
				if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
				{
					if (base.Center.Y < (float)(num193 * 16 + 8) && WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
					{
						num193--;
					}
					else if (WorldGen.InWorld(num192, num193 + 1) && !WorldGen.SolidTile(num192, num193 + 1))
					{
						num193++;
					}
					else if (WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
					{
						num193--;
					}
					else if (base.Center.X < (float)(num192 * 16 + 8) && WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
					{
						num192--;
					}
					else if (WorldGen.InWorld(num192 + 1, num193) && !WorldGen.SolidTile(num192 + 1, num193))
					{
						num192++;
					}
					else if (WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
					{
						num192--;
					}
				}
				else if (base.Center.X < (float)(num192 * 16 + 8) && WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
				{
					num192--;
				}
				else if (WorldGen.InWorld(num192 + 1, num193) && !WorldGen.SolidTile(num192 + 1, num193))
				{
					num192++;
				}
				else if (WorldGen.InWorld(num192 - 1, num193) && !WorldGen.SolidTile(num192 - 1, num193))
				{
					num192--;
				}
				else if (base.Center.Y < (float)(num193 * 16 + 8) && WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
				{
					num193--;
				}
				else if (WorldGen.InWorld(num192, num193 + 1) && !WorldGen.SolidTile(num192, num193 + 1))
				{
					num193++;
				}
				else if (WorldGen.InWorld(num192, num193 - 1) && !WorldGen.SolidTile(num192, num193 - 1))
				{
					num193--;
				}
			}
			if (velocity.X > 0f)
			{
				rotation += 0.3f;
			}
			else
			{
				rotation -= 0.3f;
			}
			if (Main.myPlayer != owner)
			{
				return;
			}
			int num194 = (int)((base.position.X + (float)(width / 2)) / 16f);
			int num195 = (int)((base.position.Y + (float)(height / 2)) / 16f);
			bool flag5 = false;
			if (num194 == num192 && num195 == num193)
			{
				flag5 = true;
			}
			if (((velocity.X <= 0f && num194 <= num192) || (velocity.X >= 0f && num194 >= num192)) && ((velocity.Y <= 0f && num195 <= num193) || (velocity.Y >= 0f && num195 >= num193)))
			{
				flag5 = true;
			}
			if (!flag5)
			{
				return;
			}
			if (WorldGen.PlaceTile(num192, num193, 127, mute: false, forced: false, owner))
			{
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 1, (int)this.ai[0], (int)this.ai[1], 127f);
				}
				damage = 0;
				this.ai[0] = -1f;
				velocity *= 0f;
				alpha = 255;
				base.position.X = num192 * 16;
				base.position.Y = num193 * 16;
				netUpdate = true;
			}
			else
			{
				this.ai[1] = -1f;
			}
		}
		else if (aiStyle == 23)
		{
			if (type == 188)
			{
				if (this.ai[0] < 8f)
				{
					this.ai[0] = 8f;
				}
				localAI[0]++;
			}
			if (timeLeft > 60)
			{
				timeLeft = 60;
			}
			if (this.ai[0] > 7f)
			{
				float num196 = 1f;
				if (this.ai[0] == 8f)
				{
					num196 = 0.25f;
				}
				else if (this.ai[0] == 9f)
				{
					num196 = 0.5f;
				}
				else if (this.ai[0] == 10f)
				{
					num196 = 0.75f;
				}
				this.ai[0] += 1f;
				int num197 = 6;
				if (type == 101)
				{
					num197 = 75;
				}
				if (num197 == 6 || Main.rand.Next(2) == 0)
				{
					for (int num198 = 0; num198 < 1; num198++)
					{
						int num199 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num197, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
						Dust dust;
						if (Main.rand.Next(3) != 0 || (num197 == 75 && Main.rand.Next(3) == 0))
						{
							Main.dust[num199].noGravity = true;
							dust = Main.dust[num199];
							dust.scale *= 3f;
							Main.dust[num199].velocity.X *= 2f;
							Main.dust[num199].velocity.Y *= 2f;
						}
						if (type == 188)
						{
							dust = Main.dust[num199];
							dust.scale *= 1.25f;
						}
						else
						{
							dust = Main.dust[num199];
							dust.scale *= 1.5f;
						}
						Main.dust[num199].velocity.X *= 1.2f;
						Main.dust[num199].velocity.Y *= 1.2f;
						dust = Main.dust[num199];
						dust.scale *= num196;
						if (num197 == 75)
						{
							dust = Main.dust[num199];
							dust.velocity += velocity;
							if (!Main.dust[num199].noGravity)
							{
								dust = Main.dust[num199];
								dust.velocity *= 0.5f;
							}
						}
					}
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
			rotation += 0.3f * (float)direction;
		}
		else if (aiStyle == 24)
		{
			light = scale * 0.5f;
			rotation += velocity.X * 0.2f;
			this.ai[1] += 1f;
			if (type == 94)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num200 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 70);
					Main.dust[num200].noGravity = true;
					Dust dust = Main.dust[num200];
					dust.velocity *= 0.5f;
					dust = Main.dust[num200];
					dust.scale *= 0.9f;
				}
				velocity *= 0.985f;
				if (this.ai[1] > 130f)
				{
					scale -= 0.05f;
					if ((double)scale <= 0.2)
					{
						scale = 0.2f;
						Kill();
					}
				}
				return;
			}
			velocity *= 0.96f;
			if (this.ai[1] > 15f)
			{
				scale -= 0.05f;
				if ((double)scale <= 0.2)
				{
					scale = 0.2f;
					Kill();
				}
			}
		}
		else if (aiStyle == 25)
		{
			if (this.ai[0] != 0f && velocity.Y <= 0f && velocity.X == 0f)
			{
				float num201 = 0.5f;
				int i2 = (int)((base.position.X - 8f) / 16f);
				int num202 = (int)(base.position.Y / 16f);
				bool flag6 = false;
				bool flag7 = false;
				if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
				{
					flag6 = true;
				}
				i2 = (int)((base.position.X + (float)width + 8f) / 16f);
				if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
				{
					flag7 = true;
				}
				if (flag6)
				{
					velocity.X = num201;
				}
				else if (flag7)
				{
					velocity.X = 0f - num201;
				}
				else
				{
					i2 = (int)((base.position.X - 8f - 16f) / 16f);
					num202 = (int)(base.position.Y / 16f);
					flag6 = false;
					flag7 = false;
					if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
					{
						flag6 = true;
					}
					i2 = (int)((base.position.X + (float)width + 8f + 16f) / 16f);
					if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
					{
						flag7 = true;
					}
					if (flag6)
					{
						velocity.X = num201;
					}
					else if (flag7)
					{
						velocity.X = 0f - num201;
					}
					else
					{
						i2 = (int)((base.position.X - 8f - 32f) / 16f);
						num202 = (int)(base.position.Y / 16f);
						flag6 = false;
						flag7 = false;
						if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
						{
							flag6 = true;
						}
						i2 = (int)((base.position.X + (float)width + 8f + 32f) / 16f);
						if (WorldGen.SolidTile(i2, num202) || WorldGen.SolidTile(i2, num202 + 1))
						{
							flag7 = true;
						}
						if (!flag6 && !flag7)
						{
							if ((int)(base.Center.X / 16f) % 2 == 0)
							{
								flag6 = true;
							}
							else
							{
								flag7 = true;
							}
						}
						if (flag6)
						{
							velocity.X = num201;
						}
						else if (flag7)
						{
							velocity.X = 0f - num201;
						}
					}
				}
			}
			rotation += velocity.X * 0.06f;
			this.ai[0] = 1f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (velocity.Y <= 6f)
			{
				if (velocity.X > 0f && velocity.X < 7f)
				{
					velocity.X += 0.05f;
				}
				if (velocity.X < 0f && velocity.X > -7f)
				{
					velocity.X -= 0.05f;
				}
			}
			velocity.Y += 0.3f;
			if (type == 655 && wet)
			{
				Kill();
			}
		}
		else if (aiStyle == 26)
		{
			AI_026();
		}
		else if (aiStyle == 27)
		{
			if (type == 115)
			{
				this.ai[0] += 1f;
				if (this.ai[0] < 30f)
				{
					velocity *= 1.125f;
				}
			}
			if (type == 115 && localAI[1] < 5f)
			{
				localAI[1] = 5f;
				for (int num203 = 5; num203 < 25; num203++)
				{
					float num204 = velocity.X * (30f / (float)num203);
					float num205 = velocity.Y * (30f / (float)num203);
					num204 *= 80f;
					num205 *= 80f;
					int num206 = Dust.NewDust(new Vector2(base.position.X - num204, base.position.Y - num205), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
					Dust dust = Main.dust[num206];
					dust.velocity *= 0.25f;
					dust = Main.dust[num206];
					dust.velocity -= velocity * 5f;
				}
			}
			if (localAI[1] > 7f && type == 173)
			{
				int num207 = Main.rand.Next(3);
				int num208 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, num207 switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, 0f, 0f, 100, default(Color), 1.25f);
				Dust dust = Main.dust[num208];
				dust.velocity *= 0.1f;
			}
			if (localAI[1] > 7f && type == 132)
			{
				int num209 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
				Dust dust = Main.dust[num209];
				dust.velocity *= -0.25f;
				num209 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
				dust = Main.dust[num209];
				dust.velocity *= -0.25f;
				dust = Main.dust[num209];
				dust.position -= velocity * 0.5f;
			}
			if (localAI[1] < 15f)
			{
				localAI[1] += 1f;
			}
			else
			{
				if (type == 114 || type == 115)
				{
					int num210 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 4f), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.6f);
					Dust dust = Main.dust[num210];
					dust.velocity *= -0.25f;
				}
				else if (type == 116)
				{
					int num211 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 5f + 2f, base.position.Y + 2f - velocity.Y * 5f), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num211];
					dust.velocity *= -0.25f;
					Main.dust[num211].noGravity = true;
				}
				if (localAI[0] == 0f)
				{
					scale -= 0.02f;
					alpha += 30;
					if (alpha >= 250)
					{
						alpha = 255;
						localAI[0] = 1f;
					}
				}
				else if (localAI[0] == 1f)
				{
					scale += 0.02f;
					alpha -= 30;
					if (alpha <= 0)
					{
						alpha = 0;
						localAI[0] = 0f;
					}
				}
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				if (type == 132)
				{
					SoundEngine.PlaySound(SoundID.Item60, base.position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
			}
			if (type == 157)
			{
				rotation += (float)direction * 0.4f;
				spriteDirection = direction;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 28)
		{
			if (type == 177)
			{
				for (int num212 = 0; num212 < 3; num212++)
				{
					int num213 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 137, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Main.dust[num213].noGravity = true;
					Dust dust = Main.dust[num213];
					dust.velocity *= 0.3f;
				}
			}
			if (type == 118)
			{
				for (int num214 = 0; num214 < 2; num214++)
				{
					int num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num215].noGravity = true;
					Dust dust = Main.dust[num215];
					dust.velocity *= 0.3f;
				}
			}
			if (type == 119 || type == 128 || type == 359)
			{
				for (int num216 = 0; num216 < 3; num216++)
				{
					int num217 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num217].noGravity = true;
					Dust dust = Main.dust[num217];
					dust.velocity *= 0.3f;
				}
			}
			if (type == 309)
			{
				for (int num218 = 0; num218 < 3; num218++)
				{
					int num219 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 185, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num219].noGravity = true;
					Dust dust = Main.dust[num219];
					dust.velocity *= 0.3f;
				}
			}
			if (type == 129)
			{
				for (int num220 = 0; num220 < 6; num220++)
				{
					int num221 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, velocity.X, velocity.Y, 100);
					Main.dust[num221].noGravity = true;
					Dust dust = Main.dust[num221];
					dust.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
					dust = Main.dust[num221];
					dust.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
				}
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item28, base.position);
			}
		}
		else if (aiStyle == 29)
		{
			if (type == 619)
			{
				int num222 = (int)this.ai[0];
				for (int num223 = 0; num223 < 3; num223++)
				{
					int num224 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, num222, default(Color), 1.2f);
					Main.dust[num224].position = (Main.dust[num224].position + base.Center) / 2f;
					Main.dust[num224].noGravity = true;
					Dust dust = Main.dust[num224];
					dust.velocity *= 0.5f;
				}
				for (int num225 = 0; num225 < 2; num225++)
				{
					int num224 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, num222, default(Color), 0.4f);
					switch (num225)
					{
					case 0:
						Main.dust[num224].position = (Main.dust[num224].position + base.Center * 5f) / 6f;
						break;
					case 1:
						Main.dust[num224].position = (Main.dust[num224].position + (base.Center + velocity / 2f) * 5f) / 6f;
						break;
					}
					Dust dust = Main.dust[num224];
					dust.velocity *= 0.1f;
					Main.dust[num224].noGravity = true;
					Main.dust[num224].fadeIn = 1f;
				}
			}
			else if (type == 620)
			{
				int num226 = (int)this.ai[0];
				this.ai[1] += 1f;
				float num227 = (60f - this.ai[1]) / 60f;
				if (this.ai[1] > 40f)
				{
					Kill();
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 18f)
				{
					velocity.Y = 18f;
				}
				velocity.X *= 0.98f;
				for (int num228 = 0; num228 < 2; num228++)
				{
					int num229 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num226, velocity.X, velocity.Y, 50, default(Color), 1.1f);
					Main.dust[num229].position = (Main.dust[num229].position + base.Center) / 2f;
					Main.dust[num229].noGravity = true;
					Dust dust = Main.dust[num229];
					dust.velocity *= 0.3f;
					dust = Main.dust[num229];
					dust.scale *= num227;
				}
				for (int num230 = 0; num230 < 1; num230++)
				{
					int num229 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num226, velocity.X, velocity.Y, 50, default(Color), 0.6f);
					Main.dust[num229].position = (Main.dust[num229].position + base.Center * 5f) / 6f;
					Dust dust = Main.dust[num229];
					dust.velocity *= 0.1f;
					Main.dust[num229].noGravity = true;
					Main.dust[num229].fadeIn = 0.9f * num227;
					dust = Main.dust[num229];
					dust.scale *= num227;
				}
			}
			else if (type == 521)
			{
				for (int num231 = 0; num231 < 3; num231++)
				{
					int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num232].position = (Main.dust[num232].position + base.Center) / 2f;
					Main.dust[num232].noGravity = true;
					Dust dust = Main.dust[num232];
					dust.velocity *= 0.5f;
				}
				for (int num233 = 0; num233 < 2; num233++)
				{
					int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.4f);
					switch (num233)
					{
					case 0:
						Main.dust[num232].position = (Main.dust[num232].position + base.Center * 5f) / 6f;
						break;
					case 1:
						Main.dust[num232].position = (Main.dust[num232].position + (base.Center + velocity / 2f) * 5f) / 6f;
						break;
					}
					Dust dust = Main.dust[num232];
					dust.velocity *= 0.1f;
					Main.dust[num232].noGravity = true;
					Main.dust[num232].fadeIn = 1f;
				}
			}
			else if (type == 522)
			{
				this.ai[1] += 1f;
				float num234 = (60f - this.ai[1]) / 60f;
				if (this.ai[1] > 40f)
				{
					Kill();
				}
				velocity.Y += 0.2f;
				if (velocity.Y > 18f)
				{
					velocity.Y = 18f;
				}
				velocity.X *= 0.98f;
				for (int num235 = 0; num235 < 2; num235++)
				{
					int num236 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.1f);
					Main.dust[num236].position = (Main.dust[num236].position + base.Center) / 2f;
					Main.dust[num236].noGravity = true;
					Dust dust = Main.dust[num236];
					dust.velocity *= 0.3f;
					dust = Main.dust[num236];
					dust.scale *= num234;
				}
				for (int num237 = 0; num237 < 1; num237++)
				{
					int num236 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.6f);
					Main.dust[num236].position = (Main.dust[num236].position + base.Center * 5f) / 6f;
					Dust dust = Main.dust[num236];
					dust.velocity *= 0.1f;
					Main.dust[num236].noGravity = true;
					Main.dust[num236].fadeIn = 0.9f * num234;
					dust = Main.dust[num236];
					dust.scale *= num234;
				}
			}
			else if (type == 731)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				this.ai[0]++;
				if ((int)this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
				{
					this.ai[0]++;
				}
				float num238 = 5f;
				switch ((int)this.ai[0])
				{
				case 10:
					velocity.Y -= num238;
					break;
				case 12:
					velocity.Y += num238;
					break;
				case 18:
					velocity.Y += num238;
					break;
				case 20:
					velocity.Y -= num238;
					this.ai[0] = 0f;
					break;
				}
				if (Main.rand.Next(3) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(base.position, width, height, 226, velocity.X, velocity.Y, 50, default(Color), 0.4f);
					dust7.noGravity = true;
					dust7.velocity = dust7.velocity * 0f + velocity * 0.5f;
					if (Main.rand.Next(3) != 0)
					{
						Dust dust = dust7;
						dust.velocity *= 1.4f;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.5f, 0.7f);
			}
			else
			{
				int num239 = type - 121 + 86;
				if (type == 597)
				{
					num239 = 262;
				}
				for (int num240 = 0; num240 < 2; num240++)
				{
					int num241 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num239, velocity.X, velocity.Y, 50, default(Color), 1.2f);
					Main.dust[num241].noGravity = true;
					Dust dust = Main.dust[num241];
					dust.velocity *= 0.3f;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
			}
		}
		else if (aiStyle == 30)
		{
			if (type == 907)
			{
				float num242 = 100f;
				float num243 = num242 - 50f;
				if (Main.rand.Next(Math.Max(4, 8 - (int)velocity.Length())) == 0)
				{
					int num244 = 5;
					int num245 = Dust.NewDust(base.position + new Vector2(num244, num244), width - num244 * 2, height - num244 * 2, 43, 0f, 0f, 254, new Color(255, 255, 0));
					Main.dust[num245].velocity = velocity * 0.75f;
				}
				if (this.ai[0] > num243)
				{
					velocity *= 0.9f;
					rotation *= 0.9f;
				}
				else
				{
					rotation += 0.2f;
					if (rotation > (float)Math.PI * 2f)
					{
						rotation -= (float)Math.PI * 2f;
					}
				}
				float num246 = this.ai[0];
				this.ai[0]++;
				if (Main.myPlayer == owner && this.ai[0] < num243 && this.ai[0] % 10f == 0f)
				{
					float num247 = (float)Math.PI / 2f * (float)((this.ai[0] % 20f != 0f) ? 1 : (-1));
					num247 *= (float)((whoAmI % 2 != 0) ? 1 : (-1));
					num247 += (float)Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num243);
					Vector2 v = velocity.RotatedBy(num247);
					v = v.SafeNormalize(Vector2.Zero);
					v *= Math.Max(2.5f, (num243 - this.ai[0]) / num243 * (7f + (-2f + (float)Main.rand.Next(2) * 2f)));
					int num248 = NewProjectile(base.Center, v, 335, damage, knockBack * 0.25f, owner, 0f, Main.rand.Next(4));
				}
				if (num246 <= num243 && this.ai[0] > num243)
				{
					netUpdate = true;
				}
				if (this.ai[0] > num242)
				{
					Kill();
				}
			}
			else if (type == 335)
			{
				int num249 = (frame = (int)this.ai[1]);
				if (this.ai[0] < 0f)
				{
					velocity.Y += 0.25f;
					if (velocity.Y > 14f)
					{
						velocity.Y = 14f;
					}
				}
				else
				{
					if (Main.rand.Next(Math.Max(4, 8 - (int)velocity.Length())) == 0)
					{
						Color newColor = Color.White;
						switch (num249)
						{
						case 0:
							newColor = new Color(255, 100, 100);
							break;
						case 1:
							newColor = new Color(100, 255, 100);
							break;
						case 2:
							newColor = new Color(100, 100, 255);
							break;
						case 3:
							newColor = new Color(255, 255, 100);
							break;
						}
						int num250 = 5;
						int num251 = Dust.NewDust(base.position + new Vector2(num250, num250), width - num250 * 2, height - num250 * 2, 43, 0f, 0f, 254, newColor);
						Main.dust[num251].velocity = velocity * 0.75f;
					}
					velocity *= 0.95f;
				}
				if (this.ai[0] >= 0f && velocity.Length() < 0.25f)
				{
					if (velocity != Vector2.Zero)
					{
						velocity = Vector2.Zero;
						if (Main.netMode != 1)
						{
							this.ai[0] = 50f;
							netUpdate = true;
						}
					}
					this.ai[0]--;
				}
				localAI[0]++;
				rotation = (float)Math.Sin(localAI[0] / 10f);
			}
			else
			{
				velocity *= 0.8f;
				rotation += 0.2f;
				alpha += 4;
				if (alpha >= 255)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 31)
		{
			int num252 = 110;
			int conversionType = 0;
			if (type == 146)
			{
				num252 = 111;
				conversionType = 2;
			}
			if (type == 147)
			{
				num252 = 112;
				conversionType = 1;
			}
			if (type == 148)
			{
				num252 = 113;
				conversionType = 3;
			}
			if (type == 149)
			{
				num252 = 114;
				conversionType = 4;
			}
			if (owner == Main.myPlayer)
			{
				WorldGen.Convert((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, conversionType, 2);
			}
			if (timeLeft > 133)
			{
				timeLeft = 133;
			}
			if (this.ai[0] > 7f)
			{
				float num253 = 1f;
				if (this.ai[0] == 8f)
				{
					num253 = 0.2f;
				}
				else if (this.ai[0] == 9f)
				{
					num253 = 0.4f;
				}
				else if (this.ai[0] == 10f)
				{
					num253 = 0.6f;
				}
				else if (this.ai[0] == 11f)
				{
					num253 = 0.8f;
				}
				this.ai[0] += 1f;
				for (int num254 = 0; num254 < 1; num254++)
				{
					int num255 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num252, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Main.dust[num255].noGravity = true;
					Dust dust = Main.dust[num255];
					dust.scale *= 1.75f;
					Main.dust[num255].velocity.X *= 2f;
					Main.dust[num255].velocity.Y *= 2f;
					dust = Main.dust[num255];
					dust.scale *= num253;
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
			rotation += 0.3f * (float)direction;
		}
		else if (aiStyle == 32)
		{
			timeLeft = 10;
			this.ai[0] += 1f;
			if (this.ai[0] >= 20f)
			{
				this.ai[0] = 18f;
				Rectangle rectangle3 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
				for (int num256 = 0; num256 < 255; num256++)
				{
					Entity entity = Main.player[num256];
					if (entity.active && rectangle3.Intersects(entity.Hitbox))
					{
						this.ai[0] = 0f;
						velocity.Y = -4.5f;
						if (velocity.X > 2f)
						{
							velocity.X = 2f;
						}
						if (velocity.X < -2f)
						{
							velocity.X = -2f;
						}
						velocity.X = (velocity.X + (float)entity.direction * 1.75f) / 2f;
						velocity.X += entity.velocity.X * 3f;
						velocity.Y += entity.velocity.Y;
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
						if (velocity.Length() > 16f)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
						}
						netUpdate = true;
						this.ai[1] += 1f;
					}
				}
				for (int num257 = 0; num257 < 1000; num257++)
				{
					if (num257 == whoAmI)
					{
						continue;
					}
					Entity entity = Main.projectile[num257];
					if (entity.active && rectangle3.Intersects(entity.Hitbox))
					{
						this.ai[0] = 0f;
						velocity.Y = -4.5f;
						if (velocity.X > 2f)
						{
							velocity.X = 2f;
						}
						if (velocity.X < -2f)
						{
							velocity.X = -2f;
						}
						velocity.X = (velocity.X + (float)entity.direction * 1.75f) / 2f;
						velocity.X += entity.velocity.X * 3f;
						velocity.Y += entity.velocity.Y;
						if (velocity.X > 6f)
						{
							velocity.X = 6f;
						}
						if (velocity.X < -6f)
						{
							velocity.X = -6f;
						}
						if (velocity.Length() > 16f)
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
						}
						netUpdate = true;
						this.ai[1] += 1f;
					}
				}
			}
			if (velocity.X == 0f && velocity.Y == 0f)
			{
				Kill();
			}
			rotation += 0.02f * velocity.X;
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.98f;
			}
			else if (wet)
			{
				velocity.X *= 0.99f;
			}
			else
			{
				velocity.X *= 0.995f;
			}
			if ((double)velocity.X > -0.03 && (double)velocity.X < 0.03)
			{
				velocity.X = 0f;
			}
			if (wet)
			{
				this.ai[1] = 0f;
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.95f;
				}
				velocity.Y -= 0.1f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				if (velocity.X == 0f)
				{
					Kill();
				}
			}
			else
			{
				velocity.Y += 0.1f;
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else if (aiStyle == 33)
		{
			if (alpha > 0)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			float num258 = 4f;
			float num259 = this.ai[0];
			float num260 = this.ai[1];
			if (num259 == 0f && num260 == 0f)
			{
				num259 = 1f;
			}
			float num261 = (float)Math.Sqrt(num259 * num259 + num260 * num260);
			num261 = num258 / num261;
			num259 *= num261;
			num260 *= num261;
			if (alpha < 70)
			{
				int num262 = 127;
				if (type == 310)
				{
					num262 = 187;
				}
				int num263 = Dust.NewDust(new Vector2(base.position.X, base.position.Y - 2f), 6, 6, num262, velocity.X, velocity.Y, 100, default(Color), 1.6f);
				Main.dust[num263].noGravity = true;
				Main.dust[num263].position.X -= num259 * 1f;
				Main.dust[num263].position.Y -= num260 * 1f;
				Main.dust[num263].velocity.X -= num259;
				Main.dust[num263].velocity.Y -= num260;
			}
			if (localAI[0] == 0f)
			{
				this.ai[0] = velocity.X;
				this.ai[1] = velocity.Y;
				localAI[1] += 1f;
				if (localAI[1] >= 30f)
				{
					velocity.Y += 0.09f;
					localAI[1] = 30f;
				}
			}
			else
			{
				if (!Collision.SolidCollision(base.position, width, height))
				{
					localAI[0] = 0f;
					localAI[1] = 30f;
				}
				damage = 0;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			rotation = (float)Math.Atan2(this.ai[1], this.ai[0]) + 1.57f;
		}
		else if (aiStyle == 34)
		{
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			if (this.ai[1] == 1f)
			{
				this.ai[0]++;
				if (this.ai[0] == 1f)
				{
					for (int num264 = 0; num264 < 8; num264++)
					{
						int num265 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100, default(Color), 1.8f);
						Main.dust[num265].noGravity = true;
						Dust dust = Main.dust[num265];
						dust.velocity *= 3f;
						Main.dust[num265].fadeIn = 0.5f;
						dust = Main.dust[num265];
						dust.position += velocity / 2f;
						dust = Main.dust[num265];
						dust.velocity += velocity / 4f + Main.player[owner].velocity * 0.1f;
					}
				}
				if (this.ai[0] > 2f)
				{
					int num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num266].noGravity = true;
					Dust dust = Main.dust[num266];
					dust.velocity *= 0.2f;
					Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
					num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 15f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num266].noGravity = true;
					dust = Main.dust[num266];
					dust.velocity *= 0.2f;
					Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
					num266 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 10f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num266].noGravity = true;
					dust = Main.dust[num266];
					dust.velocity *= 0.2f;
					Main.dust[num266].position = Main.dust[num266].position.RotatedBy(rotation, base.Center);
				}
			}
			else if (type >= 415 && type <= 418)
			{
				this.ai[0]++;
				if (this.ai[0] > 4f)
				{
					int num267 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num267].noGravity = true;
					Dust dust = Main.dust[num267];
					dust.velocity *= 0.2f;
					Main.dust[num267].position = Main.dust[num267].position.RotatedBy(rotation, base.Center);
				}
			}
			else
			{
				int num268 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num268].noGravity = true;
				Dust dust = Main.dust[num268];
				dust.velocity *= 0.2f;
				Main.dust[num268].position = Main.dust[num268].position.RotatedBy(rotation, base.Center);
			}
		}
		else if (aiStyle == 35)
		{
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				velocity.Y += 0.2f;
				velocity.X *= 0.985f;
				if (velocity.Y > 14f)
				{
					velocity.Y = 14f;
				}
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * (float)direction * 0.02f;
			if (owner != Main.myPlayer)
			{
				return;
			}
			Vector2 vector24 = Collision.TileCollision(base.position, velocity, width, height, fallThrough: true, fall2: true);
			bool flag8 = false;
			if (vector24 != velocity)
			{
				flag8 = true;
			}
			else
			{
				int num269 = (int)(base.Center.X + velocity.X) / 16;
				int num270 = (int)(base.Center.Y + velocity.Y) / 16;
				if (Main.tile[num269, num270] != null && Main.tile[num269, num270].active() && Main.tile[num269, num270].bottomSlope())
				{
					flag8 = true;
					base.position.Y = num270 * 16 + 16 + 8;
					base.position.X = num269 * 16 + 8;
				}
			}
			if (!flag8)
			{
				return;
			}
			int num271 = 213;
			if (type == 475)
			{
				num271 = 353;
			}
			if (type == 506)
			{
				num271 = 366;
			}
			if (type == 505)
			{
				num271 = 365;
			}
			int num272 = (int)(base.position.X + (float)(width / 2)) / 16;
			int num273 = (int)(base.position.Y + (float)(height / 2)) / 16;
			base.position += vector24;
			int num274 = 10;
			if (Main.tile[num272, num273] == null)
			{
				return;
			}
			for (; Main.tile[num272, num273] != null && Main.tile[num272, num273].active() && Main.tileRope[Main.tile[num272, num273].type]; num273++)
			{
			}
			while (num274 > 0)
			{
				num274--;
				if (Main.tile[num272, num273] == null)
				{
					break;
				}
				if (Main.tile[num272, num273].active() && (Main.tileCut[Main.tile[num272, num273].type] || Main.tile[num272, num273].type == 165))
				{
					WorldGen.KillTile(num272, num273);
					NetMessage.SendData(17, -1, -1, null, 0, num272, num273);
				}
				if (!Main.tile[num272, num273].active())
				{
					WorldGen.PlaceTile(num272, num273, num271);
					NetMessage.SendData(17, -1, -1, null, 1, num272, num273, num271);
					this.ai[1] += 1f;
				}
				else
				{
					num274 = 0;
				}
				num273++;
			}
			Kill();
		}
		else if (aiStyle == 36)
		{
			if (type != 307 && wet && !honeyWet)
			{
				Kill();
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			else
			{
				extraUpdates = 0;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type == 307)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				frameCounter++;
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 2)
				{
					frame = 0;
				}
				for (int num275 = 0; num275 < 3; num275++)
				{
					float num276 = velocity.X / 3f * (float)num275;
					float num277 = velocity.Y / 3f * (float)num275;
					int num278 = Dust.NewDust(base.position, width, height, 184);
					Main.dust[num278].position.X = base.Center.X - num276;
					Main.dust[num278].position.Y = base.Center.Y - num277;
					Dust dust = Main.dust[num278];
					dust.velocity *= 0f;
					Main.dust[num278].scale = 0.5f;
				}
			}
			else
			{
				if (type == 316)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = 1;
					}
				}
				else if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				else if (velocity.X < 0f)
				{
					spriteDirection = -1;
				}
				rotation = velocity.X * 0.1f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			float num279 = base.position.X;
			float num280 = base.position.Y;
			float num281 = 100000f;
			bool flag9 = false;
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				this.ai[0] = 30f;
				for (int num282 = 0; num282 < 200; num282++)
				{
					if (Main.npc[num282].CanBeChasedBy(this) && (!Main.npc[num282].wet || Main.npc[num282].type == 370 || type == 307))
					{
						float num283 = Main.npc[num282].position.X + (float)(Main.npc[num282].width / 2);
						float num284 = Main.npc[num282].position.Y + (float)(Main.npc[num282].height / 2);
						float num285 = Math.Abs(base.position.X + (float)(width / 2) - num283) + Math.Abs(base.position.Y + (float)(height / 2) - num284);
						if (num285 < 800f && num285 < num281 && Collision.CanHit(base.position, width, height, Main.npc[num282].position, Main.npc[num282].width, Main.npc[num282].height))
						{
							num281 = num285;
							num279 = num283;
							num280 = num284;
							flag9 = true;
						}
					}
				}
			}
			if (!flag9)
			{
				num279 = base.position.X + (float)(width / 2) + velocity.X * 100f;
				num280 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
			}
			else if (type == 307)
			{
				friendly = true;
			}
			float num286 = 6f;
			float num287 = 0.1f;
			if (type == 189)
			{
				num286 = 7f;
				num287 = 0.15f;
			}
			if (type == 307)
			{
				num286 = 9f;
				num287 = 0.2f;
			}
			if (type == 316)
			{
				num286 = 10f;
				num287 = 0.25f;
			}
			if (type == 566)
			{
				num286 = 6.8f;
				num287 = 0.14f;
			}
			Vector2 vector25 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num288 = num279 - vector25.X;
			float num289 = num280 - vector25.Y;
			float num290 = (float)Math.Sqrt(num288 * num288 + num289 * num289);
			float num291 = num290;
			num290 = num286 / num290;
			num288 *= num290;
			num289 *= num290;
			if (velocity.X < num288)
			{
				velocity.X += num287;
				if (velocity.X < 0f && num288 > 0f)
				{
					velocity.X += num287 * 2f;
				}
			}
			else if (velocity.X > num288)
			{
				velocity.X -= num287;
				if (velocity.X > 0f && num288 < 0f)
				{
					velocity.X -= num287 * 2f;
				}
			}
			if (velocity.Y < num289)
			{
				velocity.Y += num287;
				if (velocity.Y < 0f && num289 > 0f)
				{
					velocity.Y += num287 * 2f;
				}
			}
			else if (velocity.Y > num289)
			{
				velocity.Y -= num287;
				if (velocity.Y > 0f && num289 < 0f)
				{
					velocity.Y -= num287 * 2f;
				}
			}
		}
		else if (aiStyle == 37)
		{
			if (this.ai[1] == 0f)
			{
				this.ai[1] = 1f;
				localAI[0] = base.Center.X - velocity.X * 1.5f;
				localAI[1] = base.Center.Y - velocity.Y * 1.5f;
			}
			Vector2 vector26 = new Vector2(localAI[0], localAI[1]);
			rotation = (base.Center - vector26).ToRotation() - (float)Math.PI / 2f;
			if (this.ai[0] == 0f)
			{
				if (Collision.SolidCollision(base.position, width, height))
				{
					velocity *= -1f;
					this.ai[0] += 1f;
					return;
				}
				float num292 = Vector2.Distance(base.Center, vector26);
				if (num292 > 300f)
				{
					velocity *= -1f;
					this.ai[0] += 1f;
				}
			}
			else if (Collision.SolidCollision(base.position, width, height) || Vector2.Distance(base.Center, vector26) < velocity.Length())
			{
				Kill();
			}
		}
		else if (aiStyle == 38)
		{
			this.ai[0] += 1f;
			if (this.ai[0] >= 6f)
			{
				this.ai[0] = 0f;
				SoundEngine.PlaySound(SoundID.Item34, base.position);
				if (Main.myPlayer == owner)
				{
					NewProjectile(base.position.X, base.position.Y, velocity.X, velocity.Y, 188, damage, knockBack, owner);
				}
			}
		}
		else if (aiStyle == 39)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (!active || !Main.player[owner].active || Main.player[owner].dead || Vector2.Distance(Main.player[owner].Center, base.Center) > 2000f)
			{
				Kill();
				return;
			}
			if (active && alpha == 0)
			{
				Main.player[owner].SetDummyItemTime(5);
				if (base.Center.X > Main.player[owner].Center.X)
				{
					Main.player[owner].ChangeDir(1);
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
				}
			}
			Vector2 center = base.Center;
			float num293 = Main.player[owner].Center.X - center.X;
			float num294 = Main.player[owner].Center.Y - center.Y;
			float num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
			if (!Main.player[owner].channel && active && alpha == 0)
			{
				this.ai[0] = 1f;
				this.ai[1] = -1f;
			}
			if (this.ai[1] > 0f && num295 > 1500f)
			{
				this.ai[1] = 0f;
				this.ai[0] = 1f;
			}
			if (this.ai[1] > 0f)
			{
				tileCollide = false;
				int num296 = (int)this.ai[1] - 1;
				if (Main.npc[num296].active && Main.npc[num296].life > 0)
				{
					float num297 = 16f;
					center = base.Center;
					num293 = Main.npc[num296].Center.X - center.X;
					num294 = Main.npc[num296].Center.Y - center.Y;
					num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
					if (num295 < num297)
					{
						velocity.X = num293;
						velocity.Y = num294;
						if (num295 > num297 / 3f)
						{
							if (velocity.X < 0f)
							{
								spriteDirection = -1;
								rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
							}
							else
							{
								spriteDirection = 1;
								rotation = (float)Math.Atan2(velocity.Y, velocity.X);
							}
							if (type == 190)
							{
								velocity.X = 0f;
								velocity.Y = 0f;
							}
						}
					}
					else
					{
						if (num295 == 0f)
						{
							num295 = 0.0001f;
						}
						num295 = num297 / num295;
						num293 *= num295;
						num294 *= num295;
						velocity.X = num293;
						velocity.Y = num294;
						if (velocity.X < 0f)
						{
							spriteDirection = -1;
							rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
						}
						else
						{
							spriteDirection = 1;
							rotation = (float)Math.Atan2(velocity.Y, velocity.X);
						}
					}
					if (type == 190)
					{
						for (int num298 = 0; num298 < 1000; num298++)
						{
							if (num298 != whoAmI && Main.projectile[num298].active && Main.projectile[num298].owner == owner && Main.projectile[num298].type == 190 && Vector2.Distance(base.Center, Main.projectile[num298].Center) < 8f)
							{
								if (base.position.X < Main.projectile[num298].position.X)
								{
									velocity.X -= 4f;
								}
								else
								{
									velocity.X += 4f;
								}
								if (base.position.Y < Main.projectile[num298].position.Y)
								{
									velocity.Y -= 4f;
								}
								else
								{
									velocity.Y += 4f;
								}
							}
						}
					}
					this.ai[0] = 1f;
				}
				else
				{
					this.ai[1] = 0f;
					float num299 = base.position.X;
					float num300 = base.position.Y;
					float num301 = 3000f;
					int num302 = -1;
					for (int num303 = 0; num303 < 200; num303++)
					{
						if (Main.npc[num303].CanBeChasedBy(this))
						{
							float x = Main.npc[num303].Center.X;
							float y = Main.npc[num303].Center.Y;
							float num304 = Math.Abs(base.Center.X - x) + Math.Abs(base.Center.Y - y);
							if (num304 < num301 && Collision.CanHit(base.position, width, height, Main.npc[num303].position, Main.npc[num303].width, Main.npc[num303].height))
							{
								num301 = num304;
								num299 = x;
								num300 = y;
								num302 = num303;
							}
						}
					}
					if (num302 >= 0)
					{
						float num305 = 16f;
						center = base.Center;
						num293 = num299 - center.X;
						num294 = num300 - center.Y;
						num295 = (float)Math.Sqrt(num293 * num293 + num294 * num294);
						if (num295 == 0f)
						{
							num295 = 0.0001f;
						}
						num295 = num305 / num295;
						num293 *= num295;
						num294 *= num295;
						velocity.X = num293;
						velocity.Y = num294;
						this.ai[0] = 0f;
						this.ai[1] = num302 + 1;
					}
				}
			}
			else if (this.ai[0] == 0f)
			{
				if (num295 > 700f)
				{
					this.ai[0] = 1f;
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = false;
				if (velocity.X < 0f)
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				float num306 = 20f;
				if (num295 < 70f)
				{
					Kill();
				}
				num295 = num306 / num295;
				num293 *= num295;
				num294 *= num295;
				velocity.X = num293;
				velocity.Y = num294;
				if (type == 190)
				{
					base.position += Main.player[owner].velocity;
				}
			}
			frameCounter++;
			if (frameCounter >= 4)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 4)
			{
				frame = 0;
			}
		}
		else if (aiStyle == 40)
		{
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				localAI[0] = 100f;
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 5)
			{
				frame = 0;
			}
			velocity.X += this.ai[0];
			velocity.Y += this.ai[1];
			localAI[1] += 1f;
			if (localAI[1] == 50f)
			{
				localAI[1] = 51f;
				this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
				this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 16f)
			{
				velocity.X *= 0.95f;
				velocity.Y *= 0.95f;
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 12f)
			{
				velocity.X *= 1.05f;
				velocity.Y *= 1.05f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
		}
		else if (aiStyle == 41)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				frame = Main.rand.Next(3);
			}
			rotation += velocity.X * 0.01f;
		}
		else if (aiStyle == 42)
		{
			if (!Main.player[owner].crystalLeaf)
			{
				Kill();
				return;
			}
			base.position.X = Main.player[owner].Center.X - (float)(width / 2);
			base.position.Y = Main.player[owner].Center.Y - (float)(height / 2) + Main.player[owner].gfxOffY - 60f;
			if (Main.player[owner].gravDir == -1f)
			{
				base.position.Y += 120f;
				rotation = 3.14f;
			}
			else
			{
				rotation = 0f;
			}
			base.position.X = (int)base.position.X;
			base.position.Y = (int)base.position.Y;
			float num307 = (float)(int)Main.mouseTextColor / 200f - 0.35f;
			num307 *= 0.2f;
			scale = num307 + 0.95f;
			if (owner != Main.myPlayer)
			{
				return;
			}
			if (this.ai[0] == 0f)
			{
				float num308 = base.position.X;
				float num309 = base.position.Y;
				float num310 = 700f;
				bool flag10 = false;
				for (int num311 = 0; num311 < 200; num311++)
				{
					if (Main.npc[num311].CanBeChasedBy(this))
					{
						float num312 = Main.npc[num311].position.X + (float)(Main.npc[num311].width / 2);
						float num313 = Main.npc[num311].position.Y + (float)(Main.npc[num311].height / 2);
						float num314 = Math.Abs(base.position.X + (float)(width / 2) - num312) + Math.Abs(base.position.Y + (float)(height / 2) - num313);
						if (num314 < num310 && Collision.CanHit(base.position, width, height, Main.npc[num311].position, Main.npc[num311].width, Main.npc[num311].height))
						{
							num310 = num314;
							num308 = num312;
							num309 = num313;
							flag10 = true;
						}
					}
				}
				if (flag10)
				{
					float num315 = 12f;
					Vector2 vector27 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num316 = num308 - vector27.X;
					float num317 = num309 - vector27.Y;
					float num318 = (float)Math.Sqrt(num316 * num316 + num317 * num317);
					float num319 = num318;
					num318 = num315 / num318;
					num316 *= num318;
					num317 *= num318;
					NewProjectile(base.Center.X - 4f, base.Center.Y, num316, num317, 227, Player.crystalLeafDamage, Player.crystalLeafKB, owner);
					this.ai[0] = 40f;
				}
			}
			else
			{
				this.ai[0] -= 1f;
			}
		}
		else if (aiStyle == 43)
		{
			Dust dust;
			if (localAI[1] == 0f)
			{
				SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
				localAI[1] += 1f;
				for (int num320 = 0; num320 < 5; num320++)
				{
					int num321 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
					Main.dust[num321].noGravity = true;
					dust = Main.dust[num321];
					dust.velocity *= 3f;
					Main.dust[num321].scale = 1.5f;
				}
			}
			this.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0025f;
			this.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0025f;
			if (localAI[0] == 0f)
			{
				scale += 0.05f;
				if ((double)scale > 1.2)
				{
					localAI[0] = 1f;
				}
			}
			else
			{
				scale -= 0.05f;
				if ((double)scale < 0.8)
				{
					localAI[0] = 0f;
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			int num322 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
			Main.dust[num322].noGravity = true;
			dust = Main.dust[num322];
			dust.velocity *= 0.1f;
			Main.dust[num322].scale = 1.5f;
		}
		else if (aiStyle == 44)
		{
			int num323 = 6;
			if (type == 228)
			{
				velocity *= 0.96f;
				alpha += 4;
				if (alpha > 255)
				{
					Kill();
				}
			}
			else if (type == 732)
			{
				num323 = 3;
				alpha += 20;
				if (alpha > 255)
				{
					Kill();
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust8 = Dust.NewDustDirect(base.position, width, height, 226, 0f, 0f, 150, default(Color), 0.8f);
					dust8.noGravity = true;
					Dust dust = dust8;
					dust.velocity *= 1.2f;
				}
				rotation = velocity.ToRotation();
				Lighting.AddLight(base.Center, 0.3f, 0.6f, 0.8f);
			}
			else if (type == 229)
			{
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 20f)
				{
					velocity.Y += 0.3f;
					velocity.X *= 0.98f;
				}
			}
			if (++frameCounter >= num323)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 45)
		{
			if (type == 237 || type == 243)
			{
				float num324 = this.ai[0];
				float num325 = this.ai[1];
				if (num324 != 0f && num325 != 0f)
				{
					bool flag11 = false;
					bool flag12 = false;
					if ((velocity.X < 0f && base.Center.X < num324) || (velocity.X > 0f && base.Center.X > num324))
					{
						flag11 = true;
					}
					if ((velocity.Y < 0f && base.Center.Y < num325) || (velocity.Y > 0f && base.Center.Y > num325))
					{
						flag12 = true;
					}
					if (flag11 && flag12)
					{
						Kill();
					}
				}
				rotation += velocity.X * 0.02f;
				frameCounter++;
				if (frameCounter > 4)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
			}
			else if (type == 238 || type == 244)
			{
				bool flag13 = true;
				int num326 = (int)base.Center.X;
				int num327 = (int)(base.position.Y + (float)height);
				if (Collision.SolidTiles(new Vector2(num326, num327), 2, 20))
				{
					flag13 = false;
				}
				frameCounter++;
				if (frameCounter > 8)
				{
					frameCounter = 0;
					frame++;
					if ((!flag13 && frame > 2) || frame > 5)
					{
						frame = 0;
					}
				}
				this.ai[1] += 1f;
				if (type == 244 && this.ai[1] >= 3600f)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
					}
				}
				else if (type == 238 && this.ai[1] >= 7200f)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
					}
				}
				else if (flag13)
				{
					this.ai[0] += 1f;
					if (type == 244)
					{
						if (this.ai[0] > 10f)
						{
							this.ai[0] = 0f;
							if (owner == Main.myPlayer)
							{
								num326 += Main.rand.Next(-14, 15);
								NewProjectile(num326, num327, 0f, 5f, 245, damage, 0f, owner);
							}
						}
					}
					else if (this.ai[0] > 8f)
					{
						this.ai[0] = 0f;
						if (owner == Main.myPlayer)
						{
							num326 += Main.rand.Next(-14, 15);
							NewProjectile(num326, num327, 0f, 5f, 239, damage, 0f, owner);
						}
					}
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 10f))
				{
					return;
				}
				localAI[0] = 0f;
				int num328 = 0;
				int num329 = 0;
				float num330 = 0f;
				int num331 = type;
				for (int num332 = 0; num332 < 1000; num332++)
				{
					if (Main.projectile[num332].active && Main.projectile[num332].owner == owner && Main.projectile[num332].type == num331 && Main.projectile[num332].ai[1] < 3600f)
					{
						num328++;
						if (Main.projectile[num332].ai[1] > num330)
						{
							num329 = num332;
							num330 = Main.projectile[num332].ai[1];
						}
					}
				}
				if (type == 244)
				{
					if (num328 > 1)
					{
						Main.projectile[num329].netUpdate = true;
						Main.projectile[num329].ai[1] = 36000f;
					}
				}
				else if (num328 > 2)
				{
					Main.projectile[num329].netUpdate = true;
					Main.projectile[num329].ai[1] = 36000f;
				}
			}
			else if (type == 239)
			{
				alpha = 50;
			}
			else if (type == 245)
			{
				alpha = 100;
			}
			else if (type == 264)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (aiStyle == 46)
		{
			int num333 = 1200;
			if (type == 250)
			{
				if (owner == Main.myPlayer)
				{
					localAI[0] += 1f;
					if (localAI[0] > 4f)
					{
						localAI[0] = 3f;
						NewProjectile(base.Center.X, base.Center.Y, velocity.X * 0.001f, velocity.Y * 0.001f, 251, damage, knockBack, owner);
					}
					if (timeLeft > num333)
					{
						timeLeft = num333;
					}
				}
				float num334 = 1f;
				if (velocity.Y < 0f)
				{
					num334 -= velocity.Y / 3f;
				}
				this.ai[0] += num334;
				if (this.ai[0] > 30f)
				{
					velocity.Y += 0.5f;
					if (velocity.Y > 0f)
					{
						velocity.X *= 0.95f;
					}
					else
					{
						velocity.X *= 1.05f;
					}
				}
				float x2 = velocity.X;
				float y2 = velocity.Y;
				float num335 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
				num335 = 15.95f * scale / num335;
				x2 *= num335;
				y2 *= num335;
				velocity.X = x2;
				velocity.Y = y2;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				return;
			}
			if (localAI[0] == 0f)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				}
				localAI[0] = 1f;
				timeLeft = num333;
			}
			velocity.X *= 0.98f;
			velocity.Y *= 0.98f;
			if (rotation == 0f)
			{
				alpha = 255;
			}
			else if (timeLeft < 10)
			{
				alpha = 255 - (int)(255f * (float)timeLeft / 10f);
			}
			else if (timeLeft > num333 - 10)
			{
				int num336 = num333 - timeLeft;
				alpha = 255 - (int)(255f * (float)num336 / 10f);
			}
			else
			{
				alpha = 0;
			}
		}
		else if (aiStyle == 47)
		{
			if (this.ai[0] == 0f)
			{
				this.ai[0] = velocity.X;
				this.ai[1] = velocity.Y;
			}
			if (velocity.X > 0f)
			{
				rotation += (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
			}
			else
			{
				rotation -= (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
			}
			frameCounter++;
			if (frameCounter > 6)
			{
				frameCounter = 0;
				frame++;
				if (frame > 4)
				{
					frame = 0;
				}
			}
			if (Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y) > 2.0)
			{
				velocity *= 0.98f;
			}
			for (int num337 = 0; num337 < 1000; num337++)
			{
				if (num337 != whoAmI && Main.projectile[num337].active && Main.projectile[num337].owner == owner && Main.projectile[num337].type == type && timeLeft > Main.projectile[num337].timeLeft && Main.projectile[num337].timeLeft > 30)
				{
					Main.projectile[num337].timeLeft = 30;
				}
			}
			int[] array = new int[20];
			int num338 = 0;
			float num339 = 300f;
			bool flag14 = false;
			float num340 = 0f;
			float num341 = 0f;
			for (int num342 = 0; num342 < 200; num342++)
			{
				if (!Main.npc[num342].CanBeChasedBy(this))
				{
					continue;
				}
				float num343 = Main.npc[num342].position.X + (float)(Main.npc[num342].width / 2);
				float num344 = Main.npc[num342].position.Y + (float)(Main.npc[num342].height / 2);
				float num345 = Math.Abs(base.position.X + (float)(width / 2) - num343) + Math.Abs(base.position.Y + (float)(height / 2) - num344);
				if (num345 < num339 && Collision.CanHit(base.Center, 1, 1, Main.npc[num342].Center, 1, 1))
				{
					if (num338 < 20)
					{
						array[num338] = num342;
						num338++;
						num340 = num343;
						num341 = num344;
					}
					flag14 = true;
				}
			}
			if (timeLeft < 30)
			{
				flag14 = false;
			}
			if (flag14)
			{
				int num346 = Main.rand.Next(num338);
				num346 = array[num346];
				num340 = Main.npc[num346].position.X + (float)(Main.npc[num346].width / 2);
				num341 = Main.npc[num346].position.Y + (float)(Main.npc[num346].height / 2);
				localAI[0] += 1f;
				if (localAI[0] > 8f)
				{
					localAI[0] = 0f;
					float num347 = 6f;
					Vector2 vector28 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					vector28 += velocity * 4f;
					float num348 = num340 - vector28.X;
					float num349 = num341 - vector28.Y;
					float num350 = (float)Math.Sqrt(num348 * num348 + num349 * num349);
					float num351 = num350;
					num350 = num347 / num350;
					num348 *= num350;
					num349 *= num350;
					NewProjectile(vector28.X, vector28.Y, num348, num349, 255, damage, knockBack, owner);
				}
			}
		}
		else if (aiStyle == 48)
		{
			if (type == 255)
			{
				for (int num352 = 0; num352 < 4; num352++)
				{
					Vector2 vector29 = base.position;
					vector29 -= velocity * ((float)num352 * 0.25f);
					alpha = 255;
					int num353 = Dust.NewDust(vector29, 1, 1, 160);
					Main.dust[num353].position = vector29;
					Main.dust[num353].position.X += width / 2;
					Main.dust[num353].position.Y += height / 2;
					Main.dust[num353].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust = Main.dust[num353];
					dust.velocity *= 0.2f;
				}
				return;
			}
			if (type == 433)
			{
				for (int num354 = 0; num354 < 2; num354++)
				{
					Vector2 vector30 = base.position;
					vector30 -= velocity * ((float)num354 * 0.25f);
					alpha = 255;
					int num355 = Dust.NewDust(vector30, 1, 1, 160);
					Main.dust[num355].position = vector30;
					Main.dust[num355].position.X += width / 2;
					Main.dust[num355].position.Y += height / 2;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num355].color = Color.LimeGreen;
					}
					else
					{
						Main.dust[num355].color = Color.CornflowerBlue;
					}
					Main.dust[num355].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust = Main.dust[num355];
					dust.velocity *= 0.2f;
				}
				return;
			}
			if (type == 290)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					for (int num356 = 0; num356 < 3; num356++)
					{
						Vector2 vector31 = base.position;
						vector31 -= velocity * ((float)num356 * 0.3334f);
						alpha = 255;
						int num357 = Dust.NewDust(vector31, 1, 1, 173);
						Main.dust[num357].position = vector31;
						Main.dust[num357].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust = Main.dust[num357];
						dust.velocity *= 0.2f;
					}
				}
				return;
			}
			if (type == 294)
			{
				localAI[0] += 1f;
				if (localAI[0] > 9f)
				{
					for (int num358 = 0; num358 < 4; num358++)
					{
						Vector2 vector32 = base.position;
						vector32 -= velocity * ((float)num358 * 0.25f);
						alpha = 255;
						int num359 = Dust.NewDust(vector32, 1, 1, 173);
						Main.dust[num359].position = vector32;
						Main.dust[num359].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust = Main.dust[num359];
						dust.velocity *= 0.2f;
					}
				}
				return;
			}
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				for (int num360 = 0; num360 < 4; num360++)
				{
					Vector2 vector33 = base.position;
					vector33 -= velocity * ((float)num360 * 0.25f);
					alpha = 255;
					int num361 = Dust.NewDust(vector33, 1, 1, 162);
					Main.dust[num361].position = vector33;
					Main.dust[num361].position.X += width / 2;
					Main.dust[num361].position.Y += height / 2;
					Main.dust[num361].scale = (float)Main.rand.Next(70, 110) * 0.013f;
					Dust dust = Main.dust[num361];
					dust.velocity *= 0.2f;
				}
			}
		}
		else if (aiStyle == 49)
		{
			if (this.ai[0] == -2f)
			{
				hostile = true;
				Kill();
				return;
			}
			if (this.ai[0] == -3f)
			{
				Kill();
				return;
			}
			if (soundDelay == 0)
			{
				soundDelay = 3000;
				SoundEngine.PlaySound(SoundID.Item14, base.position);
			}
			if (this.ai[0] >= 0f)
			{
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				else if (velocity.X < 0f)
				{
					direction = -1;
				}
				spriteDirection = direction;
				this.ai[0] += 1f;
				rotation += velocity.X * 0.05f + (float)direction * 0.05f;
				if (this.ai[0] >= 18f)
				{
					velocity.Y += 0.28f;
					velocity.X *= 0.99f;
				}
				if ((double)velocity.Y > 15.9)
				{
					velocity.Y = 15.9f;
				}
				if (!(this.ai[0] > 2f))
				{
					return;
				}
				alpha = 0;
				if (this.ai[0] == 3f)
				{
					for (int num362 = 0; num362 < 10; num362++)
					{
						int num363 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num363];
						dust.velocity *= 0.5f;
						dust = Main.dust[num363];
						dust.velocity += velocity * 0.1f;
					}
					for (int num364 = 0; num364 < 5; num364++)
					{
						int num365 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num365].noGravity = true;
						Dust dust = Main.dust[num365];
						dust.velocity *= 3f;
						dust = Main.dust[num365];
						dust.velocity += velocity * 0.2f;
						num365 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
						dust = Main.dust[num365];
						dust.velocity *= 2f;
						dust = Main.dust[num365];
						dust.velocity += velocity * 0.3f;
					}
					for (int num366 = 0; num366 < 1; num366++)
					{
						int num367 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num367];
						gore.position += velocity * 1.25f;
						Main.gore[num367].scale = 1.5f;
						gore = Main.gore[num367];
						gore.velocity += velocity * 0.5f;
						gore = Main.gore[num367];
						gore.velocity *= 0.02f;
					}
				}
			}
			else if (this.ai[0] == -1f)
			{
				rotation = 0f;
				velocity.X *= 0.95f;
				velocity.Y += 0.2f;
			}
		}
		else if (aiStyle == 50)
		{
			if (type == 291)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item20, base.position);
					localAI[0] += 1f;
				}
				bool flag15 = false;
				bool flag16 = false;
				if (velocity.X < 0f && base.position.X < this.ai[0])
				{
					flag15 = true;
				}
				if (velocity.X > 0f && base.position.X > this.ai[0])
				{
					flag15 = true;
				}
				if (velocity.Y < 0f && base.position.Y < this.ai[1])
				{
					flag16 = true;
				}
				if (velocity.Y > 0f && base.position.Y > this.ai[1])
				{
					flag16 = true;
				}
				if (flag15 && flag16)
				{
					Kill();
				}
				for (int num368 = 0; num368 < 10; num368++)
				{
					int num369 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num369].noGravity = true;
					Dust dust = Main.dust[num369];
					dust.velocity *= 0.5f;
					dust = Main.dust[num369];
					dust.velocity += velocity * 0.1f;
				}
				return;
			}
			if (type == 295)
			{
				for (int num370 = 0; num370 < 8; num370++)
				{
					int num371 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num371].noGravity = true;
					Dust dust = Main.dust[num371];
					dust.velocity *= 0.5f;
					dust = Main.dust[num371];
					dust.velocity += velocity * 0.1f;
				}
				return;
			}
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item74, base.position);
				localAI[0] += 1f;
			}
			this.ai[0] += 1f;
			if (type == 296)
			{
				this.ai[0] += 3f;
			}
			float num372 = 25f;
			if (this.ai[0] > 180f)
			{
				num372 -= (this.ai[0] - 180f) / 2f;
			}
			if (num372 <= 0f)
			{
				num372 = 0f;
				Kill();
			}
			if (type == 296)
			{
				num372 *= 0.7f;
			}
			for (int num373 = 0; (float)num373 < num372; num373++)
			{
				float num374 = Main.rand.Next(-10, 11);
				float num375 = Main.rand.Next(-10, 11);
				float num376 = Main.rand.Next(3, 9);
				float num377 = (float)Math.Sqrt(num374 * num374 + num375 * num375);
				num377 = num376 / num377;
				num374 *= num377;
				num375 *= num377;
				int num378 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num378].noGravity = true;
				Main.dust[num378].position.X = base.Center.X;
				Main.dust[num378].position.Y = base.Center.Y;
				Main.dust[num378].position.X += Main.rand.Next(-10, 11);
				Main.dust[num378].position.Y += Main.rand.Next(-10, 11);
				Main.dust[num378].velocity.X = num374;
				Main.dust[num378].velocity.Y = num375;
			}
		}
		else if (aiStyle == 51)
		{
			if (type == 297)
			{
				localAI[0] += 1f;
				if (localAI[0] > 4f)
				{
					for (int num379 = 0; num379 < 5; num379++)
					{
						int num380 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num380].noGravity = true;
						Dust dust = Main.dust[num380];
						dust.velocity *= 0f;
					}
				}
			}
			else
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
					localAI[0] += 1f;
				}
				for (int num381 = 0; num381 < 9; num381++)
				{
					int num382 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num382].noGravity = true;
					Dust dust = Main.dust[num382];
					dust.velocity *= 0f;
				}
			}
			float num383 = base.Center.X;
			float num384 = base.Center.Y;
			float num385 = 400f;
			bool flag17 = false;
			int num386 = 0;
			if (type == 297)
			{
				for (int num387 = 0; num387 < 200; num387++)
				{
					if (Main.npc[num387].CanBeChasedBy(this) && Distance(Main.npc[num387].Center) < num385 && Collision.CanHit(base.Center, 1, 1, Main.npc[num387].Center, 1, 1))
					{
						float num388 = Main.npc[num387].position.X + (float)(Main.npc[num387].width / 2);
						float num389 = Main.npc[num387].position.Y + (float)(Main.npc[num387].height / 2);
						float num390 = Math.Abs(base.position.X + (float)(width / 2) - num388) + Math.Abs(base.position.Y + (float)(height / 2) - num389);
						if (num390 < num385)
						{
							num385 = num390;
							num383 = num388;
							num384 = num389;
							flag17 = true;
							num386 = num387;
						}
					}
				}
			}
			else
			{
				num385 = 200f;
				for (int num391 = 0; num391 < 255; num391++)
				{
					if (Main.player[num391].active && !Main.player[num391].dead)
					{
						float num392 = Main.player[num391].position.X + (float)(Main.player[num391].width / 2);
						float num393 = Main.player[num391].position.Y + (float)(Main.player[num391].height / 2);
						float num394 = Math.Abs(base.position.X + (float)(width / 2) - num392) + Math.Abs(base.position.Y + (float)(height / 2) - num393);
						if (num394 < num385)
						{
							num385 = num394;
							num383 = num392;
							num384 = num393;
							flag17 = true;
							num386 = num391;
						}
					}
				}
			}
			if (flag17)
			{
				float num395 = 3f;
				if (type == 297)
				{
					num395 = 6f;
				}
				Vector2 vector34 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num396 = num383 - vector34.X;
				float num397 = num384 - vector34.Y;
				float num398 = (float)Math.Sqrt(num396 * num396 + num397 * num397);
				float num399 = num398;
				num398 = num395 / num398;
				num396 *= num398;
				num397 *= num398;
				if (type == 297)
				{
					velocity.X = (velocity.X * 20f + num396) / 21f;
					velocity.Y = (velocity.Y * 20f + num397) / 21f;
				}
				else
				{
					velocity.X = (velocity.X * 100f + num396) / 101f;
					velocity.Y = (velocity.Y * 100f + num397) / 101f;
				}
			}
		}
		else if (aiStyle == 52)
		{
			int num400 = (int)this.ai[0];
			float num401 = 4f;
			Vector2 vector35 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
			float num402 = Main.player[num400].Center.X - vector35.X;
			float num403 = Main.player[num400].Center.Y - vector35.Y;
			float num404 = (float)Math.Sqrt(num402 * num402 + num403 * num403);
			float num405 = num404;
			if (num404 < 50f && base.position.X < Main.player[num400].position.X + (float)Main.player[num400].width && base.position.X + (float)width > Main.player[num400].position.X && base.position.Y < Main.player[num400].position.Y + (float)Main.player[num400].height && base.position.Y + (float)height > Main.player[num400].position.Y)
			{
				if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
				{
					int num406 = (int)this.ai[1];
					Main.player[num400].HealEffect(num406, broadcast: false);
					Player player3 = Main.player[num400];
					player3.statLife += num406;
					if (Main.player[num400].statLife > Main.player[num400].statLifeMax2)
					{
						Main.player[num400].statLife = Main.player[num400].statLifeMax2;
					}
					NetMessage.SendData(66, -1, -1, null, num400, num406);
				}
				Kill();
			}
			num404 = num401 / num404;
			num402 *= num404;
			num403 *= num404;
			velocity.X = (velocity.X * 15f + num402) / 16f;
			velocity.Y = (velocity.Y * 15f + num403) / 16f;
			if (type == 305)
			{
				for (int num407 = 0; num407 < 3; num407++)
				{
					float num408 = velocity.X * 0.334f * (float)num407;
					float num409 = (0f - velocity.Y * 0.334f) * (float)num407;
					int num410 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 183, 0f, 0f, 100, default(Color), 1.1f);
					Main.dust[num410].noGravity = true;
					Dust dust = Main.dust[num410];
					dust.velocity *= 0f;
					Main.dust[num410].position.X -= num408;
					Main.dust[num410].position.Y -= num409;
				}
			}
			else
			{
				for (int num411 = 0; num411 < 5; num411++)
				{
					float num412 = velocity.X * 0.2f * (float)num411;
					float num413 = (0f - velocity.Y * 0.2f) * (float)num411;
					int num414 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num414].noGravity = true;
					Dust dust = Main.dust[num414];
					dust.velocity *= 0f;
					Main.dust[num414].position.X -= num412;
					Main.dust[num414].position.Y -= num413;
				}
			}
		}
		else if (aiStyle == 53)
		{
			if (localAI[0] == 0f)
			{
				localAI[1] = 1f;
				localAI[0] = 1f;
				this.ai[0] = 120f;
				int num415 = 80;
				SoundEngine.PlaySound(SoundID.Item46, base.position);
				if (type == 308)
				{
					for (int num416 = 0; num416 < num415; num416++)
					{
						int num417 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), width, height - 16, 185);
						Dust dust = Main.dust[num417];
						dust.velocity *= 2f;
						Main.dust[num417].noGravity = true;
						dust = Main.dust[num417];
						dust.scale *= 1.15f;
					}
				}
				if (type == 377)
				{
					frame = 4;
					num415 = 40;
					for (int num418 = 0; num418 < num415; num418++)
					{
						int num419 = Dust.NewDust(base.position + Vector2.UnitY * 16f, width, height - 16, 171, 0f, 0f, 100);
						Main.dust[num419].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num419].noGravity = true;
						Main.dust[num419].fadeIn = 1.5f;
						Dust dust = Main.dust[num419];
						dust.velocity *= 0.75f;
					}
				}
			}
			velocity.X = 0f;
			velocity.Y += 0.2f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			bool flag18 = false;
			float num420 = base.Center.X;
			float num421 = base.Center.Y;
			float num422 = 1000f;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				float num423 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
				float num424 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
				float num425 = Math.Abs(base.position.X + (float)(width / 2) - num423) + Math.Abs(base.position.Y + (float)(height / 2) - num424);
				if (num425 < num422 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
				{
					num422 = num425;
					num420 = num423;
					num421 = num424;
					flag18 = true;
				}
			}
			if (!flag18)
			{
				for (int num426 = 0; num426 < 200; num426++)
				{
					if (Main.npc[num426].CanBeChasedBy(this))
					{
						float num427 = Main.npc[num426].position.X + (float)(Main.npc[num426].width / 2);
						float num428 = Main.npc[num426].position.Y + (float)(Main.npc[num426].height / 2);
						float num429 = Math.Abs(base.position.X + (float)(width / 2) - num427) + Math.Abs(base.position.Y + (float)(height / 2) - num428);
						if (num429 < num422 && Collision.CanHit(base.position, width, height, Main.npc[num426].position, Main.npc[num426].width, Main.npc[num426].height))
						{
							num422 = num429;
							num420 = num427;
							num421 = num428;
							flag18 = true;
						}
					}
				}
			}
			if (flag18)
			{
				float num430 = num420;
				float num431 = num421;
				num420 -= base.Center.X;
				num421 -= base.Center.Y;
				int num432 = 0;
				if (frameCounter > 0)
				{
					frameCounter--;
				}
				if (frameCounter <= 0)
				{
					int num433 = spriteDirection;
					if (num420 < 0f)
					{
						spriteDirection = -1;
					}
					else
					{
						spriteDirection = 1;
					}
					num432 = ((!(num421 > 0f)) ? ((Math.Abs(num421) > Math.Abs(num420) * 3f) ? 4 : ((Math.Abs(num421) > Math.Abs(num420) * 2f) ? 3 : ((!(Math.Abs(num420) > Math.Abs(num421) * 3f)) ? ((Math.Abs(num420) > Math.Abs(num421) * 2f) ? 1 : 2) : 0))) : 0);
					int num434 = frame;
					if (type == 308)
					{
						frame = num432 * 2;
					}
					else if (type == 377)
					{
						frame = num432;
					}
					if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
					{
						frame++;
					}
					if (num434 != frame || num433 != spriteDirection)
					{
						frameCounter = 8;
						if (this.ai[0] <= 0f)
						{
							frameCounter = 4;
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					localAI[1] = 0f;
					this.ai[0] = 60f;
					if (Main.myPlayer == owner)
					{
						float num435 = 6f;
						int num436 = 309;
						if (type == 377)
						{
							num436 = 378;
							num435 = 9f;
						}
						Vector2 vector36 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						switch (num432)
						{
						case 0:
							vector36.Y += 12f;
							vector36.X += 24 * spriteDirection;
							break;
						case 1:
							vector36.Y += 0f;
							vector36.X += 24 * spriteDirection;
							break;
						case 2:
							vector36.Y -= 2f;
							vector36.X += 24 * spriteDirection;
							break;
						case 3:
							vector36.Y -= 6f;
							vector36.X += 14 * spriteDirection;
							break;
						case 4:
							vector36.Y -= 14f;
							vector36.X += 2 * spriteDirection;
							break;
						}
						if (spriteDirection < 0)
						{
							vector36.X += 10f;
						}
						float num437 = num430 - vector36.X;
						float num438 = num431 - vector36.Y;
						float num439 = (float)Math.Sqrt(num437 * num437 + num438 * num438);
						float num440 = num439;
						num439 = num435 / num439;
						num437 *= num439;
						num438 *= num439;
						int num441 = damage;
						int num442 = NewProjectile(vector36.X, vector36.Y, num437, num438, num436, num441, knockBack, Main.myPlayer);
					}
				}
			}
			else if (this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
			{
				frame--;
			}
			if (this.ai[0] > 0f)
			{
				this.ai[0] -= 1f;
			}
		}
		else if (aiStyle == 54)
		{
			if (type == 317)
			{
				if (Main.player[Main.myPlayer].dead)
				{
					Main.player[Main.myPlayer].raven = false;
				}
				if (Main.player[Main.myPlayer].raven)
				{
					timeLeft = 2;
				}
			}
			for (int num443 = 0; num443 < 1000; num443++)
			{
				if (num443 != whoAmI && Main.projectile[num443].active && Main.projectile[num443].owner == owner && Main.projectile[num443].type == type && Math.Abs(base.position.X - Main.projectile[num443].position.X) + Math.Abs(base.position.Y - Main.projectile[num443].position.Y) < (float)width)
				{
					if (base.position.X < Main.projectile[num443].position.X)
					{
						velocity.X -= 0.05f;
					}
					else
					{
						velocity.X += 0.05f;
					}
					if (base.position.Y < Main.projectile[num443].position.Y)
					{
						velocity.Y -= 0.05f;
					}
					else
					{
						velocity.Y += 0.05f;
					}
				}
			}
			float num444 = base.position.X;
			float num445 = base.position.Y;
			float num446 = 900f;
			bool flag19 = false;
			int num447 = 500;
			if (this.ai[1] != 0f || friendly)
			{
				num447 = 1400;
			}
			if (Math.Abs(base.Center.X - Main.player[owner].Center.X) + Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float)num447)
			{
				this.ai[0] = 1f;
			}
			if (this.ai[0] == 0f)
			{
				tileCollide = true;
				NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
				{
					float num448 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
					float num449 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
					float num450 = Math.Abs(base.position.X + (float)(width / 2) - num448) + Math.Abs(base.position.Y + (float)(height / 2) - num449);
					if (num450 < num446 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
					{
						num446 = num450;
						num444 = num448;
						num445 = num449;
						flag19 = true;
					}
				}
				if (!flag19)
				{
					for (int num451 = 0; num451 < 200; num451++)
					{
						if (Main.npc[num451].CanBeChasedBy(this))
						{
							float num452 = Main.npc[num451].position.X + (float)(Main.npc[num451].width / 2);
							float num453 = Main.npc[num451].position.Y + (float)(Main.npc[num451].height / 2);
							float num454 = Math.Abs(base.position.X + (float)(width / 2) - num452) + Math.Abs(base.position.Y + (float)(height / 2) - num453);
							if (num454 < num446 && Collision.CanHit(base.position, width, height, Main.npc[num451].position, Main.npc[num451].width, Main.npc[num451].height))
							{
								num446 = num454;
								num444 = num452;
								num445 = num453;
								flag19 = true;
							}
						}
					}
				}
			}
			else
			{
				tileCollide = false;
			}
			if (!flag19)
			{
				friendly = true;
				float num455 = 8f;
				if (this.ai[0] == 1f)
				{
					num455 = 12f;
				}
				Vector2 vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num456 = Main.player[owner].Center.X - vector37.X;
				float num457 = Main.player[owner].Center.Y - vector37.Y - 60f;
				float num458 = (float)Math.Sqrt(num456 * num456 + num457 * num457);
				float num459 = num458;
				if (num458 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(base.position, width, height))
				{
					this.ai[0] = 0f;
				}
				if (num458 > 2000f)
				{
					base.position.X = Main.player[owner].Center.X - (float)(width / 2);
					base.position.Y = Main.player[owner].Center.Y - (float)(width / 2);
				}
				if (num458 > 70f)
				{
					num458 = num455 / num458;
					num456 *= num458;
					num457 *= num458;
					velocity.X = (velocity.X * 20f + num456) / 21f;
					velocity.Y = (velocity.Y * 20f + num457) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
				friendly = false;
				rotation = velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame > 3)
				{
					frame = 0;
				}
				if ((double)Math.Abs(velocity.X) > 0.2)
				{
					spriteDirection = -direction;
				}
				return;
			}
			if (this.ai[1] == -1f)
			{
				this.ai[1] = 17f;
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1] -= 1f;
			}
			if (this.ai[1] == 0f)
			{
				friendly = true;
				float num460 = 16f;
				Vector2 vector38 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num461 = num444 - vector38.X;
				float num462 = num445 - vector38.Y;
				float num463 = (float)Math.Sqrt(num461 * num461 + num462 * num462);
				float num464 = num463;
				if (num463 < 100f)
				{
					num460 = 10f;
				}
				num463 = num460 / num463;
				num461 *= num463;
				num462 *= num463;
				velocity.X = (velocity.X * 14f + num461) / 15f;
				velocity.Y = (velocity.Y * 14f + num462) / 15f;
			}
			else
			{
				friendly = false;
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 10f)
				{
					velocity *= 1.05f;
				}
			}
			rotation = velocity.X * 0.05f;
			frameCounter++;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
			}
			if (frame < 4)
			{
				frame = 4;
			}
			if (frame > 7)
			{
				frame = 4;
			}
			if ((double)Math.Abs(velocity.X) > 0.2)
			{
				spriteDirection = -direction;
			}
		}
		else if (aiStyle == 55)
		{
			frameCounter++;
			if (frameCounter > 0)
			{
				frame++;
				frameCounter = 0;
				if (frame > 2)
				{
					frame = 0;
				}
			}
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
			}
			else
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			if (this.ai[0] >= 0f && this.ai[0] < 200f)
			{
				int num465 = (int)this.ai[0];
				if (Main.npc[num465].active)
				{
					float num466 = 8f;
					Vector2 vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num467 = Main.npc[num465].position.X - vector39.X;
					float num468 = Main.npc[num465].position.Y - vector39.Y;
					float num469 = (float)Math.Sqrt(num467 * num467 + num468 * num468);
					float num470 = num469;
					num469 = num466 / num469;
					num467 *= num469;
					num468 *= num469;
					velocity.X = (velocity.X * 14f + num467) / 15f;
					velocity.Y = (velocity.Y * 14f + num468) / 15f;
				}
				else
				{
					float num471 = 1000f;
					for (int num472 = 0; num472 < 200; num472++)
					{
						if (Main.npc[num472].CanBeChasedBy(this))
						{
							float num473 = Main.npc[num472].position.X + (float)(Main.npc[num472].width / 2);
							float num474 = Main.npc[num472].position.Y + (float)(Main.npc[num472].height / 2);
							float num475 = Math.Abs(base.position.X + (float)(width / 2) - num473) + Math.Abs(base.position.Y + (float)(height / 2) - num474);
							if (num475 < num471 && Collision.CanHit(base.position, width, height, Main.npc[num472].position, Main.npc[num472].width, Main.npc[num472].height))
							{
								num471 = num475;
								this.ai[0] = num472;
							}
						}
					}
				}
				int num476 = 8;
				int num477 = Dust.NewDust(new Vector2(base.position.X + (float)num476, base.position.Y + (float)num476), width - num476 * 2, height - num476 * 2, 6);
				Dust dust = Main.dust[num477];
				dust.velocity *= 0.5f;
				dust = Main.dust[num477];
				dust.velocity += velocity * 0.5f;
				Main.dust[num477].noGravity = true;
				Main.dust[num477].noLight = true;
				Main.dust[num477].scale = 1.4f;
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 56)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				rotation = this.ai[0];
				spriteDirection = -(int)this.ai[1];
			}
			if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 16f)
			{
				velocity *= 1.05f;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.025f * (float)direction;
		}
		else if (aiStyle == 57)
		{
			this.ai[0] += 1f;
			if (this.ai[0] > 30f)
			{
				this.ai[0] = 30f;
				velocity.Y += 0.25f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				velocity.X *= 0.995f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (owner != Main.myPlayer)
			{
				return;
			}
			localAI[0] += 1f;
			if (!(localAI[0] >= 4f))
			{
				return;
			}
			localAI[0] = 0f;
			int num478 = 0;
			for (int num479 = 0; num479 < 1000; num479++)
			{
				if (Main.projectile[num479].active && Main.projectile[num479].owner == owner && Main.projectile[num479].type == 344)
				{
					num478++;
				}
			}
			float num480 = (float)damage * 0.8f;
			float num481 = 1f;
			if (num478 > 100)
			{
				num481 = num478 - 100;
				num481 = 1f - num481 / 100f;
				num480 *= num481;
			}
			if (num478 > 100)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 120)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 140)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 150)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 160)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 165)
			{
				localAI[0] -= 1f;
			}
			if (num478 > 170)
			{
				localAI[0] -= 2f;
			}
			if (num478 > 175)
			{
				localAI[0] -= 3f;
			}
			if (num478 > 180)
			{
				localAI[0] -= 4f;
			}
			if (num478 > 185)
			{
				localAI[0] -= 5f;
			}
			if (num478 > 190)
			{
				localAI[0] -= 6f;
			}
			if (num478 > 195)
			{
				localAI[0] -= 7f;
			}
			if (num480 > (float)damage * 0.1f)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 344, (int)num480, knockBack * 0.55f, owner, 0f, Main.rand.Next(3));
			}
		}
		else if (aiStyle == 58)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				frame = 0;
				this.ai[1] += 1f;
				if (this.ai[1] > 30f)
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y >= 0f)
				{
					this.ai[0] = 1f;
				}
			}
			if (this.ai[0] == 1f)
			{
				frame = 1;
				velocity.Y += 0.1f;
				if (velocity.Y > 3f)
				{
					velocity.Y = 3f;
				}
				velocity.X *= 0.99f;
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
		}
		else if (aiStyle == 59)
		{
			this.ai[1] += 1f;
			if (this.ai[1] >= 60f)
			{
				friendly = true;
				int num482 = (int)this.ai[0];
				if (!Main.npc[num482].active)
				{
					num482 = -1;
					int[] array2 = new int[200];
					int num483 = 0;
					for (int num484 = 0; num484 < 200; num484++)
					{
						if (Main.npc[num484].CanBeChasedBy(this))
						{
							float num485 = Math.Abs(Main.npc[num484].position.X + (float)(Main.npc[num484].width / 2) - base.position.X + (float)(width / 2)) + Math.Abs(Main.npc[num484].position.Y + (float)(Main.npc[num484].height / 2) - base.position.Y + (float)(height / 2));
							if (num485 < 800f)
							{
								array2[num483] = num484;
								num483++;
							}
						}
					}
					if (num483 == 0)
					{
						Kill();
						return;
					}
					num482 = array2[Main.rand.Next(num483)];
					this.ai[0] = num482;
				}
				float num486 = 4f;
				Vector2 vector40 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num487 = Main.npc[num482].Center.X - vector40.X;
				float num488 = Main.npc[num482].Center.Y - vector40.Y;
				float num489 = (float)Math.Sqrt(num487 * num487 + num488 * num488);
				float num490 = num489;
				num489 = num486 / num489;
				num487 *= num489;
				num488 *= num489;
				int num491 = 30;
				velocity.X = (velocity.X * (float)(num491 - 1) + num487) / (float)num491;
				velocity.Y = (velocity.Y * (float)(num491 - 1) + num488) / (float)num491;
			}
			for (int num492 = 0; num492 < 5; num492++)
			{
				float num493 = velocity.X * 0.2f * (float)num492;
				float num494 = (0f - velocity.Y * 0.2f) * (float)num492;
				int num495 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
				Main.dust[num495].noGravity = true;
				Dust dust = Main.dust[num495];
				dust.velocity *= 0f;
				Main.dust[num495].position.X -= num493;
				Main.dust[num495].position.Y -= num494;
			}
		}
		else if (aiStyle == 60)
		{
			scale -= 0.015f;
			if (scale <= 0f)
			{
				velocity *= 5f;
				oldVelocity = velocity;
				Kill();
			}
			if (this.ai[0] > 3f)
			{
				int num496 = 103;
				if (type == 406)
				{
					num496 = 137;
				}
				if (owner == Main.myPlayer)
				{
					Rectangle rectangle4 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					for (int num497 = 0; num497 < 200; num497++)
					{
						if (Main.npc[num497].active && !Main.npc[num497].dontTakeDamage && Main.npc[num497].lifeMax > 1)
						{
							Rectangle value3 = new Rectangle((int)Main.npc[num497].position.X, (int)Main.npc[num497].position.Y, Main.npc[num497].width, Main.npc[num497].height);
							if (rectangle4.Intersects(value3))
							{
								Main.npc[num497].AddBuff(num496, 1500);
								Kill();
							}
						}
					}
					for (int num498 = 0; num498 < 255; num498++)
					{
						if (num498 != owner && Main.player[num498].active && !Main.player[num498].dead)
						{
							Rectangle value4 = new Rectangle((int)Main.player[num498].position.X, (int)Main.player[num498].position.Y, Main.player[num498].width, Main.player[num498].height);
							if (rectangle4.Intersects(value4))
							{
								Main.player[num498].AddBuff(num496, 1500, quiet: false);
								Kill();
							}
						}
					}
				}
				this.ai[0] += this.ai[1];
				if (this.ai[0] > 30f)
				{
					velocity.Y += 0.1f;
				}
				if (type == 358)
				{
					for (int num499 = 0; num499 < 1; num499++)
					{
						for (int num500 = 0; num500 < 6; num500++)
						{
							float num501 = velocity.X / 6f * (float)num500;
							float num502 = velocity.Y / 6f * (float)num500;
							int num503 = 6;
							int num504 = Dust.NewDust(new Vector2(base.position.X + (float)num503, base.position.Y + (float)num503), width - num503 * 2, height - num503 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
							Dust dust;
							if (Main.rand.Next(2) == 0)
							{
								dust = Main.dust[num504];
								dust.alpha += 25;
							}
							if (Main.rand.Next(2) == 0)
							{
								dust = Main.dust[num504];
								dust.alpha += 25;
							}
							if (Main.rand.Next(2) == 0)
							{
								dust = Main.dust[num504];
								dust.alpha += 25;
							}
							Main.dust[num504].noGravity = true;
							dust = Main.dust[num504];
							dust.velocity *= 0.3f;
							dust = Main.dust[num504];
							dust.velocity += velocity * 0.5f;
							Main.dust[num504].position = base.Center;
							Main.dust[num504].position.X -= num501;
							Main.dust[num504].position.Y -= num502;
							dust = Main.dust[num504];
							dust.velocity *= 0.2f;
						}
						if (Main.rand.Next(4) == 0)
						{
							int num505 = 6;
							int num506 = Dust.NewDust(new Vector2(base.position.X + (float)num505, base.position.Y + (float)num505), width - num505 * 2, height - num505 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
							Dust dust = Main.dust[num506];
							dust.velocity *= 0.5f;
							dust = Main.dust[num506];
							dust.velocity += velocity * 0.5f;
						}
					}
				}
				if (type != 406)
				{
					return;
				}
				int num507 = 175;
				Color newColor2 = new Color(0, 80, 255, 100);
				for (int num508 = 0; num508 < 6; num508++)
				{
					Vector2 vector41 = velocity * num508 / 6f;
					int num509 = 6;
					int num510 = Dust.NewDust(base.position + Vector2.One * 6f, width - num509 * 2, height - num509 * 2, 4, 0f, 0f, num507, newColor2, 1.2f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num510];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num510];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num510];
						dust.alpha += 25;
					}
					Main.dust[num510].noGravity = true;
					dust = Main.dust[num510];
					dust.velocity *= 0.3f;
					dust = Main.dust[num510];
					dust.velocity += velocity * 0.5f;
					Main.dust[num510].position = base.Center;
					Main.dust[num510].position.X -= vector41.X;
					Main.dust[num510].position.Y -= vector41.Y;
					dust = Main.dust[num510];
					dust.velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num511 = 6;
					int num512 = Dust.NewDust(base.position + Vector2.One * 6f, width - num511 * 2, height - num511 * 2, 4, 0f, 0f, num507, newColor2, 1.2f);
					Dust dust = Main.dust[num512];
					dust.velocity *= 0.5f;
					dust = Main.dust[num512];
					dust.velocity += velocity * 0.5f;
				}
			}
			else
			{
				this.ai[0] += 1f;
			}
		}
		else if (aiStyle == 61)
		{
			AI_061_FishingBobber();
		}
		else if (aiStyle == 62)
		{
			AI_062();
		}
		else if (aiStyle == 63)
		{
			if (!Main.player[owner].active)
			{
				active = false;
				return;
			}
			Vector2 center2 = base.position;
			bool flag20 = false;
			float num513 = 2000f;
			for (int num514 = 0; num514 < 200; num514++)
			{
				NPC nPC = Main.npc[num514];
				if (nPC.CanBeChasedBy(this))
				{
					float num515 = Vector2.Distance(nPC.Center, base.Center);
					if (!(num515 >= num513) && Collision.CanHit(base.position, width, height, nPC.position, nPC.width, nPC.height))
					{
						num513 = num515;
						center2 = nPC.Center;
						flag20 = true;
					}
				}
			}
			if (!flag20)
			{
				velocity.X *= 0.95f;
			}
			else
			{
				float num516 = 5f;
				float num517 = 0.08f;
				if (velocity.Y == 0f)
				{
					bool flag21 = false;
					if (base.Center.Y - 50f > center2.Y)
					{
						flag21 = true;
					}
					if (flag21)
					{
						velocity.Y = -6f;
					}
				}
				else
				{
					num516 = 8f;
					num517 = 0.12f;
				}
				velocity.X += (float)Math.Sign(center2.X - base.Center.X) * num517;
				if (velocity.X < 0f - num516)
				{
					velocity.X = 0f - num516;
				}
				if (velocity.X > num516)
				{
					velocity.X = num516;
				}
			}
			float num518 = 0f;
			Collision.StepUp(ref base.position, ref velocity, width, height, ref num518, ref gfxOffY);
			if (velocity.Y != 0f)
			{
				frame = 3;
			}
			else
			{
				if (Math.Abs(velocity.X) > 0.2f)
				{
					frameCounter++;
				}
				if (frameCounter >= 9)
				{
					frameCounter = 0;
				}
				if (frameCounter >= 6)
				{
					frame = 2;
				}
				else if (frameCounter >= 3)
				{
					frame = 1;
				}
				else
				{
					frame = 0;
				}
			}
			if (velocity.X != 0f)
			{
				direction = Math.Sign(velocity.X);
			}
			spriteDirection = -direction;
			velocity.Y += 0.2f;
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		else if (aiStyle == 64)
		{
			int num519 = 10;
			int num520 = 15;
			float num521 = 1f;
			int num522 = 150;
			int num523 = 42;
			if (type == 386)
			{
				num519 = 16;
				num520 = 16;
				num521 = 1.5f;
			}
			if (velocity.X != 0f)
			{
				direction = (spriteDirection = -Math.Sign(velocity.X));
			}
			frameCounter++;
			if (frameCounter > 2)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame >= 6)
			{
				frame = 0;
			}
			if (localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				base.position.X += width / 2;
				base.position.Y += height / 2;
				scale = ((float)(num519 + num520) - this.ai[1]) * num521 / (float)(num520 + num519);
				width = (int)((float)num522 * scale);
				height = (int)((float)num523 * scale);
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				netUpdate = true;
			}
			if (this.ai[1] != -1f)
			{
				scale = ((float)(num519 + num520) - this.ai[1]) * num521 / (float)(num520 + num519);
				width = (int)((float)num522 * scale);
				height = (int)((float)num523 * scale);
			}
			if (!Collision.SolidCollision(base.position, width, height))
			{
				alpha -= 30;
				if (alpha < 60)
				{
					alpha = 60;
				}
				if (type == 386 && alpha < 100)
				{
					alpha = 100;
				}
			}
			else
			{
				alpha += 30;
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			if (this.ai[0] > 0f)
			{
				this.ai[0]--;
			}
			if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
			{
				netUpdate = true;
				Vector2 center3 = base.Center;
				center3.Y -= (float)num523 * scale / 2f;
				float num524 = ((float)(num519 + num520) - this.ai[1] + 1f) * num521 / (float)(num520 + num519);
				center3.Y -= (float)num523 * num524 / 2f;
				center3.Y += 2f;
				NewProjectile(center3.X, center3.Y, velocity.X, velocity.Y, type, damage, knockBack, owner, 10f, this.ai[1] - 1f);
				int num525 = 4;
				if (type == 386)
				{
					num525 = 2;
				}
				if ((int)this.ai[1] % num525 == 0 && this.ai[1] != 0f)
				{
					int num526 = 372;
					if (type == 386)
					{
						num526 = 373;
					}
					int num527 = NPC.NewNPC((int)center3.X, (int)center3.Y, num526);
					Main.npc[num527].velocity = velocity;
					Main.npc[num527].netUpdate = true;
					if (type == 386)
					{
						Main.npc[num527].ai[2] = width;
						Main.npc[num527].ai[3] = -1.5f;
					}
				}
			}
			if (this.ai[0] <= 0f)
			{
				float num528 = (float)Math.PI / 30f;
				float num529 = (float)width / 5f;
				if (type == 386)
				{
					num529 *= 2f;
				}
				float num530 = (float)(Math.Cos(num528 * (0f - this.ai[0])) - 0.5) * num529;
				base.position.X -= num530 * (float)(-direction);
				this.ai[0]--;
				num530 = (float)(Math.Cos(num528 * (0f - this.ai[0])) - 0.5) * num529;
				base.position.X += num530 * (float)(-direction);
			}
		}
		else if (aiStyle == 65)
		{
			if (this.ai[1] > 0f)
			{
				int num531 = (int)this.ai[1] - 1;
				if (num531 < 255)
				{
					localAI[0]++;
					if (localAI[0] > 10f)
					{
						int num532 = 6;
						for (int num533 = 0; num533 < num532; num533++)
						{
							Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f;
							spinningpoint = spinningpoint.RotatedBy((double)(num533 - (num532 / 2 - 1)) * Math.PI / (double)num532) + base.Center;
							Vector2 vector42 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
							int num534 = Dust.NewDust(spinningpoint + vector42, 0, 0, 172, vector42.X * 2f, vector42.Y * 2f, 100, default(Color), 1.4f);
							Main.dust[num534].noGravity = true;
							Main.dust[num534].noLight = true;
							Dust dust = Main.dust[num534];
							dust.velocity /= 4f;
							dust = Main.dust[num534];
							dust.velocity -= velocity;
						}
						alpha -= 5;
						if (alpha < 100)
						{
							alpha = 100;
						}
						rotation += velocity.X * 0.1f;
						frame = (int)(localAI[0] / 3f) % 3;
					}
					Vector2 value5 = Main.player[num531].Center - base.Center;
					float num535 = 4f;
					num535 += localAI[0] / 20f;
					velocity = Vector2.Normalize(value5) * num535;
					if (value5.Length() < 50f)
					{
						Kill();
					}
				}
			}
			else
			{
				float num536 = (float)Math.PI / 15f;
				float num537 = 4f;
				float num538 = (float)(Math.Cos(num536 * this.ai[0]) - 0.5) * num537;
				velocity.Y -= num538;
				this.ai[0]++;
				num538 = (float)(Math.Cos(num536 * this.ai[0]) - 0.5) * num537;
				velocity.Y += num538;
				localAI[0]++;
				if (localAI[0] > 10f)
				{
					alpha -= 5;
					if (alpha < 100)
					{
						alpha = 100;
					}
					rotation += velocity.X * 0.1f;
					frame = (int)(localAI[0] / 3f) % 3;
				}
			}
			if (wet)
			{
				base.position.Y -= 16f;
				Kill();
			}
		}
		else if (aiStyle == 66)
		{
			float num539 = 0f;
			float num540 = 0f;
			float num541 = 0f;
			float num542 = 0f;
			if (type == 387 || type == 388)
			{
				num539 = 2000f;
				num540 = 800f;
				num541 = 1200f;
				num542 = 150f;
				if (Main.player[owner].dead)
				{
					Main.player[owner].twinsMinion = false;
				}
				if (Main.player[owner].twinsMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 533)
			{
				num539 = 2000f;
				num540 = 900f;
				num541 = 1500f;
				num542 = 450f;
				if (Main.player[owner].dead)
				{
					Main.player[owner].DeadlySphereMinion = false;
				}
				if (Main.player[owner].DeadlySphereMinion)
				{
					timeLeft = 2;
				}
			}
			float num543 = 0.05f;
			for (int num544 = 0; num544 < 1000; num544++)
			{
				bool flag22 = (Main.projectile[num544].type == 387 || Main.projectile[num544].type == 388) && (type == 387 || type == 388);
				if (!flag22)
				{
					flag22 = type == 533 && Main.projectile[num544].type == 533;
				}
				if (num544 != whoAmI && Main.projectile[num544].active && Main.projectile[num544].owner == owner && flag22 && Math.Abs(base.position.X - Main.projectile[num544].position.X) + Math.Abs(base.position.Y - Main.projectile[num544].position.Y) < (float)width)
				{
					if (base.position.X < Main.projectile[num544].position.X)
					{
						velocity.X -= num543;
					}
					else
					{
						velocity.X += num543;
					}
					if (base.position.Y < Main.projectile[num544].position.Y)
					{
						velocity.Y -= num543;
					}
					else
					{
						velocity.Y += num543;
					}
				}
			}
			if (type == 533)
			{
				if ((int)this.ai[0] % 3 != 2)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
				}
				else
				{
					Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
				}
			}
			bool flag23 = false;
			if (this.ai[0] == 2f && type == 388)
			{
				this.ai[1]++;
				extraUpdates = 1;
				rotation = velocity.ToRotation() + (float)Math.PI;
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
				if (this.ai[1] > 40f)
				{
					this.ai[1] = 1f;
					this.ai[0] = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
				}
				else
				{
					flag23 = true;
				}
			}
			if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
			{
				int num545 = 2;
				flag23 = true;
				velocity *= 0.9f;
				this.ai[1]++;
				int num546 = (int)this.ai[1] / num545 + (int)(this.ai[0] - 3f) * 8;
				if (num546 < 4)
				{
					frame = 17 + num546;
				}
				else if (num546 < 5)
				{
					frame = 0;
				}
				else if (num546 < 8)
				{
					frame = 1 + num546 - 5;
				}
				else if (num546 < 11)
				{
					frame = 11 - num546;
				}
				else if (num546 < 12)
				{
					frame = 0;
				}
				else if (num546 < 16)
				{
					frame = num546 - 2;
				}
				else if (num546 < 20)
				{
					frame = 29 - num546;
				}
				else if (num546 < 21)
				{
					frame = 0;
				}
				else
				{
					frame = num546 - 4;
				}
				if (this.ai[1] > (float)(num545 * 8))
				{
					this.ai[0] -= 3f;
					this.ai[1] = 0f;
				}
			}
			if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
			{
				this.ai[1]++;
				MaxUpdates = 2;
				if (this.ai[0] == 7f)
				{
					rotation = velocity.ToRotation() + (float)Math.PI;
				}
				else
				{
					rotation += (float)Math.PI / 6f;
				}
				int num547 = 0;
				switch ((int)this.ai[0])
				{
				case 6:
					frame = 5;
					num547 = 40;
					break;
				case 7:
					frame = 13;
					num547 = 30;
					break;
				case 8:
					frame = 17;
					num547 = 30;
					break;
				}
				if (this.ai[1] > (float)num547)
				{
					this.ai[1] = 1f;
					this.ai[0] -= 6f;
					localAI[0]++;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
				}
				else
				{
					flag23 = true;
				}
				if (this.ai[0] == 8f)
				{
					for (int num548 = 0; num548 < 4; num548++)
					{
						int num549 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
						int num550 = Dust.NewDust(base.Center, 0, 0, num549);
						Dust dust9 = Main.dust[num550];
						Vector2 vector43 = Vector2.One.RotatedBy((float)num548 * ((float)Math.PI / 2f)).RotatedBy(rotation);
						dust9.position = base.Center + vector43 * 10f;
						dust9.velocity = vector43 * 1f;
						dust9.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
						dust9.noGravity = true;
					}
				}
			}
			if (flag23)
			{
				return;
			}
			Vector2 center4 = base.position;
			bool flag24 = false;
			if (this.ai[0] != 1f && (type == 387 || type == 388))
			{
				tileCollide = true;
			}
			if (type == 533 && this.ai[0] < 9f)
			{
				tileCollide = true;
			}
			if (tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
			{
				tileCollide = false;
			}
			NPC ownerMinionAttackTargetNPC3 = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this))
			{
				float num551 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
				float num552 = num539 * 3f;
				if (num551 < num552 && !flag24 && Collision.CanHitLine(base.position, width, height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
				{
					num539 = num551;
					center4 = ownerMinionAttackTargetNPC3.Center;
					flag24 = true;
				}
			}
			if (!flag24)
			{
				for (int num553 = 0; num553 < 200; num553++)
				{
					NPC nPC2 = Main.npc[num553];
					if (nPC2.CanBeChasedBy(this))
					{
						float num554 = Vector2.Distance(nPC2.Center, base.Center);
						if (!(num554 >= num539) && Collision.CanHitLine(base.position, width, height, nPC2.position, nPC2.width, nPC2.height))
						{
							num539 = num554;
							center4 = nPC2.Center;
							flag24 = true;
						}
					}
				}
			}
			float num555 = num540;
			if (flag24)
			{
				num555 = num541;
			}
			Player player4 = Main.player[owner];
			if (Vector2.Distance(player4.Center, base.Center) > num555)
			{
				if (type == 387 || type == 388)
				{
					this.ai[0] = 1f;
				}
				if (type == 533 && this.ai[0] < 9f)
				{
					this.ai[0] += 3 * (3 - (int)(this.ai[0] / 3f));
				}
				tileCollide = false;
				netUpdate = true;
			}
			if ((type == 388 || type == 387) && flag24 && this.ai[0] == 0f)
			{
				Vector2 vector44 = center4 - base.Center;
				float num556 = vector44.Length();
				vector44.Normalize();
				if (num556 > 200f)
				{
					float num557 = 6f;
					if (type == 388)
					{
						num557 = 14f;
					}
					vector44 *= num557;
					velocity = (velocity * 40f + vector44) / 41f;
				}
				else
				{
					float num558 = 4f;
					vector44 *= 0f - num558;
					velocity = (velocity * 40f + vector44) / 41f;
				}
			}
			else
			{
				bool flag25 = false;
				if (!flag25)
				{
					flag25 = this.ai[0] == 1f && (type == 387 || type == 388);
				}
				if (!flag25)
				{
					flag25 = this.ai[0] >= 9f && type == 533;
				}
				float num559 = 6f;
				if (type == 533)
				{
					num559 = 12f;
				}
				if (flag25)
				{
					num559 = 15f;
				}
				Vector2 center5 = base.Center;
				Vector2 vector45 = player4.Center - center5 + new Vector2(0f, -60f);
				float num560 = vector45.Length();
				float num561 = num560;
				if (num560 > 200f && num559 < 8f)
				{
					num559 = 8f;
				}
				if (num560 < num542 && flag25 && !Collision.SolidCollision(base.position, width, height))
				{
					if (type == 387 || type == 388)
					{
						this.ai[0] = 0f;
					}
					if (type == 533)
					{
						this.ai[0] -= 9f;
					}
					netUpdate = true;
				}
				if (num560 > 2000f)
				{
					base.position.X = Main.player[owner].Center.X - (float)(width / 2);
					base.position.Y = Main.player[owner].Center.Y - (float)(height / 2);
					netUpdate = true;
				}
				if (num560 > 70f)
				{
					Vector2 vector46 = vector45;
					vector45.Normalize();
					vector45 *= num559;
					velocity = (velocity * 40f + vector45) / 41f;
				}
				else if (velocity.X == 0f && velocity.Y == 0f)
				{
					velocity.X = -0.15f;
					velocity.Y = -0.05f;
				}
			}
			if (type == 388)
			{
				rotation = velocity.ToRotation() + (float)Math.PI;
			}
			if (type == 387)
			{
				if (flag24)
				{
					rotation = (center4 - base.Center).ToRotation() + (float)Math.PI;
				}
				else
				{
					rotation = velocity.ToRotation() + (float)Math.PI;
				}
			}
			if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
			{
				rotation += velocity.X * 0.04f;
			}
			if (type == 388 || type == 387)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
			}
			else if (type == 533)
			{
				if (this.ai[0] < 3f || this.ai[0] >= 9f)
				{
					frameCounter++;
					if (frameCounter >= 24)
					{
						frameCounter = 0;
					}
					int num562 = frameCounter / 4;
					frame = 4 + num562;
					switch ((int)this.ai[0])
					{
					case 0:
					case 9:
						frame = 4 + num562;
						break;
					case 1:
					case 10:
						num562 = frameCounter / 8;
						frame = 14 + num562;
						break;
					case 2:
					case 11:
						num562 = frameCounter / 3;
						if (num562 >= 4)
						{
							num562 -= 4;
						}
						frame = 17 + num562;
						break;
					}
				}
				if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
				{
					for (int num563 = 0; num563 < 4; num563++)
					{
						if (Main.rand.Next(2) != 0)
						{
							int num564 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
							int num565 = Dust.NewDust(base.Center, 0, 0, num564);
							Dust dust10 = Main.dust[num565];
							Vector2 vector47 = Vector2.One.RotatedBy((float)num563 * ((float)Math.PI / 2f)).RotatedBy(rotation);
							dust10.position = base.Center + vector47 * 10f;
							dust10.velocity = vector47 * 1f;
							dust10.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
							dust10.noGravity = true;
							dust10.customData = this;
							dust10.noLight = true;
						}
					}
				}
			}
			if (this.ai[1] > 0f && (type == 387 || type == 388))
			{
				this.ai[1] += Main.rand.Next(1, 4);
			}
			if (this.ai[1] > 90f && type == 387)
			{
				this.ai[1] = 0f;
				netUpdate = true;
			}
			if (this.ai[1] > 40f && type == 388)
			{
				this.ai[1] = 0f;
				netUpdate = true;
			}
			if (this.ai[1] > 0f && type == 533)
			{
				this.ai[1]++;
				int num566 = 10;
				if (this.ai[1] > (float)num566)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (this.ai[0] == 0f && (type == 387 || type == 388))
			{
				if (type == 387)
				{
					float num567 = 8f;
					int num568 = 389;
					if (flag24 && this.ai[1] == 0f)
					{
						this.ai[1]++;
						if (Main.myPlayer == owner && Collision.CanHitLine(base.position, width, height, center4, 0, 0))
						{
							Vector2 vector48 = center4 - base.Center;
							vector48.Normalize();
							vector48 *= num567;
							int num569 = NewProjectile(base.Center.X, base.Center.Y, vector48.X, vector48.Y, num568, (int)((float)damage * 0.8f), 0f, Main.myPlayer);
							Main.projectile[num569].timeLeft = 300;
							netUpdate = true;
						}
					}
				}
				if (type == 388 && this.ai[1] == 0f && flag24 && num539 < 500f)
				{
					this.ai[1]++;
					if (Main.myPlayer == owner)
					{
						this.ai[0] = 2f;
						Vector2 vector49 = center4 - base.Center;
						vector49.Normalize();
						velocity = vector49 * 8f;
						netUpdate = true;
					}
				}
			}
			else
			{
				if (type != 533 || !(this.ai[0] < 3f))
				{
					return;
				}
				int num570 = 0;
				switch ((int)this.ai[0])
				{
				case 0:
				case 3:
				case 6:
					num570 = 400;
					break;
				case 1:
				case 4:
				case 7:
					num570 = 400;
					break;
				case 2:
				case 5:
				case 8:
					num570 = 600;
					break;
				}
				if (!(this.ai[1] == 0f && flag24) || !(num539 < (float)num570))
				{
					return;
				}
				this.ai[1]++;
				if (Main.myPlayer != owner)
				{
					return;
				}
				if (localAI[0] >= 3f)
				{
					this.ai[0] += 4f;
					if (this.ai[0] == 6f)
					{
						this.ai[0] = 3f;
					}
					localAI[0] = 0f;
				}
				else
				{
					this.ai[0] += 6f;
					Vector2 vector50 = center4 - base.Center;
					vector50.Normalize();
					float num571 = ((this.ai[0] == 8f) ? 12f : 10f);
					velocity = vector50 * num571;
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 67)
		{
			AI_067_FreakingPirates();
		}
		else if (aiStyle == 68)
		{
			rotation += 0.25f * (float)direction;
			bool flag26 = type == 399;
			bool flag27 = type == 669;
			this.ai[0] += 1f;
			if (this.ai[0] >= 3f)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (this.ai[0] >= 15f)
			{
				velocity.Y += 0.2f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				velocity.X *= 0.99f;
			}
			if (alpha == 0)
			{
				if (flag26)
				{
					Vector2 vector51 = new Vector2(4f, -8f);
					float num572 = rotation;
					if (direction == -1)
					{
						vector51.X = -4f;
					}
					vector51 = vector51.RotatedBy(num572);
					for (int num573 = 0; num573 < 1; num573++)
					{
						int num574 = Dust.NewDust(base.Center + vector51 - Vector2.One * 5f, 4, 4, 6);
						Main.dust[num574].scale = 1.5f;
						Main.dust[num574].noGravity = true;
						Main.dust[num574].velocity = Main.dust[num574].velocity * 0.25f + Vector2.Normalize(vector51) * 1f;
						Main.dust[num574].velocity = Main.dust[num574].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
					}
				}
				if (flag27)
				{
					for (int num575 = 0; num575 < 2; num575++)
					{
						Vector2 spinningpoint2 = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
						float num576 = rotation;
						spinningpoint2 = spinningpoint2.RotatedBy(num576);
						int num577 = Dust.NewDust(base.Center + spinningpoint2 - Vector2.One * 5f, 4, 4, 4);
						Main.dust[num577].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
						Main.dust[num577].velocity = Main.dust[num577].velocity * 0.25f + Vector2.Normalize(spinningpoint2) * 1f;
						Main.dust[num577].velocity = Main.dust[num577].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
						Main.dust[num577].color = Utils.SelectRandom<Color>(Main.rand, new Color(255, 255, 255, 110), new Color(245, 200, 30, 110));
					}
				}
			}
			spriteDirection = direction;
			if (timeLeft <= 3)
			{
				tileCollide = false;
				alpha = 255;
				base.position.X += width / 2;
				base.position.Y += height / 2;
				width = 80;
				height = 80;
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				knockBack = 8f;
			}
			if (wet && timeLeft > 3)
			{
				timeLeft = 3;
			}
		}
		else if (aiStyle == 69)
		{
			Vector2 vector52 = Main.player[owner].Center - base.Center;
			rotation = vector52.ToRotation() - 1.57f;
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			Main.player[owner].SetDummyItemTime(10);
			_ = vector52.X;
			_ = 0f;
			if (vector52.X < 0f)
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
			Main.player[owner].itemRotation = (vector52 * -1f * direction).ToRotation();
			spriteDirection = ((!(vector52.X > 0f)) ? 1 : (-1));
			if (this.ai[0] == 0f && vector52.Length() > 400f)
			{
				this.ai[0] = 1f;
			}
			if (this.ai[0] == 1f || this.ai[0] == 2f)
			{
				float num578 = vector52.Length();
				if (num578 > 1500f)
				{
					Kill();
					return;
				}
				if (num578 > 600f)
				{
					this.ai[0] = 2f;
				}
				tileCollide = false;
				float num579 = 20f;
				if (this.ai[0] == 2f)
				{
					num579 = 40f;
				}
				velocity = Vector2.Normalize(vector52) * num579;
				if (vector52.Length() < num579)
				{
					Kill();
					return;
				}
			}
			this.ai[1]++;
			if (this.ai[1] > 5f)
			{
				alpha = 0;
			}
			if ((int)this.ai[1] % 4 == 0 && owner == Main.myPlayer)
			{
				Vector2 spinningpoint3 = vector52 * -1f;
				spinningpoint3.Normalize();
				spinningpoint3 *= (float)Main.rand.Next(45, 65) * 0.1f;
				spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
				NewProjectile(base.Center.X, base.Center.Y, spinningpoint3.X, spinningpoint3.Y, 405, damage, knockBack, owner, -10f);
			}
		}
		else if (aiStyle == 70)
		{
			if (this.ai[0] == 0f)
			{
				float num580 = 500f;
				int num581 = -1;
				for (int num582 = 0; num582 < 200; num582++)
				{
					NPC nPC3 = Main.npc[num582];
					float num583 = (nPC3.Center - base.Center).Length();
					if (!(num583 >= num580) && nPC3.CanBeChasedBy(this) && Collision.CanHit(base.position, width, height, nPC3.position, nPC3.width, nPC3.height))
					{
						num581 = num582;
						num580 = num583;
					}
				}
				this.ai[0] = num581 + 1;
				if (this.ai[0] == 0f)
				{
					this.ai[0] = -15f;
				}
				if (this.ai[0] > 0f)
				{
					float num584 = (float)Main.rand.Next(35, 75) / 30f;
					velocity = (velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * num584) / 21f;
					netUpdate = true;
				}
			}
			else if (this.ai[0] > 0f)
			{
				Vector2 vector53 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
				velocity = (velocity * 40f + vector53 * 12f) / 41f;
			}
			else
			{
				this.ai[0]++;
				alpha -= 25;
				if (alpha < 50)
				{
					alpha = 50;
				}
				velocity *= 0.95f;
			}
			if (this.ai[1] == 0f)
			{
				this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
				netUpdate = true;
			}
			scale = this.ai[1];
		}
		else if (aiStyle == 71)
		{
			localAI[1]++;
			if (localAI[1] > 10f && Main.rand.Next(3) == 0)
			{
				int num585 = 6;
				for (int num586 = 0; num586 < num585; num586++)
				{
					Vector2 spinningpoint4 = Vector2.Normalize(velocity) * new Vector2(width, height) / 2f;
					spinningpoint4 = spinningpoint4.RotatedBy((double)(num586 - (num585 / 2 - 1)) * Math.PI / (double)num585) + base.Center;
					Vector2 vector54 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
					int num587 = Dust.NewDust(spinningpoint4 + vector54, 0, 0, 217, vector54.X * 2f, vector54.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num587].noGravity = true;
					Main.dust[num587].noLight = true;
					Dust dust = Main.dust[num587];
					dust.velocity /= 4f;
					dust = Main.dust[num587];
					dust.velocity -= velocity;
				}
				alpha -= 5;
				if (alpha < 50)
				{
					alpha = 50;
				}
				rotation += velocity.X * 0.1f;
				frame = (int)(localAI[1] / 3f) % 3;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
			}
			int num588 = -1;
			Vector2 vector55 = base.Center;
			float num589 = 500f;
			if (localAI[0] > 0f)
			{
				localAI[0]--;
			}
			if (this.ai[0] == 0f && localAI[0] == 0f)
			{
				for (int num590 = 0; num590 < 200; num590++)
				{
					NPC nPC4 = Main.npc[num590];
					if (nPC4.CanBeChasedBy(this) && (this.ai[0] == 0f || this.ai[0] == (float)(num590 + 1)))
					{
						Vector2 center6 = nPC4.Center;
						float num591 = Vector2.Distance(center6, vector55);
						if (num591 < num589 && Collision.CanHit(base.position, width, height, nPC4.position, nPC4.width, nPC4.height))
						{
							num589 = num591;
							vector55 = center6;
							num588 = num590;
						}
					}
				}
				if (num588 >= 0)
				{
					this.ai[0] = num588 + 1;
					netUpdate = true;
				}
				num588 = -1;
			}
			if (localAI[0] == 0f && this.ai[0] == 0f)
			{
				localAI[0] = 30f;
			}
			bool flag28 = false;
			if (this.ai[0] != 0f)
			{
				int num592 = (int)(this.ai[0] - 1f);
				if (Main.npc[num592].active && !Main.npc[num592].dontTakeDamage && Main.npc[num592].immune[owner] == 0)
				{
					float num593 = Main.npc[num592].position.X + (float)(Main.npc[num592].width / 2);
					float num594 = Main.npc[num592].position.Y + (float)(Main.npc[num592].height / 2);
					float num595 = Math.Abs(base.position.X + (float)(width / 2) - num593) + Math.Abs(base.position.Y + (float)(height / 2) - num594);
					if (num595 < 1000f)
					{
						flag28 = true;
						vector55 = Main.npc[num592].Center;
					}
				}
				else
				{
					this.ai[0] = 0f;
					flag28 = false;
					netUpdate = true;
				}
			}
			if (flag28)
			{
				Vector2 v2 = vector55 - base.Center;
				float num596 = velocity.ToRotation();
				float num597 = v2.ToRotation();
				double num598 = num597 - num596;
				if (num598 > Math.PI)
				{
					num598 -= Math.PI * 2.0;
				}
				if (num598 < -Math.PI)
				{
					num598 += Math.PI * 2.0;
				}
				velocity = velocity.RotatedBy(num598 * 0.10000000149011612);
			}
			float num599 = velocity.Length();
			velocity.Normalize();
			velocity *= num599 + 0.0025f;
		}
		else if (aiStyle == 72)
		{
			localAI[0]++;
			if (localAI[0] > 5f)
			{
				alpha -= 25;
				if (alpha < 50)
				{
					alpha = 50;
				}
			}
			velocity *= 0.96f;
			if (this.ai[1] == 0f)
			{
				this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
				netUpdate = true;
			}
			scale = this.ai[1];
			base.position = base.Center;
			int num600 = 14;
			int num601 = 14;
			width = (int)((float)num600 * this.ai[1]);
			height = (int)((float)num601 * this.ai[1]);
			base.position -= new Vector2(width / 2, height / 2);
		}
		else if (aiStyle == 73)
		{
			int num602 = (int)this.ai[0];
			int num603 = (int)this.ai[1];
			Tile tile = Main.tile[num602, num603];
			if (tile == null || !tile.active() || tile.type != 338)
			{
				Kill();
				return;
			}
			float num604 = 2f;
			float num605 = (float)timeLeft / 60f;
			if (num605 < 1f)
			{
				num604 *= num605;
			}
			if (type == 419)
			{
				for (int num606 = 0; num606 < 2; num606++)
				{
					Vector2 spinningpoint5 = new Vector2(0f, 0f - num604);
					spinningpoint5 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					int num607 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
					Dust dust11 = Main.dust[num607];
					dust11.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust = dust11;
					dust.velocity *= 0.5f;
					if (dust11.velocity.Y > 0f)
					{
						dust11.velocity.Y *= -1f;
					}
					dust = dust11;
					dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust = dust11;
					dust.velocity += spinningpoint5;
					dust11.scale = 0.6f;
					dust11.fadeIn = dust11.scale + 0.2f;
					dust11.velocity.Y *= 2f;
				}
			}
			if (type == 420)
			{
				for (int num608 = 0; num608 < 2; num608++)
				{
					Vector2 spinningpoint6 = new Vector2(0f, 0f - num604);
					spinningpoint6 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					int num609 = 219;
					if (Main.rand.Next(5) == 0)
					{
						num609 = 222;
					}
					int num610 = Dust.NewDust(base.position, width, height, num609, 0f, 0f, 100);
					Dust dust12 = Main.dust[num610];
					dust12.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust = dust12;
					dust.velocity *= 0.5f;
					if (dust12.velocity.Y > 0f)
					{
						dust12.velocity.Y *= -1f;
					}
					dust = dust12;
					dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust = dust12;
					dust.velocity += spinningpoint6;
					dust12.velocity.X *= 0.5f;
					dust12.scale = 0.6f;
					dust12.fadeIn = dust12.scale + 0.2f;
					dust12.velocity.Y *= 2f;
				}
			}
			if (type == 421)
			{
				for (int num611 = 0; num611 < 2; num611++)
				{
					Vector2 spinningpoint7 = new Vector2(0f, 0f - num604);
					spinningpoint7 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
					int num612 = Dust.NewDust(base.position, width, height, 221, 0f, 0f, 100);
					Dust dust13 = Main.dust[num612];
					dust13.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust = dust13;
					dust.velocity *= 0.1f;
					if (dust13.velocity.Y > 0f)
					{
						dust13.velocity.Y *= -1f;
					}
					dust = dust13;
					dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust = dust13;
					dust.velocity += spinningpoint7;
					dust13.scale = 0.6f;
					dust13.fadeIn = dust13.scale + 0.2f;
					dust13.velocity.Y *= 2.5f;
				}
				if (timeLeft % 10 == 0)
				{
					float num613 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					for (int num614 = 0; num614 < 9; num614++)
					{
						Vector2 vector56 = new Vector2((float)(num614 - 4) / 5f, (0f - num604) * num613);
						int num615 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
						Dust dust14 = Main.dust[num615];
						dust14.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust = dust14;
						dust.velocity *= 0f;
						if (dust14.velocity.Y > 0f)
						{
							dust14.velocity.Y *= -1f;
						}
						dust = dust14;
						dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust = dust14;
						dust.velocity += vector56;
						dust14.scale = 0.6f;
						dust14.fadeIn = dust14.scale + 0.2f;
						dust14.velocity.Y *= 2f;
					}
				}
			}
			if (type != 422)
			{
				return;
			}
			for (int num616 = 0; num616 < 2; num616++)
			{
				Vector2 spinningpoint8 = new Vector2(0f, 0f - num604);
				spinningpoint8 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
				spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
				int num617 = Dust.NewDust(base.position, width, height, 219 + Main.rand.Next(5), 0f, 0f, 100);
				Dust dust15 = Main.dust[num617];
				dust15.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
				Dust dust = dust15;
				dust.velocity *= 0.5f;
				if (dust15.velocity.Y > 0f)
				{
					dust15.velocity.Y *= -1f;
				}
				dust = dust15;
				dust.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
				dust = dust15;
				dust.velocity += spinningpoint8;
				dust15.scale = 0.6f;
				dust15.fadeIn = dust15.scale + 0.2f;
				dust15.velocity.Y *= 2f;
			}
		}
		else if (aiStyle == 74)
		{
			if (extraUpdates == 1)
			{
				localAI[0] *= localAI[1];
				localAI[1] -= 0.001f;
				if ((double)localAI[0] < 0.01)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 75)
		{
			AI_075();
		}
		else if (aiStyle == 76)
		{
			Player player5 = Main.player[owner];
			player5.heldProj = whoAmI;
			if (type == 441)
			{
				if (player5.mount.Type != 9)
				{
					Kill();
					return;
				}
			}
			else if (type == 453 && player5.mount.Type != 8)
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner)
			{
				base.position.X = Main.screenPosition.X + (float)Main.mouseX;
				base.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
				if (this.ai[0] != base.position.X - player5.position.X || this.ai[1] != base.position.Y - player5.position.Y)
				{
					netUpdate = true;
				}
				this.ai[0] = base.position.X - player5.position.X;
				this.ai[1] = base.position.Y - player5.position.Y;
				player5.mount.AimAbility(player5, base.position);
				if (!player5.channel)
				{
					player5.mount.UseAbility(player5, base.position, toggleOn: false);
					Kill();
				}
				return;
			}
			base.position.X = player5.position.X + this.ai[0];
			base.position.Y = player5.position.Y + this.ai[1];
			if (type == 441)
			{
				if (!player5.mount.AbilityCharging)
				{
					player5.mount.StartAbilityCharge(player5);
				}
			}
			else if (type == 453 && !player5.mount.AbilityActive)
			{
				player5.mount.UseAbility(player5, base.position, toggleOn: false);
			}
			player5.mount.AimAbility(player5, base.position);
		}
		else if (aiStyle == 77)
		{
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
			SlotId invalid;
			if (activeSound != null)
			{
				if (activeSound.Volume == 0f)
				{
					activeSound.Stop();
					float[] array3 = localAI;
					invalid = SlotId.Invalid;
					array3[0] = ((SlotId)(ref invalid)).ToFloat();
				}
				activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
			}
			else
			{
				float[] array4 = localAI;
				invalid = SlotId.Invalid;
				array4[0] = ((SlotId)(ref invalid)).ToFloat();
			}
			if (this.ai[1] == 1f)
			{
				friendly = false;
				if (alpha < 255)
				{
					alpha += 51;
				}
				if (alpha >= 255)
				{
					alpha = 255;
					Kill();
					return;
				}
			}
			else
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			float num618 = 30f;
			float num619 = num618 * 4f;
			this.ai[0]++;
			if (this.ai[0] > num619)
			{
				this.ai[0] = 0f;
			}
			Vector2 vector57 = -Vector2.UnitY.RotatedBy((float)Math.PI * 2f * this.ai[0] / num618);
			float val = 0.75f + vector57.Y * 0.25f;
			float val2 = 0.8f - vector57.Y * 0.2f;
			float num620 = Math.Max(val, val2);
			base.position += new Vector2(width, height) / 2f;
			width = (height = (int)(80f * num620));
			base.position -= new Vector2(width, height) / 2f;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frameCounter = 0;
				frame++;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			for (int num621 = 0; num621 < 1; num621++)
			{
				float num622 = 55f * num620;
				float num623 = 11f * num620;
				float num624 = 0.5f;
				int num625 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
				Main.dust[num625].noGravity = true;
				Dust dust = Main.dust[num625];
				dust.velocity *= 2f;
				Main.dust[num625].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num623 + num624 * (float)Main.rand.NextDouble() * num622) + base.Center;
				Main.dust[num625].velocity = Main.dust[num625].velocity / 2f + Vector2.Normalize(Main.dust[num625].position - base.Center);
				if (Main.rand.Next(2) == 0)
				{
					num625 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
					Main.dust[num625].noGravity = true;
					dust = Main.dust[num625];
					dust.velocity *= 1.2f;
					Main.dust[num625].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num623 + num624 * (float)Main.rand.NextDouble() * num622) + base.Center;
					Main.dust[num625].velocity = Main.dust[num625].velocity / 2f + Vector2.Normalize(Main.dust[num625].position - base.Center);
				}
				if (Main.rand.Next(4) == 0)
				{
					num625 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
					Main.dust[num625].noGravity = true;
					dust = Main.dust[num625];
					dust.velocity *= 1.2f;
					Main.dust[num625].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num623 + num624 * (float)Main.rand.NextDouble() * num622) + base.Center;
					Main.dust[num625].velocity = Main.dust[num625].velocity / 2f + Vector2.Normalize(Main.dust[num625].position - base.Center);
				}
			}
		}
		else if (aiStyle == 78)
		{
			if (alpha > 0)
			{
				alpha -= 30;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			Vector2 v3 = this.ai[0].ToRotationVector2();
			float num626 = velocity.ToRotation();
			float num627 = v3.ToRotation();
			double num628 = num627 - num626;
			if (num628 > Math.PI)
			{
				num628 -= Math.PI * 2.0;
			}
			if (num628 < -Math.PI)
			{
				num628 += Math.PI * 2.0;
			}
			velocity = velocity.RotatedBy(num628 * 0.05000000074505806);
			velocity *= 0.96f;
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			if (Main.myPlayer == owner && timeLeft > 60)
			{
				timeLeft = 60;
			}
		}
		else if (aiStyle == 79)
		{
			bool flag29 = true;
			int num629 = (int)this.ai[0] - 1;
			if (type == 447 && (this.ai[0] == 0f || ((!Main.npc[num629].active || Main.npc[num629].type != 392) && (!Main.npc[num629].active || Main.npc[num629].type != 395 || !(Main.npc[num629].ai[3] % 120f >= 60f) || Main.npc[num629].ai[0] != 2f))))
			{
				flag29 = false;
			}
			if (!flag29)
			{
				Kill();
				return;
			}
			NPC nPC5 = Main.npc[num629];
			float num630 = nPC5.Center.Y + 46f;
			float num631 = num630;
			if (type == 447)
			{
				int target = nPC5.target;
				if (nPC5.type == 392)
				{
					target = Main.npc[(int)nPC5.ai[0]].target;
				}
				Player player6 = Main.player[target];
				if (player6 != null && player6.active && !player6.dead)
				{
					num631 = player6.Bottom.Y;
				}
			}
			num631 /= 16f;
			int num632 = (int)nPC5.Center.X / 16;
			int num633 = (int)num630 / 16;
			int num634 = 0;
			if ((float)num633 >= num631 && Main.tile[num632, num633].nactive() && Main.tileSolid[Main.tile[num632, num633].type] && !Main.tileSolidTop[Main.tile[num632, num633].type])
			{
				num634 = 1;
			}
			else
			{
				for (; num634 < 150 && num633 + num634 < Main.maxTilesY; num634++)
				{
					int num635 = num633 + num634;
					if ((float)num635 >= num631 && Main.tile[num632, num635].nactive() && Main.tileSolid[Main.tile[num632, num635].type] && !Main.tileSolidTop[Main.tile[num632, num635].type])
					{
						num634--;
						break;
					}
				}
			}
			base.position.X = nPC5.Center.X - (float)(width / 2);
			base.position.Y = num630;
			height = (num634 + 1) * 16;
			int num636 = (int)base.position.Y + height;
			if (Main.tile[num632, num636 / 16].nactive() && Main.tileSolid[Main.tile[num632, num636 / 16].type] && !Main.tileSolidTop[Main.tile[num632, num636 / 16].type])
			{
				int num637 = num636 % 16;
				height -= num637 - 2;
			}
			if (type == 447)
			{
				for (int num638 = 0; num638 < 2; num638++)
				{
					int num639 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height - 16f), width, 16, 228);
					Main.dust[num639].noGravity = true;
					Dust dust = Main.dust[num639];
					dust.velocity *= 0.5f;
					Main.dust[num639].velocity.X -= (float)num638 - nPC5.velocity.X * 2f / 3f;
					Main.dust[num639].scale = 2.8f;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num640 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - (float)(width / 2 * Math.Sign(nPC5.velocity.X)) - 4f, base.position.Y + (float)height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num640];
					dust.velocity *= 0.5f;
					Main.dust[num640].velocity.X -= nPC5.velocity.X / 2f;
					Main.dust[num640].velocity.Y = 0f - Math.Abs(Main.dust[num640].velocity.Y);
				}
			}
			if (type == 447 && ++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 80)
		{
			if (this.ai[0] == 0f && this.ai[1] > 0f)
			{
				this.ai[1]--;
			}
			else if (this.ai[0] == 0f && this.ai[1] == 0f)
			{
				this.ai[0] = 1f;
				this.ai[1] = (int)Player.FindClosest(base.position, width, height);
				netUpdate = true;
				float num641 = velocity.Length();
				velocity = Vector2.Normalize(velocity) * (num641 + 4f);
				for (int num642 = 0; num642 < 8; num642++)
				{
					Vector2 spinningpoint9 = Vector2.UnitX * -8f;
					spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num642 * (float)Math.PI / 4f) * new Vector2(2f, 8f);
					spinningpoint9 = spinningpoint9.RotatedBy(rotation - (float)Math.PI / 2f);
					int num643 = Dust.NewDust(base.Center, 0, 0, 228);
					Main.dust[num643].scale = 1.5f;
					Main.dust[num643].noGravity = true;
					Main.dust[num643].position = base.Center + spinningpoint9;
					Main.dust[num643].velocity = velocity * 0f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				tileCollide = true;
				localAI[1]++;
				float num644 = 180f;
				float num645 = 0f;
				float num646 = 30f;
				if (localAI[1] == num644)
				{
					Kill();
					return;
				}
				if (localAI[1] >= num645 && localAI[1] < num645 + num646)
				{
					Vector2 v4 = Main.player[(int)this.ai[1]].Center - base.Center;
					float num647 = velocity.ToRotation();
					float num648 = v4.ToRotation();
					double num649 = num648 - num647;
					if (num649 > Math.PI)
					{
						num649 -= Math.PI * 2.0;
					}
					if (num649 < -Math.PI)
					{
						num649 += Math.PI * 2.0;
					}
					velocity = velocity.RotatedBy(num649 * 0.20000000298023224);
				}
				if (localAI[1] % 5f == 0f)
				{
					for (int num650 = 0; num650 < 4; num650++)
					{
						Vector2 spinningpoint10 = Vector2.UnitX * -8f;
						spinningpoint10 += -Vector2.UnitY.RotatedBy((float)num650 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
						spinningpoint10 = spinningpoint10.RotatedBy(rotation - (float)Math.PI / 2f);
						int num651 = Dust.NewDust(base.Center, 0, 0, 228);
						Main.dust[num651].scale = 1.5f;
						Main.dust[num651].noGravity = true;
						Main.dust[num651].position = base.Center + spinningpoint10;
						Main.dust[num651].velocity = velocity * 0f;
					}
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= 3)
				{
					frame = 0;
				}
			}
			for (int num652 = 0; (float)num652 < 1f + this.ai[0]; num652++)
			{
				Vector2 vector58 = Vector2.UnitY.RotatedBy(rotation) * 8f * (num652 + 1);
				int num653 = Dust.NewDust(base.Center, 0, 0, 228);
				Main.dust[num653].position = base.Center + vector58;
				Main.dust[num653].scale = 1f;
				Main.dust[num653].noGravity = true;
			}
			for (int num654 = 0; num654 < 255; num654++)
			{
				Player player7 = Main.player[num654];
				if (player7.active && !player7.dead && Vector2.Distance(player7.Center, base.Center) <= 42f)
				{
					Kill();
					break;
				}
			}
		}
		else if (aiStyle == 81)
		{
			int num655 = penetrate;
			if (this.ai[0] == 0f)
			{
				tileCollide = true;
				localAI[0]++;
				if (localAI[0] > 7f)
				{
					int num656 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center7 = base.Center;
					Vector2 spinningpoint11 = new Vector2(-16f, 16f);
					float num657 = 1f;
					spinningpoint11 += new Vector2(-16f, 16f);
					spinningpoint11 = spinningpoint11.RotatedBy(rotation);
					int num658 = 4;
					int num659 = Dust.NewDust(center7 + spinningpoint11 + Vector2.One * -num658, num658 * 2, num658 * 2, num656, 0f, 0f, 100, default(Color), num657);
					Dust dust = Main.dust[num659];
					dust.velocity *= 0.1f;
					if (Main.rand.Next(6) != 0)
					{
						Main.dust[num659].noGravity = true;
					}
				}
				float num660 = 0.01f;
				int num661 = 5;
				int num662 = num661 * 15;
				int num663 = 0;
				if (localAI[0] > 7f)
				{
					if (localAI[1] == 0f)
					{
						scale -= num660;
						alpha += num661;
						if (alpha > num662)
						{
							alpha = num662;
							localAI[1] = 1f;
						}
					}
					else if (localAI[1] == 1f)
					{
						scale += num660;
						alpha -= num661;
						if (alpha <= num663)
						{
							alpha = num663;
							localAI[1] = 0f;
						}
					}
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
			}
			else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num655))
			{
				tileCollide = false;
				alpha += 15;
				velocity *= 0.98f;
				localAI[0] = 0f;
				if (alpha >= 255)
				{
					if (this.ai[0] == 1f)
					{
						Kill();
						return;
					}
					int num664 = -1;
					Vector2 vector59 = base.Center;
					float num665 = 250f;
					for (int num666 = 0; num666 < 200; num666++)
					{
						NPC nPC6 = Main.npc[num666];
						if (nPC6.CanBeChasedBy(this))
						{
							Vector2 center8 = nPC6.Center;
							float num667 = Vector2.Distance(center8, base.Center);
							if (num667 < num665)
							{
								num665 = num667;
								vector59 = center8;
								num664 = num666;
							}
						}
					}
					if (num664 >= 0)
					{
						netUpdate = true;
						this.ai[0] += num655;
						base.position = vector59 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * 100f - new Vector2(width, height) / 2f;
						velocity = Vector2.Normalize(vector59 - base.Center) * 15f;
						rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					}
					else
					{
						Kill();
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					int num668 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center9 = base.Center;
					Vector2 vector60 = new Vector2(-16f, 16f);
					vector60 = vector60;
					float num669 = 0.6f;
					vector60 += new Vector2(-16f, 16f);
					vector60 = vector60.RotatedBy(rotation);
					int num670 = 4;
					int num671 = Dust.NewDust(center9 + vector60 + Vector2.One * -num670, num670 * 2, num670 * 2, num668, 0f, 0f, 100, default(Color), num669);
					Dust dust = Main.dust[num671];
					dust.velocity *= 0.1f;
					Main.dust[num671].noGravity = true;
				}
			}
			else if (this.ai[0] >= (float)(1 + num655) && this.ai[0] < (float)(1 + num655 * 2))
			{
				scale = 0.9f;
				tileCollide = false;
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
				this.ai[1]++;
				if (this.ai[1] >= 15f)
				{
					alpha += 51;
					velocity *= 0.8f;
					if (alpha >= 255)
					{
						Kill();
					}
				}
				else
				{
					alpha -= 125;
					if (alpha < 0)
					{
						alpha = 0;
					}
					velocity *= 0.98f;
				}
				localAI[0]++;
				int num672 = Utils.SelectRandom<int>(Main.rand, 226, 229);
				Vector2 center10 = base.Center;
				Vector2 spinningpoint12 = new Vector2(-16f, 16f);
				float num673 = 0.6f;
				spinningpoint12 += new Vector2(-16f, 16f);
				spinningpoint12 = spinningpoint12.RotatedBy(rotation);
				int num674 = 4;
				int num675 = Dust.NewDust(center10 + spinningpoint12 + Vector2.One * -num674, num674 * 2, num674 * 2, num672, 0f, 0f, 100, default(Color), num673);
				Dust dust = Main.dust[num675];
				dust.velocity *= 0.1f;
				Main.dust[num675].noGravity = true;
			}
			float num676 = (float)alpha / 255f;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num676, 0.4f * num676, 1f * num676);
		}
		else if (aiStyle == 82)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				localAI[0]++;
				if (localAI[0] >= 45f)
				{
					localAI[0] = 0f;
					this.ai[0] = 1f;
					this.ai[1] = 0f - this.ai[1];
					netUpdate = true;
				}
				velocity.X = velocity.RotatedBy(this.ai[1]).X;
				velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
				velocity.Y -= 0.08f;
				if (velocity.Y > 0f)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -7f)
				{
					velocity.Y = -7f;
				}
			}
			else if (this.ai[0] == 1f)
			{
				localAI[0]++;
				if (localAI[0] >= 90f)
				{
					localAI[0] = 0f;
					this.ai[0] = 2f;
					this.ai[1] = (int)Player.FindClosest(base.position, width, height);
					netUpdate = true;
				}
				velocity.X = velocity.RotatedBy(this.ai[1]).X;
				velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
				velocity.Y -= 0.08f;
				if (velocity.Y > 0f)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < -7f)
				{
					velocity.Y = -7f;
				}
			}
			else if (this.ai[0] == 2f)
			{
				Vector2 value6 = Main.player[(int)this.ai[1]].Center - base.Center;
				if (value6.Length() < 30f)
				{
					Kill();
					return;
				}
				value6.Normalize();
				value6 *= 14f;
				value6 = Vector2.Lerp(velocity, value6, 0.6f);
				if (value6.Y < 6f)
				{
					value6.Y = 6f;
				}
				float num677 = 0.4f;
				if (velocity.X < value6.X)
				{
					velocity.X += num677;
					if (velocity.X < 0f && value6.X > 0f)
					{
						velocity.X += num677;
					}
				}
				else if (velocity.X > value6.X)
				{
					velocity.X -= num677;
					if (velocity.X > 0f && value6.X < 0f)
					{
						velocity.X -= num677;
					}
				}
				if (velocity.Y < value6.Y)
				{
					velocity.Y += num677;
					if (velocity.Y < 0f && value6.Y > 0f)
					{
						velocity.Y += num677;
					}
				}
				else if (velocity.Y > value6.Y)
				{
					velocity.Y -= num677;
					if (velocity.Y > 0f && value6.Y < 0f)
					{
						velocity.Y -= num677;
					}
				}
			}
			if (alpha < 40)
			{
				int num678 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
				Main.dust[num678].noGravity = true;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}
		else if (aiStyle == 83)
		{
			if (alpha > 200)
			{
				alpha = 200;
			}
			alpha -= 5;
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num679 = (float)alpha / 255f;
			scale = 1f - num679;
			if (this.ai[0] >= 0f)
			{
				this.ai[0]++;
			}
			if (this.ai[0] == -1f)
			{
				frame = 1;
				extraUpdates = 1;
			}
			else if (this.ai[0] < 30f)
			{
				base.position = Main.npc[(int)this.ai[1]].Center - new Vector2(width, height) / 2f - velocity;
			}
			else
			{
				velocity *= 0.96f;
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= 2)
					{
						frame = 0;
					}
				}
			}
			if (alpha >= 40)
			{
				return;
			}
			for (int num680 = 0; num680 < 2; num680++)
			{
				float num681 = (float)Main.rand.NextDouble() * 1f - 0.5f;
				if (num681 < -0.5f)
				{
					num681 = -0.5f;
				}
				if (num681 > 0.5f)
				{
					num681 = 0.5f;
				}
				Vector2 vector61 = new Vector2((float)(-width) * 0.65f * scale, 0f).RotatedBy(num681 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
				int num682 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
				Main.dust[num682].velocity = Vector2.Zero;
				Main.dust[num682].position = base.Center + vector61;
				Main.dust[num682].noGravity = true;
			}
		}
		else if (aiStyle == 84)
		{
			Vector2? vector62 = null;
			if (velocity.HasNaNs() || velocity == Vector2.Zero)
			{
				velocity = -Vector2.UnitY;
			}
			if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
			{
				if (Main.npc[(int)this.ai[1]].ai[0] == -2f)
				{
					Kill();
					return;
				}
				Vector2 vector63 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
				base.position = Main.npc[(int)this.ai[1]].Center + vector63 - new Vector2(width, height) / 2f;
			}
			else if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
			{
				Vector2 vector64 = Utils.Vector2FromElipse(elipseSizes: new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
				base.position = Main.npc[(int)this.ai[1]].Center + vector64 - new Vector2(width, height) / 2f;
			}
			else if (type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
			{
				Vector2 vector65 = new Vector2(Main.npc[(int)this.ai[1]].direction * 6, -4f);
				base.position = Main.npc[(int)this.ai[1]].Center + vector65 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
			}
			else if (type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
			{
				Vector2 vector66 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				base.position = Main.projectile[(int)this.ai[1]].Center + vector66 * 16f - new Vector2(width, height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
				velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
			}
			else if (type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
			{
				base.Center = Main.projectile[(int)this.ai[1]].Center;
				velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].ai[1].ToRotationVector2());
			}
			else
			{
				if (type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
				{
					Kill();
					return;
				}
				float num683 = (float)(int)this.ai[0] - 2.5f;
				Vector2 vector67 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				Projectile projectile = Main.projectile[(int)this.ai[1]];
				float num684 = num683 * ((float)Math.PI / 6f);
				float num685 = 20f;
				Vector2 zero = Vector2.Zero;
				float num686 = 1f;
				float num687 = 15f;
				float num688 = -2f;
				if (projectile.ai[0] < 180f)
				{
					num686 = 1f - projectile.ai[0] / 180f;
					num687 = 20f - projectile.ai[0] / 180f * 14f;
					if (projectile.ai[0] < 120f)
					{
						num685 = 20f - 4f * (projectile.ai[0] / 120f);
						Opacity = projectile.ai[0] / 120f * 0.4f;
					}
					else
					{
						num685 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
						Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
					}
					num688 = -22f + projectile.ai[0] / 180f * 20f;
				}
				else
				{
					num686 = 0f;
					num685 = 1.75f;
					num687 = 6f;
					Opacity = 1f;
					num688 = -2f;
				}
				float num689 = (projectile.ai[0] + num683 * num685) / (num685 * 6f) * ((float)Math.PI * 2f);
				num684 = Vector2.UnitY.RotatedBy(num689).Y * ((float)Math.PI / 6f) * num686;
				zero = (Vector2.UnitY.RotatedBy(num689) * new Vector2(4f, num687)).RotatedBy(projectile.velocity.ToRotation());
				base.position = projectile.Center + vector67 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
				base.position += projectile.velocity.ToRotation().ToRotationVector2() * num688;
				base.position += zero;
				velocity = Vector2.Normalize(projectile.velocity).RotatedBy(num684);
				scale = 1.4f * (1f - num686);
				damage = projectile.damage;
				if (projectile.ai[0] >= 180f)
				{
					damage *= 3;
					vector62 = projectile.Center;
				}
				if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile.Center, 0, 0))
				{
					vector62 = Main.player[owner].Center;
				}
				friendly = projectile.ai[0] > 30f;
			}
			if (velocity.HasNaNs() || velocity == Vector2.Zero)
			{
				velocity = -Vector2.UnitY;
			}
			if (type == 461)
			{
				this.ai[0]++;
				if (this.ai[0] >= 300f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(this.ai[0] * (float)Math.PI / 300f) * 10f;
				if (scale > 1f)
				{
					scale = 1f;
				}
			}
			if (type == 455)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 104);
				}
				float num690 = 1f;
				if (Main.npc[(int)this.ai[1]].type == 400)
				{
					num690 = 0.4f;
				}
				localAI[0]++;
				if (localAI[0] >= 180f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 180f) * 10f * num690;
				if (scale > num690)
				{
					scale = num690;
				}
			}
			if (type == 642)
			{
				float num691 = 1f;
				localAI[0]++;
				if (localAI[0] >= 50f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 50f) * 10f * num691;
				if (scale > num691)
				{
					scale = num691;
				}
			}
			if (type == 537)
			{
				float num692 = 0.8f;
				localAI[0]++;
				if (localAI[0] >= 60f)
				{
					Kill();
					return;
				}
				scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 60f) * 10f * num692;
				if (scale > num692)
				{
					scale = num692;
				}
			}
			float num693 = velocity.ToRotation();
			if (type == 455)
			{
				num693 += this.ai[0];
			}
			rotation = num693 - (float)Math.PI / 2f;
			velocity = num693.ToRotationVector2();
			float num694 = 0f;
			float num695 = 0f;
			Vector2 samplingPoint = base.Center;
			if (vector62.HasValue)
			{
				samplingPoint = vector62.Value;
			}
			if (type == 455)
			{
				num694 = 3f;
				num695 = width;
			}
			else if (type == 461)
			{
				num694 = 2f;
				num695 = 0f;
			}
			else if (type == 642)
			{
				num694 = 2f;
				num695 = 0f;
			}
			else if (type == 632)
			{
				num694 = 2f;
				num695 = 0f;
			}
			else if (type == 537)
			{
				num694 = 2f;
				num695 = 0f;
			}
			float[] array5 = new float[(int)num694];
			Collision.LaserScan(samplingPoint, velocity, num695 * scale, 2400f, array5);
			float num696 = 0f;
			for (int num697 = 0; num697 < array5.Length; num697++)
			{
				num696 += array5[num697];
			}
			num696 /= num694;
			float amount = 0.5f;
			if (type == 455)
			{
				NPC nPC7 = Main.npc[(int)this.ai[1]];
				if (nPC7.type == 396)
				{
					Player player8 = Main.player[nPC7.target];
					if (!Collision.CanHitLine(nPC7.position, nPC7.width, nPC7.height, player8.position, player8.width, player8.height))
					{
						num696 = Math.Min(2400f, Vector2.Distance(nPC7.Center, player8.Center) + 150f);
						amount = 0.75f;
					}
				}
			}
			if (type == 632)
			{
				amount = 0.75f;
			}
			localAI[1] = MathHelper.Lerp(localAI[1], num696, amount);
			if (type == 455)
			{
				Vector2 vector68 = base.Center + velocity * (localAI[1] - 14f);
				for (int num698 = 0; num698 < 2; num698++)
				{
					float num699 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num700 = (float)Main.rand.NextDouble() * 2f + 2f;
					Vector2 vector69 = new Vector2((float)Math.Cos(num699) * num700, (float)Math.Sin(num699) * num700);
					int num701 = Dust.NewDust(vector68, 0, 0, 229, vector69.X, vector69.Y);
					Main.dust[num701].noGravity = true;
					Main.dust[num701].scale = 1.7f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 vector70 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num702 = Dust.NewDust(vector68 + vector70 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num702];
					dust.velocity *= 0.5f;
					Main.dust[num702].velocity.Y = 0f - Math.Abs(Main.dust[num702].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			else if (type == 642)
			{
				Vector2 vector71 = base.Center + velocity * (localAI[1] - 14f);
				for (int num703 = 0; num703 < 2; num703++)
				{
					float num704 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num705 = (float)Main.rand.NextDouble() * 2f + 2f;
					Vector2 vector72 = new Vector2((float)Math.Cos(num704) * num705, (float)Math.Sin(num704) * num705);
					int num706 = Dust.NewDust(vector71, 0, 0, 229, vector72.X, vector72.Y);
					Main.dust[num706].noGravity = true;
					Main.dust[num706].scale = 1.7f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 vector73 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num707 = Dust.NewDust(vector71 + vector73 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num707];
					dust.velocity *= 0.5f;
					Main.dust[num707].velocity.Y = 0f - Math.Abs(Main.dust[num707].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type == 461)
			{
				Vector2 vector74 = base.Center + velocity * (localAI[1] - 8f);
				for (int num708 = 0; num708 < 2; num708++)
				{
					float num709 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num710 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					Vector2 vector75 = new Vector2((float)Math.Cos(num709) * num710, (float)Math.Sin(num709) * num710);
					int num711 = Dust.NewDust(vector74, 0, 0, 226, vector75.X, vector75.Y);
					Main.dust[num711].noGravity = true;
					Main.dust[num711].scale = 1.2f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 vector76 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num712 = Dust.NewDust(vector74 + vector76 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num712];
					dust.velocity *= 0.5f;
					Main.dust[num712].velocity.Y = 0f - Math.Abs(Main.dust[num712].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type == 537)
			{
				Vector2 vector77 = base.Center + velocity * (localAI[1] - 8f);
				for (int num713 = 0; num713 < 2; num713++)
				{
					float num714 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num715 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					Vector2 vector78 = new Vector2((float)Math.Cos(num714) * num715, (float)Math.Sin(num714) * num715);
					int num716 = Dust.NewDust(vector77, 0, 0, 226, vector78.X, vector78.Y);
					Main.dust[num716].noGravity = true;
					Main.dust[num716].scale = 1.2f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 vector79 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num717 = Dust.NewDust(vector77 + vector79 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num717];
					dust.velocity *= 0.5f;
					Main.dust[num717].velocity.Y = 0f - Math.Abs(Main.dust[num717].velocity.Y);
				}
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			if (type != 632 || !(Math.Abs(localAI[1] - num696) < 100f) || !(scale > 0.15f))
			{
				return;
			}
			float laserLuminance = 0.5f;
			float laserAlphaMultiplier = 0f;
			float lastPrismHue = GetLastPrismHue(this.ai[0], ref laserLuminance, ref laserAlphaMultiplier);
			Color color = Main.hslToRgb(lastPrismHue, 1f, laserLuminance);
			color.A = (byte)((float)(int)color.A * laserAlphaMultiplier);
			Color color2 = color;
			Vector2 vector80 = base.Center + velocity * (localAI[1] - 14.5f * scale);
			float x3 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
			for (int num718 = 0; num718 < 2; num718++)
			{
				float num719 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
				float num720 = (float)Main.rand.NextDouble() * 0.8f + 1f;
				Vector2 vector81 = new Vector2((float)Math.Cos(num719) * num720, (float)Math.Sin(num719) * num720);
				int num721 = Dust.NewDust(vector80, 0, 0, 267, vector81.X, vector81.Y);
				Main.dust[num721].color = color;
				Main.dust[num721].scale = 1.2f;
				if (scale > 1f)
				{
					Dust dust = Main.dust[num721];
					dust.velocity *= scale;
					dust = Main.dust[num721];
					dust.scale *= scale;
				}
				Main.dust[num721].noGravity = true;
				if (scale != 1.4f && num721 != 6000)
				{
					Dust dust16 = Dust.CloneDust(num721);
					dust16.color = Color.White;
					Dust dust = dust16;
					dust.scale /= 2f;
				}
				float hue = (x3 + Main.rand.NextFloat() * 0.4f) % 1f;
				Main.dust[num721].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
			}
			if (Main.rand.Next(5) == 0)
			{
				Vector2 vector82 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
				int num722 = Dust.NewDust(vector80 + vector82 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust = Main.dust[num722];
				dust.velocity *= 0.5f;
				Main.dust[num722].velocity.Y = 0f - Math.Abs(Main.dust[num722].velocity.Y);
			}
			DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
			float value7 = 0.1f * (float)Math.Sin(Main.GlobalTimeWrappedHourly * 20f);
			Vector2 size = new Vector2(velocity.Length() * localAI[1], (float)width * scale);
			float num723 = velocity.ToRotation();
			if (Main.netMode != 2)
			{
				((WaterShaderData)Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(base.position + new Vector2(size.X * 0.5f, 0f).RotatedBy(num723), new Color(0.5f, 0.1f * (float)Math.Sign(value7) + 0.5f, 0f, 1f) * Math.Abs(value7), size, RippleShape.Square, num723);
			}
			Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
		}
		else if (aiStyle == 85)
		{
			Vector2 vector83 = new Vector2(0f, 216f);
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			int num724 = (int)Math.Abs(this.ai[0]) - 1;
			int num725 = (int)this.ai[1];
			if (!Main.npc[num724].active || Main.npc[num724].type != 396)
			{
				Kill();
				return;
			}
			localAI[0]++;
			if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
			{
				this.ai[0] *= -1f;
				netUpdate = true;
			}
			if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
			{
				this.ai[0] *= -1f;
				netUpdate = true;
			}
			rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + vector83).ToRotation() + (float)Math.PI / 2f;
			if (this.ai[0] > 0f)
			{
				Vector2 value8 = Main.player[(int)this.ai[1]].Center - base.Center;
				if (value8.X != 0f || value8.Y != 0f)
				{
					velocity = Vector2.Normalize(value8) * Math.Min(16f, value8.Length());
				}
				else
				{
					velocity = Vector2.Zero;
				}
				if (value8.Length() < 20f && localAI[1] == 0f)
				{
					localAI[1] = 1f;
					int timeToAdd = 840;
					if (Main.expertMode)
					{
						timeToAdd = 960;
					}
					if (!Main.player[num725].creativeGodMode)
					{
						Main.player[num725].AddBuff(145, timeToAdd);
					}
				}
			}
			else
			{
				Vector2 value9 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + vector83;
				if (value9.X != 0f || value9.Y != 0f)
				{
					velocity = Vector2.Normalize(value9) * Math.Min(16f, value9.Length());
				}
				else
				{
					velocity = Vector2.Zero;
				}
				if (value9.Length() < 20f)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 86)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item120, base.position);
			}
			this.ai[0]++;
			if (this.ai[1] == 1f)
			{
				if (this.ai[0] >= 130f)
				{
					alpha += 10;
				}
				else
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				if (this.ai[0] >= 150f)
				{
					Kill();
					return;
				}
				if (this.ai[0] % 30f == 0f && Main.netMode != 1)
				{
					Vector2 vector84 = rotation.ToRotationVector2();
					NewProjectile(base.Center.X, base.Center.Y, vector84.X, vector84.Y, 464, damage, knockBack, owner);
				}
				rotation += (float)Math.PI / 30f;
				Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
				return;
			}
			base.position -= velocity;
			if (this.ai[0] >= 40f)
			{
				alpha += 3;
			}
			else
			{
				alpha -= 40;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha > 255)
			{
				alpha = 255;
			}
			if (this.ai[0] >= 45f)
			{
				Kill();
				return;
			}
			Vector2 vector85 = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
			float num726 = this.ai[0] % 45f / 45f;
			Vector2 spinningpoint13 = vector85 * num726;
			for (int num727 = 0; num727 < 6; num727++)
			{
				Vector2 vector86 = base.Center + spinningpoint13.RotatedBy((float)num727 * ((float)Math.PI * 2f) / 6f);
				Lighting.AddLight(vector86, 0.3f, 0.75f, 0.9f);
				for (int num728 = 0; num728 < 2; num728++)
				{
					int num729 = Dust.NewDust(vector86 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent);
					Main.dust[num729].noGravity = true;
				}
			}
		}
		else if (aiStyle == 87)
		{
			base.position.Y = this.ai[0];
			height = (int)this.ai[1];
			if (base.Center.X > Main.player[owner].Center.X)
			{
				direction = 1;
			}
			else
			{
				direction = -1;
			}
			velocity.X = (float)direction * 1E-06f;
			if (owner == Main.myPlayer)
			{
				for (int num730 = 0; num730 < 1000; num730++)
				{
					if (Main.projectile[num730].active && num730 != whoAmI && Main.projectile[num730].type == type && Main.projectile[num730].owner == owner && Main.projectile[num730].timeLeft > timeLeft)
					{
						Kill();
						return;
					}
				}
			}
			float num731 = (float)(width * height) * 0.0045f;
			for (int num732 = 0; (float)num732 < num731; num732++)
			{
				int num733 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
				Main.dust[num733].noGravity = true;
				Dust dust = Main.dust[num733];
				dust.velocity *= 0.5f;
				Main.dust[num733].velocity.Y -= 0.5f;
				Main.dust[num733].scale = 1.4f;
				Main.dust[num733].position.X += 6f;
				Main.dust[num733].position.Y -= 2f;
			}
		}
		else if (aiStyle == 88)
		{
			if (type == 465)
			{
				if (localAI[1] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item121, base.position);
					localAI[1] = 1f;
				}
				if (this.ai[0] < 180f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				else
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
						Kill();
						return;
					}
				}
				this.ai[0]++;
				if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
				{
					int[] array6 = new int[5];
					Vector2[] array7 = new Vector2[5];
					int num734 = 0;
					float num735 = 2000f;
					for (int num736 = 0; num736 < 255; num736++)
					{
						if (!Main.player[num736].active || Main.player[num736].dead)
						{
							continue;
						}
						Vector2 center11 = Main.player[num736].Center;
						float num737 = Vector2.Distance(center11, base.Center);
						if (num737 < num735 && Collision.CanHit(base.Center, 1, 1, center11, 1, 1))
						{
							array6[num734] = num736;
							array7[num734] = center11;
							int num33 = num734 + 1;
							num734 = num33;
							if (num33 >= array7.Length)
							{
								break;
							}
						}
					}
					for (int num738 = 0; num738 < num734; num738++)
					{
						Vector2 vector87 = array7[num738] - base.Center;
						float ai = Main.rand.Next(100);
						Vector2 vector88 = Vector2.Normalize(vector87.RotatedByRandom(0.78539818525314331)) * 7f;
						NewProjectile(base.Center.X, base.Center.Y, vector88.X, vector88.Y, 466, damage, 0f, Main.myPlayer, vector87.ToRotation(), ai);
					}
				}
				Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha >= 150 || !(this.ai[0] < 180f))
				{
					return;
				}
				for (int num739 = 0; num739 < 1; num739++)
				{
					float num740 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num740 < -0.5f)
					{
						num740 = -0.5f;
					}
					if (num740 > 0.5f)
					{
						num740 = 0.5f;
					}
					Vector2 vector89 = new Vector2((float)(-width) * 0.2f * scale, 0f).RotatedBy(num740 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
					int num741 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num741].position = base.Center + vector89;
					Main.dust[num741].velocity = Vector2.Normalize(Main.dust[num741].position - base.Center) * 2f;
					Main.dust[num741].noGravity = true;
				}
				for (int num742 = 0; num742 < 1; num742++)
				{
					float num743 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num743 < -0.5f)
					{
						num743 = -0.5f;
					}
					if (num743 > 0.5f)
					{
						num743 = 0.5f;
					}
					Vector2 vector90 = new Vector2((float)(-width) * 0.6f * scale, 0f).RotatedBy(num743 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
					int num744 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num744].velocity = Vector2.Zero;
					Main.dust[num744].position = base.Center + vector90;
					Main.dust[num744].noGravity = true;
				}
			}
			else if (type == 466)
			{
				frameCounter++;
				Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
				if (velocity == Vector2.Zero)
				{
					if (frameCounter >= extraUpdates * 2)
					{
						frameCounter = 0;
						bool flag30 = true;
						for (int num745 = 1; num745 < oldPos.Length; num745++)
						{
							if (oldPos[num745] != oldPos[0])
							{
								flag30 = false;
							}
						}
						if (flag30)
						{
							Kill();
							return;
						}
					}
					if (Main.rand.Next(extraUpdates) == 0)
					{
						for (int num746 = 0; num746 < 2; num746++)
						{
							float num747 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num748 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector91 = new Vector2((float)Math.Cos(num747) * num748, (float)Math.Sin(num747) * num748);
							int num749 = Dust.NewDust(base.Center, 0, 0, 226, vector91.X, vector91.Y);
							Main.dust[num749].noGravity = true;
							Main.dust[num749].scale = 1.2f;
						}
						if (Main.rand.Next(5) == 0)
						{
							Vector2 vector92 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
							int num750 = Dust.NewDust(base.Center + vector92 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num750];
							dust.velocity *= 0.5f;
							Main.dust[num750].velocity.Y = 0f - Math.Abs(Main.dust[num750].velocity.Y);
						}
					}
				}
				else
				{
					if (frameCounter < extraUpdates * 2)
					{
						return;
					}
					frameCounter = 0;
					float num751 = velocity.Length();
					UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
					int num752 = 0;
					Vector2 spinningpoint14 = -Vector2.UnitY;
					while (true)
					{
						int num753 = unifiedRandom.Next();
						this.ai[1] = num753;
						num753 %= 100;
						float f = (float)num753 / 100f * ((float)Math.PI * 2f);
						Vector2 vector93 = f.ToRotationVector2();
						if (vector93.Y > 0f)
						{
							vector93.Y *= -1f;
						}
						bool flag31 = false;
						if (vector93.Y > -0.02f)
						{
							flag31 = true;
						}
						if (vector93.X * (float)(extraUpdates + 1) * 2f * num751 + localAI[0] > 40f)
						{
							flag31 = true;
						}
						if (vector93.X * (float)(extraUpdates + 1) * 2f * num751 + localAI[0] < -40f)
						{
							flag31 = true;
						}
						if (flag31)
						{
							if (num752++ >= 100)
							{
								velocity = Vector2.Zero;
								localAI[1] = 1f;
								break;
							}
							continue;
						}
						spinningpoint14 = vector93;
						break;
					}
					if (velocity != Vector2.Zero)
					{
						localAI[0] += spinningpoint14.X * (float)(extraUpdates + 1) * 2f * num751;
						velocity = spinningpoint14.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num751;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
			}
			else
			{
				if (type != 580)
				{
					return;
				}
				if (localAI[1] == 0f && this.ai[0] >= 900f)
				{
					this.ai[0] -= 1000f;
					localAI[1] = -1f;
				}
				frameCounter++;
				Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
				if (velocity == Vector2.Zero)
				{
					if (frameCounter >= extraUpdates * 2)
					{
						frameCounter = 0;
						bool flag32 = true;
						for (int num754 = 1; num754 < oldPos.Length; num754++)
						{
							if (oldPos[num754] != oldPos[0])
							{
								flag32 = false;
							}
						}
						if (flag32)
						{
							Kill();
							return;
						}
					}
					if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num755 = 0; num755 < 2; num755++)
						{
							float num756 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num757 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector94 = new Vector2((float)Math.Cos(num756) * num757, (float)Math.Sin(num756) * num757);
							int num758 = Dust.NewDust(base.Center, 0, 0, 226, vector94.X, vector94.Y);
							Main.dust[num758].noGravity = true;
							Main.dust[num758].scale = 1.2f;
						}
						if (Main.rand.Next(5) == 0)
						{
							Vector2 vector95 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
							int num759 = Dust.NewDust(base.Center + vector95 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num759];
							dust.velocity *= 0.5f;
							Main.dust[num759].velocity.Y = 0f - Math.Abs(Main.dust[num759].velocity.Y);
						}
					}
				}
				else
				{
					if (frameCounter < extraUpdates * 2)
					{
						return;
					}
					frameCounter = 0;
					float num760 = velocity.Length();
					UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
					int num761 = 0;
					Vector2 spinningpoint15 = -Vector2.UnitY;
					while (true)
					{
						int num762 = unifiedRandom2.Next();
						this.ai[1] = num762;
						num762 %= 100;
						float f2 = (float)num762 / 100f * ((float)Math.PI * 2f);
						Vector2 vector96 = f2.ToRotationVector2();
						if (vector96.Y > 0f)
						{
							vector96.Y *= -1f;
						}
						bool flag33 = false;
						if (vector96.Y > -0.02f)
						{
							flag33 = true;
						}
						if (vector96.X * (float)(extraUpdates + 1) * 2f * num760 + localAI[0] > 40f)
						{
							flag33 = true;
						}
						if (vector96.X * (float)(extraUpdates + 1) * 2f * num760 + localAI[0] < -40f)
						{
							flag33 = true;
						}
						if (flag33)
						{
							if (num761++ >= 100)
							{
								velocity = Vector2.Zero;
								if (localAI[1] < 1f)
								{
									localAI[1] += 2f;
								}
								break;
							}
							continue;
						}
						spinningpoint15 = vector96;
						break;
					}
					if (!(velocity != Vector2.Zero))
					{
						return;
					}
					localAI[0] += spinningpoint15.X * (float)(extraUpdates + 1) * 2f * num760;
					velocity = spinningpoint15.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num760;
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
					{
						float num763 = (float)Main.rand.Next(-3, 4) * ((float)Math.PI / 3f) / 3f;
						Vector2 vector97 = this.ai[0].ToRotationVector2().RotatedBy(num763) * velocity.Length();
						if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector97 * 50f, 0, 0))
						{
							NewProjectile(base.Center.X - vector97.X, base.Center.Y - vector97.Y, vector97.X, vector97.Y, type, damage, knockBack, owner, vector97.ToRotation() + 1000f, this.ai[1]);
						}
					}
				}
			}
		}
		else if (aiStyle == 89)
		{
			if (this.ai[1] == -1f)
			{
				alpha += 12;
			}
			else if (this.ai[0] < 300f)
			{
				alpha -= 5;
			}
			else
			{
				alpha += 12;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha > 255)
			{
				alpha = 255;
			}
			scale = 1f - (float)alpha / 255f;
			scale *= 0.6f;
			rotation += (float)Math.PI / 210f;
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item123, base.position);
			}
			if (alpha == 0)
			{
				for (int num764 = 0; num764 < 2; num764++)
				{
					float num765 = Main.rand.Next(2, 4);
					float num766 = scale;
					if (num764 == 1)
					{
						num766 *= 0.42f;
						num765 *= -0.75f;
					}
					Vector2 vector98 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					vector98.Normalize();
					int num767 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num767].noGravity = true;
					Main.dust[num767].noLight = true;
					Main.dust[num767].position = base.Center + vector98 * 204f * num766;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num767].velocity = vector98 * (0f - num765) * 2f;
						Dust dust = Main.dust[num767];
						dust.scale += 0.5f;
					}
					else
					{
						Main.dust[num767].velocity = vector98 * (0f - num765);
					}
				}
			}
			this.ai[0]++;
			if (this.ai[0] >= 60f)
			{
				int num768 = (int)(this.ai[0] - 0f) / 60;
				float num769 = scale * 0.4f;
				for (int num770 = 0; num770 < 1; num770++)
				{
					float num771 = Main.rand.Next(1, 3);
					Vector2 vector99 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					vector99.Normalize();
					int num772 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num772].noGravity = true;
					Main.dust[num772].noLight = true;
					Main.dust[num772].position = base.Center;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num772].velocity = vector99 * num771 * 2f;
						Dust dust = Main.dust[num772];
						dust.scale += 0.5f;
					}
					else
					{
						Main.dust[num772].velocity = vector99 * num771;
					}
					Main.dust[num772].fadeIn = 2f;
				}
			}
			if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
			{
				if (!NPC.AnyNPCs(454))
				{
					this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 454);
				}
				else
				{
					this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 521);
				}
			}
			else if (this.ai[0] == 320f)
			{
				Kill();
				return;
			}
			bool flag34 = false;
			if (this.ai[1] == -1f)
			{
				if (alpha == 255)
				{
					flag34 = true;
				}
			}
			else
			{
				flag34 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[1]].active;
				if ((flag34 || Main.npc[(int)this.ai[1]].type != 439) && (flag34 || Main.npc[(int)this.ai[1]].type != 454) && (flag34 || Main.npc[(int)this.ai[1]].type != 521))
				{
					flag34 = true;
				}
			}
			if (flag34)
			{
				Kill();
			}
			else
			{
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
			}
		}
		else if (aiStyle == 90)
		{
			if (Main.player[owner].dead)
			{
				Kill();
			}
			if (Main.player[owner].magicLantern)
			{
				timeLeft = 2;
			}
			if (tileCollide)
			{
				if (!Collision.CanHit(base.position, width, height, Main.player[owner].Center, 1, 1))
				{
					tileCollide = false;
				}
				else if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHitLine(base.position, width, height, Main.player[owner].Center, 1, 1))
				{
					tileCollide = true;
				}
			}
			direction = Main.player[owner].direction;
			spriteDirection = direction;
			Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
			localAI[0] += 1f;
			if (localAI[0] >= 10f)
			{
				localAI[0] = 0f;
				int num773 = 17;
				if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num773 * 16))
				{
					int num774 = (int)base.Center.X / 16;
					int num775 = (int)base.Center.Y / 16;
					for (int num776 = num774 - num773; num776 <= num774 + num773; num776++)
					{
						for (int num777 = num775 - num773; num777 <= num775 + num773; num777++)
						{
							if (Main.rand.Next(4) == 0 && new Vector2(num774 - num776, num775 - num777).Length() < (float)num773 && num776 > 0 && num776 < Main.maxTilesX - 1 && num777 > 0 && num777 < Main.maxTilesY - 1 && Main.tile[num776, num777] != null && Main.tile[num776, num777].active() && Main.IsTileSpelunkable(Main.tile[num776, num777]))
							{
								int num778 = Dust.NewDust(new Vector2(num776 * 16, num777 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
								Main.dust[num778].fadeIn = 0.75f;
								Dust dust = Main.dust[num778];
								dust.velocity *= 0.1f;
								Main.dust[num778].noLight = true;
							}
						}
					}
				}
			}
			Vector2 vector100 = Main.player[owner].Center - base.Center;
			vector100.X += 40 * direction;
			vector100.Y -= 40f;
			float num779 = vector100.Length();
			if (num779 > 1000f)
			{
				base.Center = Main.player[owner].Center;
			}
			float num780 = 3f;
			float num781 = 4f;
			if (num779 > 200f)
			{
				num781 += (num779 - 200f) * 0.1f;
				tileCollide = false;
			}
			if (num779 < num781)
			{
				velocity *= 0.25f;
				num781 = num779;
			}
			if (vector100.X != 0f || vector100.Y != 0f)
			{
				vector100.Normalize();
				vector100 *= num781;
			}
			velocity = (velocity * (num780 - 1f) + vector100) / num780;
			if (velocity.Length() > 6f)
			{
				float num782 = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if ((double)Math.Abs(rotation - num782) >= 3.14)
				{
					if (num782 < rotation)
					{
						rotation -= 6.28f;
					}
					else
					{
						rotation += 6.28f;
					}
				}
				rotation = (rotation * 4f + num782) / 5f;
				frameCounter++;
				if (frameCounter > 4)
				{
					frameCounter = 0;
					frame++;
					if (frame > 7)
					{
						frame = 4;
					}
				}
				if (frame < 4)
				{
					frame = 7;
				}
				return;
			}
			if ((double)rotation > 3.14)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation > -0.01 && (double)rotation < 0.01)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.9f;
			}
			frameCounter++;
			if (frameCounter > 6)
			{
				frameCounter = 0;
				frame++;
				if (frame > 3)
				{
					frame = 0;
				}
			}
		}
		else if (aiStyle == 91)
		{
			Vector2 center12 = base.Center;
			scale = 1f - localAI[0];
			width = (int)(20f * scale);
			height = width;
			base.position.X = center12.X - (float)(width / 2);
			base.position.Y = center12.Y - (float)(height / 2);
			if ((double)localAI[0] < 0.1)
			{
				localAI[0] += 0.01f;
			}
			else
			{
				localAI[0] += 0.025f;
			}
			if (localAI[0] >= 0.95f)
			{
				Kill();
			}
			velocity.X += this.ai[0] * 1.5f;
			velocity.Y += this.ai[1] * 1.5f;
			if (velocity.Length() > 16f)
			{
				velocity.Normalize();
				velocity *= 16f;
			}
			this.ai[0] *= 1.05f;
			this.ai[1] *= 1.05f;
			if (scale < 1f)
			{
				for (int num783 = 0; (float)num783 < scale * 10f; num783++)
				{
					int num784 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.1f);
					Main.dust[num784].position = (Main.dust[num784].position + base.Center) / 2f;
					Main.dust[num784].noGravity = true;
					Dust dust = Main.dust[num784];
					dust.velocity *= 0.1f;
					dust = Main.dust[num784];
					dust.velocity -= velocity * (1.3f - scale);
					Main.dust[num784].fadeIn = 100 + owner;
					dust = Main.dust[num784];
					dust.scale += scale * 0.75f;
				}
			}
		}
		else if (aiStyle == 92)
		{
			tileCollide = false;
			this.ai[1] += 1f;
			if (this.ai[1] > 60f)
			{
				this.ai[0] += 10f;
			}
			if (this.ai[0] > 255f)
			{
				Kill();
				this.ai[0] = 255f;
			}
			alpha = (int)(100.0 + (double)this.ai[0] * 0.7);
			rotation += velocity.X * 0.1f;
			rotation += (float)direction * 0.003f;
			velocity *= 0.96f;
			Rectangle rectangle5 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
			for (int num785 = 0; num785 < 1000; num785++)
			{
				if (num785 == whoAmI || !Main.projectile[num785].active || Main.projectile[num785].type < 511 || Main.projectile[num785].type > 513)
				{
					continue;
				}
				Rectangle value10 = new Rectangle((int)Main.projectile[num785].position.X, (int)Main.projectile[num785].position.Y, Main.projectile[num785].width, Main.projectile[num785].height);
				if (!rectangle5.Intersects(value10))
				{
					continue;
				}
				Vector2 vector101 = Main.projectile[num785].Center - base.Center;
				if (vector101.X == 0f && vector101.Y == 0f)
				{
					if (num785 < whoAmI)
					{
						vector101.X = -1f;
						vector101.Y = 1f;
					}
					else
					{
						vector101.X = 1f;
						vector101.Y = -1f;
					}
				}
				vector101.Normalize();
				vector101 *= 0.005f;
				velocity -= vector101;
				Projectile projectile2 = Main.projectile[num785];
				projectile2.velocity += vector101;
			}
		}
		else if (aiStyle == 93)
		{
			if (alpha > 0)
			{
				alpha -= 25;
				if (alpha <= 0)
				{
					alpha = 0;
				}
			}
			if (velocity.Y > 18f)
			{
				velocity.Y = 18f;
			}
			if (this.ai[0] == 0f)
			{
				this.ai[1] += 1f;
				if (this.ai[1] > 20f)
				{
					velocity.Y += 0.1f;
					velocity.X *= 0.992f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				return;
			}
			tileCollide = false;
			if (this.ai[0] == 1f)
			{
				tileCollide = false;
				velocity *= 0.6f;
			}
			else
			{
				tileCollide = false;
				int num786 = (int)(0f - this.ai[0]);
				num786--;
				base.position = Main.npc[num786].Center - velocity;
				base.position.X -= width / 2;
				base.position.Y -= height / 2;
				if (!Main.npc[num786].active || Main.npc[num786].life < 0)
				{
					tileCollide = true;
					this.ai[0] = 0f;
					this.ai[1] = 20f;
					velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					velocity.Normalize();
					velocity *= 6f;
					netUpdate = true;
				}
				else if (velocity.Length() > (float)((Main.npc[num786].width + Main.npc[num786].height) / 3))
				{
					velocity *= 0.99f;
				}
			}
			if (this.ai[0] != 0f)
			{
				this.ai[1] += 1f;
				if (this.ai[1] > 90f)
				{
					Kill();
				}
			}
		}
		else if (aiStyle == 94)
		{
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			this.ai[0]++;
			if (this.ai[0] <= 40f)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				velocity *= 0.85f;
				if (this.ai[0] == 40f)
				{
					netUpdate = true;
					switch (Main.rand.Next(3))
					{
					case 0:
						this.ai[1] = 10f;
						break;
					case 1:
						this.ai[1] = 15f;
						break;
					case 2:
						this.ai[1] = 30f;
						break;
					}
				}
			}
			else if (this.ai[0] <= 60f)
			{
				velocity = Vector2.Zero;
				if (this.ai[0] == 60f)
				{
					netUpdate = true;
				}
			}
			else if (this.ai[0] <= 210f)
			{
				if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
				{
					localAI[0] = 0f;
					int num787 = Item.NewItem((int)base.Center.X, (int)base.Center.Y, 0, 0, 73);
					Main.item[num787].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
				}
				if (this.ai[0] == 210f)
				{
					netUpdate = true;
				}
			}
			else
			{
				scale -= 71f / (678f * (float)Math.PI);
				alpha += 15;
				if (this.ai[0] == 239f)
				{
					netUpdate = true;
				}
				if (this.ai[0] == 240f)
				{
					Kill();
				}
			}
			if (alpha < 90 && Main.rand.Next(3) == 0)
			{
				Vector2 vector102 = new Vector2(width, height) * scale * 0.85f;
				vector102 /= 2f;
				Vector2 vector103 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector102;
				int num788 = Dust.NewDust(base.Center + vector103, 0, 0, 246);
				Main.dust[num788].position = base.Center + vector103;
				Main.dust[num788].velocity = Vector2.Zero;
			}
			float num789 = 0.8f;
			float num790 = 181f / 255f;
			float num791 = 24f / 85f;
			Lighting.AddLight(base.Center, num789 * 0.3f, num790 * 0.3f, num791 * 0.3f);
		}
		else if (aiStyle == 95)
		{
			if (localAI[0] > 2f)
			{
				alpha -= 20;
				if (alpha < 100)
				{
					alpha = 100;
				}
			}
			else
			{
				localAI[0] += 1f;
			}
			if (this.ai[0] > 30f)
			{
				if (velocity.Y > -8f)
				{
					velocity.Y -= 0.05f;
				}
				velocity.X *= 0.98f;
			}
			else
			{
				this.ai[0] += 1f;
			}
			rotation = velocity.X * 0.1f;
			if (wet)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.98f;
				}
				if (velocity.Y > -8f)
				{
					velocity.Y -= 0.2f;
				}
				velocity.X *= 0.94f;
			}
		}
		else if (aiStyle == 96)
		{
			this.ai[0] += 0.6f;
			if (this.ai[0] > 500f)
			{
				Kill();
			}
			for (int num792 = 0; num792 < 2; num792++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num793 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 170, 0f, 0f, 100);
					Main.dust[num793].position = (Main.dust[num793].position + base.Center) / 2f;
					Main.dust[num793].noGravity = true;
					Dust dust = Main.dust[num793];
					dust.velocity *= 0.1f;
					if (num792 == 1)
					{
						dust = Main.dust[num793];
						dust.position += velocity / 2f;
					}
					float num794 = (800f - this.ai[0]) / 800f;
					dust = Main.dust[num793];
					dust.scale *= num794 + 0.1f;
				}
			}
			velocity.Y += 0.008f;
		}
		else if (aiStyle == 97)
		{
			frameCounter++;
			float num795 = 4f;
			if ((float)frameCounter < num795 * 1f)
			{
				frame = 0;
			}
			else if ((float)frameCounter < num795 * 2f)
			{
				frame = 1;
			}
			else if ((float)frameCounter < num795 * 3f)
			{
				frame = 2;
			}
			else if ((float)frameCounter < num795 * 4f)
			{
				frame = 3;
			}
			else if ((float)frameCounter < num795 * 5f)
			{
				frame = 4;
			}
			else if ((float)frameCounter < num795 * 6f)
			{
				frame = 3;
			}
			else if ((float)frameCounter < num795 * 7f)
			{
				frame = 2;
			}
			else if ((float)frameCounter < num795 * 8f)
			{
				frame = 1;
			}
			else
			{
				frameCounter = 0;
				frame = 0;
			}
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			if (owner == Main.myPlayer)
			{
				for (int num796 = 0; num796 < 1000; num796++)
				{
					if (num796 != whoAmI && Main.projectile[num796].active && Main.projectile[num796].owner == owner && Main.projectile[num796].type == type)
					{
						if (timeLeft >= Main.projectile[num796].timeLeft)
						{
							Main.projectile[num796].Kill();
						}
						else
						{
							Kill();
						}
					}
				}
			}
			if (this.ai[0] == 0f)
			{
				if ((double)velocity.Length() < 0.1)
				{
					velocity.X = 0f;
					velocity.Y = 0f;
					this.ai[0] = 1f;
					this.ai[1] = 45f;
					return;
				}
				velocity *= 0.94f;
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				return;
			}
			if (Main.player[owner].Center.X < base.Center.X)
			{
				direction = -1;
			}
			else
			{
				direction = 1;
			}
			spriteDirection = direction;
			this.ai[1] += 1f;
			float num797 = 0.005f;
			if (this.ai[1] > 0f)
			{
				velocity.Y -= num797;
			}
			else
			{
				velocity.Y += num797;
			}
			if (this.ai[1] >= 90f)
			{
				this.ai[1] *= -1f;
			}
		}
		else if (aiStyle == 98)
		{
			Vector2 vector104 = new Vector2(this.ai[0], this.ai[1]);
			Vector2 value11 = vector104 - base.Center;
			if (value11.Length() < velocity.Length())
			{
				Kill();
				return;
			}
			value11.Normalize();
			value11 *= 15f;
			velocity = Vector2.Lerp(velocity, value11, 0.1f);
			for (int num798 = 0; num798 < 2; num798++)
			{
				int num799 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100);
				Main.dust[num799].noGravity = true;
				Dust dust = Main.dust[num799];
				dust.position += new Vector2(4f);
				dust = Main.dust[num799];
				dust.scale += Main.rand.NextFloat() * 1f;
			}
		}
		else if (aiStyle == 99 && type >= 556 && type <= 561)
		{
			AI_099_1();
		}
		else if (aiStyle == 99)
		{
			AI_099_2();
		}
		else if (aiStyle == 100)
		{
			AI_100_Medusa();
		}
		else if (aiStyle == 101)
		{
			float num800 = 20f;
			localAI[0]++;
			alpha = (int)MathHelper.Lerp(0f, 255f, localAI[0] / num800);
			int num801 = (int)this.ai[0];
			int num802 = -1;
			int num803 = -1;
			switch (type)
			{
			case 536:
				num802 = 535;
				num803 = 0;
				break;
			case 591:
				num803 = 1;
				break;
			}
			switch (num803)
			{
			case 1:
				if (localAI[0] >= num800 || num801 < 0 || num801 > 255 || !Main.player[num801].active || Main.player[num801].dead)
				{
					Kill();
					return;
				}
				if (type == 591)
				{
					base.Center = Mount.GetMinecartMechPoint(Main.player[num801], 20, -19) - velocity;
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Sign(velocity.X) != Math.Sign(Main.player[num801].velocity.X) && Main.player[num801].velocity.X != 0f)
					{
						Kill();
						return;
					}
				}
				else
				{
					base.Center = Main.player[num801].Center - velocity;
				}
				break;
			case 0:
				if (localAI[0] >= num800 || num801 < 0 || num801 > 1000 || !Main.projectile[num801].active || Main.projectile[num801].type != num802)
				{
					Kill();
					return;
				}
				base.Center = Main.projectile[num801].Center - velocity;
				break;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}
		else if (aiStyle == 102)
		{
			int num804 = 0;
			float num805 = 0f;
			float x4 = 0f;
			float y3 = 0f;
			int num806 = -1;
			int num807 = 0;
			float num808 = 0f;
			bool flag35 = true;
			bool flag36 = false;
			bool flag37 = false;
			switch (type)
			{
			case 539:
				num804 = 407;
				num805 = 210f;
				x4 = 0.15f;
				y3 = 0.075f;
				num808 = 16f;
				break;
			case 573:
				num804 = 424;
				num805 = 90f;
				num808 = 20f;
				flag35 = false;
				flag36 = true;
				break;
			case 574:
				num804 = 420;
				num805 = 180f;
				x4 = 0.15f;
				y3 = 0.075f;
				num808 = 8f;
				flag35 = false;
				num806 = 576;
				num807 = 65;
				if (Main.expertMode)
				{
					num807 = 50;
				}
				flag37 = true;
				break;
			}
			if (flag37)
			{
				int num809 = (int)this.ai[1];
				if (!Main.npc[num809].active || Main.npc[num809].type != num804)
				{
					Kill();
					return;
				}
				timeLeft = 2;
			}
			this.ai[0]++;
			if (this.ai[0] < num805)
			{
				bool flag38 = true;
				int num810 = (int)this.ai[1];
				if (Main.npc[num810].active && Main.npc[num810].type == num804)
				{
					if (!flag36 && Main.npc[num810].oldPos[1] != Vector2.Zero)
					{
						base.position += Main.npc[num810].position - Main.npc[num810].oldPos[1];
					}
				}
				else
				{
					this.ai[0] = num805;
					flag38 = false;
				}
				if (flag38 && !flag36)
				{
					velocity += new Vector2(Math.Sign(Main.npc[num810].Center.X - base.Center.X), Math.Sign(Main.npc[num810].Center.Y - base.Center.Y)) * new Vector2(x4, y3);
					if (velocity.Length() > 6f)
					{
						velocity *= 6f / velocity.Length();
					}
				}
				if (type == 539)
				{
					if (Main.rand.Next(12) == 0)
					{
						int num811 = Dust.NewDust(base.Center, 8, 8, 180);
						Main.dust[num811].position = base.Center;
						Dust dust = Main.dust[num811];
						dust.velocity *= 0.2f;
						Main.dust[num811].noGravity = true;
					}
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					rotation = velocity.X * 0.1f;
				}
				if (type == 573)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num812 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num812].position = base.Center;
						Main.dust[num812].velocity = velocity;
						Main.dust[num812].noGravity = true;
						Main.dust[num812].scale = 1.5f;
					}
					alpha = 255;
				}
				if (type == 574)
				{
					if (Main.rand.Next(10) == 0)
					{
						int num813 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num813].position = base.Center;
						Main.dust[num813].velocity = velocity;
						Main.dust[num813].noGravity = true;
						Main.dust[num813].scale = 1.5f;
					}
					if (flag38)
					{
						int target2 = Main.npc[num810].target;
						float num814 = velocity.ToRotation();
						if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target2].Center, 0, 0))
						{
							num814 = DirectionTo(Main.player[target2].Center).ToRotation();
						}
						rotation = rotation.AngleLerp(num814 + (float)Math.PI / 2f, 0.2f);
					}
					frame = 1;
				}
			}
			if (this.ai[0] == num805)
			{
				bool flag39 = true;
				int num815 = -1;
				if (!flag35)
				{
					int num816 = (int)this.ai[1];
					if (Main.npc[num816].active && Main.npc[num816].type == num804)
					{
						num815 = Main.npc[num816].target;
					}
					else
					{
						flag39 = false;
					}
				}
				else
				{
					flag39 = false;
				}
				if (!flag39)
				{
					num815 = Player.FindClosest(base.position, width, height);
				}
				Vector2 value12 = Main.player[num815].Center - base.Center;
				value12.X += Main.rand.Next(-50, 51);
				value12.Y += Main.rand.Next(-50, 51);
				value12.X *= (float)Main.rand.Next(80, 121) * 0.01f;
				value12.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
				Vector2 vector105 = Vector2.Normalize(value12);
				if (vector105.HasNaNs())
				{
					vector105 = Vector2.UnitY;
				}
				if (num806 == -1)
				{
					velocity = vector105 * num808;
					netUpdate = true;
				}
				else
				{
					if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num815].Center, 0, 0))
					{
						NewProjectile(base.Center.X, base.Center.Y, vector105.X * num808, vector105.Y * num808, num806, num807, 1f, Main.myPlayer);
					}
					this.ai[0] = 0f;
				}
			}
			if (!(this.ai[0] >= num805))
			{
				return;
			}
			rotation = rotation.AngleLerp(velocity.ToRotation() + (float)Math.PI / 2f, 0.4f);
			if (type == 539)
			{
				if (++frameCounter >= 2)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					int num817 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
					Dust dust = Main.dust[num817];
					dust.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num817].noGravity = true;
					dust = Main.dust[num817];
					dust.velocity *= 0.1f;
					Main.dust[num817].fadeIn = Main.rand.NextFloat() * 1.5f;
				}
				if (Main.rand.Next(3) == 0)
				{
					int num818 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
					Dust dust = Main.dust[num818];
					dust.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num818].noGravity = true;
					dust = Main.dust[num818];
					dust.velocity *= 0.1f;
					Main.dust[num818].fadeIn = Main.rand.NextFloat() * 1.5f;
				}
			}
			if (type == 573)
			{
				if (Main.rand.Next(4) == 0)
				{
					int num819 = Dust.NewDust(base.Center, 8, 8, 242);
					Main.dust[num819].position = base.Center;
					Dust dust = Main.dust[num819];
					dust.velocity *= 0.2f;
					Main.dust[num819].noGravity = true;
					Main.dust[num819].scale = 1.5f;
				}
				alpha = 0;
			}
		}
		else if (aiStyle == 103)
		{
			scale = this.ai[1];
			this.ai[0]++;
			if (this.ai[0] >= 30f)
			{
				alpha += 25;
				if (alpha >= 250)
				{
					Kill();
				}
			}
			else
			{
				if (!(this.ai[0] >= 0f))
				{
					return;
				}
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
					if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
					{
						localAI[1] = 1f;
						NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, (int)localAI[0]);
					}
				}
			}
		}
		else if (aiStyle == 104)
		{
			if (this.ai[0] == 1f)
			{
				scale *= 0.995f;
				alpha += 3;
				if (alpha >= 250)
				{
					Kill();
				}
			}
			else
			{
				scale *= 1.01f;
				alpha -= 7;
				if (alpha < 0)
				{
					alpha = 0;
					this.ai[0] = 1f;
				}
			}
			frameCounter++;
			if (frameCounter > 6)
			{
				frameCounter = 0;
				frame++;
				if (frame > 3)
				{
					frame = 0;
				}
			}
			velocity.Y -= 0.03f;
			velocity.X *= 0.97f;
		}
		else if (aiStyle == 105)
		{
			float num820 = 1f - (float)alpha / 255f;
			num820 *= scale;
			Lighting.AddLight(base.Center, 0.2f * num820, 0.275f * num820, 0.075f * num820);
			localAI[0] += 1f;
			if (localAI[0] >= 90f)
			{
				localAI[0] *= -1f;
			}
			if (localAI[0] >= 0f)
			{
				scale += 0.003f;
			}
			else
			{
				scale -= 0.003f;
			}
			rotation += 0.0025f * scale;
			float num821 = 1f;
			float num822 = 1f;
			if (identity % 6 == 0)
			{
				num822 *= -1f;
			}
			if (identity % 6 == 1)
			{
				num821 *= -1f;
			}
			if (identity % 6 == 2)
			{
				num822 *= -1f;
				num821 *= -1f;
			}
			if (identity % 6 == 3)
			{
				num822 = 0f;
			}
			if (identity % 6 == 4)
			{
				num821 = 0f;
			}
			localAI[1] += 1f;
			if (localAI[1] > 60f)
			{
				localAI[1] = -180f;
			}
			if (localAI[1] >= -60f)
			{
				velocity.X += 0.002f * num822;
				velocity.Y += 0.002f * num821;
			}
			else
			{
				velocity.X -= 0.002f * num822;
				velocity.Y -= 0.002f * num821;
			}
			this.ai[0] += 1f;
			if (this.ai[0] > 5400f)
			{
				damage = 0;
				this.ai[1] = 1f;
				if (alpha < 255)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				else if (owner == Main.myPlayer)
				{
					Kill();
				}
			}
			else
			{
				float num823 = (base.Center - Main.player[owner].Center).Length() / 100f;
				if (num823 > 4f)
				{
					num823 *= 1.1f;
				}
				if (num823 > 5f)
				{
					num823 *= 1.2f;
				}
				if (num823 > 6f)
				{
					num823 *= 1.3f;
				}
				if (num823 > 7f)
				{
					num823 *= 1.4f;
				}
				if (num823 > 8f)
				{
					num823 *= 1.5f;
				}
				if (num823 > 9f)
				{
					num823 *= 1.6f;
				}
				if (num823 > 10f)
				{
					num823 *= 1.7f;
				}
				if (!Main.player[owner].sporeSac)
				{
					num823 += 100f;
				}
				this.ai[0] += num823;
				if (alpha > 50)
				{
					alpha -= 10;
					if (alpha < 50)
					{
						alpha = 50;
					}
				}
			}
			bool flag40 = false;
			Vector2 vector106 = new Vector2(0f, 0f);
			float num824 = 280f;
			for (int num825 = 0; num825 < 200; num825++)
			{
				if (Main.npc[num825].CanBeChasedBy(this))
				{
					float num826 = Main.npc[num825].position.X + (float)(Main.npc[num825].width / 2);
					float num827 = Main.npc[num825].position.Y + (float)(Main.npc[num825].height / 2);
					float num828 = Math.Abs(base.position.X + (float)(width / 2) - num826) + Math.Abs(base.position.Y + (float)(height / 2) - num827);
					if (num828 < num824)
					{
						num824 = num828;
						vector106 = Main.npc[num825].Center;
						flag40 = true;
					}
				}
			}
			if (flag40)
			{
				Vector2 vector107 = vector106 - base.Center;
				vector107.Normalize();
				vector107 *= 0.75f;
				velocity = (velocity * 10f + vector107) / 11f;
			}
			else if ((double)velocity.Length() > 0.2)
			{
				velocity *= 0.98f;
			}
		}
		else if (aiStyle == 106)
		{
			rotation += velocity.X * 0.02f;
			if (velocity.X < 0f)
			{
				rotation -= Math.Abs(velocity.Y) * 0.02f;
			}
			else
			{
				rotation += Math.Abs(velocity.Y) * 0.02f;
			}
			velocity *= 0.98f;
			this.ai[0] += 1f;
			if (this.ai[0] >= 60f)
			{
				if (alpha < 255)
				{
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				else if (owner == Main.myPlayer)
				{
					Kill();
				}
			}
			else if (alpha > 80)
			{
				alpha -= 30;
				if (alpha < 80)
				{
					alpha = 80;
				}
			}
		}
		else if (aiStyle == 107)
		{
			float num829 = 10f;
			float num830 = 5f;
			float num831 = 40f;
			if (type == 575)
			{
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 25;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
			}
			else if (type == 596)
			{
				num829 = 10f;
				num830 = 7.5f;
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 25;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				float num832 = 0.5f;
				if (timeLeft < 120)
				{
					num832 = 1.1f;
				}
				if (timeLeft < 60)
				{
					num832 = 1.6f;
				}
				this.ai[1]++;
				float num833 = this.ai[1] / 180f * ((float)Math.PI * 2f);
				for (float num834 = 0f; num834 < 3f; num834++)
				{
					if (Main.rand.Next(3) != 0)
					{
						return;
					}
					Dust dust17 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
					dust17.position = base.Center + Vector2.UnitY.RotatedBy(num834 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
					dust17.noGravity = true;
					dust17.velocity = DirectionFrom(dust17.position);
					dust17.scale = num832;
					dust17.fadeIn = 0.5f;
					dust17.alpha = 200;
				}
				if (timeLeft < 4)
				{
					int num835 = 40;
					if (Main.expertMode)
					{
						num835 = 30;
					}
					base.position = base.Center;
					width = (height = 60);
					base.Center = base.position;
					damage = num835;
					for (int num836 = 0; num836 < 10; num836++)
					{
						Dust dust17 = Main.dust[Dust.NewDust(base.position, width, height, Utils.SelectRandom<int>(Main.rand, 27, 6), 0f, -2f)];
						dust17.noGravity = true;
						if (dust17.position != base.Center)
						{
							dust17.velocity = DirectionTo(dust17.position) * 3f;
						}
					}
				}
			}
			int num837 = (int)this.ai[0];
			if (num837 >= 0 && Main.player[num837].active && !Main.player[num837].dead)
			{
				if (Distance(Main.player[num837].Center) > num831)
				{
					Vector2 vector108 = DirectionTo(Main.player[num837].Center);
					if (vector108.HasNaNs())
					{
						vector108 = Vector2.UnitY;
					}
					velocity = (velocity * (num829 - 1f) + vector108 * num830) / num829;
				}
			}
			else
			{
				if (timeLeft > 30)
				{
					timeLeft = 30;
				}
				if (this.ai[0] != -1f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
		}
		else if (aiStyle == 108)
		{
			if (type == 578 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				int num838 = Player.FindClosest(base.Center, 0, 0);
				Vector2 vector109 = Main.player[num838].Center - base.Center;
				if (vector109 == Vector2.Zero)
				{
					vector109 = Vector2.UnitY;
				}
				this.ai[1] = vector109.ToRotation();
				netUpdate = true;
			}
			this.ai[0]++;
			if (this.ai[0] <= 50f)
			{
				if (type == 579)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector110 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust18 = Main.dust[Dust.NewDust(base.Center - vector110 * 30f, 0, 0, 229)];
						dust18.noGravity = true;
						dust18.position = base.Center - vector110 * Main.rand.Next(10, 21);
						dust18.velocity = vector110.RotatedBy(1.5707963705062866) * 4f;
						dust18.scale = 0.5f + Main.rand.NextFloat();
						dust18.fadeIn = 0.5f;
					}
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector111 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust19 = Main.dust[Dust.NewDust(base.Center - vector111 * 30f, 0, 0, 240)];
						dust19.noGravity = true;
						dust19.position = base.Center - vector111 * 30f;
						dust19.velocity = vector111.RotatedBy(-1.5707963705062866) * 2f;
						dust19.scale = 0.5f + Main.rand.NextFloat();
						dust19.fadeIn = 0.5f;
					}
				}
				if (type == 578 && Main.rand.Next(2) == 0)
				{
					Vector2 vector112 = this.ai[1].ToRotationVector2();
					Vector2 vector113 = vector112.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
					Vector2 vector114 = vector112 * Main.rand.Next(-80, 81);
					Vector2 vector115 = vector114 - vector113;
					vector115 /= 10f;
					int num839 = 229;
					Dust dust20 = Main.dust[Dust.NewDust(base.Center, 0, 0, num839)];
					dust20.noGravity = true;
					dust20.position = base.Center + vector113;
					dust20.velocity = vector115;
					dust20.scale = 0.5f + Main.rand.NextFloat();
					dust20.fadeIn = 0.5f;
					vector114 = vector112 * Main.rand.Next(40, 121);
					vector115 = vector114 - vector113 / 2f;
					vector115 /= 10f;
					dust20 = Main.dust[Dust.NewDust(base.Center, 0, 0, num839)];
					dust20.noGravity = true;
					dust20.position = base.Center + vector113 / 2f;
					dust20.velocity = vector115;
					dust20.scale = 1f + Main.rand.NextFloat();
				}
				if (type == 813)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector116 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust21 = Main.dust[Dust.NewDust(base.Center - vector116 * 30f, 0, 0, 5)];
						dust21.noGravity = true;
						dust21.position = base.Center - vector116 * Main.rand.Next(10, 21);
						dust21.velocity = vector116.RotatedBy(1.5707963705062866) * 4f;
						dust21.scale = 0.5f + Main.rand.NextFloat();
						dust21.fadeIn = 0.5f;
					}
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector117 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust22 = Main.dust[Dust.NewDust(base.Center - vector117 * 30f, 0, 0, 240)];
						dust22.noGravity = true;
						dust22.position = base.Center - vector117 * 30f;
						dust22.velocity = vector117.RotatedBy(-1.5707963705062866) * 2f;
						dust22.scale = 0.5f + Main.rand.NextFloat();
						dust22.fadeIn = 0.5f;
					}
				}
			}
			else if (this.ai[0] <= 90f)
			{
				if (this.ai[0] == 90f)
				{
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				scale = (this.ai[0] - 50f) / 40f;
				alpha = 255 - (int)(255f * scale);
				rotation -= (float)Math.PI / 20f;
				if (type == 579)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector118 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector118 * 30f, 0, 0, 229)];
						dust23.noGravity = true;
						dust23.position = base.Center - vector118 * Main.rand.Next(10, 21);
						dust23.velocity = vector118.RotatedBy(1.5707963705062866) * 6f;
						dust23.scale = 0.5f + Main.rand.NextFloat();
						dust23.fadeIn = 0.5f;
						dust23.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector119 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust24 = Main.dust[Dust.NewDust(base.Center - vector119 * 30f, 0, 0, 240)];
						dust24.noGravity = true;
						dust24.position = base.Center - vector119 * 30f;
						dust24.velocity = vector119.RotatedBy(-1.5707963705062866) * 3f;
						dust24.scale = 0.5f + Main.rand.NextFloat();
						dust24.fadeIn = 0.5f;
						dust24.customData = base.Center;
					}
				}
				if (type == 578)
				{
					Vector2 vector120 = this.ai[1].ToRotationVector2();
					Vector2 vector121 = vector120.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
					vector120 *= (float)Main.rand.Next(-80, 81);
					Vector2 vector122 = vector120 - vector121;
					vector122 /= 10f;
					int num840 = Utils.SelectRandom<int>(Main.rand, 229, 229);
					Dust dust25 = Main.dust[Dust.NewDust(base.Center, 0, 0, num840)];
					dust25.noGravity = true;
					dust25.position = base.Center + vector121;
					dust25.velocity = vector122;
					dust25.scale = 0.5f + Main.rand.NextFloat();
					dust25.fadeIn = 0.5f;
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						Vector2 vector123 = this.ai[1].ToRotationVector2() * 8f;
						float ai2 = Main.rand.Next(80);
						NewProjectile(base.Center.X - vector123.X, base.Center.Y - vector123.Y, vector123.X, vector123.Y, 580, 50, 1f, Main.myPlayer, this.ai[1], ai2);
					}
				}
				else if (type == 579)
				{
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						for (int num841 = 0; num841 < 2; num841++)
						{
							int num842 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 427, whoAmI);
							Main.npc[num842].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
							Main.npc[num842].netUpdate = true;
						}
					}
				}
				else if (type == 813)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector124 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust26 = Main.dust[Dust.NewDust(base.Center - vector124 * 30f, 0, 0, 5)];
						dust26.noGravity = true;
						dust26.position = base.Center - vector124 * Main.rand.Next(10, 21);
						dust26.velocity = vector124.RotatedBy(1.5707963705062866) * 6f;
						dust26.scale = 0.5f + Main.rand.NextFloat();
						dust26.fadeIn = 0.5f;
						dust26.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector125 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust27 = Main.dust[Dust.NewDust(base.Center - vector125 * 30f, 0, 0, 240)];
						dust27.noGravity = true;
						dust27.position = base.Center - vector125 * 30f;
						dust27.velocity = vector125.RotatedBy(-1.5707963705062866) * 3f;
						dust27.scale = 0.5f + Main.rand.NextFloat();
						dust27.fadeIn = 0.5f;
						dust27.customData = base.Center;
					}
					if (this.ai[0] == 90f && Main.netMode != 1)
					{
						int num843 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 619, whoAmI);
						Main.npc[num843].netUpdate = true;
					}
				}
			}
			else if (this.ai[0] <= 120f)
			{
				scale = 1f;
				alpha = 0;
				rotation -= (float)Math.PI / 60f;
				if (type == 813)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector126 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust28 = Main.dust[Dust.NewDust(base.Center - vector126 * 30f, 0, 0, 5)];
						dust28.noGravity = true;
						dust28.position = base.Center - vector126 * Main.rand.Next(10, 21);
						dust28.velocity = vector126.RotatedBy(1.5707963705062866) * 6f;
						dust28.scale = 0.5f + Main.rand.NextFloat();
						dust28.fadeIn = 0.5f;
						dust28.customData = base.Center;
					}
					else
					{
						Vector2 vector127 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust29 = Main.dust[Dust.NewDust(base.Center - vector127 * 30f, 0, 0, 240)];
						dust29.noGravity = true;
						dust29.position = base.Center - vector127 * 30f;
						dust29.velocity = vector127.RotatedBy(-1.5707963705062866) * 3f;
						dust29.scale = 0.5f + Main.rand.NextFloat();
						dust29.fadeIn = 0.5f;
						dust29.customData = base.Center;
					}
				}
				else if (Main.rand.Next(2) == 0)
				{
					Vector2 vector128 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector128 * 30f, 0, 0, 229)];
					dust30.noGravity = true;
					dust30.position = base.Center - vector128 * Main.rand.Next(10, 21);
					dust30.velocity = vector128.RotatedBy(1.5707963705062866) * 6f;
					dust30.scale = 0.5f + Main.rand.NextFloat();
					dust30.fadeIn = 0.5f;
					dust30.customData = base.Center;
				}
				else
				{
					Vector2 vector129 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust31 = Main.dust[Dust.NewDust(base.Center - vector129 * 30f, 0, 0, 240)];
					dust31.noGravity = true;
					dust31.position = base.Center - vector129 * 30f;
					dust31.velocity = vector129.RotatedBy(-1.5707963705062866) * 3f;
					dust31.scale = 0.5f + Main.rand.NextFloat();
					dust31.fadeIn = 0.5f;
					dust31.customData = base.Center;
				}
			}
			else
			{
				scale = 1f - (this.ai[0] - 120f) / 60f;
				alpha = 255 - (int)(255f * scale);
				rotation -= (float)Math.PI / 30f;
				if (alpha >= 255)
				{
					Kill();
				}
				if (type == 813)
				{
					for (int num844 = 0; num844 < 2; num844++)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
						{
							Vector2 vector131 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust33 = Main.dust[Dust.NewDust(base.Center - vector131 * 30f, 0, 0, 5)];
							dust33.noGravity = true;
							dust33.position = base.Center - vector131 * Main.rand.Next(10, 21);
							dust33.velocity = vector131.RotatedBy(1.5707963705062866) * 6f;
							dust33.scale = 0.5f + Main.rand.NextFloat();
							dust33.fadeIn = 0.5f;
							dust33.customData = base.Center;
							break;
						}
						case 1:
						{
							Vector2 vector130 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust32 = Main.dust[Dust.NewDust(base.Center - vector130 * 30f, 0, 0, 240)];
							dust32.noGravity = true;
							dust32.position = base.Center - vector130 * 30f;
							dust32.velocity = vector130.RotatedBy(-1.5707963705062866) * 3f;
							dust32.scale = 0.5f + Main.rand.NextFloat();
							dust32.fadeIn = 0.5f;
							dust32.customData = base.Center;
							break;
						}
						}
					}
				}
				else
				{
					for (int num845 = 0; num845 < 2; num845++)
					{
						switch (Main.rand.Next(3))
						{
						case 0:
						{
							Vector2 vector133 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust35 = Main.dust[Dust.NewDust(base.Center - vector133 * 30f, 0, 0, 229)];
							dust35.noGravity = true;
							dust35.position = base.Center - vector133 * Main.rand.Next(10, 21);
							dust35.velocity = vector133.RotatedBy(1.5707963705062866) * 6f;
							dust35.scale = 0.5f + Main.rand.NextFloat();
							dust35.fadeIn = 0.5f;
							dust35.customData = base.Center;
							break;
						}
						case 1:
						{
							Vector2 vector132 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
							Dust dust34 = Main.dust[Dust.NewDust(base.Center - vector132 * 30f, 0, 0, 240)];
							dust34.noGravity = true;
							dust34.position = base.Center - vector132 * 30f;
							dust34.velocity = vector132.RotatedBy(-1.5707963705062866) * 3f;
							dust34.scale = 0.5f + Main.rand.NextFloat();
							dust34.fadeIn = 0.5f;
							dust34.customData = base.Center;
							break;
						}
						}
					}
				}
			}
			if (type == 813 && Main.rand.NextFloat() < Opacity)
			{
				Dust dust36 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(3f, 20f), 90);
				dust36.velocity = Vector2.UnitY;
				dust36.noGravity = true;
				dust36.scale = scale;
			}
		}
		else if (aiStyle == 109)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = velocity.Length();
			}
			if (this.ai[0] == 0f)
			{
				localAI[0]++;
				if (localAI[0] > 30f)
				{
					this.ai[0] = 1f;
					localAI[0] = 0f;
					return;
				}
			}
			else if (this.ai[0] == 1f)
			{
				Vector2 zero2 = Vector2.Zero;
				if (type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
				{
					Kill();
					return;
				}
				NPC.lazyNPCOwnedProjectileSearchArray[(int)this.ai[1]] = whoAmI;
				zero2 = Main.npc[(int)this.ai[1]].Center;
				tileCollide = false;
				float num846 = localAI[1];
				Vector2 value13 = zero2 - base.Center;
				if (value13.Length() < num846)
				{
					Kill();
					return;
				}
				value13.Normalize();
				value13 *= num846;
				velocity = Vector2.Lerp(velocity, value13, 0.04f);
			}
			rotation += (float)Math.PI / 10f;
		}
		else if (aiStyle == 110)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = velocity.Length();
			}
			Vector2 zero3 = Vector2.Zero;
			if (Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].townNPC)
			{
				zero3 = Main.npc[(int)this.ai[0]].Center;
				float num847 = localAI[1];
				Vector2 value14 = zero3 - base.Center;
				if (value14.Length() < num847 || base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
				{
					Kill();
					int num848 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
					if (num848 > 20)
					{
						num848 = 20;
					}
					if (num848 > 0)
					{
						NPC nPC8 = Main.npc[(int)this.ai[0]];
						nPC8.life += num848;
						Main.npc[(int)this.ai[0]].HealEffect(num848);
					}
				}
				else
				{
					value14.Normalize();
					value14 *= num847;
					if (value14.Y < velocity.Y)
					{
						value14.Y = velocity.Y;
					}
					value14.Y += 1f;
					velocity = Vector2.Lerp(velocity, value14, 0.04f);
					rotation += velocity.X * 0.05f;
				}
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 111)
		{
			if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
			{
				Kill();
				return;
			}
			this.ai[0]++;
			rotation += (float)Math.PI / 300f;
			scale = this.ai[0] / 100f;
			if (scale > 1f)
			{
				scale = 1f;
			}
			alpha = (int)(255f * (1f - scale));
			float num849 = 300f;
			if (this.ai[0] >= 100f)
			{
				num849 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
			}
			if (num849 > 600f)
			{
				num849 = 600f;
			}
			if (this.ai[0] >= 500f)
			{
				alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
				num849 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
				rotation += (float)Math.PI / 300f;
			}
			if (Main.rand.Next(4) == 0)
			{
				float num850 = num849;
				Vector2 vector134 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				float num851 = Main.rand.Next(3, 9);
				vector134.Normalize();
				int num852 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100);
				Main.dust[num852].noGravity = true;
				Main.dust[num852].position = base.Center + vector134 * num850;
				if (Main.rand.Next(8) == 0)
				{
					Main.dust[num852].velocity = vector134 * (0f - num851) * 3f;
					Dust dust = Main.dust[num852];
					dust.scale += 0.5f;
				}
				else
				{
					Main.dust[num852].velocity = vector134 * (0f - num851);
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Vector2 vector135 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
				float num853 = Main.rand.Next(3, 9);
				vector135.Normalize();
				int num854 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num854].noGravity = true;
				Main.dust[num854].position = base.Center + vector135 * 30f;
				if (Main.rand.Next(8) == 0)
				{
					Main.dust[num854].velocity = vector135 * (0f - num853) * 3f;
					Dust dust = Main.dust[num854];
					dust.scale += 0.5f;
				}
				else
				{
					Main.dust[num854].velocity = vector135 * (0f - num853);
				}
			}
			if (this.ai[0] >= 30f && Main.netMode != 2)
			{
				Player player9 = Main.player[Main.myPlayer];
				if (player9.active && !player9.dead && Distance(player9.Center) <= num849 && player9.FindBuffIndex(165) == -1)
				{
					player9.AddBuff(165, 120);
				}
			}
			if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
			{
				for (int num855 = 0; num855 < 200; num855++)
				{
					NPC nPC9 = Main.npc[num855];
					if (nPC9.type != 488 && nPC9.active && Distance(nPC9.Center) <= num849)
					{
						if (nPC9.townNPC && (nPC9.FindBuffIndex(165) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(165)] <= 20))
						{
							nPC9.AddBuff(165, 120);
						}
						else if (!nPC9.friendly && nPC9.lifeMax > 5 && !nPC9.dontTakeDamage && (nPC9.FindBuffIndex(186) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(186)] <= 20) && (nPC9.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC9.position, nPC9.width, nPC9.height)))
						{
							nPC9.AddBuff(186, 120);
						}
					}
				}
			}
			if (this.ai[0] >= 570f)
			{
				Kill();
			}
		}
		else if (aiStyle == 112)
		{
			if (type == 836)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num856 = 0; num856 < 3; num856++)
					{
						int num857 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 50, Color.White, 1.2f);
						Dust dust = Main.dust[num857];
						dust.velocity *= 0.3f;
						Main.dust[num857].noGravity = true;
					}
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				Player player10 = Main.player[(int)this.ai[1]];
				bool flag41 = player10.active && !player10.dead && Vector2.Distance(player10.Center, base.Center) < 800f;
				int num858 = (spriteDirection = ((Main.WindForVisuals > 0f) ? 1 : (-1)));
				direction = ((player10.Center.X > base.Center.X) ? 1 : (-1));
				bool flag42 = num858 != direction;
				float num859 = 2.5f;
				float num860 = 2f;
				if (flag42)
				{
					num859 = 1.5f;
					num860 = 1f;
				}
				if (flag41)
				{
					if (!flag42)
					{
						float num861 = player10.Center.X - base.Center.X;
						velocity.X += 0.05f * (float)direction * (0.6f + Math.Abs(Main.WindForVisuals));
						if (velocity.X > num859)
						{
							velocity.X -= 0.1f;
						}
						if (velocity.X < 0f - num859)
						{
							velocity.X += 0.1f;
						}
					}
					if (player10.Top.Y >= base.Center.Y || flag42)
					{
						velocity.Y += 0.05f;
						if (velocity.Y > num859)
						{
							velocity.Y -= 0.1f;
						}
					}
					else if (player10.Top.Y < base.Center.Y)
					{
						velocity.Y -= 0.1f;
						if (velocity.Y < 0f - num860)
						{
							velocity.Y += 0.2f;
						}
					}
				}
				else
				{
					velocity.Y += 0.2f;
					if (velocity.Y < 0f - num860)
					{
						velocity.Y += 0.2f;
					}
					if (velocity.Y > num860)
					{
						velocity.Y -= 0.2f;
					}
				}
				rotation = velocity.X * 0.125f;
			}
			if (type == 590)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= 3)
					{
						frame = 0;
					}
				}
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					float num862 = (float)Main.rand.Next(28, 42) * 0.005f;
					num862 += (float)(270 - Main.mouseTextColor) / 500f;
					float num863 = 0.1f;
					float num864 = 0.3f + num862 / 2f;
					float num865 = 0.6f + num862;
					float num866 = 0.35f;
					num863 *= num866;
					num864 *= num866;
					num865 *= num866;
					Lighting.AddLight(base.Center, num863, num864, num865);
				}
				velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 180f) * 0.15f);
				this.ai[0]++;
				if (this.ai[0] >= 180f)
				{
					this.ai[0] = 0f;
				}
			}
			if (type != 644)
			{
				return;
			}
			Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
			int num867 = (int)this.ai[1];
			if (num867 < 0 || num867 >= 1000 || (!Main.projectile[num867].active && Main.projectile[num867].type != 643))
			{
				this.ai[1] = -1f;
			}
			else
			{
				DelegateMethods.v3_1 = newColor3.ToVector3() * 0.5f;
				Utils.PlotTileLine(base.Center, Main.projectile[num867].Center, 8f, DelegateMethods.CastLight);
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
				direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
			}
			rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
			if (alpha > 0)
			{
				alpha -= 8;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
			}
			for (int num868 = 0; num868 < 2; num868++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector136 = Vector2.UnitY.RotatedBy((float)num868 * (float)Math.PI).RotatedBy(rotation);
					Dust dust37 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
					dust37.noGravity = true;
					dust37.noLight = true;
					dust37.scale = Opacity * localAI[0];
					dust37.position = base.Center;
					dust37.velocity = vector136 * 2.5f;
				}
			}
			for (int num869 = 0; num869 < 2; num869++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector137 = Vector2.UnitY.RotatedBy((float)num869 * (float)Math.PI);
					Dust dust38 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
					dust38.noGravity = true;
					dust38.noLight = true;
					dust38.scale = Opacity * localAI[0];
					dust38.position = base.Center;
					dust38.velocity = vector137 * 2.5f;
				}
			}
			if (Main.rand.Next(10) == 0)
			{
				float num870 = 1f + Main.rand.NextFloat() * 2f;
				float fadeIn = 1f + Main.rand.NextFloat();
				float num871 = 1f + Main.rand.NextFloat();
				Vector2 vector138 = Utils.RandomVector2(Main.rand, -1f, 1f);
				if (vector138 != Vector2.Zero)
				{
					vector138.Normalize();
				}
				vector138 *= 20f + Main.rand.NextFloat() * 100f;
				Vector2 vec = base.Center + vector138;
				Point point = vec.ToTileCoordinates();
				bool flag43 = true;
				if (!WorldGen.InWorld(point.X, point.Y))
				{
					flag43 = false;
				}
				if (flag43 && WorldGen.SolidTile(point.X, point.Y))
				{
					flag43 = false;
				}
				if (flag43)
				{
					Dust dust39 = Main.dust[Dust.NewDust(vec, 0, 0, 267, 0f, 0f, 127, newColor3)];
					dust39.noGravity = true;
					dust39.position = vec;
					dust39.velocity = -Vector2.UnitY * num870 * (Main.rand.NextFloat() * 0.9f + 1.6f);
					dust39.fadeIn = fadeIn;
					dust39.scale = num871;
					dust39.noLight = true;
					if (dust39.dustIndex != 6000)
					{
						Dust dust40 = Dust.CloneDust(dust39);
						Dust dust = dust40;
						dust.scale *= 0.65f;
						dust = dust40;
						dust.fadeIn *= 0.65f;
						dust40.color = new Color(255, 255, 255, 255);
					}
				}
			}
			scale = Opacity / 2f * localAI[0];
			velocity = Vector2.Zero;
			localAI[1]++;
			if (localAI[1] >= 60f)
			{
				Kill();
			}
			if (localAI[1] == 30f)
			{
				DoRainbowCrystalStaffExplosion();
				if (Main.myPlayer == owner)
				{
					friendly = true;
					int num872 = width;
					int num873 = height;
					int num874 = penetrate;
					base.position = base.Center;
					width = (height = 60);
					base.Center = base.position;
					penetrate = -1;
					maxPenetrate = -1;
					Damage();
					penetrate = num874;
					base.position = base.Center;
					width = num872;
					height = num873;
					base.Center = base.position;
					friendly = false;
				}
			}
		}
		else if (aiStyle == 113)
		{
			int num875 = 25;
			if (type == 614)
			{
				num875 = 63;
			}
			if (alpha > 0)
			{
				alpha -= num875;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (this.ai[0] == 0f)
			{
				if (type == 614)
				{
					int num876 = (int)this.ai[1];
					if (!Main.npc[num876].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						Kill();
						return;
					}
					float num877 = velocity.ToRotation();
					Vector2 vector139 = Main.npc[num876].Center - base.Center;
					if (vector139 != Vector2.Zero)
					{
						vector139.Normalize();
						vector139 *= 14f;
					}
					float num878 = 5f;
					velocity = (velocity * (num878 - 1f) + vector139) / num878;
				}
				else
				{
					this.ai[1]++;
					if (this.ai[1] >= 45f)
					{
						float num879 = 0.98f;
						float num880 = 0.35f;
						if (type == 636)
						{
							num879 = 0.995f;
							num880 = 0.15f;
						}
						this.ai[1] = 45f;
						velocity.X *= num879;
						velocity.Y += num880;
					}
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				}
			}
			if (this.ai[0] == 1f)
			{
				ignoreWater = true;
				tileCollide = false;
				int num881 = 15;
				if (type == 636)
				{
					num881 = 5 * MaxUpdates;
				}
				bool flag44 = false;
				bool flag45 = false;
				localAI[0]++;
				if (localAI[0] % 30f == 0f)
				{
					flag45 = true;
				}
				int num882 = (int)this.ai[1];
				if (localAI[0] >= (float)(60 * num881))
				{
					flag44 = true;
				}
				else if (num882 < 0 || num882 >= 200)
				{
					flag44 = true;
				}
				else if (Main.npc[num882].active && !Main.npc[num882].dontTakeDamage)
				{
					base.Center = Main.npc[num882].Center - velocity * 2f;
					gfxOffY = Main.npc[num882].gfxOffY;
					if (flag45)
					{
						Main.npc[num882].HitEffect(0, 1.0);
					}
				}
				else
				{
					flag44 = true;
				}
				if (flag44)
				{
					Kill();
				}
			}
			if (type == 614)
			{
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
			}
			if (type == 636)
			{
				Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
			}
		}
		else if (aiStyle == 114)
		{
			if (Main.netMode == 2 && localAI[0] == 0f)
			{
				PortalHelper.SyncPortalSections(base.Center, 1);
				localAI[0] = 1f;
			}
			timeLeft = 3;
			bool flag46 = false;
			if (owner != 255 && (!Main.player[owner].active || Main.player[owner].dead || Distance(Main.player[owner].Center) > 12800f))
			{
				flag46 = true;
			}
			if (!flag46 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.OffScreenTiles))
			{
				flag46 = true;
			}
			if (!flag46 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
			{
				flag46 = true;
			}
			if (flag46)
			{
				Kill();
				return;
			}
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)this.ai[1]);
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center + velocity * 3f, portalColor.ToVector3() * 0.5f);
			}
			if (++frameCounter >= 6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			rotation = this.ai[0] - (float)Math.PI / 2f;
		}
		else if (aiStyle == 115)
		{
			Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
			velocity *= 0.985f;
			rotation += velocity.X * 0.2f;
			if (velocity.X > 0f)
			{
				rotation += 0.08f;
			}
			else
			{
				rotation -= 0.08f;
			}
			this.ai[1] += 1f;
			if (this.ai[1] > 30f)
			{
				alpha += 10;
				if (alpha >= 255)
				{
					alpha = 255;
					Kill();
				}
			}
		}
		else if (aiStyle == 116)
		{
			if (localAI[0] == 0f)
			{
				rotation = this.ai[1];
				localAI[0] = 1f;
			}
			Player player11 = Main.player[owner];
			if (player11.setSolar)
			{
				timeLeft = 2;
			}
			float angle = (float)player11.miscCounter / 300f * ((float)Math.PI * 4f) + this.ai[1];
			angle = MathHelper.WrapAngle(angle);
			rotation = rotation.AngleLerp(angle, 0.05f);
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			velocity = rotation.ToRotationVector2() * 100f - player11.velocity;
			base.Center = player11.Center - velocity;
		}
		else if (aiStyle == 117)
		{
			this.ai[1] += 0.01f;
			scale = this.ai[1];
			this.ai[0]++;
			if (this.ai[0] >= (float)(3 * Main.projFrames[type]))
			{
				Kill();
				return;
			}
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					hide = true;
				}
			}
			alpha -= 63;
			if (alpha < 0)
			{
				alpha = 0;
			}
			bool flag47 = type == 612 || type == 953;
			bool flag48 = type == 624;
			if (flag47)
			{
				Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
			}
			if (this.ai[0] != 1f)
			{
				return;
			}
			base.position = base.Center;
			width = (height = (int)(52f * scale));
			base.Center = base.position;
			Damage();
			if (flag47)
			{
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num883 = 0; num883 < 4; num883++)
				{
					int num884 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num884].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num885 = 0; num885 < 10; num885++)
				{
					int num886 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.7f);
					Main.dust[num886].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num886].noGravity = true;
					Dust dust = Main.dust[num886];
					dust.velocity *= 3f;
					num886 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num886].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num886];
					dust.velocity *= 2f;
					Main.dust[num886].noGravity = true;
					Main.dust[num886].fadeIn = 2.5f;
				}
				for (int num887 = 0; num887 < 5; num887++)
				{
					int num888 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num888].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num888].noGravity = true;
					Dust dust = Main.dust[num888];
					dust.velocity *= 3f;
				}
				for (int num889 = 0; num889 < 10; num889++)
				{
					int num890 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num890].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num890].noGravity = true;
					Dust dust = Main.dust[num890];
					dust.velocity *= 3f;
				}
			}
			if (!flag48)
			{
				return;
			}
			SoundEngine.PlaySound(SoundID.Item14, base.position);
			for (int num891 = 0; num891 < 20; num891++)
			{
				int num892 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num892].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Dust dust = Main.dust[num892];
				dust.velocity *= 2f;
				Main.dust[num892].noGravity = true;
				Main.dust[num892].fadeIn = 2.5f;
				Main.dust[num892].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
			for (int num893 = 0; num893 < 15; num893++)
			{
				int num894 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num894].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num894].noGravity = true;
				Dust dust = Main.dust[num894];
				dust.velocity *= 3f;
				Main.dust[num894].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
			float num895 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num896 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num897 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
			float num898 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num899 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num900 = 7f + (float)Main.rand.NextDouble() * 7f;
			float num901 = num898;
			if (num899 > num901)
			{
				num901 = num899;
			}
			if (num900 > num901)
			{
				num901 = num900;
			}
			for (int num902 = 0; num902 < 200; num902++)
			{
				int num903 = 135;
				float num904 = num901;
				if (num902 > 50)
				{
					num904 = num899;
				}
				if (num902 > 100)
				{
					num904 = num898;
				}
				if (num902 > 150)
				{
					num904 = num900;
				}
				int num905 = Dust.NewDust(base.position, 6, 6, num903, 0f, 0f, 100);
				Vector2 vector140 = Main.dust[num905].velocity;
				Main.dust[num905].position = base.Center;
				vector140.Normalize();
				vector140 *= num904;
				if (num902 > 150)
				{
					vector140.Y *= 0.5f;
					vector140 = vector140.RotatedBy(num897);
				}
				else if (num902 > 100)
				{
					vector140.X *= 0.5f;
					vector140 = vector140.RotatedBy(num895);
				}
				else if (num902 > 50)
				{
					vector140.Y *= 0.5f;
					vector140 = vector140.RotatedBy(num896);
				}
				Dust dust = Main.dust[num905];
				dust.velocity *= 0.2f;
				dust = Main.dust[num905];
				dust.velocity += vector140;
				Main.dust[num905].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				if (num902 <= 200)
				{
					Main.dust[num905].scale = 2f;
					Main.dust[num905].noGravity = true;
					Main.dust[num905].fadeIn = Main.rand.NextFloat() * 2f;
					if (Main.rand.Next(4) == 0)
					{
						Main.dust[num905].fadeIn = 2.5f;
					}
					Main.dust[num905].noLight = true;
					if (num902 < 100)
					{
						dust = Main.dust[num905];
						dust.position += Main.dust[num905].velocity * 20f;
						dust = Main.dust[num905];
						dust.velocity *= -1f;
					}
				}
			}
		}
		else if (aiStyle == 118)
		{
			this.ai[0]++;
			int num906 = 0;
			if (velocity.Length() <= 4f)
			{
				num906 = 1;
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			switch (num906)
			{
			case 0:
				rotation -= (float)Math.PI / 30f;
				if (Main.rand.Next(3) == 0)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector146 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust43 = Main.dust[Dust.NewDust(base.Center - vector146 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
						dust43.noGravity = true;
						dust43.position = base.Center - vector146 * Main.rand.Next(10, 21);
						dust43.velocity = vector146.RotatedBy(1.5707963705062866) * 6f;
						dust43.scale = 0.5f + Main.rand.NextFloat();
						dust43.fadeIn = 0.5f;
						dust43.customData = this;
					}
					else
					{
						Vector2 vector147 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust44 = Main.dust[Dust.NewDust(base.Center - vector147 * 30f, 0, 0, 240)];
						dust44.noGravity = true;
						dust44.position = base.Center - vector147 * 30f;
						dust44.velocity = vector147.RotatedBy(-1.5707963705062866) * 3f;
						dust44.scale = 0.5f + Main.rand.NextFloat();
						dust44.fadeIn = 0.5f;
						dust44.customData = this;
					}
				}
				if (this.ai[0] >= 30f)
				{
					velocity *= 0.98f;
					scale += 0.00744680827f;
					if (scale > 1.3f)
					{
						scale = 1.3f;
					}
					rotation -= (float)Math.PI / 180f;
				}
				if (velocity.Length() < 4.1f)
				{
					velocity.Normalize();
					velocity *= 4f;
					this.ai[0] = 0f;
				}
				break;
			case 1:
			{
				rotation -= (float)Math.PI / 30f;
				for (int num907 = 0; num907 < 1; num907++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector141 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust41 = Main.dust[Dust.NewDust(base.Center - vector141 * 30f, 0, 0, 86)];
						dust41.noGravity = true;
						dust41.position = base.Center - vector141 * Main.rand.Next(10, 21);
						dust41.velocity = vector141.RotatedBy(1.5707963705062866) * 6f;
						dust41.scale = 0.9f + Main.rand.NextFloat();
						dust41.fadeIn = 0.5f;
						dust41.customData = this;
						vector141 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						dust41 = Main.dust[Dust.NewDust(base.Center - vector141 * 30f, 0, 0, 90)];
						dust41.noGravity = true;
						dust41.position = base.Center - vector141 * Main.rand.Next(10, 21);
						dust41.velocity = vector141.RotatedBy(1.5707963705062866) * 6f;
						dust41.scale = 0.9f + Main.rand.NextFloat();
						dust41.fadeIn = 0.5f;
						dust41.customData = this;
						dust41.color = Color.Crimson;
					}
					else
					{
						Vector2 vector142 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust42 = Main.dust[Dust.NewDust(base.Center - vector142 * 30f, 0, 0, 240)];
						dust42.noGravity = true;
						dust42.position = base.Center - vector142 * Main.rand.Next(20, 31);
						dust42.velocity = vector142.RotatedBy(-1.5707963705062866) * 5f;
						dust42.scale = 0.9f + Main.rand.NextFloat();
						dust42.fadeIn = 0.5f;
						dust42.customData = this;
					}
				}
				if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
				{
					Vector2 vector143 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
					NewProjectile(base.Center.X, base.Center.Y, vector143.X, vector143.Y, 618, damage / 2, 0f, owner, 0f, whoAmI);
				}
				Vector2 vector144 = base.Center;
				float num908 = 800f;
				bool flag49 = false;
				int num909 = 0;
				if (this.ai[1] == 0f)
				{
					for (int num910 = 0; num910 < 200; num910++)
					{
						if (Main.npc[num910].CanBeChasedBy(this))
						{
							Vector2 center13 = Main.npc[num910].Center;
							if (Distance(center13) < num908 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num910].position, Main.npc[num910].width, Main.npc[num910].height))
							{
								num908 = Distance(center13);
								vector144 = center13;
								flag49 = true;
								num909 = num910;
							}
						}
					}
					if (flag49)
					{
						if (this.ai[1] != (float)(num909 + 1))
						{
							netUpdate = true;
						}
						this.ai[1] = num909 + 1;
					}
					flag49 = false;
				}
				if (this.ai[1] != 0f)
				{
					int num911 = (int)(this.ai[1] - 1f);
					if (Main.npc[num911].active && Main.npc[num911].CanBeChasedBy(this, ignoreDontTakeDamage: true) && Distance(Main.npc[num911].Center) < 1000f)
					{
						flag49 = true;
						vector144 = Main.npc[num911].Center;
					}
				}
				if (!friendly)
				{
					flag49 = false;
				}
				if (flag49)
				{
					float num912 = 4f;
					int num913 = 8;
					Vector2 vector145 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num914 = vector144.X - vector145.X;
					float num915 = vector144.Y - vector145.Y;
					float num916 = (float)Math.Sqrt(num914 * num914 + num915 * num915);
					float num917 = num916;
					num916 = num912 / num916;
					num914 *= num916;
					num915 *= num916;
					velocity.X = (velocity.X * (float)(num913 - 1) + num914) / (float)num913;
					velocity.Y = (velocity.Y * (float)(num913 - 1) + num915) / (float)num913;
				}
				break;
			}
			}
			if (alpha < 150)
			{
				Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
			}
			if (this.ai[0] >= 600f)
			{
				Kill();
			}
		}
		else if (aiStyle == 119)
		{
			int num918 = 0;
			float num919 = 0f;
			float x5 = 0f;
			float y4 = 0f;
			bool flag50 = false;
			bool flag51 = false;
			int num33 = type;
			if (num33 == 618)
			{
				num918 = 617;
				num919 = 420f;
				x5 = 0.15f;
				y4 = 0.15f;
			}
			if (flag51)
			{
				int num920 = (int)this.ai[1];
				if (!Main.projectile[num920].active || Main.projectile[num920].type != num918)
				{
					Kill();
					return;
				}
				timeLeft = 2;
			}
			this.ai[0]++;
			if (!(this.ai[0] < num919))
			{
				return;
			}
			bool flag52 = true;
			int num921 = (int)this.ai[1];
			if (Main.projectile[num921].active && Main.projectile[num921].type == num918)
			{
				if (!flag50 && Main.projectile[num921].oldPos[1] != Vector2.Zero)
				{
					base.position += Main.projectile[num921].position - Main.projectile[num921].oldPos[1];
				}
				if (base.Center.HasNaNs())
				{
					Kill();
					return;
				}
			}
			else
			{
				this.ai[0] = num919;
				flag52 = false;
				Kill();
			}
			if (flag52 && !flag50)
			{
				velocity += new Vector2(Math.Sign(Main.projectile[num921].Center.X - base.Center.X), Math.Sign(Main.projectile[num921].Center.Y - base.Center.Y)) * new Vector2(x5, y4);
				if (velocity.Length() > 6f)
				{
					velocity *= 6f / velocity.Length();
				}
			}
			if (type == 618)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num922 = Dust.NewDust(base.Center, 8, 8, 86);
					Main.dust[num922].position = base.Center;
					Main.dust[num922].velocity = velocity;
					Main.dust[num922].noGravity = true;
					Main.dust[num922].scale = 1.5f;
					if (flag52)
					{
						Main.dust[num922].customData = Main.projectile[(int)this.ai[1]];
					}
				}
				alpha = 255;
			}
			else
			{
				Kill();
			}
		}
		else if (aiStyle == 120)
		{
			AI_120_StardustGuardian();
		}
		else if (aiStyle == 121)
		{
			AI_121_StardustDragon();
		}
		else if (aiStyle == 122)
		{
			int num923 = (int)this.ai[0];
			bool flag53 = false;
			if (num923 == -1 || !Main.npc[num923].active)
			{
				flag53 = true;
			}
			if (flag53)
			{
				if (type == 629)
				{
					Kill();
					return;
				}
				if (type == 631 && this.ai[0] != -1f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (!flag53 && base.Hitbox.Intersects(Main.npc[num923].Hitbox))
			{
				Kill();
				if (type == 631)
				{
					localAI[1] = 1f;
					Damage();
				}
				return;
			}
			if (type == 629)
			{
				Vector2 value15 = Main.npc[num923].Center - base.Center;
				velocity = Vector2.Normalize(value15) * 5f;
				Dust.QuickDust(base.Center, Color.Red);
			}
			if (type != 631)
			{
				return;
			}
			if (this.ai[1] > 0f)
			{
				this.ai[1]--;
				velocity = Vector2.Zero;
				return;
			}
			if (flag53)
			{
				if (velocity == Vector2.Zero)
				{
					Kill();
				}
				tileCollide = true;
				alpha += 10;
				if (alpha > 255)
				{
					Kill();
				}
			}
			else
			{
				Vector2 value16 = Main.npc[num923].Center - base.Center;
				velocity = Vector2.Normalize(value16) * 12f;
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			rotation = velocity.ToRotation() - (float)Math.PI / 2f;
		}
		else if (aiStyle == 123)
		{
			bool flag54 = type == 641;
			bool flag55 = type == 643;
			float num924 = 1000f;
			velocity = Vector2.Zero;
			if (flag54)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (direction == 0)
				{
					direction = Main.player[owner].direction;
				}
				rotation -= (float)direction * ((float)Math.PI * 2f) / 120f;
				scale = Opacity;
				Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector148 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust45 = Main.dust[Dust.NewDust(base.Center - vector148 * 30f, 0, 0, 229)];
					dust45.noGravity = true;
					dust45.position = base.Center - vector148 * Main.rand.Next(10, 21);
					dust45.velocity = vector148.RotatedBy(1.5707963705062866) * 6f;
					dust45.scale = 0.5f + Main.rand.NextFloat();
					dust45.fadeIn = 0.5f;
					dust45.customData = base.Center;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector149 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust dust46 = Main.dust[Dust.NewDust(base.Center - vector149 * 30f, 0, 0, 240)];
					dust46.noGravity = true;
					dust46.position = base.Center - vector149 * 30f;
					dust46.velocity = vector149.RotatedBy(-1.5707963705062866) * 3f;
					dust46.scale = 0.5f + Main.rand.NextFloat();
					dust46.fadeIn = 0.5f;
					dust46.customData = base.Center;
				}
				if (this.ai[0] < 0f)
				{
					Vector2 center14 = base.Center;
					int num925 = Dust.NewDust(center14 - Vector2.One * 8f, 16, 16, 229, velocity.X / 2f, velocity.Y / 2f);
					Dust dust = Main.dust[num925];
					dust.velocity *= 2f;
					Main.dust[num925].noGravity = true;
					Main.dust[num925].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
					Main.dust[num925].customData = this;
				}
			}
			if (flag55)
			{
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (direction == 0)
				{
					direction = Main.player[owner].direction;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha == 0 && Main.rand.Next(15) == 0)
				{
					Dust dust47 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100)];
					dust47.velocity.X = 0f;
					dust47.noGravity = true;
					dust47.fadeIn = 1f;
					dust47.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
					dust47.scale = 0.5f;
				}
				localAI[0]++;
				if (localAI[0] >= 60f)
				{
					localAI[0] = 0f;
				}
			}
			if (this.ai[0] < 0f)
			{
				this.ai[0]++;
				if (flag54)
				{
					this.ai[1] -= (float)direction * ((float)Math.PI / 8f) / 50f;
				}
			}
			if (this.ai[0] == 0f)
			{
				int num926 = -1;
				float num927 = num924;
				NPC ownerMinionAttackTargetNPC4 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this))
				{
					float num928 = Distance(ownerMinionAttackTargetNPC4.Center);
					if (num928 < num927 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC4.Center, 0, 0))
					{
						num927 = num928;
						num926 = ownerMinionAttackTargetNPC4.whoAmI;
					}
				}
				if (num926 < 0)
				{
					for (int num929 = 0; num929 < 200; num929++)
					{
						NPC nPC10 = Main.npc[num929];
						if (nPC10.CanBeChasedBy(this))
						{
							float num930 = Distance(nPC10.Center);
							if (num930 < num927 && Collision.CanHitLine(base.Center, 0, 0, nPC10.Center, 0, 0))
							{
								num927 = num930;
								num926 = num929;
							}
						}
					}
				}
				if (num926 != -1)
				{
					this.ai[0] = 1f;
					this.ai[1] = num926;
					netUpdate = true;
					return;
				}
			}
			if (!(this.ai[0] > 0f))
			{
				return;
			}
			int num931 = (int)this.ai[1];
			if (!Main.npc[num931].CanBeChasedBy(this))
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
				netUpdate = true;
				return;
			}
			this.ai[0]++;
			float num932 = 30f;
			if (flag55)
			{
				num932 = 5f;
			}
			if (!(this.ai[0] >= num932))
			{
				return;
			}
			Vector2 vector150 = DirectionTo(Main.npc[num931].Center);
			if (vector150.HasNaNs())
			{
				vector150 = Vector2.UnitY;
			}
			float num933 = vector150.ToRotation();
			int num934 = ((vector150.X > 0f) ? 1 : (-1));
			if (flag54)
			{
				direction = num934;
				this.ai[0] = -60f;
				this.ai[1] = num933 + (float)num934 * (float)Math.PI / 16f;
				netUpdate = true;
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, vector150.X, vector150.Y, 642, damage, knockBack, owner, 0f, whoAmI);
				}
			}
			if (!flag55)
			{
				return;
			}
			direction = num934;
			this.ai[0] = -20f;
			netUpdate = true;
			if (owner != Main.myPlayer)
			{
				return;
			}
			NPC nPC11 = Main.npc[num931];
			Vector2 vector151 = nPC11.position + nPC11.Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
			for (int num935 = 0; num935 < 3; num935++)
			{
				Vector2 other = base.Center + vector151;
				Vector2 vector152 = nPC11.velocity * 30f;
				other += vector152;
				float num936 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, Distance(other)));
				if (num935 > 0)
				{
					other = base.Center + vector151.RotatedByRandom(0.78539818525314331) * (Main.rand.NextFloat() * num936 + 0.5f);
				}
				float x6 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
				NewProjectile(other.X, other.Y, 0f, 0f, 644, damage, knockBack, owner, x6, whoAmI);
			}
		}
		else if (aiStyle == 124)
		{
			bool flag56 = type == 650;
			Player player12 = Main.player[owner];
			if (player12.dead)
			{
				Kill();
				return;
			}
			if (type == 650 && player12.suspiciouslookingTentacle)
			{
				timeLeft = 2;
			}
			if (type == 882 && player12.petFlagEyeOfCthulhuPet)
			{
				timeLeft = 2;
			}
			if (type == 888 && player12.petFlagTwinsPet)
			{
				timeLeft = 2;
			}
			if (type == 895 && player12.petFlagFairyQueenPet)
			{
				timeLeft = 2;
			}
			if (type == 896 && player12.petFlagPumpkingPet)
			{
				timeLeft = 2;
			}
			if (type == 898 && player12.petFlagIceQueenPet)
			{
				timeLeft = 2;
			}
			direction = (spriteDirection = player12.direction);
			if (type == 650)
			{
				Vector3 vector153 = (DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 2f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
			}
			if (type == 895)
			{
				Vector3 vector154 = new Vector3(1f, 0.6f, 1f) * 1.5f;
				DelegateMethods.v3_1 = vector154 * 0.75f;
				Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
				DelegateMethods.v3_1 = vector154 * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
			if (type == 896)
			{
				Vector3 vector155 = new Vector3(1f, 0.7f, 0.05f) * 1.5f;
				DelegateMethods.v3_1 = vector155 * 0.75f;
				Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
				DelegateMethods.v3_1 = vector155 * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
			float num937 = 30f;
			float y5 = -20f;
			int num938 = player12.direction;
			if (type == 882 && player12.ownedProjectileCounts[650] > 0)
			{
				num938 *= -1;
			}
			if (type == 888)
			{
				num937 = 30f;
				y5 = -50f;
				if (player12.ownedProjectileCounts[650] > 0)
				{
					y5 = -70f;
				}
			}
			if (type == 895)
			{
				num937 = -36f;
				y5 = -50f;
			}
			if (type == 896)
			{
				num937 = 30f;
				y5 = -60f;
				if (player12.ownedProjectileCounts[888] > 0)
				{
					num937 = -30f;
				}
			}
			if (type == 898)
			{
				num937 = -30f;
				y5 = -50f;
				if (player12.ownedProjectileCounts[895] > 0)
				{
					num937 = 30f;
				}
			}
			Vector2 vector156 = new Vector2((float)num938 * num937, y5);
			Vector2 vector157 = player12.MountedCenter + vector156;
			float num939 = Vector2.Distance(base.Center, vector157);
			if (num939 > 1000f)
			{
				base.Center = player12.Center + vector156;
			}
			Vector2 vector158 = vector157 - base.Center;
			float num940 = 4f;
			if (num939 < num940)
			{
				velocity *= 0.25f;
			}
			if (vector158 != Vector2.Zero)
			{
				if (vector158.Length() < num940)
				{
					velocity = vector158;
				}
				else
				{
					velocity = vector158 * 0.1f;
				}
			}
			if (num939 > 50f && (type == 895 || type == 898))
			{
				direction = (spriteDirection = 1);
				if (velocity.X < 0f)
				{
					direction = (spriteDirection = -1);
				}
			}
			if (velocity.Length() > 6f)
			{
				if (type == 650)
				{
					float num941 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num941) >= (float)Math.PI)
					{
						if (num941 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num942 = 12f;
					rotation = (rotation * (num942 - 1f) + num941) / num942;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 882)
				{
					rotation = velocity.X * 0.125f;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (frame < 6)
						{
							frame = 6;
						}
						else
						{
							frame++;
							if (frame > 15)
							{
								frame = 10;
							}
						}
					}
				}
				else if (type == 888)
				{
					float num943 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num943) >= (float)Math.PI)
					{
						if (num943 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num944 = 12f;
					rotation = (rotation * (num944 - 1f) + num943) / num944;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (frame < 6)
						{
							frame = 6;
						}
						else
						{
							frame++;
							if (frame > 17)
							{
								frame = 6;
							}
						}
					}
				}
				else if (type == 895)
				{
					float num945 = velocity.X * 0.1f;
					if (Math.Abs(rotation - num945) >= (float)Math.PI)
					{
						if (num945 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num946 = 12f;
					rotation = (rotation * (num946 - 1f) + num945) / num946;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (frameCounter == 0)
					{
						int num947 = Dust.NewDust(base.position, width, height, 242, 0f, 0f, 50, default(Color), 2f);
						Main.dust[num947].noGravity = true;
					}
				}
				else if (type == 896)
				{
					float num948 = velocity.ToRotation() + (float)Math.PI / 2f;
					if (Math.Abs(rotation - num948) >= (float)Math.PI)
					{
						if (num948 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num949 = 12f;
					rotation = (rotation * (num949 - 1f) + num948) / num949;
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (frame < 8)
						{
							frame = 8;
						}
						else
						{
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 8;
							}
						}
					}
				}
				else if (type == 898)
				{
					float num950 = velocity.X * 0.1f;
					if (Math.Abs(rotation - num950) >= (float)Math.PI)
					{
						if (num950 < rotation)
						{
							rotation -= (float)Math.PI * 2f;
						}
						else
						{
							rotation += (float)Math.PI * 2f;
						}
					}
					float num951 = 12f;
					rotation = (rotation * (num951 - 1f) + num950) / num951;
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (frameCounter == 0)
					{
						int num952 = Dust.NewDust(base.position, width, height, 80, 0f, 0f, 50);
						Main.dust[num952].noGravity = true;
					}
				}
			}
			else if (type == 650)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 882)
			{
				rotation = velocity.X * 0.125f;
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 6 || frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 888)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 6 || frame >= 18)
					{
						frame = 0;
					}
				}
			}
			else if (type == 895)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (type == 896)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame == 8 || frame >= Main.projFrames[type])
					{
						frame = 0;
						if (Main.rand.Next(15) == 0)
						{
							frame = 8;
						}
					}
				}
			}
			else if (type == 898)
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			if (flag56 && this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
			{
				this.ai[0] = 0f;
				this.ai[1] = 0f;
			}
			if (flag56 && Main.rand.Next(15) == 0)
			{
				int num953 = -1;
				int num954 = -1;
				float num955 = -1f;
				int num956 = 17;
				if ((base.Center - player12.Center).Length() < (float)Main.screenWidth)
				{
					int num957 = (int)base.Center.X / 16;
					int num958 = (int)base.Center.Y / 16;
					num957 = (int)MathHelper.Clamp(num957, num956 + 1, Main.maxTilesX - num956 - 1);
					num958 = (int)MathHelper.Clamp(num958, num956 + 1, Main.maxTilesY - num956 - 1);
					for (int num959 = num957 - num956; num959 <= num957 + num956; num959++)
					{
						for (int num960 = num958 - num956; num960 <= num958 + num956; num960++)
						{
							int num961 = Main.rand.Next(8);
							if (num961 < 4 && new Vector2(num957 - num959, num958 - num960).Length() < (float)num956 && Main.tile[num959, num960] != null && Main.tile[num959, num960].active() && Main.IsTileSpelunkable(Main.tile[num959, num960]))
							{
								float num962 = Distance(new Vector2(num959 * 16 + 8, num960 * 16 + 8));
								if (num962 < num955 || num955 == -1f)
								{
									num955 = num962;
									num953 = num959;
									num954 = num960;
									this.ai[0] = 1f;
									this.ai[1] = AngleTo(new Vector2(num959 * 16 + 8, num960 * 16 + 8));
								}
								if (num961 < 2)
								{
									int num963 = Dust.NewDust(new Vector2(num959 * 16, num960 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num963].fadeIn = 0.75f;
									Dust dust = Main.dust[num963];
									dust.velocity *= 0.1f;
								}
							}
						}
					}
				}
			}
			if (!flag56)
			{
				return;
			}
			float f3 = localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
			float num964 = (float)Math.IEEERemainder(localAI[1], 1.0);
			if (num964 < 0f)
			{
				num964 += 1f;
			}
			float num965 = (float)Math.Floor(localAI[1]);
			float max = 0.999f;
			float num966 = 0f;
			int num967 = 0;
			float amount2 = 0.1f;
			bool flag57 = player12.velocity.Length() > 3f;
			int num968 = -1;
			int num969 = -1;
			float num970 = 300f;
			float num971 = 500f;
			for (int num972 = 0; num972 < 200; num972++)
			{
				NPC nPC12 = Main.npc[num972];
				if (!nPC12.active || !nPC12.chaseable || nPC12.dontTakeDamage || nPC12.immortal)
				{
					continue;
				}
				float num973 = Distance(nPC12.Center);
				if (nPC12.friendly || nPC12.lifeMax <= 5)
				{
					if (num973 < num970 && !flag57)
					{
						num970 = num973;
						num969 = num972;
					}
				}
				else if (num973 < num971)
				{
					num971 = num973;
					num968 = num972;
				}
			}
			if (flag57)
			{
				num966 = AngleTo(base.Center + player12.velocity);
				num967 = 1;
				num964 = MathHelper.Clamp(num964 + 0.05f, 0f, max);
				num965 += (float)Math.Sign(-10f - num965);
			}
			else if (num968 != -1)
			{
				num966 = AngleTo(Main.npc[num968].Center);
				num967 = 2;
				num964 = MathHelper.Clamp(num964 + 0.05f, 0f, max);
				num965 += (float)Math.Sign(-12f - num965);
			}
			else if (num969 != -1)
			{
				num966 = AngleTo(Main.npc[num969].Center);
				num967 = 3;
				num964 = MathHelper.Clamp(num964 + 0.05f, 0f, max);
				num965 += (float)Math.Sign(6f - num965);
			}
			else if (this.ai[0] > 0f)
			{
				num966 = this.ai[1];
				num964 = MathHelper.Clamp(num964 + (float)Math.Sign(0.75f - num964) * 0.05f, 0f, max);
				num967 = 4;
				num965 += (float)Math.Sign(10f - num965);
				if (Main.rand.Next(10) == 0)
				{
					int num974 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num964 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
					Main.dust[num974].fadeIn = 0.75f;
					Dust dust = Main.dust[num974];
					dust.velocity *= 0.1f;
				}
			}
			else
			{
				num966 = ((player12.direction == 1) ? 0f : 3.14160275f);
				num964 = MathHelper.Clamp(num964 + (float)Math.Sign(0.75f - num964) * 0.05f, 0f, max);
				num965 += (float)Math.Sign(0f - num965);
				amount2 = 0.12f;
			}
			Vector2 value17 = num966.ToRotationVector2();
			num966 = Vector2.Lerp(f3.ToRotationVector2(), value17, amount2).ToRotation();
			localAI[0] = num966 + (float)num967 * ((float)Math.PI * 2f) + (float)Math.PI;
			localAI[1] = num965 + num964;
		}
		else if (aiStyle == 125)
		{
			Player player13 = Main.player[owner];
			if (Main.myPlayer == owner)
			{
				if (localAI[1] > 0f)
				{
					localAI[1]--;
				}
				if (player13.noItems || player13.CCed || player13.dead)
				{
					Kill();
				}
				else if (Main.mouseRight && Main.mouseRightRelease)
				{
					Kill();
					player13.mouseInterface = true;
					Main.blockMouse = true;
				}
				else if (!player13.channel)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
					}
					Kill();
				}
				else if (localAI[1] == 0f)
				{
					Vector2 vector159 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
					if (player13.gravDir == -1f)
					{
						vector159.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					if (vector159 != base.Center)
					{
						netUpdate = true;
						base.Center = vector159;
						localAI[1] = 1f;
					}
					if (this.ai[0] == 0f && this.ai[1] == 0f)
					{
						this.ai[0] = (int)base.Center.X / 16;
						this.ai[1] = (int)base.Center.Y / 16;
						netUpdate = true;
						velocity = Vector2.Zero;
					}
				}
				velocity = Vector2.Zero;
				Point point2 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
				Point point3 = base.Center.ToTileCoordinates();
				int num975 = Math.Abs(point2.X - point3.X);
				int num976 = Math.Abs(point2.Y - point3.Y);
				int num977 = Math.Sign(point3.X - point2.X);
				int num978 = Math.Sign(point3.Y - point2.Y);
				Point point4 = default(Point);
				bool flag58 = false;
				bool flag59 = player13.direction == 1;
				int num979;
				int num980;
				int num981;
				if (flag59)
				{
					point4.X = point2.X;
					num979 = point2.Y;
					num980 = point3.Y;
					num981 = num978;
				}
				else
				{
					point4.Y = point2.Y;
					num979 = point2.X;
					num980 = point3.X;
					num981 = num977;
				}
				for (int num982 = num979; num982 != num980; num982 += num981)
				{
					if (flag58)
					{
						break;
					}
					if (flag59)
					{
						point4.Y = num982;
					}
					else
					{
						point4.X = num982;
					}
					if (WorldGen.InWorld(point4.X, point4.Y, 1))
					{
						Tile tile2 = Main.tile[point4.X, point4.Y];
					}
				}
				if (flag59)
				{
					point4.Y = point3.Y;
					num979 = point2.X;
					num980 = point3.X;
					num981 = num977;
				}
				else
				{
					point4.X = point3.X;
					num979 = point2.Y;
					num980 = point3.Y;
					num981 = num978;
				}
				for (int num983 = num979; num983 != num980; num983 += num981)
				{
					if (flag58)
					{
						break;
					}
					if (!flag59)
					{
						point4.Y = num983;
					}
					else
					{
						point4.X = num983;
					}
					if (WorldGen.InWorld(point4.X, point4.Y, 1))
					{
						Tile tile2 = Main.tile[point4.X, point4.Y];
					}
				}
			}
			int num984 = Math.Sign(player13.velocity.X);
			if (num984 != 0)
			{
				player13.ChangeDir(num984);
			}
			player13.heldProj = whoAmI;
			player13.SetDummyItemTime(2);
			player13.itemRotation = 0f;
		}
		else if (aiStyle == 126)
		{
			int num985 = Math.Sign(velocity.Y);
			int num986 = ((num985 != -1) ? 1 : 0);
			if (this.ai[0] == 0f)
			{
				if (!Collision.SolidCollision(base.position + new Vector2(0f, (num985 == -1) ? (height - 48) : 0), width, 48) && !Collision.WetCollision(base.position + new Vector2(0f, (num985 == -1) ? (height - 20) : 0), width, 20))
				{
					velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
					this.ai[0] = 1f;
					this.ai[1] = 0f;
					timeLeft = 60;
				}
				this.ai[1]++;
				if (this.ai[1] >= 60f)
				{
					Kill();
				}
				for (int num987 = 0; num987 < 3; num987++)
				{
					int num988 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
					Main.dust[num988].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num988].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num988].noGravity = true;
					Main.dust[num988].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
				}
			}
			if (this.ai[0] != 1f)
			{
				return;
			}
			velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
			if (num985 != 0)
			{
				int num989 = 16;
				int num990 = 320;
				if (type == 670)
				{
					num990 -= (int)Math.Abs(localAI[1]) * 64;
				}
				for (; num989 < num990 && !Collision.SolidCollision(base.position + new Vector2(0f, (num985 == -1) ? (height - num989 - 16) : 0), width, num989 + 16); num989 += 16)
				{
				}
				if (num985 == -1)
				{
					base.position.Y += height;
					height = num989;
					base.position.Y -= num989;
				}
				else
				{
					height = num989;
				}
			}
			this.ai[1]++;
			if (type == 670 && owner == Main.myPlayer && this.ai[1] == 12f && localAI[1] < 3f && localAI[1] > -3f)
			{
				if (localAI[1] == 0f)
				{
					int num991 = NewProjectile(base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num991].localAI[1] = localAI[1] - 1f;
					num991 = NewProjectile(base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num991].localAI[1] = localAI[1] + 1f;
				}
				else
				{
					int num992 = Math.Sign(localAI[1]);
					int num993 = NewProjectile(base.Bottom + new Vector2(50 * num992, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
					Main.projectile[num993].localAI[1] = localAI[1] + (float)num992;
				}
			}
			if (this.ai[1] >= 60f)
			{
				Kill();
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num994 = 0; (float)num994 < 60f; num994++)
				{
					int num995 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num996 = Dust.NewDust(base.position, width, height, num995, 0f, -2.5f * (float)(-num985));
					Main.dust[num996].alpha = 200;
					Dust dust = Main.dust[num996];
					dust.velocity *= new Vector2(0.3f, 2f);
					Main.dust[num996].velocity.Y += 2 * num985;
					dust = Main.dust[num996];
					dust.scale += Main.rand.NextFloat();
					Main.dust[num996].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num985));
					Main.dust[num996].customData = num986;
					if (num985 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num996].velocity.Y -= 0.2f;
					}
				}
				SoundEngine.PlaySound(SoundID.Item34, base.position);
			}
			if (num985 == 1)
			{
				for (int num997 = 0; (float)num997 < 9f; num997++)
				{
					int num998 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num999 = Dust.NewDust(base.position, width, height, num998, 0f, -2.5f * (float)(-num985));
					Main.dust[num999].alpha = 200;
					Dust dust = Main.dust[num999];
					dust.velocity *= new Vector2(0.3f, 2f);
					Main.dust[num999].velocity.Y += 2 * num985;
					dust = Main.dust[num999];
					dust.scale += Main.rand.NextFloat();
					Main.dust[num999].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num985));
					Main.dust[num999].customData = num986;
					if (num985 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num999].velocity.Y -= 0.2f;
					}
				}
			}
			int num1000 = (int)(this.ai[1] / 60f * (float)height) * 3;
			if (num1000 > height)
			{
				num1000 = height;
			}
			Vector2 vector160 = base.position + ((num985 == -1) ? new Vector2(0f, height - num1000) : Vector2.Zero);
			Vector2 vector161 = base.position + ((num985 == -1) ? new Vector2(0f, height) : Vector2.Zero);
			for (int num1001 = 0; (float)num1001 < 6f; num1001++)
			{
				if (Main.rand.Next(3) < 2)
				{
					int num1002 = Dust.NewDust(vector160, width, num1000, 6, 0f, 0f, 90, default(Color), 2.5f);
					Main.dust[num1002].noGravity = true;
					Main.dust[num1002].fadeIn = 1f;
					if (Main.dust[num1002].velocity.Y > 0f)
					{
						Main.dust[num1002].velocity.Y *= -1f;
					}
					if (Main.rand.Next(6) < 3)
					{
						Main.dust[num1002].position.Y = MathHelper.Lerp(Main.dust[num1002].position.Y, vector161.Y, 0.5f);
						Dust dust = Main.dust[num1002];
						dust.velocity *= 5f;
						Main.dust[num1002].velocity.Y -= 3f;
						Main.dust[num1002].position.X = base.Center.X;
						Main.dust[num1002].noGravity = false;
						Main.dust[num1002].noLight = true;
						Main.dust[num1002].fadeIn = 0.4f;
						dust = Main.dust[num1002];
						dust.scale *= 0.3f;
					}
					else
					{
						Main.dust[num1002].velocity = DirectionFrom(Main.dust[num1002].position) * Main.dust[num1002].velocity.Length() * 0.25f;
					}
					Main.dust[num1002].velocity.Y *= -num985;
					Main.dust[num1002].customData = num986;
				}
			}
			for (int num1003 = 0; (float)num1003 < 6f; num1003++)
			{
				if (!(Main.rand.NextFloat() < 0.5f))
				{
					int num1004 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num1005 = Dust.NewDust(vector160, width, num1000, num1004, 0f, -2.5f * (float)(-num985));
					Main.dust[num1005].alpha = 200;
					Dust dust = Main.dust[num1005];
					dust.velocity *= new Vector2(0.6f, 1.5f);
					dust = Main.dust[num1005];
					dust.scale += Main.rand.NextFloat();
					if (num985 == -1 && Main.rand.Next(4) != 0)
					{
						Main.dust[num1005].velocity.Y -= 0.2f;
					}
					Main.dust[num1005].customData = num986;
				}
			}
		}
		else if (aiStyle == 127)
		{
			float num1006 = 900f;
			if (type == 657)
			{
				num1006 = 300f;
			}
			if (soundDelay == 0)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(SoundID.Item82, base.Center);
			}
			this.ai[0]++;
			if (this.ai[0] >= num1006)
			{
				Kill();
			}
			if (type == 656 && localAI[0] >= 30f)
			{
				damage = 0;
				if (this.ai[0] < num1006 - 120f)
				{
					float num1007 = this.ai[0] % 60f;
					this.ai[0] = num1006 - 120f + num1007;
					netUpdate = true;
				}
			}
			float num1008 = 15f;
			float num1009 = 15f;
			Point point5 = base.Center.ToTileCoordinates();
			Collision.ExpandVertically(point5.X, point5.Y, out var topY, out var bottomY, (int)num1008, (int)num1009);
			topY++;
			bottomY--;
			Vector2 value18 = new Vector2(point5.X, topY) * 16f + new Vector2(8f);
			Vector2 value19 = new Vector2(point5.X, bottomY) * 16f + new Vector2(8f);
			Vector2 vector162 = Vector2.Lerp(value18, value19, 0.5f);
			Vector2 vector163 = new Vector2(0f, value19.Y - value18.Y);
			vector163.X = vector163.Y * 0.2f;
			width = (int)(vector163.X * 0.65f);
			height = (int)vector163.Y;
			base.Center = vector162;
			if (type == 656 && owner == Main.myPlayer)
			{
				bool flag60 = false;
				Vector2 center15 = Main.player[owner].Center;
				Vector2 top = Main.player[owner].Top;
				for (float num1010 = 0f; num1010 < 1f; num1010 += 0.05f)
				{
					Vector2 position = Vector2.Lerp(value18, value19, num1010);
					if (Collision.CanHitLine(position, 0, 0, center15, 0, 0) || Collision.CanHitLine(position, 0, 0, top, 0, 0))
					{
						flag60 = true;
						break;
					}
				}
				if (!flag60 && this.ai[0] < num1006 - 120f)
				{
					float num1011 = this.ai[0] % 60f;
					this.ai[0] = num1006 - 120f + num1011;
					netUpdate = true;
				}
			}
			if (!(this.ai[0] < num1006 - 120f))
			{
				return;
			}
			for (int num1012 = 0; num1012 < 1; num1012++)
			{
				float value20 = -0.5f;
				float value21 = 0.9f;
				float amount3 = Main.rand.NextFloat();
				Vector2 vector164 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value20, value21, amount3));
				vector164.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
				vector164.X *= -1f;
				Vector2 vector165 = new Vector2(6f, 10f);
				Vector2 vector166 = vector162 + vector163 * vector164 * 0.5f + vector165;
				Dust dust48 = Main.dust[Dust.NewDust(vector166, 0, 0, 269)];
				dust48.position = vector166;
				dust48.customData = vector162 + vector165;
				dust48.fadeIn = 1f;
				dust48.scale = 0.3f;
				if (vector164.X > -1.2f)
				{
					dust48.velocity.X = 1f + Main.rand.NextFloat();
				}
				dust48.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
			}
		}
		else if (aiStyle == 128)
		{
			Color newColor4 = new Color(255, 255, 255);
			if (soundDelay == 0)
			{
				soundDelay = -1;
				SoundEngine.PlaySound(SoundID.Item60, base.Center);
			}
			if (localAI[1] < 30f)
			{
				for (int num1013 = 0; num1013 < 1; num1013++)
				{
					float value22 = -0.5f;
					float value23 = 0.9f;
					float amount4 = Main.rand.NextFloat();
					Vector2 vector167 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value22, value23, amount4));
					vector167.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
					vector167.X *= -1f;
					Vector2 vector168 = new Vector2(2f, 10f);
					Vector2 vector169 = base.Center + new Vector2(60f, 200f) * vector167 * 0.5f + vector168;
					Dust dust49 = Main.dust[Dust.NewDust(vector169, 0, 0, 269)];
					dust49.position = vector169;
					dust49.customData = base.Center + vector168;
					dust49.fadeIn = 1f;
					dust49.scale = 0.3f;
					if (vector167.X > -1.2f)
					{
						dust49.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust49.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
				}
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 0.8f;
				direction = 1;
				Point point6 = base.Center.ToTileCoordinates();
				base.Center = new Vector2(point6.X * 16 + 8, point6.Y * 16 + 8);
			}
			rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
			if (localAI[1] < 33f)
			{
				if (alpha > 0)
				{
					alpha -= 8;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (localAI[1] > 103f)
			{
				if (alpha < 255)
				{
					alpha += 16;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			if (alpha == 0)
			{
				Lighting.AddLight(base.Center, newColor4.ToVector3() * 0.5f);
			}
			for (int num1014 = 0; num1014 < 2; num1014++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector170 = Vector2.UnitY.RotatedBy((float)num1014 * (float)Math.PI).RotatedBy(rotation);
					Dust dust50 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
					dust50.noGravity = true;
					dust50.noLight = true;
					dust50.scale = Opacity * localAI[0];
					dust50.position = base.Center;
					dust50.velocity = vector170 * 2.5f;
				}
			}
			for (int num1015 = 0; num1015 < 2; num1015++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Vector2 vector171 = Vector2.UnitY.RotatedBy((float)num1015 * (float)Math.PI);
					Dust dust51 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
					dust51.noGravity = true;
					dust51.noLight = true;
					dust51.scale = Opacity * localAI[0];
					dust51.position = base.Center;
					dust51.velocity = vector171 * 2.5f;
				}
			}
			if (localAI[1] < 33f || localAI[1] > 87f)
			{
				scale = Opacity / 2f * localAI[0];
			}
			velocity = Vector2.Zero;
			localAI[1]++;
			if (localAI[1] == 60f && owner == Main.myPlayer)
			{
				int num1016 = 30;
				if (Main.expertMode)
				{
					num1016 = 22;
				}
				NewProjectile(base.Center, Vector2.Zero, 657, num1016, 3f, owner);
			}
			if (localAI[1] >= 120f)
			{
				Kill();
			}
		}
		else if (aiStyle == 129)
		{
			float num1017 = 10f;
			float num1018 = 5f;
			float num1019 = 40f;
			if (type == 659)
			{
				num1017 = 3f;
				num1018 = 7.5f;
				num1019 = 1f;
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (localAI[0] == 0f && this.ai[0] < 0f && owner == Main.myPlayer)
				{
					localAI[0] = 5f;
					for (int num1020 = 0; num1020 < 200; num1020++)
					{
						NPC nPC13 = Main.npc[num1020];
						if (nPC13.CanBeChasedBy(this))
						{
							bool flag61 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC13.Distance(base.Center);
							if ((flag61 & (nPC13.Distance(base.Center) < 400f)) && (Collision.CanHitLine(base.Center, 0, 0, nPC13.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC13.Top, 0, 0)))
							{
								this.ai[0] = num1020;
							}
						}
					}
					if (this.ai[0] >= 0f)
					{
						timeLeft = 300;
						netUpdate = true;
					}
				}
				if (timeLeft > 30 && alpha > 0)
				{
					alpha -= 12;
				}
				if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
				{
					alpha = 128;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				float num1021 = 0.5f;
				if (timeLeft < 120)
				{
					num1021 = 1.1f;
				}
				if (timeLeft < 60)
				{
					num1021 = 1.6f;
				}
				this.ai[1]++;
				float num1022 = this.ai[1] / 180f * ((float)Math.PI * 2f);
				for (float num1023 = 0f; num1023 < 3f; num1023++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust52 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
						dust52.position = base.Center + Vector2.UnitY.RotatedBy(num1023 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
						dust52.noGravity = true;
						dust52.velocity = DirectionFrom(dust52.position);
						dust52.scale = num1021;
						dust52.fadeIn = 0.5f;
						dust52.alpha = 200;
					}
				}
			}
			if (timeLeft > 2 && Collision.SolidCollision(base.position, width, height))
			{
				timeLeft = 2;
			}
			int num1024 = (int)this.ai[0];
			if (num1024 >= 0 && Main.npc[num1024].active)
			{
				if (Distance(Main.npc[num1024].Center) > num1019)
				{
					Vector2 vector172 = DirectionTo(Main.npc[num1024].Center);
					if (vector172.HasNaNs())
					{
						vector172 = Vector2.UnitY;
					}
					velocity = (velocity * (num1017 - 1f) + vector172 * num1018) / num1017;
				}
				return;
			}
			if (this.ai[0] == -1f && timeLeft > 5)
			{
				timeLeft = 5;
			}
			if (this.ai[0] == -2f && timeLeft > 180)
			{
				timeLeft = 180;
			}
			if (this.ai[0] >= 0f)
			{
				this.ai[0] = -1f;
				netUpdate = true;
			}
		}
		else if (aiStyle == 130)
		{
			AI_130_FlameBurstTower();
		}
		else if (aiStyle == 131)
		{
			AI_131_FlameBurstShot();
		}
		else if (aiStyle == 132)
		{
			if (localAI[1] == 0f)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_DefeatScene, base.Center);
				}
				if (localAI[0] == 105f)
				{
					for (int num1025 = 0; num1025 < 20; num1025++)
					{
						float num1026 = (float)num1025 / 20f;
						Vector2 vector173 = new Vector2(Main.rand.NextFloat() * 10f, 0f).RotatedBy(num1026 * -(float)Math.PI + Main.rand.NextFloat() * 0.1f - 0.05f);
						Gore gore2 = Gore.NewGoreDirect(base.Center + vector173 * 3f, vector173, Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030));
						if (gore2.velocity.Y > 0f)
						{
							Gore gore = gore2;
							gore.velocity *= -0.5f;
						}
						if (gore2.velocity.Y < -5f)
						{
							gore2.velocity.Y *= 0.8f;
						}
						gore2.velocity.Y *= 1.1f;
						gore2.velocity.X *= 0.88f;
					}
				}
				if (!Main.dedServ)
				{
					if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
					{
						Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
					}
					if (!Filters.Scene["CrystalDestructionColor"].IsActive())
					{
						Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
					}
					float num1027 = Math.Min(1f, localAI[0] / 120f);
					Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1027);
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1027 * 2f).UseProgress(0f)
						.UseTargetPosition(base.Center);
				}
				if (localAI[0] == 120f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 1f)
			{
				if (!Main.dedServ)
				{
					float num1028 = localAI[0] / 300f;
					float num1029 = Math.Min(1f, localAI[0] / 150f);
					velocity.Y = num1029 * -0.25f;
					if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
					{
						Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
					}
					if (!Filters.Scene["CrystalDestructionColor"].IsActive())
					{
						Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
					}
					num1029 = 1f;
					Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1029);
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1029 * 2f).UseProgress(0f)
						.UseTargetPosition(base.Center);
				}
				if (localAI[0] == 300f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 2f)
			{
				float num1030 = localAI[0] / 300f;
				if (Main.netMode != 2)
				{
					Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num1030 * 30f);
				}
				velocity.Y -= 1f;
				if (localAI[0] == 60f)
				{
					localAI[0] = 0f;
					localAI[1]++;
				}
			}
			else if (localAI[1] == 3f)
			{
				if (!Main.dedServ)
				{
					Filters.Scene.Deactivate("CrystalDestructionVortex");
					Filters.Scene.Deactivate("CrystalDestructionColor");
				}
				Kill();
			}
			if (localAI[1] >= 1f)
			{
				for (int num1031 = 0; num1031 < 1 + (int)(0f - velocity.Y); num1031++)
				{
					if (Main.rand.Next(2) == 0)
					{
						float num1032 = Main.rand.NextFloat() * (0f - velocity.Y);
						Vector2 vector174 = new Vector2(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
						vector174.X += (float)Math.Sin((double)((base.position.Y + num1032) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
						vector174.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector174.X, MathHelper.Clamp(0f - velocity.Y, 0f, 1f));
						vector174.Y = 0.5f - Math.Abs(vector174.X);
						vector174 *= new Vector2(100f, 50f);
						vector174.Y += num1032;
						Vector2 vector175 = base.Center + vector174;
						Dust dust53 = Dust.NewDustPerfect(vector175, 27, Vector2.Zero, 0, Color.White * 0.1f, 1.1f);
						dust53.velocity.Y = Main.rand.NextFloat() * 2f;
						dust53.fadeIn = 0.1f;
					}
				}
			}
			localAI[0]++;
		}
		else if (aiStyle == 133)
		{
			if (type == 673)
			{
				if (this.ai[0] == 70f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, base.Center);
				}
				this.ai[0]++;
				float opacity = 0f;
				if (this.ai[0] < 20f)
				{
					opacity = Utils.GetLerpValue(0f, 20f, this.ai[0], clamped: true);
				}
				else if (this.ai[0] < 60f)
				{
					opacity = 1f;
				}
				else if (this.ai[0] < 80f)
				{
					opacity = Utils.GetLerpValue(80f, 60f, this.ai[0], clamped: true);
				}
				else
				{
					Kill();
				}
				Opacity = opacity;
				_ = owner;
				_ = Main.myPlayer;
			}
			if (type != 674)
			{
				return;
			}
			if (this.ai[0] == 0f)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, base.Center);
			}
			this.ai[0]++;
			if (!(this.ai[0] >= 40f))
			{
				return;
			}
			for (int num1033 = 0; num1033 < 200; num1033++)
			{
				NPC nPC14 = Main.npc[num1033];
				if (nPC14.active && nPC14.damage >= 1 && nPC14.lifeMax >= 30 && !(Distance(nPC14.Center) > 1000f) && nPC14.type != 564 && nPC14.type != 565)
				{
					int num1034 = 500;
					int num1035 = nPC14.lifeMax - nPC14.life;
					if (num1034 > num1035)
					{
						num1034 = num1035;
					}
					if (num1034 > 0)
					{
						NPC nPC8 = nPC14;
						nPC8.life += num1034;
						nPC14.HealEffect(num1034);
						nPC14.netUpdate = true;
					}
				}
			}
			Kill();
		}
		else if (aiStyle == 134)
		{
			AI_134_Ballista();
		}
		else if (aiStyle == 135)
		{
			AI_135_OgreStomp();
		}
		else if (aiStyle == 136)
		{
			AI_136_BetsyBreath();
		}
		else if (aiStyle == 137)
		{
			AI_137_LightningAura();
		}
		else if (aiStyle == 138)
		{
			AI_138_ExplosiveTrap();
		}
		else if (aiStyle == 139)
		{
			AI_139_ExplosiveTrapExplosion();
		}
		else if (aiStyle == 140)
		{
			AI_140_MonkStaffT1();
		}
		else if (aiStyle == 141)
		{
			AI_141_MonkStaffT1Explosion();
		}
		else if (aiStyle == 142)
		{
			AI_142_MonkStaffT2And3();
		}
		else if (aiStyle == 143)
		{
			AI_143_MonkStaffT2Ghast();
		}
		else if (aiStyle == 144)
		{
			AI_144_DD2Pet();
		}
		else if (aiStyle == 145)
		{
			AI_145_BookStaffStorm();
		}
		else if (aiStyle == 146)
		{
			AI_146_DD2Victory();
		}
		else if (aiStyle == 147)
		{
			AI_147_Celeb2Rocket();
		}
		else if (aiStyle == 148)
		{
			AI_148_StarSpawner();
		}
		else if (aiStyle == 149)
		{
			AI_149_GolfBall();
		}
		else if (aiStyle == 150)
		{
			AI_150_GolfClubHelper();
		}
		else if (aiStyle == 151)
		{
			AI_151_SuperStar();
		}
		else if (aiStyle == 152)
		{
			AI_152_SuperStarSlash();
		}
		else if (aiStyle == 153)
		{
			AI_153_ToiletPop();
		}
		else if (aiStyle == 154)
		{
			AI_154_VoidLens();
		}
		else if (aiStyle == 155)
		{
			AI_155_MysticSnakeCoil();
		}
		else if (aiStyle == 156)
		{
			AI_156_BatOfLight();
		}
		else if (aiStyle == 157)
		{
			AI_157_SharpTears();
		}
		else if (aiStyle == 158)
		{
			AI_158_BabyBird();
		}
		else if (aiStyle == 159)
		{
			AI_159_PaperAirplanes();
		}
		else if (aiStyle == 160)
		{
			AI_160_Kites();
		}
		else if (aiStyle == 161)
		{
			AI_161_RapierStabs();
		}
		else if (aiStyle == 162)
		{
			AI_162_TigerPounce();
		}
		else if (aiStyle == 163)
		{
			AI_163_Chum();
		}
		else if (aiStyle == 164)
		{
			AI_164_StormTigerGem();
		}
		else if (aiStyle == 165)
		{
			AI_165_Whip();
		}
		else if (aiStyle == 166)
		{
			AI_166_Dove();
		}
		else if (aiStyle == 167)
		{
			AI_167_SparkleGuitar();
		}
		else if (aiStyle == 168)
		{
			AI_168_FirstFractal();
		}
		else if (aiStyle == 169)
		{
			AI_169_Smolstars();
		}
		else if (aiStyle == 170)
		{
			AI_170_FairyGlowstick();
		}
		else if (aiStyle == 171)
		{
			AI_171_HallowBossRainbowStreak();
		}
		else if (aiStyle == 172)
		{
			AI_172_HallowBossRainbowPelletStorm();
		}
		else if (aiStyle == 173)
		{
			AI_173_HallowBossRainbowTrail();
		}
		else if (aiStyle == 174)
		{
			AI_174_MultisegmentPet();
		}
		else if (aiStyle == 175)
		{
			AI_175_TitaniumStormShards();
		}
		else if (aiStyle == 176)
		{
			AI_176_EdgyLightning();
		}
		else if (aiStyle == 177)
		{
			AI_177_IceWhipSlicer();
		}
		else if (aiStyle == 178)
		{
			AI_178_FireExplosion();
		}
		else if (aiStyle == 179)
		{
			AI_179_FairyQueenLance();
		}
		else if (aiStyle == 180)
		{
			AI_180_FairyQueenSunDance();
		}
		else if (aiStyle == 181)
		{
			AI_181_FairyQueenRangedItemShot();
		}
		else if (aiStyle == 182)
		{
			AI_182_FinalFractal();
		}
		else if (aiStyle == 183)
		{
			AI_183_ZoologistStrike();
		}
		else if (aiStyle == 184)
		{
			AI_184_BadTorchLuck();
		}
		else if (aiStyle == 185)
		{
			AI_185_LifeDrain();
		}
		else if (aiStyle == 186)
		{
			AI_186_PrincessWeapon();
		}
	}

	private void AI_185_LifeDrain()
	{
		if (Main.myPlayer != owner || localAI[0] != 0f)
		{
			return;
		}
		Player player = Main.player[owner];
		bool flag = false;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && !nPC.townNPC && !nPC.dontTakeDamage && !nPC.friendly && base.Hitbox.Intersects(nPC.Hitbox))
			{
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			for (int j = 0; j < 255; j++)
			{
				Player player2 = Main.player[j];
				if (player2.active && player2.whoAmI != player.whoAmI && player2.hostile && !player2.immune && !player2.dead && player2.team != player.team && base.Hitbox.Intersects(player2.Hitbox))
				{
					flag = true;
					break;
				}
			}
		}
		if (flag)
		{
			player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
			localAI[0] = 1f;
		}
	}

	private void AI_186_PrincessWeapon()
	{
		float num = 60f;
		ai[0] += 1f;
		if (ai[0] >= num)
		{
			Kill();
			return;
		}
		Opacity = Utils.Remap(ai[0], 0f, num, 1f, 0f);
		float num2 = ai[0] / num;
		float num3 = 1f - (1f - num2) * (1f - num2);
		float num4 = 1f - (1f - num3) * (1f - num3);
		float num5 = Utils.Remap(ai[0], num - 15f, num, 0f, 1f);
		float num6 = num5 * num5;
		float num7 = 1f - num6;
		scale = (0.4f + 0.6f * num4) * num7;
		float num8 = Utils.Remap(ai[0], 20f, num, 0f, 1f);
		float num9 = 1f - (1f - num8) * (1f - num8);
		float num10 = 1f - (1f - num9) * (1f - num9);
		localAI[0] = (0.4f + 0.6f * num10) * num7;
		int num11 = width / 2;
		Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f) * Opacity;
		float num12 = 6f;
		float num13 = 2f;
		if (num2 < 0.9f)
		{
			for (int i = 0; i < 3; i++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
					Vector2 vector2 = vector * ((float)num11 * scale);
					Vector2 vector3 = base.Center + vector2;
					Vector2 vector4 = vector.RotatedBy(0.78539818525314331);
					vector3 += vector4 * num12;
					int num14 = Dust.NewDust(vector3, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num14].position = vector3;
					Main.dust[num14].noGravity = true;
					Main.dust[num14].scale = 0.3f;
					Main.dust[num14].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
					Main.dust[num14].velocity = vector4 * scale * (0f - num13);
					Main.dust[num14].scale *= scale;
					Main.dust[num14].velocity += velocity * 0.5f;
					Main.dust[num14].position += Main.dust[num14].velocity * -5f;
					if (num14 != 6000)
					{
						Dust dust = Dust.CloneDust(num14);
						dust.scale /= 2f;
						dust.fadeIn *= 0.85f;
						dust.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		if (num2 < 0.9f)
		{
			for (int j = 0; j < 3; j++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector5 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
					Vector2 vector6 = vector5 * ((float)num11 * scale);
					Vector2 vector7 = base.Center + vector6;
					Vector2 vector8 = vector5.RotatedBy(0.78539818525314331);
					vector7 += vector8 * (0f - num12);
					int num15 = Dust.NewDust(vector7, 0, 0, 267, 0f, 0f, 0, newColor);
					Main.dust[num15].position = vector7;
					Main.dust[num15].noGravity = true;
					Main.dust[num15].scale = 0.3f;
					Main.dust[num15].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
					Main.dust[num15].velocity = vector8 * scale * num13;
					Main.dust[num15].scale *= scale;
					Main.dust[num15].velocity = velocity * 0.5f;
					if (num15 != 6000)
					{
						Dust dust2 = Dust.CloneDust(num15);
						dust2.scale /= 2f;
						dust2.fadeIn *= 0.85f;
						dust2.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		ParticleOrchestraSettings settings;
		if (num2 < 0.95f)
		{
			for (float num16 = 0f; num16 < 0.8f; num16 += 1f)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 vector9 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f) + (float)Math.PI / 2f) * ((float)num11 * scale);
					Vector2 positionInWorld = base.Center + vector9;
					settings = new ParticleOrchestraSettings
					{
						PositionInWorld = positionInWorld,
						MovementVector = velocity
					};
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
				}
			}
		}
		if (ai[0] == num - 10f)
		{
			for (float num17 = 0f; num17 < 1f; num17 += 0.25f)
			{
				Vector2 vector10 = Vector2.UnitX.RotatedBy((float)Math.PI * 2f * num17);
				_ = vector10 * ((float)num11 * scale);
				Vector2 center = base.Center;
				float num18 = 1f;
				settings = new ParticleOrchestraSettings
				{
					PositionInWorld = center,
					MovementVector = vector10 * num18
				};
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
				settings = new ParticleOrchestraSettings
				{
					PositionInWorld = center,
					MovementVector = vector10 * num18 * 2f
				};
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
			}
		}
	}

	private void AI_184_BadTorchLuck()
	{
		owner = 255;
		if (Main.player[Main.myPlayer].unlockedBiomeTorches)
		{
			damage = 0;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlaySound(SoundID.Item8, base.Center);
		}
		if (ai[1] > 0f)
		{
			ai[1] -= velocity.Length();
		}
		else
		{
			tileCollide = true;
		}
		int num = (int)ai[0];
		float num2 = 4f;
		for (float num3 = 0f; num3 < num2; num3 += 1f)
		{
			int num4 = Dust.NewDust(position + velocity / num2 * num3, 4, 4, num, 0f, 0f, 100);
			if (Main.rand.Next(3) != 0)
			{
				Main.dust[num4].noGravity = true;
			}
			Main.dust[num4].velocity *= 0.3f;
			if (num == 66)
			{
				Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
				Main.dust[num4].noGravity = true;
			}
		}
	}

	private void AI_121_StardustDragon()
	{
		Player player = Main.player[owner];
		if ((int)Main.timeForVisualEffects % 120 == 0)
		{
			netUpdate = true;
		}
		if (!player.active)
		{
			active = false;
			return;
		}
		bool num = type == 625;
		bool flag = type == 625 || type == 626 || type == 627 || type == 628;
		int num2 = 10;
		if (flag)
		{
			if (player.dead)
			{
				player.stardustDragon = false;
			}
			if (player.stardustDragon)
			{
				timeLeft = 2;
			}
			num2 = 30;
			if (Main.rand.Next(30) == 0)
			{
				int num3 = Dust.NewDust(position, width, height, 135, 0f, 0f, 0, default(Color), 2f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].fadeIn = 2f;
				Point point = Main.dust[num3].position.ToTileCoordinates();
				if (WorldGen.InWorld(point.X, point.Y, 5) && WorldGen.SolidTile(point.X, point.Y))
				{
					Main.dust[num3].noLight = true;
				}
			}
		}
		if (num)
		{
			Vector2 center = player.Center;
			float num4 = 700f;
			float num5 = 1000f;
			int num6 = -1;
			if (Distance(center) > 2000f)
			{
				base.Center = center;
				netUpdate = true;
			}
			if (true)
			{
				NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					float num7 = Distance(ownerMinionAttackTargetNPC.Center);
					if (num7 < num4 * 2f)
					{
						num6 = ownerMinionAttackTargetNPC.whoAmI;
						if (ownerMinionAttackTargetNPC.boss)
						{
							_ = ownerMinionAttackTargetNPC.whoAmI;
						}
						else
						{
							_ = ownerMinionAttackTargetNPC.whoAmI;
						}
					}
				}
				if (num6 < 0)
				{
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.CanBeChasedBy(this) && player.Distance(nPC.Center) < num5)
						{
							float num8 = Distance(nPC.Center);
							if (num8 < num4)
							{
								num6 = i;
								_ = nPC.boss;
							}
						}
					}
				}
			}
			if (num6 != -1)
			{
				NPC nPC2 = Main.npc[num6];
				Vector2 vector = nPC2.Center - base.Center;
				(vector.X > 0f).ToDirectionInt();
				(vector.Y > 0f).ToDirectionInt();
				float num9 = 0.4f;
				if (vector.Length() < 600f)
				{
					num9 = 0.6f;
				}
				if (vector.Length() < 300f)
				{
					num9 = 0.8f;
				}
				if (vector.Length() > nPC2.Size.Length() * 0.75f)
				{
					velocity += Vector2.Normalize(vector) * num9 * 1.5f;
					if (Vector2.Dot(velocity, vector) < 0.25f)
					{
						velocity *= 0.8f;
					}
				}
				float num10 = 30f;
				if (velocity.Length() > num10)
				{
					velocity = Vector2.Normalize(velocity) * num10;
				}
			}
			else
			{
				float num11 = 0.2f;
				Vector2 vector2 = center - base.Center;
				if (vector2.Length() < 200f)
				{
					num11 = 0.12f;
				}
				if (vector2.Length() < 140f)
				{
					num11 = 0.06f;
				}
				if (vector2.Length() > 100f)
				{
					if (Math.Abs(center.X - base.Center.X) > 20f)
					{
						velocity.X += num11 * (float)Math.Sign(center.X - base.Center.X);
					}
					if (Math.Abs(center.Y - base.Center.Y) > 10f)
					{
						velocity.Y += num11 * (float)Math.Sign(center.Y - base.Center.Y);
					}
				}
				else if (velocity.Length() > 2f)
				{
					velocity *= 0.96f;
				}
				if (Math.Abs(velocity.Y) < 1f)
				{
					velocity.Y -= 0.1f;
				}
				float num12 = 15f;
				if (velocity.Length() > num12)
				{
					velocity = Vector2.Normalize(velocity) * num12;
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int num13 = direction;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			if (num13 != direction)
			{
				netUpdate = true;
			}
			float num14 = MathHelper.Clamp(localAI[0], 0f, 50f);
			position = base.Center;
			scale = 1f + num14 * 0.01f;
			width = (height = (int)((float)num2 * scale));
			base.Center = position;
			if (alpha > 0)
			{
				for (int j = 0; j < 2; j++)
				{
					int num15 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num15].noGravity = true;
					Main.dust[num15].noLight = true;
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		else
		{
			bool flag2 = false;
			Vector2 vector3 = Vector2.Zero;
			_ = Vector2.Zero;
			float num16 = 0f;
			float num17 = 0f;
			float num18 = 1f;
			if (ai[1] == 1f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
			int byUUID = GetByUUID(owner, (int)ai[0]);
			if (Main.projectile.IndexInRange(byUUID))
			{
				Projectile projectile = Main.projectile[byUUID];
				if (flag && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
				{
					flag2 = true;
					vector3 = projectile.Center;
					_ = projectile.velocity;
					num16 = projectile.rotation;
					num18 = MathHelper.Clamp(projectile.scale, 0f, 50f);
					num17 = 16f;
					_ = projectile.alpha;
					projectile.localAI[0] = localAI[0] + 1f;
					if (projectile.type != 625)
					{
						projectile.localAI[1] = whoAmI;
					}
					if (owner == Main.myPlayer && type == 628 && projectile.type == 625)
					{
						projectile.Kill();
						Kill();
						return;
					}
				}
			}
			if (!flag2)
			{
				for (int k = 0; k < 1000; k++)
				{
					Projectile projectile2 = Main.projectile[k];
					if (projectile2.active && projectile2.owner == owner && ProjectileID.Sets.StardustDragon[projectile2.type] && projectile2.localAI[1] == ai[0])
					{
						ai[0] = projectile2.projUUID;
						projectile2.localAI[1] = whoAmI;
						netUpdate = true;
					}
				}
				return;
			}
			if (alpha > 0)
			{
				for (int l = 0; l < 2; l++)
				{
					int num19 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num19].noGravity = true;
					Main.dust[num19].noLight = true;
				}
			}
			alpha -= 42;
			if (alpha < 0)
			{
				alpha = 0;
			}
			velocity = Vector2.Zero;
			Vector2 vector4 = vector3 - base.Center;
			if (num16 != rotation)
			{
				float num20 = MathHelper.WrapAngle(num16 - rotation);
				vector4 = vector4.RotatedBy(num20 * 0.1f);
			}
			rotation = vector4.ToRotation() + (float)Math.PI / 2f;
			position = base.Center;
			scale = num18;
			width = (height = (int)((float)num2 * scale));
			base.Center = position;
			if (vector4 != Vector2.Zero)
			{
				base.Center = vector3 - Vector2.Normalize(vector4) * num17 * num18;
			}
			spriteDirection = ((vector4.X > 0f) ? 1 : (-1));
		}
		position.X = MathHelper.Clamp(position.X, 160f, Main.maxTilesX * 16 - 160);
		position.Y = MathHelper.Clamp(position.Y, 160f, Main.maxTilesY * 16 - 160);
	}

	private Projectile FindStardustDragonHeadOfOwner()
	{
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == owner && projectile.type == 625)
			{
				return projectile;
			}
		}
		return null;
	}

	private void AI_183_ZoologistStrike()
	{
		velocity.X *= 0.2f;
		velocity.Y = 0f;
		spriteDirection = (direction = 1);
		if (velocity.X < 0f)
		{
			spriteDirection = (direction = -1);
		}
		frame++;
		if (frame >= Main.projFrames[type])
		{
			frame = Main.projFrames[type] - 1;
		}
	}

	private void AI_182_FinalFractal()
	{
		Player player = Main.player[owner];
		Vector2 mountedCenter = player.MountedCenter;
		float lerpValue = Utils.GetLerpValue(900f, 0f, velocity.Length() * 2f, clamped: true);
		float num = MathHelper.Lerp(0.7f, 2f, lerpValue);
		localAI[0] += num;
		if (localAI[0] >= 120f)
		{
			Kill();
			return;
		}
		float lerpValue2 = Utils.GetLerpValue(0f, 1f, localAI[0] / 60f, clamped: true);
		float num2 = localAI[0] / 60f;
		float num3 = ai[0];
		float num4 = velocity.ToRotation();
		float num5 = (float)Math.PI;
		float num6 = ((velocity.X > 0f) ? 1 : (-1));
		float num7 = num5 + num6 * lerpValue2 * ((float)Math.PI * 2f);
		float num8 = velocity.Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, clamped: true) * 40f;
		float num9 = 60f;
		if (num8 < num9)
		{
			num8 = num9;
		}
		Vector2 vector = mountedCenter + velocity;
		Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy(num7) * new Vector2(num8, num3 * MathHelper.Lerp(2f, 1f, lerpValue));
		Vector2 vector2 = vector + spinningpoint.RotatedBy(num4);
		Vector2 vector3 = (1f - Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true)) * new Vector2((float)((velocity.X > 0f) ? 1 : (-1)) * (0f - num8) * 0.1f, (0f - ai[0]) * 0.3f);
		float num10 = num7 + num4;
		rotation = num10 + (float)Math.PI / 2f;
		base.Center = vector2 + vector3;
		spriteDirection = (direction = ((velocity.X > 0f) ? 1 : (-1)));
		if (num3 < 0f)
		{
			rotation = num5 + num6 * lerpValue2 * ((float)Math.PI * -2f) + num4;
			rotation += (float)Math.PI / 2f;
			spriteDirection = (direction = ((!(velocity.X > 0f)) ? 1 : (-1)));
		}
		if (num2 < 1f)
		{
			FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)ai[1]);
			Vector2 vector4 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			Vector2 center = base.Center;
			int num11 = 1 + (int)(velocity.Length() / 100f);
			num11 = (int)((float)num11 * Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, lerpValue2, clamped: true));
			if (num11 < 1)
			{
				num11 = 1;
			}
			for (int i = 0; i < num11; i++)
			{
				finalFractalProfile.dustMethod(center + vector4 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), rotation - (float)Math.PI / 2f + (float)Math.PI / 2f * (float)spriteDirection, player.velocity);
			}
			Vector3 vector5 = finalFractalProfile.trailColor.ToVector3();
			Vector3 vector6 = Vector3.Lerp(Vector3.One, vector5, 0.7f);
			Lighting.AddLight(base.Center, vector5 * 0.5f * Opacity);
			Lighting.AddLight(mountedCenter, vector6 * Opacity * 0.15f);
		}
		Opacity = Utils.GetLerpValue(0f, 5f, localAI[0], clamped: true) * Utils.GetLerpValue(120f, 115f, localAI[0], clamped: true);
	}

	private void AI_181_FairyQueenRangedItemShot()
	{
		ai[0] += 1f;
		alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 10f, ai[0], clamped: true));
		rotation = velocity.ToRotation();
		if (Main.rand.Next(6) == 0)
		{
			Dust dust = Dust.NewDustPerfect(base.Center, 267);
			dust.fadeIn = 1f;
			dust.noGravity = true;
			dust.alpha = 100;
			dust.color = GetFairyQueenWeaponsColor(1f, Main.rand.NextFloat() * 0.4f);
			dust.noLightEmittence = true;
			dust.scale *= 1.5f;
		}
	}

	private void AI_009_MagicMissiles()
	{
		if (type == 491)
		{
			AI_009_MagicMissiles_Old();
			return;
		}
		int num = 32;
		Player player = Main.player[owner];
		int num2 = Main.maxTilesY * 16;
		int num3 = 0;
		if (ai[0] >= 0f)
		{
			num3 = (int)(ai[1] / (float)num2);
		}
		bool flag = ai[0] == -1f || ai[0] == -2f;
		if (type == 34)
		{
			if (frameCounter++ >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (penetrate == 1 && ai[0] >= 0f && num3 == 0)
			{
				ai[1] += num2;
				num3 = 1;
				netUpdate = true;
			}
			if (penetrate == 1 && ai[0] == -1f)
			{
				ai[0] = -2f;
				netUpdate = true;
			}
			if (num3 > 0 || ai[0] == -2f)
			{
				localAI[0] += 1f;
			}
		}
		if (owner == Main.myPlayer)
		{
			if (ai[0] >= 0f)
			{
				if (player.channel)
				{
					Vector2 pointPoisition = Main.MouseWorld;
					player.LimitPointToPlayerReachableArea(ref pointPoisition);
					if (ai[0] != pointPoisition.X || ai[1] != pointPoisition.Y)
					{
						netUpdate = true;
						ai[0] = pointPoisition.X;
						ai[1] = pointPoisition.Y + (float)(num2 * num3);
					}
				}
				else
				{
					netUpdate = true;
					ai[0] = -1f;
					ai[1] = -1f;
					int num4 = FindTargetWithLineOfSight();
					if (num4 != -1)
					{
						ai[1] = num4;
					}
					else if (velocity.Length() < 2f)
					{
						velocity = DirectionFrom(player.Center) * num;
					}
					else
					{
						velocity = velocity.SafeNormalize(Vector2.Zero) * num;
					}
				}
			}
			if (flag && ai[1] == -1f)
			{
				int num5 = FindTargetWithLineOfSight();
				if (num5 != -1)
				{
					ai[1] = num5;
					netUpdate = true;
				}
			}
		}
		Vector2? vector = null;
		float amount = 1f;
		if (ai[0] > 0f && ai[1] > 0f)
		{
			vector = new Vector2(ai[0], ai[1] % (float)num2);
		}
		if (flag && ai[1] >= 0f)
		{
			int num6 = (int)ai[1];
			if (Main.npc.IndexInRange(num6))
			{
				NPC nPC = Main.npc[num6];
				if (nPC.CanBeChasedBy(this))
				{
					vector = nPC.Center;
					float t = Distance(vector.Value);
					float num7 = Utils.GetLerpValue(0f, 100f, t, clamped: true) * Utils.GetLerpValue(600f, 400f, t, clamped: true);
					amount = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - num7, clamped: true));
				}
				else
				{
					ai[1] = -1f;
					netUpdate = true;
				}
			}
		}
		bool flag2 = false;
		if (flag)
		{
			flag2 = true;
		}
		if (vector.HasValue)
		{
			Vector2 value = vector.Value;
			if (Distance(value) >= 64f)
			{
				flag2 = true;
				Vector2 v = value - base.Center;
				Vector2 vector2 = v.SafeNormalize(Vector2.Zero);
				float num8 = Math.Min(num, v.Length());
				Vector2 value2 = vector2 * num8;
				if (velocity.Length() < 4f)
				{
					velocity += velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.78539818525314331).SafeNormalize(Vector2.Zero) * 4f;
				}
				if (velocity.HasNaNs())
				{
					Kill();
				}
				velocity = Vector2.Lerp(velocity, value2, amount);
			}
			else
			{
				velocity *= 0.3f;
				velocity += (value - base.Center) * 0.3f;
				flag2 = velocity.Length() >= 2f;
			}
			if (timeLeft < 60)
			{
				timeLeft = 60;
			}
		}
		if (flag && ai[1] < 0f)
		{
			if (velocity.Length() != (float)num)
			{
				velocity = velocity.MoveTowards(velocity.SafeNormalize(Vector2.UnitY) * num, 4f);
			}
			if (timeLeft > 300)
			{
				timeLeft = 300;
			}
		}
		if (flag2 && velocity != Vector2.Zero)
		{
			rotation = rotation.AngleTowards(velocity.ToRotation(), (float)Math.PI / 4f);
		}
		else
		{
			rotation = rotation.AngleLerp(0f, 0.2f);
		}
		bool flag3 = velocity.Length() > 0.1f && Vector2.Dot(oldVelocity.SafeNormalize(Vector2.Zero), velocity.SafeNormalize(Vector2.Zero)) < 0.2f;
		if (type == 16)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			if (Main.rand.Next(9) == 0)
			{
				int num9 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num9].velocity *= 0.3f;
				Main.dust[num9].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
				Main.dust[num9].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
				Main.dust[num9].noGravity = true;
				Main.dust[num9].velocity += Main.rand.NextVector2Circular(2f, 2f);
			}
			if (flag3)
			{
				int num10 = Main.rand.Next(2, 5);
				for (int i = 0; i < num10; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100, default(Color), 1.5f);
					dust.velocity *= 0.3f;
					dust.position = base.Center;
					dust.noGravity = true;
					dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust.fadeIn = 2.2f;
				}
			}
		}
		if (type != 34)
		{
			return;
		}
		float lerpValue = Utils.GetLerpValue(0f, 10f, localAI[0], clamped: true);
		Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
		if (Main.rand.Next(6) == 0)
		{
			Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 3.5f);
			dust2.noGravity = true;
			dust2.velocity *= 1.4f;
			dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
			dust2.velocity += velocity * 0.15f;
		}
		if (Main.rand.Next(12) == 0)
		{
			Dust dust3 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 1.5f);
			dust3.velocity += Main.rand.NextVector2Circular(1f, 1f);
			dust3.velocity += velocity * 0.15f;
		}
		if (flag3)
		{
			int num11 = Main.rand.Next(2, 5 + (int)(lerpValue * 4f));
			for (int j = 0; j < num11; j++)
			{
				Dust dust4 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, newColor, 1.5f);
				dust4.velocity *= 0.3f;
				dust4.position = base.Center;
				dust4.noGravity = true;
				dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust4.fadeIn = 2.2f;
				dust4.position += (dust4.position - base.Center) * lerpValue * 10f;
			}
		}
	}

	private void AI_009_MagicMissiles_Old()
	{
		if (Main.myPlayer == owner && ai[0] <= 0f)
		{
			if (Main.player[owner].channel)
			{
				float num = 12f;
				if (type == 16)
				{
					num = 15f;
				}
				if (type == 491)
				{
					num = 20f;
				}
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num2 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num3 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (Main.player[owner].gravDir == -1f)
				{
					num3 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				if (ai[0] < 0f)
				{
					ai[0] += 1f;
				}
				if (type == 491 && num4 < 100f)
				{
					if (velocity.Length() < num)
					{
						velocity *= 1.1f;
						if (velocity.Length() > num)
						{
							velocity.Normalize();
							velocity *= num;
						}
					}
					if (ai[0] == 0f)
					{
						ai[0] = -10f;
					}
				}
				else if (num4 > num)
				{
					num4 = num / num4;
					num2 *= num4;
					num3 *= num4;
					int num5 = (int)(num2 * 1000f);
					int num6 = (int)(velocity.X * 1000f);
					int num7 = (int)(num3 * 1000f);
					int num8 = (int)(velocity.Y * 1000f);
					if (num5 != num6 || num7 != num8)
					{
						netUpdate = true;
					}
					if (type == 491)
					{
						Vector2 vector2 = new Vector2(num2, num3);
						velocity = (velocity * 4f + vector2) / 5f;
					}
					else
					{
						velocity.X = num2;
						velocity.Y = num3;
					}
				}
				else
				{
					int num9 = (int)(num2 * 1000f);
					int num10 = (int)(velocity.X * 1000f);
					int num11 = (int)(num3 * 1000f);
					int num12 = (int)(velocity.Y * 1000f);
					if (num9 != num10 || num11 != num12)
					{
						netUpdate = true;
					}
					velocity.X = num2;
					velocity.Y = num3;
				}
			}
			else if (ai[0] <= 0f)
			{
				netUpdate = true;
				if (type != 491)
				{
					Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num13 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
					float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num14 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector3.Y;
					}
					float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
					if (num15 == 0f || ai[0] < 0f)
					{
						vector3 = new Vector2(Main.player[owner].position.X + (float)(Main.player[owner].width / 2), Main.player[owner].position.Y + (float)(Main.player[owner].height / 2));
						num13 = position.X + (float)width * 0.5f - vector3.X;
						num14 = position.Y + (float)height * 0.5f - vector3.Y;
						num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
					}
					num15 = 12f / num15;
					num13 *= num15;
					num14 *= num15;
					velocity.X = num13;
					velocity.Y = num14;
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						Kill();
					}
				}
				ai[0] = 1f;
			}
		}
		bool flag = false;
		if (type == 491)
		{
			localAI[0] += 1f;
			if (ai[0] > 0f && localAI[0] > 15f)
			{
				tileCollide = false;
				Vector2 vector4 = Main.player[owner].Center - base.Center;
				if (vector4.Length() < 20f)
				{
					Kill();
				}
				vector4.Normalize();
				vector4 *= 25f;
				velocity = (velocity * 5f + vector4) / 6f;
			}
			flag = true;
			if (ai[0] < 0f || (velocity.X == 0f && velocity.Y == 0f))
			{
				rotation += 0.3f;
			}
			else if (ai[0] > 0f)
			{
				rotation += 0.3f * (float)direction;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
			if (Vector2.Distance(base.Center, Main.player[owner].Center) > 2000f)
			{
				Kill();
			}
			if (Main.rand.Next(2) == 0)
			{
				int num16 = Main.rand.Next(3);
				int num17 = Dust.NewDust(position, width, height, num16 switch
				{
					0 => 15, 
					1 => 57, 
					_ => 58, 
				}, velocity.X * 0.25f, velocity.Y * 0.25f, 255, default(Color), 0.7f);
				Main.dust[num17].velocity *= 0.25f;
				Main.dust[num17].position = (Main.dust[num17].position + position) / 2f;
			}
		}
		if (type == 79)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			for (int i = 0; i < 1; i++)
			{
				int num18 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
				Main.dust[num18].velocity *= 0.1f;
				Main.dust[num18].velocity += velocity * 0.2f;
				Main.dust[num18].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-2, 3);
				Main.dust[num18].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-2, 3);
				Main.dust[num18].noGravity = true;
			}
		}
		if (type == 16)
		{
			if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
			{
				soundDelay = 10;
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			if (Main.rand.Next(9) == 0)
			{
				int num19 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num19].velocity *= 0.3f;
				Main.dust[num19].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
				Main.dust[num19].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
				Main.dust[num19].noGravity = true;
				Main.dust[num19].velocity += Main.rand.NextVector2Circular(2f, 2f);
			}
			flag = true;
			if (velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation();
			}
		}
		if (type == 34)
		{
			if (Main.rand.Next(12) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 3.5f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
				dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust.velocity += velocity * 0.15f;
			}
			if (Main.rand.Next(24) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
				dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust2.velocity += velocity * 0.15f;
			}
			flag = true;
			if (velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation();
			}
		}
		if (!flag && velocity != Vector2.Zero)
		{
			rotation = velocity.ToRotation() - (float)Math.PI + (float)Math.PI / 4f;
		}
		if (velocity.Y > 16f)
		{
			velocity.Y = 16f;
		}
	}

	private void AI_015_HandleMovementCollision(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
	{
		int num = 10;
		int num2 = 0;
		Vector2 vector = velocity;
		float num3 = 0.2f;
		if (ai[0] == 1f || ai[0] == 5f)
		{
			num3 = 0.4f;
		}
		if (ai[0] == 6f)
		{
			num3 = 0f;
		}
		if (lastVelocity.X != velocity.X)
		{
			if (Math.Abs(lastVelocity.X) > 4f)
			{
				num2 = 1;
			}
			velocity.X = (0f - lastVelocity.X) * num3;
			localAI[0] += 1f;
		}
		if (lastVelocity.Y != velocity.Y)
		{
			if (Math.Abs(lastVelocity.Y) > 4f)
			{
				num2 = 1;
			}
			velocity.Y = (0f - lastVelocity.Y) * num3;
			localAI[0] += 1f;
		}
		if (ai[0] == 1f)
		{
			ai[0] = 5f;
			localNPCHitCooldown = num;
			netUpdate = true;
			Point scanAreaStart = base.TopLeft.ToTileCoordinates();
			Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
			num2 = 2;
			CreateImpactExplosion(2, base.Center, ref scanAreaStart, ref scanAreaEnd, width, out var causedShockwaves);
			CreateImpactExplosion2_FlailTileCollision(base.Center, causedShockwaves, vector);
			position -= vector;
		}
		if (num2 > 0)
		{
			netUpdate = true;
			for (int i = 0; i < num2; i++)
			{
				Collision.HitTiles(position, vector, width, height);
			}
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
		}
		if (ai[0] != 3f && ai[0] != 0f && ai[0] != 5f && ai[0] != 6f && localAI[0] >= 10f)
		{
			ai[0] = 4f;
			netUpdate = true;
		}
		if (wet)
		{
			wetVelocity = velocity;
		}
	}

	private void ResetLocalNPCHitImmunity()
	{
		for (int i = 0; i < 200; i++)
		{
			localNPCImmunity[i] = 0;
		}
	}

	private void AI_015_Flails()
	{
		Player player = Main.player[owner];
		if (!player.active || player.dead || player.noItems || player.CCed || Vector2.Distance(base.Center, player.Center) > 900f)
		{
			Kill();
			return;
		}
		if (Main.myPlayer == owner && Main.mapFullscreen)
		{
			Kill();
			return;
		}
		if (type == 948 && wet && !lavaWet)
		{
			type = 947;
			netUpdate = true;
		}
		Vector2 mountedCenter = player.MountedCenter;
		bool doFastThrowDust = false;
		bool flag = true;
		bool flag2 = false;
		int num = 10;
		float num2 = 24f;
		float num3 = 800f;
		float num4 = 3f;
		float num5 = 16f;
		float num6 = 6f;
		float num7 = 48f;
		float num8 = 1f;
		float num9 = 14f;
		int num10 = 60;
		int num11 = 10;
		int num12 = 20;
		int num13 = 10;
		int num14 = num + 5;
		switch (type)
		{
		case 947:
		case 948:
			num = 13;
			num2 = 12f;
			num5 = 8f;
			num7 = 13f;
			break;
		case 25:
			num = 15;
			num2 = 14f;
			num5 = 10f;
			num7 = 15f;
			break;
		case 154:
			num = 15;
			num2 = 15f;
			num5 = 11f;
			num7 = 16f;
			break;
		case 26:
			num = 15;
			num2 = 16f;
			num5 = 12f;
			num7 = 16f;
			break;
		case 35:
			num = 15;
			num2 = 17f;
			num5 = 14f;
			num7 = 18f;
			break;
		case 63:
			num = 13;
			num2 = 21f;
			num5 = 20f;
			num7 = 24f;
			num12 = 15;
			break;
		case 757:
			num = 13;
			num2 = 22f;
			num5 = 22f;
			num7 = 26f;
			num12 = 15;
			break;
		case 247:
			num = 13;
			num2 = 23f;
			num12 = 15;
			break;
		}
		float meleeSpeed = player.meleeSpeed;
		float num15 = 1f / meleeSpeed;
		num2 *= num15;
		num8 *= num15;
		num9 *= num15;
		num4 *= num15;
		num5 *= num15;
		num6 *= num15;
		num7 *= num15;
		float num16 = num2 * (float)num;
		float num17 = num16 + 160f;
		localNPCHitCooldown = num11;
		switch ((int)ai[0])
		{
		case 0:
		{
			flag2 = true;
			if (owner == Main.myPlayer)
			{
				Vector2 origin = mountedCenter;
				Vector2 mouseWorld = Main.MouseWorld;
				Vector2 vector3 = origin.DirectionTo(mouseWorld).SafeNormalize(Vector2.UnitX * player.direction);
				player.ChangeDir((vector3.X > 0f) ? 1 : (-1));
				if (!player.channel)
				{
					ai[0] = 1f;
					ai[1] = 0f;
					velocity = vector3 * num2 + player.velocity;
					base.Center = mountedCenter;
					netUpdate = true;
					ResetLocalNPCHitImmunity();
					localNPCHitCooldown = num13;
					break;
				}
			}
			localAI[1] += 1f;
			Vector2 vector4 = new Vector2(player.direction).RotatedBy((float)Math.PI * 10f * (localAI[1] / 60f) * (float)player.direction);
			vector4.Y *= 0.8f;
			if (vector4.Y * player.gravDir > 0f)
			{
				vector4.Y *= 0.5f;
			}
			base.Center = mountedCenter + vector4 * 30f;
			velocity = Vector2.Zero;
			localNPCHitCooldown = num12;
			break;
		}
		case 1:
		{
			doFastThrowDust = true;
			bool flag4 = ai[1]++ >= (float)num;
			flag4 |= Distance(mountedCenter) >= num3;
			if (player.controlUseItem)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.2f;
				if (Main.myPlayer == owner && type == 757)
				{
					NewProjectile(base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
				}
				break;
			}
			if (flag4)
			{
				ai[0] = 2f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.3f;
				if (Main.myPlayer == owner && type == 757)
				{
					NewProjectile(base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
				}
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			localNPCHitCooldown = num13;
			break;
		}
		case 2:
		{
			Vector2 vector2 = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
			if (Distance(mountedCenter) <= num5)
			{
				Kill();
				return;
			}
			if (player.controlUseItem)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
				velocity *= 0.2f;
			}
			else
			{
				velocity *= 0.98f;
				velocity = velocity.MoveTowards(vector2 * num5, num4);
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			}
			break;
		}
		case 3:
		{
			if (!player.controlUseItem)
			{
				ai[0] = 4f;
				ai[1] = 0f;
				netUpdate = true;
				break;
			}
			float num18 = Distance(mountedCenter);
			tileCollide = ai[1] == 1f;
			bool flag3 = num18 <= num16;
			if (flag3 != tileCollide)
			{
				tileCollide = flag3;
				ai[1] = (tileCollide ? 1 : 0);
				netUpdate = true;
			}
			if (num18 > (float)num10)
			{
				if (num18 >= num16)
				{
					velocity *= 0.5f;
					velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num9);
				}
				velocity *= 0.98f;
				velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num8);
			}
			else
			{
				if (velocity.Length() < 6f)
				{
					velocity.X *= 0.96f;
					velocity.Y += 0.2f;
				}
				if (player.velocity.X == 0f)
				{
					velocity.X *= 0.96f;
				}
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			break;
		}
		case 4:
		{
			tileCollide = false;
			Vector2 vector = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
			if (Distance(mountedCenter) <= num7)
			{
				Kill();
				return;
			}
			velocity *= 0.98f;
			velocity = velocity.MoveTowards(vector * num7, num6);
			Vector2 target = base.Center + velocity;
			Vector2 value = mountedCenter.DirectionFrom(target).SafeNormalize(Vector2.Zero);
			if (Vector2.Dot(vector, value) < 0f)
			{
				Kill();
				return;
			}
			player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			break;
		}
		case 5:
			if (ai[1]++ >= (float)num14)
			{
				ai[0] = 6f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else
			{
				localNPCHitCooldown = num13;
				velocity.Y += 0.6f;
				velocity.X *= 0.95f;
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			}
			break;
		case 6:
			if (!player.controlUseItem || Distance(mountedCenter) > num17)
			{
				ai[0] = 4f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else
			{
				velocity.Y += 0.8f;
				velocity.X *= 0.95f;
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
			}
			break;
		}
		int num19 = type;
		if (num19 == 247)
		{
			flag = false;
			float num20 = (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			rotation += ((velocity.X > 0f) ? num20 : (0f - num20));
			if (ai[0] == 0f)
			{
				rotation += (float)Math.PI * 2f / 15f * (float)player.direction;
			}
			float num21 = 600f;
			NPC nPC = null;
			if (owner == Main.myPlayer)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 20f)
				{
					localAI[0] = 17f;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC2 = Main.npc[i];
						if (nPC2.CanBeChasedBy(this))
						{
							float num22 = Distance(nPC2.Center);
							if (!(num22 >= num21) && Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height))
							{
								nPC = nPC2;
								num21 = num22;
							}
						}
					}
				}
				if (nPC != null)
				{
					localAI[0] = 0f;
					float num23 = 14f;
					Vector2 center = base.Center;
					Vector2 vector5 = center.DirectionTo(nPC.Center) * num23;
					NewProjectile(center, vector5, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
				}
			}
		}
		direction = ((velocity.X > 0f) ? 1 : (-1));
		spriteDirection = direction;
		ownerHitCheck = flag2;
		if (flag)
		{
			if (velocity.Length() > 1f)
			{
				rotation = velocity.ToRotation() + velocity.X * 0.1f;
			}
			else
			{
				rotation += velocity.X * 0.1f;
			}
		}
		timeLeft = 2;
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
		player.itemRotation = DirectionFrom(mountedCenter).ToRotation();
		if (base.Center.X < mountedCenter.X)
		{
			player.itemRotation += (float)Math.PI;
		}
		player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
		AI_015_Flails_Dust(doFastThrowDust);
	}

	private void AI_015_HandleMovementCollision_Old(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
	{
		bool flag = false;
		if (lastVelocity.X != velocity.X)
		{
			if (Math.Abs(lastVelocity.X) > 4f)
			{
				flag = true;
			}
			position.X += velocity.X;
			velocity.X = (0f - lastVelocity.X) * 0.2f;
		}
		if (lastVelocity.Y != velocity.Y)
		{
			if (Math.Abs(lastVelocity.Y) > 4f)
			{
				flag = true;
			}
			position.Y += velocity.Y;
			velocity.Y = (0f - lastVelocity.Y) * 0.2f;
		}
		ai[0] = 1f;
		if (flag)
		{
			netUpdate = true;
			Collision.HitTiles(position, velocity, width, height);
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
		}
		if (wet)
		{
			wetVelocity = velocity;
		}
	}

	private void AI_015_Flails_Old()
	{
		AI_015_Flails_Dust(doFastThrowDust: false);
		bool flag = Main.player[owner].dead;
		if (!flag)
		{
			flag = (Main.player[owner].Center - base.Center).Length() > 2000f;
		}
		if (flag)
		{
			Kill();
			return;
		}
		Main.player[owner].SetDummyItemTime(10);
		if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
		{
			Main.player[owner].ChangeDir(1);
			direction = 1;
		}
		else
		{
			Main.player[owner].ChangeDir(-1);
			direction = -1;
		}
		Vector2 mountedCenter = Main.player[owner].MountedCenter;
		Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num = mountedCenter.X - vector.X;
		float num2 = mountedCenter.Y - vector.Y;
		float num3 = (float)Math.Sqrt(num * num + num2 * num2);
		if (ai[0] == 0f)
		{
			float num4 = 160f;
			if (type == 63)
			{
				num4 *= 1.5f;
			}
			if (type == 247)
			{
				num4 *= 1.5f;
			}
			if (type == 757)
			{
				num4 *= 1.5f;
			}
			tileCollide = true;
			if (num3 > num4)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			else if (!Main.player[owner].channel)
			{
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.9f;
				}
				velocity.Y += 1f;
				velocity.X *= 0.9f;
			}
		}
		else if (ai[0] == 1f)
		{
			float meleeSpeed = Main.player[owner].meleeSpeed;
			float num5 = 14f / meleeSpeed;
			float num6 = 0.9f / meleeSpeed;
			float num7 = 300f / meleeSpeed;
			int num8 = 60;
			if (type == 63)
			{
				num7 *= 1.5f;
				num5 *= 1.5f;
				num6 *= 1.5f;
			}
			if (type == 247)
			{
				num7 *= 1.5f;
				num5 = 15.9f;
				num6 *= 2f;
				num8 = 100;
			}
			if (type == 757)
			{
				num7 *= 1.5f;
				num5 = 15.9f;
				num6 *= 2f;
				num8 = 100;
			}
			Math.Abs(num);
			Math.Abs(num2);
			if (ai[1] == 1f)
			{
				tileCollide = false;
			}
			if (!Main.player[owner].channel || num3 > num7 || !tileCollide)
			{
				ai[1] = 1f;
				if (tileCollide)
				{
					netUpdate = true;
				}
				tileCollide = false;
				if (num3 < 20f)
				{
					Kill();
				}
			}
			if (!tileCollide)
			{
				num6 *= 2f;
			}
			if (num3 > (float)num8 || !tileCollide)
			{
				num3 = num5 / num3;
				num *= num3;
				num2 *= num3;
				new Vector2(velocity.X, velocity.Y);
				float num9 = num - velocity.X;
				float num10 = num2 - velocity.Y;
				float num11 = (float)Math.Sqrt(num9 * num9 + num10 * num10);
				num11 = num6 / num11;
				num9 *= num11;
				num10 *= num11;
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				velocity.X += num9;
				velocity.Y += num10;
			}
			else
			{
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 6f)
				{
					velocity.X *= 0.96f;
					velocity.Y += 0.2f;
				}
				if (Main.player[owner].velocity.X == 0f)
				{
					velocity.X *= 0.96f;
				}
			}
		}
		if (type == 247)
		{
			if (velocity.X < 0f)
			{
				rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
			}
			float num12 = position.X;
			float num13 = position.Y;
			float num14 = 600f;
			bool flag2 = false;
			if (owner == Main.myPlayer)
			{
				localAI[1] += 1f;
				if (localAI[1] > 20f)
				{
					localAI[1] = 20f;
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].CanBeChasedBy(this))
						{
							float num15 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
							float num16 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
							float num17 = Math.Abs(position.X + (float)(width / 2) - num15) + Math.Abs(position.Y + (float)(height / 2) - num16);
							if (num17 < num14 && Collision.CanHit(position, width, height, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
							{
								num14 = num17;
								num12 = num15;
								num13 = num16;
								flag2 = true;
							}
						}
					}
				}
			}
			if (flag2)
			{
				localAI[1] = 0f;
				vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				num = num12 - vector.X;
				num2 = num13 - vector.Y;
				num3 = (float)Math.Sqrt(num * num + num2 * num2);
				num3 = 14f / num3;
				num *= num3;
				num2 *= num3;
				NewProjectile(vector.X, vector.Y, num, num2, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
			}
		}
		else
		{
			rotation = (float)Math.Atan2(num2, num) - velocity.X * 0.1f;
		}
	}

	private void AI_015_Flails_Dust(bool doFastThrowDust)
	{
		if (type == 25)
		{
			int maxValue = 15;
			if (doFastThrowDust)
			{
				maxValue = 1;
			}
			if (Main.rand.Next(maxValue) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.3f);
			}
		}
		else if (type == 757)
		{
			int num = 4;
			if (velocity.Length() < 8f)
			{
				num = 10;
			}
			if (doFastThrowDust)
			{
				num /= 2;
			}
			for (int i = 0; i < 2; i++)
			{
				if (Main.rand.Next(num) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 0, default(Color), 0.8f);
					dust.velocity += velocity / 4f;
					dust.fadeIn = 1.3f;
				}
			}
			num = 40;
			if (doFastThrowDust)
			{
				num /= 2;
			}
			for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
			{
				if (Main.rand.Next(num) == 0)
				{
					Dust.NewDustDirect(Vector2.Lerp(Main.player[owner].Center, base.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, 0f, 0f, 0, default(Color), 1.3f).velocity += velocity / 4f;
				}
			}
		}
		else if (type == 26)
		{
			int num3 = Dust.NewDust(position, width, height, 172, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
			Main.dust[num3].noGravity = true;
			Main.dust[num3].velocity.X /= 2f;
			Main.dust[num3].velocity.Y /= 2f;
		}
		else if (type == 948 && !wet)
		{
			int num4 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.2f);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].velocity.X *= 4f;
			Main.dust[num4].velocity.Y *= 4f;
			Main.dust[num4].velocity = (Main.dust[num4].velocity + velocity) / 2f;
		}
		else if (type == 35)
		{
			int num5 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3f);
			Main.dust[num5].noGravity = true;
			Main.dust[num5].velocity.X *= 2f;
			Main.dust[num5].velocity.Y *= 2f;
		}
		else if (type == 154)
		{
			int num6 = Dust.NewDust(position, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140, default(Color), 1.5f);
			Main.dust[num6].noGravity = true;
			Main.dust[num6].velocity *= 0.25f;
		}
	}

	private void AI_100_Medusa()
	{
		Player player = Main.player[owner];
		Vector2 zero = Vector2.Zero;
		if (type == 535)
		{
			zero.X = (float)player.direction * 6f;
			zero.Y = player.gravDir * -14f;
			bool flag = true;
			bool flag2 = ai[0] > 0f;
			if (!player.dead)
			{
				timeLeft = 3;
			}
			if (ai[0] > 0f)
			{
				ai[0] -= 1f;
			}
			if (flag2)
			{
				if (frame < 8)
				{
					frame = 8;
				}
				if (frame >= 12)
				{
					frame = 8;
				}
				frameCounter++;
				if (++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 12)
					{
						frame = 8;
					}
				}
			}
			else if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 8)
				{
					frame = 0;
				}
			}
			Vector2 center = player.Center;
			Vector2 vector = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - center;
			if (player.gravDir == -1f)
			{
				vector.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center.Y;
			}
			Vector2 vector2 = new Vector2(Math.Sign((vector.X == 0f) ? ((float)player.direction) : vector.X), 0f);
			if (vector2.X != velocity.X || vector2.Y != velocity.Y)
			{
				netUpdate = true;
			}
			velocity = vector2;
			if (flag2 && soundDelay == 0)
			{
				SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
			}
			soundDelay = (flag2 ? 4 : 0);
			if (Main.myPlayer == owner)
			{
				Vector2 position = player.Center + new Vector2(player.direction * 4, player.gravDir * 2f);
				if (!player.channel)
				{
					Kill();
					return;
				}
				if (!flag2 || ai[0] % 15f == 0f)
				{
					bool flag3 = false;
					for (int i = 0; i < 200; i++)
					{
						NPC nPC = Main.npc[i];
						if (nPC.active && Distance(nPC.Center) < 320f && nPC.CanBeChasedBy(this) && Collision.CanHitLine(nPC.position, nPC.width, nPC.height, position, 0, 0))
						{
							flag3 = true;
							break;
						}
					}
					if (flag3)
					{
						bool flag4 = false;
						if (!flag || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true))
						{
							int num = damage;
							position = base.Center;
							int num2 = 0;
							float num3 = 0f;
							_medusaHeadTargetList.Clear();
							for (int j = 0; j < 200; j++)
							{
								NPC nPC2 = Main.npc[j];
								float num4 = Distance(nPC2.Center);
								if (nPC2.active && num4 < 320f && nPC2.CanBeChasedBy(this) && Collision.CanHitLine(nPC2.position, nPC2.width, nPC2.height, position, 0, 0))
								{
									_medusaHeadTargetList.Add(Tuple.Create(j, num4));
								}
							}
							_medusaHeadTargetList.Sort(_medusaTargetComparer);
							for (int k = 0; k < _medusaHeadTargetList.Count && k < 3; k++)
							{
								Tuple<int, float> tuple = _medusaHeadTargetList[k];
								NPC nPC3 = Main.npc[tuple.Item1];
								Vector2 v = nPC3.Center - position;
								num3 += v.ToRotation();
								num2++;
								int num5 = NewProjectile(position.X, position.Y, v.X, v.Y, 536, 0, 0f, owner, whoAmI);
								Main.projectile[num5].Center = nPC3.Center;
								Main.projectile[num5].damage = num;
								Main.projectile[num5].Damage();
								Main.projectile[num5].damage = 0;
								Main.projectile[num5].Center = position;
								ai[0] = 180f;
							}
							num3 = ((num2 == 0) ? ((player.direction == 1) ? 0f : ((float)Math.PI)) : (num3 / (float)num2));
							for (int l = 0; l < 4; l++)
							{
								Vector2 zero2 = Vector2.Zero;
								zero2 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(num3) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
								NewProjectile(position.X, position.Y, zero2.X, zero2.Y, 536, 0, 0f, owner, whoAmI);
							}
							ai[0] = 60f;
							netUpdate = true;
						}
					}
				}
			}
			Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
		}
		rotation = ((player.gravDir == 1f) ? 0f : ((float)Math.PI));
		spriteDirection = direction;
		timeLeft = 2;
		Vector2 vector3 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
		if (player.direction != 1)
		{
			vector3.X = (float)player.bodyFrame.Width - vector3.X;
		}
		vector3 -= (player.bodyFrame.Size() - new Vector2(player.width, 42f)) / 2f;
		base.Center = (player.position + vector3 + zero - velocity).Floor();
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
	}

	private void AI_120_StardustGuardian()
	{
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		bool flag = type == 623;
		Vector2 vector = player.Center;
		float num = 100f;
		float num2 = 500f;
		float num3 = 500f;
		float num4 = 100f;
		bool flag2 = true;
		if (flag)
		{
			if (player.dead)
			{
				player.stardustGuardian = false;
			}
			if (player.stardustGuardian)
			{
				timeLeft = 2;
			}
			num = 150f;
			vector.X -= (5 + player.width / 2) * player.direction;
			vector.Y -= 25f;
			Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
			if (ai[0] != 3f && alpha == 255)
			{
				alpha = 0;
				for (int i = 0; i < 30; i++)
				{
					int num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 3f;
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num5].velocity *= 2f;
					Main.dust[num5].noGravity = true;
					Main.dust[num5].fadeIn = 2.5f;
					Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
		}
		if (ai[0] != 0f)
		{
			Main.player[owner].tankPet = whoAmI;
			Main.player[owner].tankPetReset = false;
		}
		if (ai[0] == 0f)
		{
			base.Center = Vector2.Lerp(base.Center, vector, 0.05f);
			velocity *= 0.5f;
			direction = (spriteDirection = player.direction);
			if (flag && ++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= 8)
				{
					frame = 0;
				}
			}
			int targetNPCIndex = -1;
			float distanceToClosestTarget = num2;
			bool flag3 = flag2;
			if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
			{
				flag3 = false;
			}
			if (flag3)
			{
				AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex, ref distanceToClosestTarget);
			}
			if (targetNPCIndex != -1)
			{
				NPC nPC = Main.npc[targetNPCIndex];
				direction = (spriteDirection = (nPC.Center.X > base.Center.X).ToDirectionInt());
				float num6 = Math.Abs(vector.X - base.Center.X);
				float num7 = Math.Abs(nPC.Center.X - base.Center.X);
				float num8 = Math.Abs(vector.Y - base.Center.Y);
				float num9 = Math.Abs(nPC.Center.Y - base.Bottom.Y);
				float num10 = (nPC.Center.Y > base.Bottom.Y).ToDirectionInt();
				if ((num6 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num7 > 20f && num7 < num - num6 + 100f)
				{
					velocity.X += 0.1f * (float)direction;
				}
				else
				{
					velocity.X *= 0.7f;
				}
				if ((num8 < num4 || (vector.Y - base.Bottom.Y) * num10 < 0f) && num9 > 10f && num9 < num4 - num8 + 10f)
				{
					velocity.Y += 0.1f * num10;
				}
				else
				{
					velocity.Y *= 0.7f;
				}
				if (owner == Main.myPlayer && num7 < num3)
				{
					ai[0] = 2f;
					ai[1] = targetNPCIndex;
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			if (player.HasMinionRestTarget)
			{
				vector = player.MinionRestTargetPoint;
			}
			else
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			int targetNPCIndex2 = -1;
			float distanceToClosestTarget2 = num2;
			bool flag4 = true;
			if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
			{
				flag4 = false;
			}
			if (flag4)
			{
				AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex2, ref distanceToClosestTarget2);
			}
			if (targetNPCIndex2 != -1)
			{
				NPC nPC2 = Main.npc[targetNPCIndex2];
				direction = (spriteDirection = (nPC2.Center.X > base.Center.X).ToDirectionInt());
				float num11 = Math.Abs(vector.X - base.Center.X);
				float num12 = Math.Abs(nPC2.Center.X - base.Center.X);
				float num13 = Math.Abs(vector.Y - base.Center.Y);
				float num14 = Math.Abs(nPC2.Center.Y - base.Bottom.Y);
				float num15 = (nPC2.Center.Y > base.Bottom.Y).ToDirectionInt();
				if ((num11 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num12 > 20f && num12 < num - num11 + 100f)
				{
					velocity.X += 0.1f * (float)direction;
				}
				else
				{
					velocity.X *= 0.7f;
				}
				if ((num13 < num4 || (vector.Y - base.Bottom.Y) * num15 < 0f) && num14 > 10f && num14 < num4 - num13 + 10f)
				{
					velocity.Y += 0.1f * num15;
				}
				else
				{
					velocity.Y *= 0.7f;
				}
				if (owner == Main.myPlayer && num12 < num3)
				{
					ai[0] = 2f;
					ai[1] = targetNPCIndex2;
					netUpdate = true;
				}
			}
			else
			{
				if (Math.Abs(vector.X - base.Center.X) > num + 40f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				else if (Math.Abs(vector.X - base.Center.X) > 20f)
				{
					direction = (spriteDirection = (vector.X > base.Center.X).ToDirectionInt());
					velocity.X += 0.06f * (float)direction;
				}
				else
				{
					velocity.X *= 0.8f;
					direction = (spriteDirection = (player.Center.X < base.Center.X).ToDirectionInt());
				}
				if (Math.Abs(vector.Y - base.Center.Y) > num4)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				else if (Math.Abs(vector.Y - base.Center.Y) > 10f)
				{
					velocity.Y += 0.06f * (float)Math.Sign(vector.Y - base.Center.Y);
				}
				else
				{
					velocity.Y *= 0.8f;
				}
			}
			if (flag && ++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type] - 4)
				{
					frame = 0;
				}
			}
		}
		else if (ai[0] == 2f)
		{
			if (flag)
			{
				int num16 = 3;
				if (frame < 12)
				{
					frame = 12;
				}
				if (frame == 12 || frame == 13)
				{
					num16 = 8;
				}
				if (++frameCounter >= num16)
				{
					frameCounter = 0;
					if (++frame >= 19)
					{
						frame = 14;
					}
				}
			}
			bool flag5 = false;
			if (flag2)
			{
				flag5 = Distance(player.Center) < num2;
			}
			NPC nPC3 = null;
			int num17 = (int)ai[1];
			if (Main.npc.IndexInRange(num17))
			{
				nPC3 = Main.npc[num17];
				if (!nPC3.CanBeChasedBy(this) || Distance(nPC3.Center) > num3)
				{
					nPC3 = null;
				}
			}
			if (!flag5 || nPC3 == null)
			{
				ai[1] = 0f;
				ai[0] = 0f;
				netUpdate = true;
				if (frame < 18)
				{
					frame = 18;
				}
			}
			else
			{
				int num18 = (((nPC3.Center - player.Center).X > 1f) ? 1 : (-1));
				Vector2 targetPosition = nPC3.Center + new Vector2((float)(-num18) * ((float)nPC3.width * 0.5f + 70f), -10f) - base.Center;
				float maxAmountAllowedToMove = 6f * Utils.Remap(targetPosition.Length(), 50f, 400f, 1f, 4f);
				int num19 = 32;
				Vector2 targetPosition2 = Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove);
				velocity = velocity.MoveTowards(targetPosition2, num19);
				direction = (spriteDirection = num18);
				if (localAI[0]++ >= 3f)
				{
					localAI[0] = 0f;
					int targetNPCIndex3 = -1;
					float distanceToClosestTarget3 = -1f;
					AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex3, ref distanceToClosestTarget3);
					if (targetNPCIndex3 != -1)
					{
						ai[1] = targetNPCIndex3;
						netUpdate = true;
					}
				}
			}
		}
		else
		{
			_ = ai[0];
			_ = 2f;
		}
		if (ai[0] != 3f)
		{
			return;
		}
		if (player.HasMinionRestTarget)
		{
			vector = player.MinionRestTargetPoint;
		}
		else
		{
			ai[0] = 0f;
			netUpdate = true;
		}
		if (alpha == 0)
		{
			alpha = 255;
			for (int j = 0; j < 30; j++)
			{
				int num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
				Main.dust[num20].noGravity = true;
				Main.dust[num20].velocity *= 3f;
				Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
				Main.dust[num20].velocity *= 2f;
				Main.dust[num20].noGravity = true;
				Main.dust[num20].fadeIn = 2.5f;
				Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
		}
		else
		{
			for (int k = 0; k < 2; k++)
			{
				int num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
				Main.dust[num21].noGravity = true;
				Main.dust[num21].velocity *= 3f;
				Main.dust[num21].noLight = true;
				Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
				Main.dust[num21].velocity *= 2f;
				Main.dust[num21].noGravity = true;
				Main.dust[num21].fadeIn = 2.5f;
				Main.dust[num21].noLight = true;
				Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
			}
		}
		velocity *= 0.7f;
		base.Center = Vector2.Lerp(base.Center, vector, 0.2f);
		if (Distance(vector) < 10f)
		{
			ai[0] = 1f;
			netUpdate = true;
		}
	}

	private void AI_120_StardustGuardian_FindTarget(float lookupRange, ref int targetNPCIndex, ref float distanceToClosestTarget)
	{
		Vector2 center = Main.player[owner].Center;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this))
			{
				float num = center.Distance(nPC.Center);
				if (num < lookupRange)
				{
					targetNPCIndex = i;
					distanceToClosestTarget = num;
					lookupRange = num;
				}
			}
		}
	}

	private void AI_180_FairyQueenSunDance()
	{
		if (localAI[0] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item159, base.Center);
		}
		localAI[0] += 1f;
		float num = 180f;
		_ = ai[0] / ((float)Math.PI * 2f);
		float num2 = (float)Math.PI / 9f;
		if (localAI[0] >= num)
		{
			Kill();
			return;
		}
		alpha -= 15;
		if (alpha < 0)
		{
			alpha = 0;
		}
		scale = Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 60f, localAI[0], clamped: true);
		float lerpValue = Utils.GetLerpValue(50f, num, localAI[0], clamped: true);
		rotation = ai[0] + lerpValue * num2;
		int num3 = (int)ai[1];
		if (Main.npc.IndexInRange(num3))
		{
			NPC nPC = Main.npc[num3];
			if (nPC.active && nPC.type == 636)
			{
				base.Center = nPC.Center;
			}
			velocity = Vector2.Zero;
			Vector2 vector = rotation.ToRotationVector2();
			Vector3 v3_ = Main.hslToRgb((ai[0] / ((float)Math.PI * 2f) + localAI[0] / num) % 1f, 1f, 0.85f).ToVector3() * scale;
			float num4 = 800f * scale;
			DelegateMethods.v3_1 = v3_;
			for (float num5 = 0f; num5 <= 1f; num5 += 0.0833333358f)
			{
				Point point = (base.Center + vector * num4 * num5).ToTileCoordinates();
				DelegateMethods.CastLightOpen(point.X, point.Y);
			}
		}
		else
		{
			Kill();
		}
	}

	private void AI_179_FairyQueenLance()
	{
		localAI[0] += 1f;
		if (localAI[0] >= 60f)
		{
			velocity = ai[0].ToRotationVector2() * 40f;
			if (Main.rand.Next(3) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 267);
				dust.fadeIn = 1f;
				dust.noGravity = true;
				dust.alpha = 100;
				dust.color = Color.Lerp(AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
				dust.noLightEmittence = true;
				dust.scale *= 1.5f;
			}
		}
		if (localAI[0] >= 360f)
		{
			Kill();
			return;
		}
		alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true));
		rotation = ai[0];
	}

	private void AI_176_EdgyLightning()
	{
		int num = (int)ai[0] - 1;
		if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] != 0))
		{
			ai[0] = 0f;
			num = -1;
		}
		if (num == -1)
		{
			NPC nPC = FindTargetWithinRange(400f);
			if (nPC != null)
			{
				num = nPC.whoAmI;
				ai[0] = num + 1;
				netUpdate = true;
			}
		}
		if (num != -1)
		{
			NPC nPC2 = Main.npc[num];
			Vector2 vector = DirectionTo(nPC2.Center);
			if (vector.HasNaNs())
			{
				Kill();
				return;
			}
			velocity = vector * 10f;
			rotation = velocity.ToRotation();
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				frame = Main.rand.Next(Main.projFrames[type]);
			}
		}
		else
		{
			Kill();
		}
	}

	private NPC FindTargetWithinRange(float maxRange)
	{
		NPC result = null;
		float num = maxRange;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && localNPCImmunity[i] == 0)
			{
				float num2 = Distance(nPC.Center);
				if (!(num <= num2))
				{
					num = num2;
					result = nPC;
				}
			}
		}
		return result;
	}

	private void AI_177_IceWhipSlicer()
	{
		Player player = Main.player[owner];
		if (!player.active || player.dead)
		{
			player.coolWhipBuff = false;
			Kill();
			return;
		}
		if (player.coolWhipBuff)
		{
			timeLeft = 2;
		}
		int num = (int)ai[0] - 1;
		if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] > 0))
		{
			ai[0] = 0f;
			num = -1;
		}
		if (num == -1)
		{
			NPC nPC = FindTargetWithinRange(400f);
			if (nPC != null)
			{
				num = nPC.whoAmI;
				ai[0] = num + 1;
				netUpdate = true;
			}
		}
		float num2 = 12f;
		float amount = 0.1f;
		if (num != -1)
		{
			NPC nPC2 = Main.npc[num];
			float num3 = Distance(nPC2.Center);
			if (num2 > num3)
			{
				num2 = num3;
			}
			Vector2 vector = DirectionTo(nPC2.Center);
			if (!vector.HasNaNs())
			{
				velocity = Vector2.Lerp(velocity, vector * num2, amount);
			}
		}
		else
		{
			velocity *= 0.92f;
		}
		rotation += 0.0209439527f + Math.Abs(velocity.X) * 0.2f;
		if (Main.rand.Next(3) == 0)
		{
			Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 43, velocity.X, velocity.Y, 254, Color.White, 0.5f);
			Vector2 vector2 = Main.rand.NextVector2Circular(1f, 1f);
			dust.position = base.Center + vector2 * 10f;
			dust.velocity = vector2;
		}
	}

	private void AI_178_FireExplosion()
	{
		if (localAI[0] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int i = 0; i < 4; i++)
			{
				int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int j = 0; j < 30; j++)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity *= 3f;
				num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num2].velocity *= 2f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].fadeIn = 2.5f;
			}
			for (int k = 0; k < 10; k++)
			{
				int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num3].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity *= 3f;
			}
			for (int l = 0; l < 10; l++)
			{
				int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num4].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num4].noGravity = true;
				Main.dust[num4].velocity *= 3f;
			}
			for (int m = 0; m < 2; m++)
			{
				int num5 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num5].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.gore[num5].velocity *= 0.3f;
				Main.gore[num5].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num5].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		localAI[0] += 1f;
		if (localAI[0] >= 10f)
		{
			Kill();
		}
	}

	private void AI_175_TitaniumStormShards()
	{
		Player player = Main.player[owner];
		if (!player.active || player.dead || !player.hasTitaniumStormBuff)
		{
			Kill();
			return;
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(12);
			rotation = Main.rand.NextFloat() * ((float)Math.PI * 2f);
		}
		rotation += (float)Math.PI / 200f;
		AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
		float f = ((float)index / (float)totalIndexesInGroup + player.miscCounterNormalized * 6f) * ((float)Math.PI * 2f);
		float num = 24f + (float)totalIndexesInGroup * 6f;
		Vector2 vector = player.position - player.oldPosition;
		base.Center += vector;
		Vector2 vector2 = f.ToRotationVector2();
		localAI[0] = vector2.Y;
		Vector2 value = player.Center + vector2 * new Vector2(1f, 0.05f) * num;
		base.Center = Vector2.Lerp(base.Center, value, 0.3f);
	}

	private void AI_174_MultisegmentPet()
	{
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		if (type == 883)
		{
			if (player.dead)
			{
				player.petFlagEaterOfWorldsPet = false;
			}
			if (player.petFlagEaterOfWorldsPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 887)
		{
			if (player.dead)
			{
				player.petFlagDestroyerPet = false;
			}
			if (player.petFlagDestroyerPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 893)
		{
			if (player.dead)
			{
				player.petFlagLunaticCultistPet = false;
			}
			if (player.petFlagLunaticCultistPet)
			{
				timeLeft = 2;
			}
		}
		Vector2 center = player.Center;
		if (Distance(center) > 2000f)
		{
			base.Center = center;
			velocity = Vector2.Zero;
			netUpdate = true;
		}
		float num = (center - base.Center).Length();
		float num2 = Math.Min(12f, Math.Max(4f, player.velocity.Length()));
		velocity.Length();
		if (velocity == Vector2.Zero)
		{
			velocity.X = 2f * (float)player.direction;
			Vector2 vector = position;
			for (int i = 0; i < oldPos.Length; i++)
			{
				vector -= velocity;
				oldPos[i] = vector;
			}
		}
		if (!(num < 120f))
		{
			float targetAngle = AngleTo(center);
			float f = velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f));
			velocity = f.ToRotationVector2() * num2;
		}
		if (velocity.Length() > num2)
		{
			velocity = velocity.SafeNormalize(Vector2.Zero) * num2;
		}
		if (Math.Abs(velocity.Y) < 1f)
		{
			velocity.Y -= 0.1f;
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		int num3 = direction;
		direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
		if (num3 != direction)
		{
			netUpdate = true;
		}
		position.X = MathHelper.Clamp(position.X, 160f, Main.maxTilesX * 16 - 160);
		position.Y = MathHelper.Clamp(position.Y, 160f, Main.maxTilesY * 16 - 160);
	}

	private void AI_173_HallowBossRainbowTrail()
	{
		Opacity = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true) * Utils.GetLerpValue(660f, 600f, timeLeft, clamped: true);
		float num = (float)Math.PI / 360f;
		float num2 = 30f;
		velocity = velocity.RotatedBy(ai[0]);
		if (ai[0] < num)
		{
			ai[0] += num / num2;
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	public Color AI_173_GetColor()
	{
		if (NPC.ShouldEmpressBeEnraged())
		{
			float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
			return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
		}
		return Main.hslToRgb((ai[1] + 0f) % 1f, 1f, 0.5f) * Opacity;
	}

	private void AI_171_HallowBossRainbowStreak()
	{
		bool flag = false;
		bool flag2 = false;
		float num = 140f;
		float num2 = 30f;
		float num3 = 0.98f;
		float value = 0.05f;
		float value2 = 0.1f;
		float num4 = 30f;
		if (type == 931)
		{
			num = 180f;
			num2 = 20f;
			num4 = 30f;
			num3 = 0.97f;
			value = 0.075f;
			value2 = 0.125f;
			if (timeLeft == 238)
			{
				int num5 = alpha;
				alpha = 0;
				Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
				alpha = num5;
				for (int i = 0; i < 3; i++)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 267, Main.rand.NextVector2CircularEdge(3f, 3f) * (Main.rand.NextFloat() * 0.5f + 0.5f), 0, fairyQueenWeaponsColor);
					dust.scale *= 1.2f;
					dust.noGravity = true;
				}
			}
		}
		if ((float)timeLeft > num)
		{
			flag = true;
		}
		else if ((float)timeLeft > num2)
		{
			flag2 = true;
		}
		if (flag)
		{
			float num6 = (float)Math.Cos((float)whoAmI % 6f / 6f + position.X / 320f + position.Y / 160f);
			velocity *= num3;
			velocity = velocity.RotatedBy(num6 * ((float)Math.PI * 2f) * 0.125f * 1f / 30f);
		}
		if (friendly)
		{
			int num7 = (int)ai[0];
			if (Main.npc.IndexInRange(num7) && !Main.npc[num7].CanBeChasedBy(this))
			{
				num7 = -1;
				ai[0] = -1f;
				netUpdate = true;
			}
			if (num7 == -1)
			{
				int num8 = FindTargetWithLineOfSight();
				if (num8 != -1)
				{
					num7 = num8;
					ai[0] = num8;
					netUpdate = true;
				}
			}
		}
		if (flag2)
		{
			int num9 = (int)ai[0];
			Vector2 value3 = velocity;
			if (hostile && Main.player.IndexInRange(num9))
			{
				Player player = Main.player[num9];
				value3 = DirectionTo(player.Center) * num4;
			}
			if (friendly)
			{
				if (Main.npc.IndexInRange(num9))
				{
					NPC nPC = Main.npc[num9];
					value3 = DirectionTo(nPC.Center) * num4;
				}
				else
				{
					timeLeft -= 2;
				}
			}
			float amount = MathHelper.Lerp(value, value2, Utils.GetLerpValue(num, 30f, timeLeft, clamped: true));
			velocity = Vector2.SmoothStep(velocity, value3, amount);
			if (type == 931)
			{
				velocity *= MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0f, 90f, timeLeft, clamped: true));
			}
		}
		Opacity = Utils.GetLerpValue(240f, 220f, timeLeft, clamped: true);
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	public Color AI_171_GetColor()
	{
		if (NPC.ShouldEmpressBeEnraged())
		{
			float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
			return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
		}
		return Main.hslToRgb((ai[1] + 0.5f) % 1f, 1f, 0.5f) * Opacity;
	}

	private void AI_172_HallowBossRainbowPelletStorm()
	{
		if (localAI[1] <= 90f)
		{
			localAI[1] += 1f;
			scale = 0.5f;
			Opacity = 0.5f;
			float lerpValue = Utils.GetLerpValue(0f, 90f, localAI[1]);
			scale = MathHelper.Lerp(5f, 1f, lerpValue);
			Opacity = 1f - (1f - lerpValue * lerpValue);
			return;
		}
		scale = 1f;
		Opacity = 1f;
		float num = 150f + 10f * (float)AI_172_GetPelletStormsCount();
		localAI[0] += 1f;
		if (localAI[0] >= num)
		{
			Kill();
			return;
		}
		velocity = Vector2.Zero;
		rotation = 0f;
		int num2 = AI_172_GetPelletStormsCount();
		for (int i = 0; i < num2; i++)
		{
			HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(i);
			for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
			{
				if (hallowBossPelletStormInfo.IsValid(j))
				{
					hallowBossPelletStormInfo.GetBulletPosition(j, base.Center);
				}
			}
		}
	}

	public int AI_172_GetPelletStormsCount()
	{
		return 6;
	}

	public HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
	{
		float from = 0f + (float)stormIndex * 10f;
		float to = 90f + (float)stormIndex * 10f;
		HallowBossPelletStormInfo result = default(HallowBossPelletStormInfo);
		result.StartAngle = (float)stormIndex * ((float)Math.PI / 3f) - (float)Math.PI / 2f + (float)stormIndex * ((float)Math.PI / 5f);
		result.AnglePerBullet = (float)Math.PI * 2f / 3f;
		result.BulletsInStorm = 3;
		result.BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, localAI[0]);
		result.BulletsProgressInStormBonusByIndexNormalized = 0f;
		result.StormTotalRange = 500f;
		result.BulletSize = new Vector2(16f, 16f);
		return result;
	}

	private int FindTargetWithLineOfSight(float maxRange = 800f)
	{
		float num = maxRange;
		int result = -1;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			bool flag = nPC.CanBeChasedBy(this);
			if (localNPCImmunity[i] != 0)
			{
				flag = false;
			}
			if (flag)
			{
				float num2 = Distance(Main.npc[i].Center);
				if (num2 < num && Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height))
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	private void AI_170_FairyGlowstick()
	{
		Point p = base.Center.ToTileCoordinates();
		Vector2 vector = p.ToVector2();
		int num = 10;
		Vector2 zero = Vector2.Zero;
		int num2 = 0;
		float num3 = 3f;
		if (ai[1] == 1f)
		{
			SoundEngine.PlaySound(SoundID.Item28, position);
			rotation = 0f;
			velocity.X = 0f;
			ai[1] = 2f;
		}
		frameCounter++;
		if (frameCounter > 4)
		{
			frameCounter = 0;
			frame++;
			if (frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (velocity.Length() > 1f && timeLeft % 10 == 0)
		{
			for (int i = p.X - num; i < p.X + num + 1; i++)
			{
				for (int j = p.Y - num; j < p.Y + num + 1; j++)
				{
					if (WorldGen.SolidTile(i, j))
					{
						Vector2 v = vector - new Vector2(i, j);
						Vector2 vector2 = v.SafeNormalize(Vector2.Zero) * Math.Max((float)num - v.Length(), 0f);
						vector2 *= num3;
						zero += vector2;
						num2++;
					}
				}
			}
			if (num2 > 0)
			{
				zero /= (float)num2;
			}
			if (zero.Length() > 1f)
			{
				velocity = zero;
			}
		}
		velocity *= 0.95f;
		if (velocity.Length() < 1f)
		{
			velocity = Vector2.Zero;
			netUpdate = true;
		}
	}

	private void AI_169_Smolstars()
	{
		Player player = Main.player[owner];
		bool num = type == 864;
		Vector2 vector = player.Top + new Vector2(0f, -30f);
		if (num)
		{
			if (player.dead)
			{
				player.smolstar = false;
			}
			if (player.smolstar)
			{
				timeLeft = 2;
			}
			if (ai[0] == 0f)
			{
				AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
				float num2 = (float)Math.PI * 2f / (float)totalIndexesInGroup;
				float num3 = (float)totalIndexesInGroup * 0.66f;
				Vector2 vector2 = new Vector2(30f, 6f) / 5f * (totalIndexesInGroup - 1);
				Vector2 vector3 = Vector2.UnitY.RotatedBy(num2 * (float)index + Main.GlobalTimeWrappedHourly % num3 / num3 * ((float)Math.PI * 2f));
				vector += vector3 * vector2;
				vector.Y += player.gfxOffY;
				vector = vector.Floor();
			}
		}
		if (ai[0] == 0f)
		{
			Vector2 vector4 = vector - base.Center;
			float num4 = 10f;
			float lerpValue = Utils.GetLerpValue(200f, 600f, vector4.Length(), clamped: true);
			num4 += lerpValue * 30f;
			if (vector4.Length() >= 3000f)
			{
				base.Center = vector;
			}
			velocity = vector4;
			if (velocity.Length() > num4)
			{
				velocity *= num4 / velocity.Length();
			}
			int startAttackRange = 800;
			int attackTarget = -1;
			Minion_FindTargetInRange(startAttackRange, ref attackTarget, skipIfCannotHitWithOwnBody: false);
			if (attackTarget != -1)
			{
				ai[0] = 60f;
				ai[1] = attackTarget;
				netUpdate = true;
			}
			float targetAngle = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
			if (vector4.Length() < 40f)
			{
				targetAngle = Vector2.UnitY.ToRotation() + (float)Math.PI / 2f;
			}
			rotation = rotation.AngleLerp(targetAngle, 0.2f);
			return;
		}
		if (ai[0] == -1f)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int i = 0; i < 2; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 15, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 0, default(Color), 1.4f);
					if (Main.rand.Next(3) != 0)
					{
						dust.scale *= 1.3f;
						dust.velocity *= 1.1f;
					}
					dust.noGravity = true;
					dust.fadeIn = 0f;
				}
				velocity += Main.rand.NextVector2CircularEdge(4f, 4f);
			}
			ai[1] += 1f;
			rotation += velocity.X * 0.1f + velocity.Y * 0.05f;
			velocity *= 0.92f;
			if (ai[1] >= 9f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			return;
		}
		NPC nPC = null;
		int num5 = (int)ai[1];
		if (Main.npc.IndexInRange(num5) && Main.npc[num5].CanBeChasedBy(this))
		{
			nPC = Main.npc[num5];
		}
		if (nPC == null)
		{
			ai[0] = -1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		else if (player.Distance(nPC.Center) >= 900f)
		{
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		else
		{
			Vector2 vector5 = nPC.Center - base.Center;
			float num6 = 16f;
			velocity = vector5;
			if (velocity.Length() > num6)
			{
				velocity *= num6 / velocity.Length();
			}
			float targetAngle2 = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleLerp(targetAngle2, 0.4f);
		}
		float num7 = 0.1f;
		float num8 = width * 5;
		for (int j = 0; j < 1000; j++)
		{
			if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num8)
			{
				if (position.X < Main.projectile[j].position.X)
				{
					velocity.X -= num7;
				}
				else
				{
					velocity.X += num7;
				}
				if (position.Y < Main.projectile[j].position.Y)
				{
					velocity.Y -= num7;
				}
				else
				{
					velocity.Y += num7;
				}
			}
		}
	}

	private void AI_019_Spears()
	{
		Player player = Main.player[owner];
		Vector2 center = player.RotatedRelativePoint(player.MountedCenter);
		direction = player.direction;
		player.heldProj = whoAmI;
		player.itemTime = player.itemAnimation;
		base.Center = center;
		bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
		int itemAnimationMax = player.itemAnimationMax;
		int itemAnimation = player.itemAnimation;
		int num = Main.player[owner].itemAnimationMax / 3;
		float num2 = MathHelper.Min(itemAnimation, num);
		float num3 = (float)itemAnimation - num2;
		float num4 = 0f;
		float num5 = 0f;
		float num6 = 0f;
		bool flag2 = false;
		switch (type)
		{
		case 46:
			num4 = 3f;
			num6 = 1.6f;
			num5 = 1.4f;
			break;
		case 105:
			num4 = 3f;
			num6 = 2.4f;
			num5 = 2.1f;
			break;
		case 367:
			spriteDirection = -direction;
			num4 = 3f;
			num6 = 1.6f;
			num5 = 1.5f;
			break;
		case 368:
			spriteDirection = -direction;
			num4 = 3f;
			num6 = 1.5f;
			num5 = 1.4f;
			break;
		case 222:
			num4 = 3f;
			num6 = 2.4f;
			num5 = 2.1f;
			break;
		case 342:
			num4 = 3f;
			num6 = 2.4f;
			num5 = 2.1f;
			break;
		case 47:
			num4 = 4f;
			num6 = 1.2f;
			num5 = 0.9f;
			break;
		case 153:
			spriteDirection = -direction;
			num4 = 4f;
			num6 = 1.5f;
			num5 = 1.3f;
			break;
		case 49:
			spriteDirection = -direction;
			num4 = 4f;
			num6 = 1.1f;
			num5 = 0.85f;
			break;
		case 730:
			spriteDirection = -direction;
			num4 = 8f;
			num6 = 1.5f;
			num5 = 1.2f;
			break;
		case 877:
		case 878:
		case 879:
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			num4 = 28f;
			num6 = 0.4f;
			num5 = 0.4f;
			flag2 = true;
			break;
		case 64:
		case 215:
			spriteDirection = -direction;
			num4 = 3f;
			num6 = 1.9f;
			num5 = 1.7f;
			break;
		case 66:
		case 97:
		case 212:
		case 218:
			spriteDirection = -direction;
			num4 = 3f;
			num6 = 2.1f;
			num5 = 1.9f;
			break;
		case 130:
			spriteDirection = -direction;
			num4 = 3f;
			num6 = 1.3f;
			num5 = 1f;
			break;
		}
		float num7 = (float)(itemAnimationMax - num) - num3;
		float num8 = (float)num - num2;
		float num9 = num4 + num5 * num7 - num6 * num8;
		position += velocity * num9;
		switch (type)
		{
		case 130:
			if ((localAI[0] == 0f || localAI[0] == 4f || localAI[0] == 8f || localAI[0] == 12f || localAI[0] == 16f || localAI[0] == 20f || localAI[0] == 24f) && owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
			}
			localAI[0] += 1f;
			break;
		case 730:
			if (localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				Vector2 vector = velocity * 4f;
				NewProjectile(base.Center.X, base.Center.Y, vector.X, vector.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
			}
			break;
		case 342:
			if (flag && localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				if (Collision.CanHit(player.position, player.width, player.height, position, width, height))
				{
					NewProjectile(base.Center.X, base.Center.Y, velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
				}
			}
			break;
		case 222:
			if (flag && localAI[0] == 0f && Main.myPlayer == owner)
			{
				localAI[0] = 1f;
				NewProjectile(base.Center.X, base.Center.Y, velocity.X, velocity.Y, 228, damage, knockBack, owner);
			}
			break;
		}
		if (flag2 && player.channel && player.itemAnimation < num)
		{
			player.SetDummyItemTime(num);
		}
		if (player.itemAnimation == 0)
		{
			Kill();
		}
		rotation = (float)Math.Atan2(velocity.Y, velocity.X) + (float)Math.PI / 2f + (float)Math.PI / 4f;
		if (spriteDirection == -1)
		{
			rotation -= (float)Math.PI / 2f;
		}
		if (type == 878 || type == 879)
		{
			float num10 = 6f;
			float num11 = 0.8f;
			float num12 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX * player.direction), player.velocity.SafeNormalize(Vector2.UnitX * player.direction));
			float num13 = player.velocity.Length();
			if (num13 > num10 && num12 > num11)
			{
				int num14 = 8;
				if (num13 > num10 + 1f)
				{
					num14 = 5;
				}
				if (num13 > num10 + 2f)
				{
					num14 = 2;
				}
				int num15 = 14;
				int num16 = 27;
				int num17 = 4;
				if (type == 879)
				{
					num15 = 43;
					num16 = 57;
				}
				if (Main.rand.Next(num14 + 3) == 0)
				{
					Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num15, 0f, 0f, 150, default(Color), 1.4f);
				}
				if (Main.rand.Next(num14) == 0)
				{
					int num18 = Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num16, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
					Main.dust[num18].noGravity = true;
					Main.dust[num18].velocity *= 0.25f;
					num18 = Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num16, 0f, 0f, 150, default(Color), 1.4f);
					Main.dust[num18].velocity *= 0.25f;
				}
			}
		}
		if (type == 46)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
			}
			int num19 = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
			Main.dust[num19].noGravity = true;
			Main.dust[num19].velocity /= 2f;
			num19 = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
			Main.dust[num19].velocity /= 5f;
		}
		if (type == 730)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
			}
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
			}
		}
		else if (type == 105)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num20 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
				Main.dust[num20].velocity += velocity * 0.3f;
				Main.dust[num20].velocity *= 0.2f;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num21 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
				Main.dust[num21].velocity += velocity * 0.5f;
				Main.dust[num21].velocity *= 0.5f;
			}
		}
		else if (type == 153)
		{
			int num22 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
			Main.dust[num22].noGravity = true;
			Main.dust[num22].fadeIn = 1.25f;
			Main.dust[num22].velocity *= 0.25f;
		}
	}

	private void AI_019_Spears_Old()
	{
		Vector2 vector = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
		direction = Main.player[owner].direction;
		Main.player[owner].heldProj = whoAmI;
		Main.player[owner].itemTime = Main.player[owner].itemAnimation;
		position.X = vector.X - (float)(width / 2);
		position.Y = vector.Y - (float)(height / 2);
		bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
		if (!Main.player[owner].frozen)
		{
			if (type == 46)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.6f;
				}
				else
				{
					ai[0] += 1.4f;
				}
			}
			else if (type == 105)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 367)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.6f;
				}
				else
				{
					ai[0] += 1.5f;
				}
			}
			else if (type == 368)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.4f;
				}
			}
			else if (type == 222)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X, velocity.Y, 228, damage, knockBack, owner);
					}
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 342)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.4f;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, new Vector2(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0]), width, height))
						{
							NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
						}
					}
				}
				else
				{
					ai[0] += 2.1f;
				}
			}
			else if (type == 47)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.2f;
				}
				else
				{
					ai[0] += 0.9f;
				}
			}
			else if (type == 153)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.3f;
				}
			}
			else if (type == 49)
			{
				if (ai[0] == 0f)
				{
					ai[0] = 4f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.1f;
				}
				else
				{
					ai[0] += 0.85f;
				}
			}
			else if (type == 730)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 8f;
					netUpdate = true;
					if (localAI[0] == 0f && Main.myPlayer == owner)
					{
						localAI[0] = 1f;
						Vector2 vector2 = velocity * 4f;
						NewProjectile(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], vector2.X, vector2.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
					}
				}
				if (flag)
				{
					ai[0] -= 1.5f;
				}
				else
				{
					ai[0] += 1.2f;
				}
			}
			else if (type == 64 || type == 215)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.9f;
				}
				else
				{
					ai[0] += 1.7f;
				}
			}
			else if (type == 66 || type == 97 || type == 212 || type == 218)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 2.1f;
				}
				else
				{
					ai[0] += 1.9f;
				}
			}
			else if (type == 130)
			{
				spriteDirection = -direction;
				if (ai[0] == 0f)
				{
					ai[0] = 3f;
					netUpdate = true;
				}
				if (flag)
				{
					ai[0] -= 1.3f;
				}
				else
				{
					ai[0] += 1f;
				}
			}
		}
		position += velocity * ai[0];
		if (type == 130)
		{
			if (ai[1] == 0f || ai[1] == 4f || ai[1] == 8f || ai[1] == 12f || ai[1] == 16f || ai[1] == 20f || ai[1] == 24f)
			{
				NewProjectile(position.X + (float)(width / 2), position.Y + (float)(height / 2), velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
			}
			ai[1] += 1f;
		}
		if (Main.player[owner].itemAnimation == 0)
		{
			Kill();
		}
		rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 2.355f;
		if (spriteDirection == -1)
		{
			rotation -= 1.57f;
		}
		if (type == 46)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
			}
			int num = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
			Main.dust[num].noGravity = true;
			Main.dust[num].velocity.X /= 2f;
			Main.dust[num].velocity.Y /= 2f;
			num = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
			Main.dust[num].velocity.X /= 5f;
			Main.dust[num].velocity.Y /= 5f;
		}
		if (type == 730)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
				dust.noGravity = true;
				dust.velocity *= 1.4f;
			}
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
			}
		}
		else if (type == 105)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
				Main.dust[num2].velocity += velocity * 0.3f;
				Main.dust[num2].velocity *= 0.2f;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
				Main.dust[num3].velocity += velocity * 0.5f;
				Main.dust[num3].velocity *= 0.5f;
			}
		}
		else if (type == 153)
		{
			int num4 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].fadeIn = 1.25f;
			Main.dust[num4].velocity *= 0.25f;
		}
	}

	private void AI_168_FirstFractal()
	{
		float num = 60f;
		if ((localAI[0] += 1f) >= num - 1f)
		{
			Kill();
			return;
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(15);
		}
		velocity = velocity.RotatedBy(ai[0]);
		Opacity = Utils.GetLerpValue(0f, 12f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 12f, localAI[0], clamped: true);
		direction = ((velocity.X > 0f) ? 1 : (-1));
		spriteDirection = direction;
		rotation = (float)Math.PI / 4f * (float)spriteDirection + velocity.ToRotation();
		if (spriteDirection == -1)
		{
			rotation += (float)Math.PI;
		}
		if (localAI[0] > 7f)
		{
			int num2 = 5;
			_ = base.Center - new Vector2(num2);
			if (Main.rand.Next(15) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 278, null, 100, Color.Lerp(GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f));
				dust.scale = 0.7f;
				dust.noGravity = true;
				dust.velocity *= 0.5f;
				dust.velocity += velocity * 2f;
			}
		}
	}

	private void AI_167_SparkleGuitar()
	{
		float num = 90f;
		if ((localAI[0] += 1f) >= num - 1f)
		{
			Kill();
			return;
		}
		float num2 = localAI[0] / num;
		Vector2 center = Main.player[owner].Center;
		Vector2 vector = new Vector2(ai[0], ai[1]);
		Vector2 vector2 = -velocity;
		Vector2 value = center + vector2 * 2f;
		Vector2 value2 = vector + vector2 * (1f - num2 * 3f);
		base.Center = Vector2.CatmullRom(value, center, vector, value2, num2);
		int num3 = type;
		if (num3 == 856)
		{
			Lighting.AddLight(base.Center, Color.HotPink.ToVector3() * 0.3f);
			rotation = (float)Math.PI * 2f * num2 * 1f;
		}
	}

	private void AI_164_StormTigerGem()
	{
		Player player = Main.player[owner];
		if (type == 831)
		{
			if (player.dead)
			{
				player.stormTiger = false;
			}
			if (player.stormTiger)
			{
				timeLeft = 2;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= 6)
				{
					frame = 0;
				}
			}
		}
		List<int> ai164_blacklistedTargets = _ai164_blacklistedTargets;
		ai164_blacklistedTargets.Clear();
		AI_GetMyGroupIndexAndFillBlackList(ai164_blacklistedTargets, out var index, out var totalIndexesInGroup);
		Vector2 vector2 = (base.Center = AI_164_GetHomeLocation(player, index, totalIndexesInGroup));
	}

	public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
	{
		int num = master.bodyFrame.Height;
		if (num == 0)
		{
			num = 1;
		}
		Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
		vector.Y -= 2f;
		float num2 = master.miscCounterNormalized * 2f;
		int num3 = stackedIndex / 4;
		int num4 = totalIndexes / 4;
		if (totalIndexes % 4 > 0)
		{
			num4++;
		}
		int num5 = (totalIndexes - num3 * 4) % 4;
		if (num5 == 0)
		{
			num5 = 4;
		}
		if (num4 - 1 != num3)
		{
			num5 = 4;
		}
		int num6 = stackedIndex % num5;
		float num7 = (float)num6 / (float)num5;
		num2 += (float)num3 / 8f;
		if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
		{
			num2 = 0f;
			switch (num5)
			{
			case 1:
				num7 = 0f;
				break;
			case 2:
				num7 = 0.25f + (float)num6 * 0.5f;
				break;
			case 3:
				num7 = (float)(num6 - 1) / 6f;
				break;
			case 4:
				num7 = ((float)num6 - 1.5f) / 6f;
				break;
			}
		}
		Vector2 vector2 = new Vector2(0f, -8 - 12 * num3).RotatedBy((num2 + num7) * ((float)Math.PI * 2f));
		vector += vector2 + new Vector2(0f, master.gravDir * -40f);
		Vector2 mountedCenter = master.MountedCenter;
		_ = master.direction;
		Vector2 vector3 = mountedCenter + new Vector2(0f, master.gravDir * -21f) + vector;
		vector3.Y += master.gfxOffY;
		vector3 = vector3.Floor();
		return vector3;
	}

	private void AI_162_TigerPounce()
	{
		if (ai[0] < 0f)
		{
			Opacity = 0f;
			ai[0] += 1f;
			return;
		}
		bool flag = false;
		flag = true;
		if (frameCounter == 0)
		{
			frameCounter = 1;
			localAI[0] = base.Center.X;
			localAI[1] = base.Center.Y;
			flag = true;
		}
		Vector2 vector = new Vector2(localAI[0], localAI[1]);
		Vector2 vector2 = vector + velocity;
		float y = Vector2.Distance(vector, vector2) * 1.5f;
		float num = 0.1f;
		Vector2 value = Vector2.Lerp(vector, vector2, 0f - num) + new Vector2(0f, y);
		Vector2 value2 = Vector2.Lerp(vector, vector2, 1f + num) + new Vector2(0f, y);
		if (Opacity < 1f)
		{
			Opacity += 0.1f;
		}
		int num2 = Math.Sign(vector2.X - vector.X);
		rotation += (float)num2 * -0.2f;
		spriteDirection = num2;
		if (ai[1] < 1f)
		{
			ai[1] = 60f;
		}
		ai[0] += 1f / ai[1];
		Vector2 vector3 = Vector2.CatmullRom(amount: Utils.Clamp(ai[0], 0f, 1f), value1: value, value2: vector, value3: vector2, value4: value2);
		if (flag)
		{
			for (float num3 = 0f; num3 < 1f; num3 += 0.5f)
			{
				if (Main.rand.Next(19) == 0)
				{
					Vector2 vector4 = base.Center + DirectionTo(vector3).SafeNormalize(Vector2.UnitY) * 100f;
					Dust dust = Dust.NewDustPerfect(base.Center + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Main.rand.NextVector2Circular(3f, 3f), 100, Color.White * 0.4f);
					dust.velocity.Y += -0.6f;
					dust.velocity += velocity * 0.1f;
					Main.rand.Next(5);
					dust.velocity = (vector4 - base.Center) * 0.05f;
					dust.fadeIn = 0f;
					dust.scale = 0.7f;
					dust.noGravity = true;
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
				obj.fadeIn = 0.7f;
				obj.scale = 0.4f;
				obj.velocity += velocity * 0.001f;
				obj.noLight = true;
			}
		}
		base.Center = vector3;
		if (ai[0] >= 1f)
		{
			Kill();
		}
	}

	private void AI_016()
	{
		if (wet && (type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905))
		{
			timeLeft = 1;
		}
		if (type == 108 || type == 164)
		{
			ai[0] += 1f;
			if (ai[0] > 3f)
			{
				Kill();
			}
		}
		if (type == 102)
		{
			int num = (int)(base.Center.X / 16f);
			int num2 = (int)(base.Center.Y / 16f);
			if (WorldGen.InWorld(num, num2))
			{
				Tile tile = Main.tile[num, num2];
				if (tile != null && tile.active() && (TileID.Sets.Platforms[tile.type] || tile.type == 380))
				{
					Kill();
					return;
				}
			}
		}
		if (type == 75)
		{
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && (base.Center - Main.player[i].Center).Length() < 40f)
				{
					Kill();
					return;
				}
			}
		}
		bool flag = false;
		if (type == 37 || type == 397 || type == 470 || type == 519 || type == 773 || type == 911)
		{
			try
			{
				int num3 = (int)(position.X / 16f) - 1;
				int num4 = (int)((position.X + (float)width) / 16f) + 2;
				int num5 = (int)(position.Y / 16f) - 1;
				int num6 = (int)((position.Y + (float)height) / 16f) + 2;
				if (num3 < 0)
				{
					num3 = 0;
				}
				if (num4 > Main.maxTilesX)
				{
					num4 = Main.maxTilesX;
				}
				if (num5 < 0)
				{
					num5 = 0;
				}
				if (num6 > Main.maxTilesY)
				{
					num6 = Main.maxTilesY;
				}
				Vector2 vector = default(Vector2);
				for (int j = num3; j < num4; j++)
				{
					for (int k = num5; k < num6; k++)
					{
						if (Main.tile[j, k] == null || !Main.tile[j, k].nactive() || !Main.tileSolid[Main.tile[j, k].type] || Main.tileSolidTop[Main.tile[j, k].type])
						{
							continue;
						}
						vector.X = j * 16;
						vector.Y = k * 16;
						if (!(position.X + (float)width - 4f > vector.X) || !(position.X + 4f < vector.X + 16f) || !(position.Y + (float)height - 4f > vector.Y) || !(position.Y + 4f < vector.Y + 16f))
						{
							continue;
						}
						if (type == 911 && owner == Main.myPlayer && localAI[0] == 0f)
						{
							float num7 = 12f;
							Vector2 value = vector + new Vector2(8f, 8f);
							if (Vector2.Distance(base.Center, value) < num7)
							{
								base.Center += velocity.SafeNormalize(Vector2.Zero) * -4f;
							}
							localAI[0] = 1f;
							netUpdate = true;
						}
						velocity.X = 0f;
						velocity.Y = -0.2f;
						flag = true;
					}
				}
			}
			catch
			{
			}
		}
		if (flag && type == 911)
		{
			Point p = base.Center.ToTileCoordinates();
			if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(p.X, p.Y)))
			{
				Vector2 v = p.ToWorldCoordinates() - base.Center;
				base.Center += v.SafeNormalize(Vector2.Zero) * -4f;
			}
		}
		if (flag && type == 773)
		{
			Player player = Main.player[owner];
			Vector2 v2 = DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * player.direction);
			float num8 = rotation;
			float num9 = v2.ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleLerp(num9, 0.2f);
			rotation = rotation.AngleTowards(num9, 0.05f);
			Vector2 vector2 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			if (Main.rand.Next(3) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + vector2 * 10f, 59, vector2 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
				dust.noGravity = true;
				if (Main.rand.Next(3) == 0)
				{
					dust.velocity *= 1.5f;
					dust.noGravity = false;
					dust.scale /= 2f;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
				Dust.NewDustPerfect(base.Center + vector2 * -10f, 59, scarabBombDigDirectionSnap.ToVector2() * 1.5f, 0, default(Color), 2f).noGravity = true;
			}
			if (Main.rand.Next(15) == 0)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + vector2 * 10f, 88, vector2 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
				dust2.noGravity = true;
				if (Main.rand.Next(3) == 0)
				{
					dust2.velocity *= 1.5f;
				}
			}
			bool flag2 = Main.rand.Next(30) == 0;
			if (num8 != rotation && Main.rand.Next(40) == 0)
			{
				flag2 = true;
			}
			if (flag2)
			{
				float num10 = (float)Math.PI * 2f * Main.rand.NextFloat();
				for (float num11 = 0f; num11 < 1f; num11 += 0.142857149f)
				{
					Vector2 spinningpoint = (num11 * ((float)Math.PI * 2f) + num10).ToRotationVector2();
					spinningpoint *= new Vector2(1f, 0.3f);
					spinningpoint = spinningpoint.RotatedBy(num9);
					Dust dust3 = Dust.NewDustPerfect(base.Center + spinningpoint + vector2 * 8f, 59, vector2 * 3f + spinningpoint);
					dust3.noGravity = true;
					dust3.fadeIn = 1.6f;
				}
			}
			if (++frameCounter >= 3)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
		}
		if (type == 519)
		{
			localAI[1] += 1f;
			float num12 = 180f - localAI[1];
			if (num12 < 0f)
			{
				num12 = 0f;
			}
			frameCounter++;
			if (num12 < 15f)
			{
				frameCounter++;
			}
			if ((float)frameCounter >= (num12 / 10f + 6f) / 2f)
			{
				frame++;
				frameCounter = 0;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
		}
		if (type == 681 && localAI[1] == 0f)
		{
			localAI[1] = 1f;
		}
		int num13 = 6;
		if (type == 776 || type == 780 || type == 803 || type == 804)
		{
			num13 = 228;
		}
		else if (type == 784 || type == 805)
		{
			num13 = ((Main.rand.Next(3) == 0) ? 6 : Dust.dustWater());
		}
		else if (type == 787 || type == 806)
		{
			num13 = ((Main.rand.Next(3) == 0) ? 6 : 35);
		}
		else if (type == 790 || type == 807)
		{
			num13 = ((Main.rand.Next(3) == 0) ? 6 : 152);
		}
		if (type == 102)
		{
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item10, position);
			}
			frameCounter++;
			if (frameCounter > 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 1)
			{
				frame = 0;
			}
			if (velocity.Y == 0f)
			{
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
				damage = 40;
				knockBack = 8f;
				timeLeft = 3;
				netUpdate = true;
			}
		}
		if (type == 303 && timeLeft <= 3 && hostile)
		{
			position.X += width / 2;
			position.Y += height / 2;
			width = 128;
			height = 128;
			position.X -= width / 2;
			position.Y -= height / 2;
		}
		if (owner == Main.myPlayer && timeLeft <= 3)
		{
			tileCollide = false;
			ai[1] = 0f;
			alpha = 255;
			if (type == 28 || type == 37 || type == 516 || type == 519)
			{
				Resize(128, 128);
				damage = 100;
				knockBack = 8f;
			}
			else if (type == 773)
			{
				Resize(48, 96);
				damage = 100;
				knockBack = 8f;
			}
			else if (type == 29 || type == 470 || type == 637)
			{
				Resize(250, 250);
				damage = 250;
				knockBack = 10f;
			}
			else if (type == 30 || type == 397 || type == 517 || type == 588)
			{
				Resize(128, 128);
				knockBack = 8f;
			}
			else if (type == 681)
			{
				Resize(80, 80);
				knockBack = 8f;
			}
			else if (type == 779 || type == 783 || type == 862 || type == 863)
			{
				Resize(48, 48);
				knockBack = 8f;
			}
			else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 338 || type == 339 || type == 930)
			{
				Resize(128, 128);
				knockBack = 8f;
			}
			else if (type == 794 || type == 797 || type == 795 || type == 798 || type == 793 || type == 796 || type == 808 || type == 808)
			{
				Resize(250, 250);
				knockBack = 12f;
			}
			else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
			{
				Resize(128, 128);
				knockBack = 12f;
			}
			else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905 || type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 910 || type == 911)
			{
				if (type == 903 || type == 904 || type == 905 || type == 906 || type == 910 || type == 911)
				{
					damage = 100;
				}
				Resize(48, 48);
				knockBack = 12f;
			}
			else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
			{
				Resize(200, 200);
				knockBack = 10f;
			}
		}
		else
		{
			if (type != 30 && type != 75 && type != 517 && type != 681 && type != 588 && type != 397 && type != 108 && type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 && type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 && type != 164 && type != 303 && type != 338 && type != 339 && type != 340 && type != 341 && (type < 776 || type > 801) && (type < 803 || type > 810) && type != 862 && type != 863 && type != 930)
			{
				damage = 0;
			}
			if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
			{
				localAI[1] += 1f;
				if (localAI[1] > 6f)
				{
					alpha = 0;
				}
				else
				{
					alpha = (int)(255f - 42f * localAI[1]) + 100;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				for (int l = 0; l < 2; l++)
				{
					float num14 = 0f;
					float num15 = 0f;
					if (l == 1)
					{
						num14 = velocity.X * 0.5f;
						num15 = velocity.Y * 0.5f;
					}
					if (!(localAI[1] > 9f))
					{
						continue;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num16 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
						Main.dust[num16].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num16].velocity *= 0.2f;
						Main.dust[num16].noGravity = true;
						if (Main.dust[num16].type == 152)
						{
							Main.dust[num16].scale *= 0.5f;
							Main.dust[num16].velocity += velocity * 0.1f;
						}
						else if (Main.dust[num16].type == 35)
						{
							Main.dust[num16].scale *= 0.5f;
							Main.dust[num16].velocity += velocity * 0.1f;
						}
						else if (Main.dust[num16].type == Dust.dustWater())
						{
							Main.dust[num16].scale *= 0.65f;
							Main.dust[num16].velocity += velocity * 0.1f;
						}
						if (type == 808 || type == 809)
						{
							Dust dust4 = Main.dust[num16];
							if (dust4.dustIndex != 6000)
							{
								dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
								dust4.velocity = Main.rand.NextVector2Circular(3f, 3f);
								dust4.noGravity = true;
							}
							if (dust4.dustIndex != 6000)
							{
								dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
								dust4.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
								dust4.noGravity = true;
							}
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num17 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num17].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num17].velocity *= 0.05f;
					}
				}
				float num18 = position.X;
				float num19 = position.Y;
				float num20 = 600f;
				if (type == 930)
				{
					num20 = 650f;
				}
				bool flag3 = false;
				ai[0] += 1f;
				if (ai[0] > 30f)
				{
					ai[0] = 30f;
					for (int m = 0; m < 200; m++)
					{
						if (Main.npc[m].CanBeChasedBy(this))
						{
							float num21 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
							float num22 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
							float num23 = Math.Abs(position.X + (float)(width / 2) - num21) + Math.Abs(position.Y + (float)(height / 2) - num22);
							if (num23 < num20 && Collision.CanHit(position, width, height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
							{
								num20 = num23;
								num18 = num21;
								num19 = num22;
								flag3 = true;
							}
						}
					}
				}
				if (!flag3)
				{
					num18 = position.X + (float)(width / 2) + velocity.X * 100f;
					num19 = position.Y + (float)(height / 2) + velocity.Y * 100f;
				}
				float num24 = 16f;
				if (type == 930)
				{
					num24 = 12f;
				}
				Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num25 = num18 - vector3.X;
				float num26 = num19 - vector3.Y;
				float num27 = (float)Math.Sqrt(num25 * num25 + num26 * num26);
				num27 = num24 / num27;
				num25 *= num27;
				num26 *= num27;
				velocity.X = (velocity.X * 11f + num25) / 12f;
				velocity.Y = (velocity.Y * 11f + num26) / 12f;
			}
			else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
			{
				if (Math.Abs(velocity.X) >= 8f || Math.Abs(velocity.Y) >= 8f)
				{
					for (int n = 0; n < 2; n++)
					{
						float num28 = 0f;
						float num29 = 0f;
						if (n == 1)
						{
							num28 = velocity.X * 0.5f;
							num29 = velocity.Y * 0.5f;
						}
						int num30 = Dust.NewDust(new Vector2(position.X + 3f + num28, position.Y + 3f + num29) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
						Main.dust[num30].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num30].velocity *= 0.2f;
						Main.dust[num30].noGravity = true;
						if (Main.dust[num30].type == 152)
						{
							Main.dust[num30].scale *= 0.5f;
							Main.dust[num30].velocity += velocity * 0.1f;
						}
						else if (Main.dust[num30].type == 35)
						{
							Main.dust[num30].scale *= 0.5f;
							Main.dust[num30].velocity += velocity * 0.1f;
						}
						else if (Main.dust[num30].type == Dust.dustWater())
						{
							Main.dust[num30].scale *= 0.65f;
							Main.dust[num30].velocity += velocity * 0.1f;
						}
						if (type == 793 || type == 796)
						{
							Dust dust5 = Main.dust[num30];
							if (dust5.dustIndex != 6000)
							{
								dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
								dust5.velocity = Main.rand.NextVector2Circular(3f, 3f);
								dust5.noGravity = true;
							}
							if (dust5.dustIndex != 6000)
							{
								dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
								dust5.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
								dust5.noGravity = true;
							}
						}
						num30 = Dust.NewDust(new Vector2(position.X + 3f + num28, position.Y + 3f + num29) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num30].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num30].velocity *= 0.05f;
					}
				}
				if (Math.Abs(velocity.X) < 15f && Math.Abs(velocity.Y) < 15f)
				{
					velocity *= 1.1f;
				}
			}
			else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
			{
				int num31 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
				Main.dust[num31].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
				Main.dust[num31].velocity *= 0.2f;
				Main.dust[num31].noGravity = true;
			}
			else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
			{
				if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2 && (double)velocity.Y > -0.2 && (double)velocity.Y < 0.2)
				{
					alpha += 2;
					if (alpha > 200)
					{
						alpha = 200;
					}
				}
				else
				{
					alpha = 0;
					int num32 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 3f) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100);
					Main.dust[num32].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num32].velocity *= 0.05f;
					Main.dust[num32].noGravity = true;
				}
			}
			else if (type == 779 || type == 783 || type == 862 || type == 863)
			{
				if (Main.rand.Next(25) == 0)
				{
					Dust dust6 = Dust.NewDustDirect(position, width, height, 228, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
					dust6.noGravity = true;
					dust6.velocity *= 0f;
					dust6.scale = 1.3f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust dust7 = Dust.NewDustDirect(position, width, height, 31, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
					dust7.noGravity = true;
					dust7.velocity *= 0f;
					dust7.scale = 1.3f;
				}
				if (frameCounter == 0)
				{
					frameCounter = 1;
					frame = Main.rand.Next(4);
				}
			}
			else if (type != 30 && type != 517 && type != 681 && type != 397 && type != 519 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && Main.rand.Next(2) == 0)
			{
				int num33 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
				Main.dust[num33].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
				Main.dust[num33].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
				Main.dust[num33].noGravity = true;
				Main.dust[num33].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
				int num34 = 6;
				if (type == 773)
				{
					num34 = 59;
				}
				if (type == 903)
				{
					num34 = Dust.dustWater();
				}
				if (type == 904)
				{
					num34 = 35;
				}
				if (type == 905)
				{
					num34 = 152;
				}
				if (type == 910 || type == 911)
				{
					num34 = 0;
				}
				Dust dust8 = Dust.NewDustDirect(position, width, height, num34, 0f, 0f, 100);
				dust8.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
				dust8.noGravity = true;
				dust8.position = base.Center + new Vector2(0f, -height / 2 - 6).RotatedBy(rotation) * 1.1f;
			}
			else if (type == 681)
			{
				Dust dust9 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
				dust9.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
				dust9.noGravity = true;
				dust9.position = base.Center + new Vector2(6 * Math.Sign(velocity.X), -height / 2 - 6).RotatedBy(rotation) * 1.1f;
			}
		}
		ai[0] += 1f;
		if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
		{
			if (velocity.X < 0f)
			{
				spriteDirection = -1;
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X) - 1.57f;
			}
			else
			{
				spriteDirection = 1;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
		{
			if (velocity != Vector2.Zero)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
		{
			velocity.Y += 0.2f;
			velocity *= 0.97f;
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
			{
				velocity.X = 0f;
			}
			if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
			{
				velocity.Y = 0f;
			}
		}
		else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
		{
			if (ai[0] > 15f)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.Y += 0.2f;
			}
		}
		else if (((type == 30 || type == 397 || type == 517 || type == 681 || type == 588 || type == 779 || type == 783 || type == 862 || type == 863) && ai[0] > 10f) || (type != 30 && type != 397 && type != 517 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && ai[0] > 5f))
		{
			ai[0] = 10f;
			if (velocity.Y == 0f && velocity.X != 0f)
			{
				velocity.X *= 0.97f;
				if (type == 29 || type == 470 || type == 637)
				{
					velocity.X *= 0.99f;
				}
				if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
				{
					velocity.X = 0f;
					netUpdate = true;
				}
			}
			velocity.Y += 0.2f;
			if (type == 911)
			{
				velocity.X = MathHelper.Clamp(velocity.X, -8f, 8f);
				velocity.Y = MathHelper.Clamp(velocity.Y, -8f, 8f);
			}
		}
		if (type == 519)
		{
			rotation += velocity.X * 0.06f;
		}
		else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 && (type < 338 || type > 341) && type != 776 && type != 780 && type != 793 && type != 796 && type != 799 && type != 784 && type != 787 && type != 790 && type != 803 && type != 804 && type != 808 && type != 809 && type != 810 && type != 805 && type != 806 && type != 807 && type != 930)
		{
			rotation += velocity.X * 0.1f;
		}
	}

	private void AI_166_Dove()
	{
		bool num = type == 855;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			frame = Main.rand.Next(4);
		}
		int num2 = 4;
		if (num)
		{
			num2 = 6;
		}
		if (++frameCounter > num2)
		{
			frameCounter = 0;
			if (++frame > 3)
			{
				frame = 0;
			}
		}
		spriteDirection = -1;
		if (velocity.X > 0f)
		{
			spriteDirection = 1;
		}
		if (num)
		{
			float num3 = 1f - (float)alpha / 255f;
			Vector3 rgb = new Vector3(1f, 0.6f, 0.1f) * num3;
			Lighting.AddLight(base.Center, rgb);
			rotation = velocity.X * 0.2f;
			if (velocity.Y < -1f)
			{
				velocity.Y *= 0.99f;
			}
			else
			{
				velocity.Y += (float)Math.Sin((float)(timeLeft % 200) / 200f * ((float)Math.PI * 2f)) * 0.25f;
				if (velocity.Y > 0.5f)
				{
					velocity.Y *= 0.8f;
				}
				velocity.Y = MathHelper.Clamp(velocity.Y, -1.5f, 1.5f);
			}
			float num4 = Main.WindForVisuals;
			if (num4 == 0f)
			{
				num4 = 0.1f;
			}
			velocity.X += 0.0525f * num4;
			velocity.X = MathHelper.Clamp(velocity.X, -2f, 2f);
		}
		else
		{
			rotation = velocity.X * 0.15f;
			velocity.Y -= 0.025f;
			if (velocity.Y < -3f)
			{
				velocity.Y = -3f;
			}
			velocity.X = MathHelper.Clamp(velocity.X, -5f, 5f);
		}
		if (timeLeft < 90)
		{
			alpha += 3;
		}
		if (alpha >= 255)
		{
			Kill();
		}
	}

	private void AI_161_RapierStabs()
	{
		Player player = Main.player[owner];
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		ai[0] += 1f;
		float num2 = (Opacity = Utils.GetLerpValue(0f, 7f, ai[0], clamped: true) * Utils.GetLerpValue(16f, 12f, ai[0], clamped: true));
		base.Center = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) + velocity * (ai[0] - 1f);
		spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
		if (ai[0] >= 16f)
		{
			Kill();
		}
		else
		{
			player.heldProj = whoAmI;
		}
	}

	private void AI_165_Whip()
	{
		Player player = Main.player[owner];
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		ai[0] += 1f;
		GetWhipSettings(this, out var timeToFlyOut, out var _, out var _);
		base.Center = Main.GetPlayerArmPosition(this) + velocity * (ai[0] - 1f);
		spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
		if (ai[0] >= timeToFlyOut || player.itemAnimation == 0)
		{
			Kill();
			return;
		}
		player.heldProj = whoAmI;
		player.itemAnimation = player.itemAnimationMax - (int)(ai[0] / (float)MaxUpdates);
		player.itemTime = player.itemAnimation;
		if (ai[0] == (float)(int)(timeToFlyOut / 2f))
		{
			_whipPointsForCollision.Clear();
			FillWhipControlPoints(this, _whipPointsForCollision);
			Vector2 vector = _whipPointsForCollision[_whipPointsForCollision.Count - 1];
			SoundEngine.PlaySound(SoundID.Item153, vector);
		}
		switch (type)
		{
		case 848:
		{
			float t3 = ai[0] / timeToFlyOut;
			float num5 = Utils.GetLerpValue(0.1f, 0.7f, t3, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t3, clamped: true);
			if (num5 > 0.1f && Main.rand.NextFloat() < num5 / 2f)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r4 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				int num6 = Dust.NewDust(r4.TopLeft(), r4.Width, r4.Height, 172, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity.X /= 2f;
				Main.dust[num6].velocity.Y /= 2f;
			}
			break;
		}
		case 847:
		{
			float t2 = ai[0] / timeToFlyOut;
			if (Utils.GetLerpValue(0.1f, 0.7f, t2, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t2, clamped: true) > 0.5f && Main.rand.Next(3) != 0)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				int num2 = Main.rand.Next(_whipPointsForCollision.Count - 10, _whipPointsForCollision.Count);
				Rectangle r2 = Utils.CenteredRectangle(_whipPointsForCollision[num2], new Vector2(30f, 30f));
				int num3 = 57;
				if (Main.rand.Next(3) == 0)
				{
					num3 = 43;
				}
				Dust dust3 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, num3, 0f, 0f, 100, Color.White);
				dust3.position = _whipPointsForCollision[num2];
				dust3.fadeIn = 0.3f;
				Vector2 spinningpoint = _whipPointsForCollision[num2] - _whipPointsForCollision[num2 - 1];
				dust3.noGravity = true;
				dust3.velocity *= 0.5f;
				dust3.velocity += spinningpoint.RotatedBy((float)player.direction * ((float)Math.PI / 2f));
				dust3.velocity *= 0.5f;
			}
			break;
		}
		case 849:
		{
			float num4 = ai[0] / timeToFlyOut;
			Utils.GetLerpValue(0.1f, 0.7f, num4, clamped: true);
			Utils.GetLerpValue(0.9f, 0.7f, num4, clamped: true);
			if (num4 > 0.4f && Main.rand.Next(9) != 0)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r3 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector3 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust4 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 191, 0f, 0f, 0, default(Color), 1.3f);
				dust4.noGravity = true;
				dust4.velocity += vector3 * 2f;
				if (Main.rand.Next(2) == 0)
				{
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
					{
						MovementVector = vector3,
						PositionInWorld = r3.Center.ToVector2()
					}, owner);
				}
				Lighting.AddLight(r3.Center.ToVector2(), new Vector3(0.2f, 0f, 0.4f));
			}
			break;
		}
		case 915:
		{
			float t5 = ai[0] / timeToFlyOut;
			if (Utils.GetLerpValue(0.1f, 0.7f, t5, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t5, clamped: true) > 0.1f)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r6 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector5 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust7 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 267, 0f, 0f, 0, Main.hslToRgb(player.miscCounterNormalized * 9f % 1f, 1f, 0.5f), 1.3f);
				dust7.velocity *= Main.rand.NextFloat() * 0.8f;
				dust7.noGravity = true;
				dust7.scale = 0.9f + Main.rand.NextFloat() * 0.9f;
				dust7.fadeIn = Main.rand.NextFloat() * 0.9f;
				dust7.velocity += vector5 * 2f;
				if (dust7.dustIndex != 6000)
				{
					Dust dust8 = Dust.CloneDust(dust7);
					dust8.scale /= 2f;
					dust8.fadeIn *= 0.85f;
					dust8.color = new Color(255, 255, 255, 255);
				}
			}
			break;
		}
		case 914:
		{
			float t6 = ai[0] / timeToFlyOut;
			float num8 = Utils.GetLerpValue(0.1f, 0.7f, t6, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t6, clamped: true);
			if (num8 > 0.1f && Main.rand.NextFloat() < num8 / 2f)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r7 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector6 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust9 = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 39, 0f, 0f, 0, default(Color), 1.2f);
				dust9.noGravity = Main.rand.Next(3) == 0;
				dust9.velocity += vector6 * 2f;
			}
			break;
		}
		case 952:
		{
			float t7 = ai[0] / timeToFlyOut;
			float num9 = Utils.GetLerpValue(0.1f, 0.7f, t7, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t7, clamped: true);
			if (num9 > 0.15f && Main.rand.NextFloat() < num9)
			{
				_whipPointsForCollision.Clear();
				FillWhipControlPoints(this, _whipPointsForCollision);
				Rectangle r8 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector7 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				Dust dust10 = Dust.NewDustDirect(r8.TopLeft(), r8.Width, r8.Height, 26, 0f, 0f, 0, default(Color), 0.7f);
				dust10.noGravity = Main.rand.Next(3) == 0;
				if (dust10.noGravity)
				{
					dust10.scale += 0.4f;
				}
				dust10.velocity += vector7 * 2f;
			}
			break;
		}
		case 912:
		{
			float t4 = ai[0] / timeToFlyOut;
			float num7 = Utils.GetLerpValue(0.1f, 0.7f, t4, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t4, clamped: true);
			if (!(num7 > 0.1f) || !(Main.rand.NextFloat() < num7 / 2f))
			{
				break;
			}
			_whipPointsForCollision.Clear();
			FillWhipControlPoints(this, _whipPointsForCollision);
			Rectangle r5 = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(30f, 30f));
			Vector2 vector4 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
			for (int j = 0; j < 3; j++)
			{
				Dust dust5 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 16, 0f, 0f, 0, default(Color), 1.2f);
				dust5.noGravity = true;
				dust5.velocity += vector4 * 2f;
			}
			for (int k = 0; k < 1; k++)
			{
				Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 13, 0f, 0f, 0, default(Color), 0.8f).velocity += vector4 * 2f;
			}
			for (int l = 0; l < 3; l++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Dust dust6 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 261, 0f, 0f, 0, Color.Transparent, 0.8f);
					dust6.velocity += vector4 * 2f;
					dust6.velocity *= 0.3f;
					dust6.noGravity = true;
				}
			}
			Lighting.AddLight(r5.Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
			break;
		}
		case 913:
		{
			float t = ai[0] / timeToFlyOut;
			float num = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
			if (!(num > 0.1f) || !(Main.rand.NextFloat() < num))
			{
				break;
			}
			_whipPointsForCollision.Clear();
			FillWhipControlPoints(this, _whipPointsForCollision);
			Rectangle r = Utils.CenteredRectangle(_whipPointsForCollision[_whipPointsForCollision.Count - 1], new Vector2(20f, 20f));
			Vector2 vector2 = _whipPointsForCollision[_whipPointsForCollision.Count - 2].DirectionTo(_whipPointsForCollision[_whipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
			for (int i = 0; i < 3; i++)
			{
				if (Main.rand.Next(3) != 0)
				{
					continue;
				}
				if (Main.rand.Next(7) == 0)
				{
					Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 31);
					dust.velocity.X /= 2f;
					dust.velocity.Y /= 2f;
					dust.velocity += vector2 * 2f;
					dust.fadeIn = 1f + Main.rand.NextFloat() * 0.6f;
					dust.noGravity = true;
					continue;
				}
				Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6, 0f, 0f, 0, default(Color), 1.2f);
				dust2.velocity += vector2 * 2f;
				if (Main.rand.Next(3) != 0)
				{
					dust2.fadeIn = 0.7f + Main.rand.NextFloat() * 0.9f;
					dust2.scale = 0.6f;
					dust2.noGravity = true;
				}
			}
			break;
		}
		}
	}

	public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
	{
		GetWhipSettings(proj, out var timeToFlyOut, out var segments, out var rangeMultiplier);
		float num = proj.ai[0] / timeToFlyOut;
		float num2 = 0.5f;
		float num3 = 1f + num2;
		float num4 = (float)Math.PI * 10f * (1f - num * num3) * (float)(-proj.spriteDirection) / (float)segments;
		float num5 = num * num3;
		float num6 = 0f;
		if (num5 > 1f)
		{
			num6 = (num5 - 1f) / num2;
			num5 = MathHelper.Lerp(1f, 0f, num6);
		}
		float num7 = proj.ai[0] - 1f;
		Player player = Main.player[proj.owner];
		Item heldItem = Main.player[proj.owner].HeldItem;
		num7 = (float)(ContentSamples.ItemsByType[heldItem.type].useAnimation * 2) * num * player.whipRangeMultiplier;
		float num8 = proj.velocity.Length() * num7 * num5 * rangeMultiplier / (float)segments;
		float num9 = 1f;
		Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
		Vector2 vector = playerArmPosition;
		float num10 = 0f - (float)Math.PI / 2f;
		Vector2 vector2 = vector;
		float num11 = 0f + (float)Math.PI / 2f + (float)Math.PI / 2f * (float)proj.spriteDirection;
		Vector2 vector3 = vector;
		float num12 = 0f + (float)Math.PI / 2f;
		controlPoints.Add(playerArmPosition);
		for (int i = 0; i < segments; i++)
		{
			float num13 = (float)i / (float)segments;
			float num14 = num4 * num13 * num9;
			Vector2 vector4 = vector + num10.ToRotationVector2() * num8;
			Vector2 vector5 = vector3 + num12.ToRotationVector2() * (num8 * 2f);
			Vector2 vector6 = vector2 + num11.ToRotationVector2() * (num8 * 2f);
			float num15 = 1f - num5;
			float num16 = 1f - num15 * num15;
			Vector2 value = Vector2.Lerp(vector5, vector4, num16 * 0.9f + 0.1f);
			Vector2 vector7 = Vector2.Lerp(vector6, value, num16 * 0.7f + 0.3f);
			Vector2 spinningpoint = playerArmPosition + (vector7 - playerArmPosition) * new Vector2(1f, num3);
			float num17 = num6;
			num17 *= num17;
			Vector2 item = spinningpoint.RotatedBy(proj.rotation + 4.712389f * num17 * (float)proj.spriteDirection, playerArmPosition);
			controlPoints.Add(item);
			num10 += num14;
			num12 += num14;
			num11 += num14;
			vector = vector4;
			vector3 = vector5;
			vector2 = vector6;
		}
	}

	public static void GetWhipSettings(Projectile proj, out float timeToFlyOut, out int segments, out float rangeMultiplier)
	{
		timeToFlyOut = Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates;
		segments = 20;
		rangeMultiplier = 1f;
		switch (proj.type)
		{
		case 913:
			rangeMultiplier *= 1.4f;
			break;
		case 912:
			rangeMultiplier *= 1.5f;
			break;
		case 841:
			rangeMultiplier *= 0.75f;
			break;
		case 914:
			rangeMultiplier *= 1f;
			break;
		case 847:
			segments = 20;
			rangeMultiplier *= 1.6f;
			break;
		case 849:
			segments = 30;
			rangeMultiplier = 1.8f;
			break;
		case 915:
			segments = 40;
			rangeMultiplier = 2.2f;
			break;
		case 848:
			rangeMultiplier = 1.2f;
			break;
		case 952:
			rangeMultiplier *= 0.95f;
			break;
		}
	}

	private void AI_160_Kites()
	{
		Player player = Main.player[owner];
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		timeLeft = 60;
		bool flag = false;
		if (player.CCed || player.noItems)
		{
			flag = true;
		}
		else if (player.inventory[player.selectedItem].shoot != type)
		{
			flag = true;
		}
		else if (player.pulley)
		{
			flag = true;
		}
		else if (player.dead)
		{
			flag = true;
		}
		if (!flag)
		{
			flag = (player.Center - base.Center).Length() > 2000f;
		}
		if (flag)
		{
			Kill();
			return;
		}
		float num = 4f;
		float num2 = 500f;
		float num3 = num2 / 2f;
		if (owner == Main.myPlayer && extraUpdates == 0)
		{
			float num4 = ai[0];
			if (ai[0] == 0f)
			{
				ai[0] = num3;
			}
			float num5 = ai[0];
			if (Main.mouseRight)
			{
				num5 -= 5f;
			}
			if (Main.mouseLeft)
			{
				num5 += 5f;
			}
			ai[0] = MathHelper.Clamp(num5, num, num2);
			if (num4 != num5)
			{
				netUpdate = true;
			}
		}
		if (numUpdates == 1)
		{
			extraUpdates = 0;
		}
		int num6 = 0;
		float cloudAlpha = Main.cloudAlpha;
		float num7 = 0f;
		if (WorldGen.InAPlaceWithWind(position, width, height))
		{
			num7 = Main.WindForVisuals;
		}
		float num8 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(num7), clamped: true) * 0.5f;
		switch (num6)
		{
		case 0:
		{
			Vector2 mouseWorld = Main.MouseWorld;
			mouseWorld = base.Center;
			mouseWorld += new Vector2(num7, (float)Math.Sin(Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
			Vector2 v = mouseWorld - base.Center;
			v = v.SafeNormalize(Vector2.Zero) * (3f + cloudAlpha * 7f);
			if (num8 == 0f)
			{
				v = velocity;
			}
			float num9 = Distance(mouseWorld);
			float lerpValue = Utils.GetLerpValue(5f, 10f, num9, clamped: true);
			float y = velocity.Y;
			if (num9 > 10f)
			{
				velocity = Vector2.Lerp(velocity, v, 0.075f * lerpValue);
			}
			velocity.Y = y;
			velocity.Y -= num8;
			velocity.Y += 0.02f + num8 * 0.25f;
			velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 2f);
			if (base.Center.Y + velocity.Y < mouseWorld.Y)
			{
				velocity.Y = MathHelper.Lerp(velocity.Y, velocity.Y + num8 + 0.01f, 0.75f);
			}
			velocity.X *= 0.98f;
			float num10 = Distance(vector);
			float num11 = ai[0];
			if (num10 > num11)
			{
				Vector2 vector3 = DirectionTo(vector);
				float num12 = num10 - num11;
				base.Center += vector3 * num12;
				bool num13 = Vector2.Dot(vector3, Vector2.UnitY) < 0.8f || num8 > 0f;
				velocity.Y += vector3.Y * 0.05f;
				if (num13)
				{
					velocity.Y -= 0.15f;
				}
				velocity.X += vector3.X * 0.2f;
				if (num11 == num && owner == Main.myPlayer)
				{
					Kill();
					return;
				}
			}
			break;
		}
		case 1:
		{
			Vector2 vector2 = DirectionTo(vector);
			velocity = Vector2.Lerp(velocity, vector2 * 16f, 1f);
			if (Distance(vector) < 10f && owner == Main.myPlayer)
			{
				Kill();
				return;
			}
			break;
		}
		}
		timeLeft = 2;
		Vector2 vector4 = base.Center - vector;
		int dir = ((vector4.X > 0f) ? 1 : (-1));
		if (Math.Abs(vector4.X) > Math.Abs(vector4.Y) / 2f)
		{
			player.ChangeDir(dir);
		}
		Vector2 vector5 = DirectionTo(vector).SafeNormalize(Vector2.Zero);
		if (num8 == 0f && velocity.Y > -0.02f)
		{
			rotation *= 0.95f;
		}
		else
		{
			float num14 = (-vector5).ToRotation() + (float)Math.PI / 4f;
			if (spriteDirection == -1)
			{
				num14 -= (float)Math.PI / 2f * (float)player.direction;
			}
			rotation = num14 + velocity.X * 0.05f;
		}
		float num15 = velocity.Length();
		switch (type)
		{
		case 771:
		case 822:
		case 823:
		case 827:
		case 830:
		case 838:
		case 843:
		case 844:
		case 845:
		case 846:
		case 850:
		case 852:
			frame = 0;
			break;
		case 828:
		case 829:
			if (num15 < 6f)
			{
				frame = 1;
			}
			else
			{
				frame = 0;
			}
			break;
		case 826:
			frame = (int)ai[1];
			break;
		case 824:
		case 839:
		case 840:
		case 853:
			if (num8 < 0.15f)
			{
				frame = 0;
				break;
			}
			frameCounter++;
			if ((float)frameCounter > (1f - num8) * 10f)
			{
				frameCounter = 0;
				frame = Main.rand.Next(4);
			}
			break;
		default:
			if (num15 < 3f)
			{
				frame = 0;
			}
			else if (num15 < 5f)
			{
				frame = 1;
			}
			else if (num15 < 7f)
			{
				frame = 2;
			}
			else
			{
				frame = 3;
			}
			break;
		}
		spriteDirection = player.direction;
	}

	private void AI_159_PaperAirplanes()
	{
		if (ai[1] == 0f)
		{
			direction = ((velocity.X > 0f) ? 1 : (-1));
			rotation = velocity.ToRotation();
			ai[1] = 1f;
			ai[0] = -Main.rand.Next(30, 80);
			netUpdate = true;
		}
		if (wet && owner == Main.myPlayer)
		{
			Kill();
		}
		ai[0] += 1f;
		Vector2 vector = rotation.ToRotationVector2() * 8f;
		float y = (float)Math.Sin((float)Math.PI * 2f * (float)(Main.timeForVisualEffects % 90.0 / 90.0)) * (float)direction * Main.WindForVisuals;
		Vector2 v = vector + new Vector2(Main.WindForVisuals, y);
		_ = Vector2.UnitX * direction;
		bool flag = direction == Math.Sign(Main.WindForVisuals) && velocity.Length() > 3f;
		bool num = ai[0] >= 20f && ai[0] <= 69f;
		if (ai[0] == 70f)
		{
			ai[0] = -Main.rand.Next(120, 600);
		}
		bool num2 = num && flag;
		if (num2)
		{
			float lerpValue = Utils.GetLerpValue(0f, 30f, ai[0], clamped: true);
			v = vector.RotatedBy((float)(-direction) * ((float)Math.PI * 2f) * 0.02f * lerpValue);
		}
		velocity = v.SafeNormalize(Vector2.UnitY) * velocity.Length();
		if (!num2)
		{
			float num3 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
			if (timeLeft % 40 < 20)
			{
				velocity.Y -= num3;
			}
			else
			{
				velocity.Y += num3;
			}
			if (velocity.Y < -2f)
			{
				velocity.Y = -2f;
			}
			if (velocity.Y > 2f)
			{
				velocity.Y = 2f;
			}
			velocity.X = MathHelper.Clamp(velocity.X + Main.WindForVisuals * 0.006f, -6f, 6f);
			if (velocity.X * oldVelocity.X < 0f)
			{
				direction *= -1;
				ai[0] = -Main.rand.Next(120, 300);
				netUpdate = true;
			}
		}
		rotation = velocity.ToRotation();
		spriteDirection = direction;
	}

	private void AI_158_BabyBird()
	{
		Player player = Main.player[owner];
		if (type == 759)
		{
			if (player.dead)
			{
				player.babyBird = false;
			}
			if (player.babyBird)
			{
				timeLeft = 2;
			}
			if (++frameCounter >= 6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type] - 1)
				{
					frame = 0;
				}
			}
		}
		float num = 6f;
		float num2 = 8f;
		int num3 = 800;
		float num4 = 150f;
		int attackTarget = -1;
		Minion_FindTargetInRange(num3, ref attackTarget, skipIfCannotHitWithOwnBody: false);
		if (attackTarget != -1)
		{
			NPC nPC = Main.npc[attackTarget];
			if (player.Distance(nPC.Center) > (float)num3)
			{
				attackTarget = -1;
			}
		}
		if (attackTarget != -1)
		{
			if (!Collision.SolidCollision(position, width, height))
			{
				tileCollide = true;
			}
			NPC nPC2 = Main.npc[attackTarget];
			float num5 = Distance(nPC2.Center);
			Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
			Rectangle value = new Rectangle((int)nPC2.position.X, (int)nPC2.position.Y, nPC2.width, nPC2.height);
			if (rectangle.Intersects(value))
			{
				tileCollide = false;
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num2)
				{
					velocity *= 1.1f;
				}
				if (velocity.Length() > num2)
				{
					velocity *= num2 / velocity.Length();
				}
			}
			else if (num5 > num4)
			{
				Vector2 vector = DirectionTo(nPC2.Center);
				velocity = Vector2.Lerp(velocity, vector * num, 0.15f);
			}
			else
			{
				tileCollide = false;
				Vector2 vector2 = DirectionTo(nPC2.Center);
				velocity += new Vector2(Math.Sign(vector2.X), Math.Sign(vector2.Y)) * 0.35f;
				if (velocity.Length() > num2)
				{
					velocity *= num2 / velocity.Length();
				}
			}
			float num6 = 0.025f;
			float num7 = width * 3;
			for (int i = 0; i < 1000; i++)
			{
				if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num7)
				{
					if (position.X < Main.projectile[i].position.X)
					{
						velocity.X -= num6;
					}
					else
					{
						velocity.X += num6;
					}
					if (position.Y < Main.projectile[i].position.Y)
					{
						velocity.Y -= num6;
					}
					else
					{
						velocity.Y += num6;
					}
				}
			}
			rotation = velocity.X * 0.1f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			return;
		}
		tileCollide = false;
		List<int> ai158_blacklistedTargets = _ai158_blacklistedTargets;
		ai158_blacklistedTargets.Clear();
		AI_GetMyGroupIndexAndFillBlackList(ai158_blacklistedTargets, out var index, out var _);
		localAI[0] = index;
		Vector2 vector3 = AI_158_GetHomeLocation(player, index);
		float num8 = Distance(vector3);
		bool flag = player.gravDir > 0f && player.fullRotation == 0f && player.headRotation == 0f;
		if (num8 > 2000f)
		{
			base.Center = vector3;
			frame = Main.projFrames[type] - 1;
			frameCounter = 0;
			velocity = Vector2.Zero;
			direction = (spriteDirection = player.direction);
			rotation = 0f;
		}
		else if (num8 > 40f)
		{
			float num9 = num + num8 * 0.006f;
			Vector2 vector4 = DirectionTo(vector3);
			vector4 *= MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, num8, clamped: true));
			velocity = Vector2.Lerp(velocity, vector4 * num9, 0.025f);
			if (velocity.Length() > num9)
			{
				velocity *= num9 / velocity.Length();
			}
			float num10 = 0.05f;
			float num11 = width;
			for (int j = 0; j < 1000; j++)
			{
				if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num11)
				{
					if (position.X < Main.projectile[j].position.X)
					{
						velocity.X -= num10;
					}
					else
					{
						velocity.X += num10;
					}
					if (position.Y < Main.projectile[j].position.Y)
					{
						velocity.Y -= num10;
					}
					else
					{
						velocity.Y += num10;
					}
				}
			}
			rotation = velocity.X * 0.04f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
		}
		else if (num8 > 8f + player.velocity.Length())
		{
			Vector2 vector5 = DirectionTo(vector3);
			velocity += new Vector2(Math.Sign(vector5.X), Math.Sign(vector5.Y)) * 0.05f;
			if (velocity.Length() > num)
			{
				velocity *= num / velocity.Length();
			}
			rotation = velocity.X * 0.1f;
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
		}
		else if (flag)
		{
			base.Center = vector3;
			frame = Main.projFrames[type] - 1;
			frameCounter = 0;
			velocity = Vector2.Zero;
			direction = (spriteDirection = player.direction);
			rotation = 0f;
		}
	}

	public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
	{
		int num = master.bodyFrame.Height;
		if (num == 0)
		{
			num = 1;
		}
		Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
		vector.Y -= 2f;
		switch (stackedIndex % 6)
		{
		case 1:
			vector += new Vector2(master.direction * 8, master.gravDir * -2f);
			break;
		case 2:
			vector += new Vector2(master.direction * -10, master.gravDir * -2f);
			break;
		case 4:
			vector += new Vector2(master.direction * 10, master.gravDir * -10f);
			break;
		case 5:
			vector += new Vector2(master.direction * -12, master.gravDir * -10f);
			break;
		case 3:
		{
			Vector2 vector2 = vector;
			_ = master.direction;
			vector = vector2 + new Vector2(0f, master.gravDir * -10f);
			break;
		}
		}
		vector += new Vector2(0f, master.gravDir * -16f) * (stackedIndex / 6);
		Vector2 vector3 = master.RotatedRelativePoint(master.MountedCenter);
		_ = master.direction;
		return (vector3 + new Vector2(0f, master.gravDir * -21f) + vector).Floor();
	}

	private void Minion_FindTargetInRange(int startAttackRange, ref int attackTarget, bool skipIfCannotHitWithOwnBody, Func<Entity, int, bool> customEliminationCheck = null)
	{
		float num = startAttackRange;
		float num2 = num;
		float num3 = num;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(ownerMinionAttackTargetNPC, num, out var _, out var _, out var _))
		{
			attackTarget = ownerMinionAttackTargetNPC.whoAmI;
		}
		else
		{
			if (attackTarget >= 0)
			{
				return;
			}
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(nPC, num, out var myDistance2, out var playerDistance2, out var closerIsMe2) && (!skipIfCannotHitWithOwnBody || CanHitWithOwnBody(nPC)) && (customEliminationCheck == null || customEliminationCheck(nPC, attackTarget)))
				{
					attackTarget = i;
					num = (closerIsMe2 ? myDistance2 : playerDistance2);
					if (num2 > myDistance2)
					{
						num2 = myDistance2;
					}
					if (num3 > playerDistance2)
					{
						num3 = playerDistance2;
					}
					num = Math.Max(num2, num3);
				}
			}
		}
	}

	private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget)
	{
		return true;
	}

	private bool AI_067_TigerSpecialAttack()
	{
		List<NPC> list = new List<NPC>();
		Vector2 center = Main.player[owner].Center;
		Rectangle value = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
		int num = Main.player[owner].ownedProjectileCounts[831] + 1;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Intersects(value))
			{
				list.Add(nPC);
			}
		}
		if (list.Count == 0)
		{
			return false;
		}
		NPC nPC2 = list[0];
		for (int j = 1; j < list.Count; j++)
		{
			if (Vector2.Distance(nPC2.Center, center) > Vector2.Distance(list[j].Center, center))
			{
				nPC2 = list[j];
			}
		}
		list.Remove(nPC2);
		NPC nPC3 = null;
		if (list.Count > 0)
		{
			nPC3 = list[0];
			for (int k = 1; k < list.Count; k++)
			{
				if (Distance(nPC3.Center) > Distance(list[k].Center))
				{
					nPC3 = list[k];
				}
			}
			list.Remove(nPC3);
		}
		List<Vector2> list2 = new List<Vector2>();
		if (nPC3 != null)
		{
			list2.Add(nPC3.Center);
		}
		int num2 = 0;
		while (list.Count > 0 && list2.Count < num - 1)
		{
			int index = Main.rand.Next(list.Count);
			Vector2 vector = list[index].velocity * 4f * (num2 + 1);
			list2.Add(list[index].Center + vector);
			list.RemoveAt(index);
			num2++;
		}
		if (nPC2 != null)
		{
			list2.Add(nPC2.Center);
		}
		Vector2 vector2 = base.Center;
		float num3 = Math.Min(20, 30 / list2.Count);
		float num4 = 0f;
		for (int l = 0; l < list2.Count; l++)
		{
			float num5 = 20f;
			Vector2 vector3 = list2[l];
			vector3.X += ((vector2.X < vector3.X) ? num5 : (0f - num5));
			Vector2 vector4 = vector3 - vector2;
			int num6 = (int)Math.Min(num3, 4.0 + Math.Ceiling(vector4.Length() / 50f));
			if (num6 < 5)
			{
				num6 = 5;
			}
			NewProjectile(vector2, vector4, 818, damage, 0f, owner, (0f - num4) * 4f, num6 * 4);
			vector2 = vector3;
			num4 += (float)num6;
		}
		base.Center = vector2;
		ai[0] = 4f;
		ai[1] = num4;
		netUpdate = true;
		return true;
	}

	private void AI_067_FreakingPirates()
	{
		Player player = Main.player[owner];
		if (!player.active)
		{
			active = false;
			return;
		}
		bool flag = type == 393 || type == 394 || type == 395;
		bool flag2 = type == 758;
		bool flag3 = type == 833 || type == 834 || type == 835;
		bool flag4 = type == 834 || type == 835;
		bool flag5 = type == 951;
		int num = 450;
		float num2 = 500f;
		float num3 = 300f;
		int num4 = 15;
		if (flag5)
		{
			if (player.dead)
			{
				player.flinxMinion = false;
			}
			if (player.flinxMinion)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		if (flag)
		{
			if (player.dead)
			{
				player.pirateMinion = false;
			}
			if (player.pirateMinion)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		if (flag3)
		{
			if (player.dead)
			{
				player.stormTiger = false;
			}
			if (player.stormTiger)
			{
				timeLeft = 2;
			}
			num = 800;
			if (ai[0] != 4f)
			{
				if (velocity != Vector2.Zero && Main.rand.Next(18) == 0)
				{
					Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
					obj.fadeIn = 0.5f;
					obj.scale = 0.3f;
					obj.noLight = true;
					obj.velocity += velocity * 0.005f;
				}
				if (type == 833)
				{
					Lighting.AddLight(base.Center, Vector3.One * 0.5f);
				}
				if (type == 834)
				{
					Lighting.AddLight(base.Center, Vector3.One * 0.8f);
				}
				if (type == 835)
				{
					Lighting.AddLight(base.Center, Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f).ToVector3() * 1f);
				}
			}
			if (owner == Main.myPlayer)
			{
				if (localAI[0] <= 0f)
				{
					int num5 = type switch
					{
						834 => 300, 
						835 => 240, 
						_ => 360, 
					};
					if (damage != 0)
					{
						bool flag6 = AI_067_TigerSpecialAttack();
						localAI[0] = (flag6 ? num5 : 10);
					}
				}
				else
				{
					localAI[0] -= 1f;
				}
			}
		}
		if (flag2)
		{
			if (player.dead)
			{
				player.vampireFrog = false;
			}
			if (player.vampireFrog)
			{
				timeLeft = 2;
			}
			num = 800;
		}
		if (type == 500)
		{
			num2 = 200f;
			if (player.dead)
			{
				player.crimsonHeart = false;
			}
			if (player.crimsonHeart)
			{
				timeLeft = 2;
			}
		}
		if (type == 653)
		{
			num2 = 300f;
			if (player.dead)
			{
				player.companionCube = false;
			}
			if (player.companionCube)
			{
				timeLeft = 2;
			}
		}
		if (flag3 && ai[0] == 4f)
		{
			velocity = Vector2.Zero;
			frame = 9;
			if (flag4)
			{
				frame = 11;
			}
			ai[1] -= 1f;
			if (!(ai[1] <= 0f))
			{
				return;
			}
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		Vector2 vector = player.Center;
		if (flag5)
		{
			vector.X -= (45 + player.width / 2) * player.direction;
			vector.X -= minionPos * 30 * player.direction;
		}
		else if (flag)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= minionPos * 20 * player.direction;
		}
		else if (flag3)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= minionPos * 40 * player.direction;
		}
		else if (flag2)
		{
			vector.X -= (35 + player.width / 2) * player.direction;
			vector.X -= minionPos * 40 * player.direction;
		}
		else if (type == 500)
		{
			vector.X -= (15 + player.width / 2) * player.direction;
			vector.X -= 40 * player.direction;
		}
		else if (type == 653)
		{
			vector.X = player.Center.X;
		}
		if (type == 500)
		{
			Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
			int num6 = 6;
			if (frame == 0 || frame == 2)
			{
				num6 = 12;
			}
			if (++frameCounter >= num6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			rotation += velocity.X / 20f;
			Vector2 vector2 = (-Vector2.UnitY).RotatedBy(rotation).RotatedBy((float)direction * 0.2f);
			int num7 = Dust.NewDust(base.Center + vector2 * 10f - new Vector2(4f), 0, 0, 5, vector2.X, vector2.Y, 0, Color.Transparent);
			Main.dust[num7].scale = 1f;
			Main.dust[num7].velocity = vector2.RotatedByRandom(0.78539818525314331) * 3.5f;
			Main.dust[num7].noGravity = true;
			Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
		}
		if (type == 653)
		{
			rotation += velocity.X / 20f;
			if (owner >= 0 && owner < 255)
			{
				_CompanionCubeScreamCooldown[owner] -= 1f;
				if (_CompanionCubeScreamCooldown[owner] < 0f)
				{
					_CompanionCubeScreamCooldown[owner] = 0f;
				}
			}
			Tile tileSafely = Framing.GetTileSafely(base.Center);
			if (tileSafely.liquid > 0 && tileSafely.lava())
			{
				localAI[0] += 1f;
			}
			else
			{
				localAI[0] -= 1f;
			}
			localAI[0] = MathHelper.Clamp(localAI[0], 0f, 20f);
			if (localAI[0] >= 20f)
			{
				if (_CompanionCubeScreamCooldown[owner] == 0f)
				{
					_CompanionCubeScreamCooldown[owner] = 3600f;
					SoundEngine.PlaySound((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59, position);
				}
				Kill();
			}
			Vector3 vector3 = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16).ToVector3();
			Vector3 vector4 = Lighting.GetColor((int)player.Center.X / 16, (int)player.Center.Y / 16).ToVector3();
			if (vector3.Length() < 0.15f && vector4.Length() < 0.15f)
			{
				localAI[1] += 1f;
			}
			else if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			localAI[1] = MathHelper.Clamp(localAI[1], -3600f, 120f);
			if (localAI[1] > (float)Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
			{
				if (Main.rand.Next(5) == 0)
				{
					SoundEngine.PlaySound(SoundID.Item16, base.Center);
					localAI[1] = -600f;
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					player.Hurt(PlayerDeathReason.ByOther(6), 3, 0);
					player.immune = false;
					player.immuneTime = 0;
					localAI[1] = -300 + Main.rand.Next(30) * -10;
				}
			}
		}
		bool flag7 = true;
		if (type == 500 || type == 653)
		{
			flag7 = false;
		}
		shouldFallThrough = player.position.Y + (float)player.height - 12f > position.Y + (float)height;
		friendly = false;
		int num8 = 0;
		int num9 = 15;
		int attackTarget = -1;
		bool flag8 = true;
		bool flag9 = ai[0] == 5f;
		if (flag5)
		{
			flag8 = false;
			friendly = true;
		}
		if (flag2)
		{
			friendly = true;
			num9 = 20;
			num8 = 60;
		}
		if (flag3)
		{
			flag8 = false;
			friendly = true;
			originalDamage = player.highestStormTigerGemOriginalDamage;
		}
		bool flag10 = ai[0] == 0f;
		if (flag3 && flag9)
		{
			flag10 = true;
		}
		if (flag10 && flag7)
		{
			Minion_FindTargetInRange(num, ref attackTarget, skipIfCannotHitWithOwnBody: true, AI_067_CustomEliminationCheck_Pirates);
		}
		if (flag3 && flag9)
		{
			if (attackTarget >= 0)
			{
				float maxDistance = num;
				NPC nPC = Main.npc[attackTarget];
				vector = nPC.Center;
				if (!IsInRangeOfMeOrMyOwner(nPC, maxDistance, out var _, out var _, out var _))
				{
					ai[0] = 0f;
					ai[1] = 0f;
					return;
				}
				Point point = nPC.Top.ToTileCoordinates();
				int num10 = 0;
				int num11 = point.Y;
				while (num10 < num4)
				{
					Tile tile = Main.tile[point.X, num11];
					if (tile == null || tile.active())
					{
						break;
					}
					num10++;
					num11++;
				}
				int num12 = num4 / 2;
				if (num10 < num12)
				{
					ai[0] = 0f;
					ai[1] = 0f;
					return;
				}
				if (base.Hitbox.Intersects(nPC.Hitbox) && velocity.Y >= 0f)
				{
					velocity.Y = -8f;
					velocity.X = direction * 10;
				}
				float num13 = 20f;
				float maxAmountAllowedToMove = 4f;
				float num14 = 40f;
				float num15 = 40f;
				Vector2 top = nPC.Top;
				float num16 = (float)Math.Cos(Main.time / (double)num14 * 6.2831854820251465);
				if (num16 > 0f)
				{
					num16 *= -1f;
				}
				num16 *= num15;
				top.Y += num16;
				Vector2 vector5 = top - base.Center;
				if (vector5.Length() > num13)
				{
					vector5 = vector5.SafeNormalize(Vector2.Zero) * num13;
				}
				velocity = velocity.MoveTowards(vector5, maxAmountAllowedToMove);
				frame = 8;
				if (flag4)
				{
					frame = 10;
				}
				rotation += 0.6f * (float)spriteDirection;
			}
			else
			{
				ai[0] = 0f;
				ai[1] = 0f;
			}
			return;
		}
		if (ai[0] == 1f)
		{
			tileCollide = false;
			float num17 = 0.2f;
			float num18 = 10f;
			int num19 = 200;
			if (num18 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
			{
				num18 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
			}
			Vector2 vector6 = player.Center - base.Center;
			float num20 = vector6.Length();
			if (num20 > 2000f)
			{
				position = player.Center - new Vector2(width, height) / 2f;
			}
			if (num20 < (float)num19 && player.velocity.Y == 0f && position.Y + (float)height <= player.position.Y + (float)player.height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				netUpdate = true;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (!(num20 < 60f))
			{
				vector6.Normalize();
				vector6 *= num18;
				if (velocity.X < vector6.X)
				{
					velocity.X += num17;
					if (velocity.X < 0f)
					{
						velocity.X += num17 * 1.5f;
					}
				}
				if (velocity.X > vector6.X)
				{
					velocity.X -= num17;
					if (velocity.X > 0f)
					{
						velocity.X -= num17 * 1.5f;
					}
				}
				if (velocity.Y < vector6.Y)
				{
					velocity.Y += num17;
					if (velocity.Y < 0f)
					{
						velocity.Y += num17 * 1.5f;
					}
				}
				if (velocity.Y > vector6.Y)
				{
					velocity.Y -= num17;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num17 * 1.5f;
					}
				}
			}
			if (velocity.X != 0f)
			{
				spriteDirection = Math.Sign(velocity.X);
			}
			if (flag5)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 2 || frame >= Main.projFrames[type])
				{
					frame = 2;
				}
				rotation = rotation.AngleTowards(rotation + 0.25f * (float)spriteDirection, 0.25f);
			}
			if (flag)
			{
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if ((frame < 10) | (frame > 13))
				{
					frame = 10;
				}
				rotation = velocity.X * 0.1f;
			}
			if (flag2)
			{
				int num21 = 3;
				if (++frameCounter >= num21 * 4)
				{
					frameCounter = 0;
				}
				frame = 14 + frameCounter / num21;
				rotation = velocity.X * 0.15f;
			}
			if (flag3)
			{
				frame = 8;
				if (flag4)
				{
					frame = 10;
				}
				rotation += 0.6f * (float)spriteDirection;
			}
		}
		if (ai[0] == 2f && ai[1] < 0f)
		{
			friendly = false;
			ai[1] += 1f;
			if (num9 >= 0)
			{
				ai[1] = 0f;
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
		}
		else if (ai[0] == 2f)
		{
			spriteDirection = direction;
			rotation = 0f;
			if (flag)
			{
				friendly = true;
				frame = 4 + (int)((float)num9 - ai[1]) / (num9 / 3);
				if (velocity.Y != 0f)
				{
					frame += 3;
				}
			}
			if (flag2)
			{
				float num22 = ((float)num9 - ai[1]) / (float)num9;
				if ((double)num22 > 0.25 && (double)num22 < 0.75)
				{
					friendly = true;
				}
				int num23 = (int)(num22 * 5f);
				if (num23 > 2)
				{
					num23 = 4 - num23;
				}
				if (velocity.Y != 0f)
				{
					frame = 21 + num23;
				}
				else
				{
					frame = 18 + num23;
				}
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.8f;
				}
			}
			velocity.Y += 0.4f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
			ai[1] -= 1f;
			if (ai[1] <= 0f)
			{
				if (num8 <= 0)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				ai[1] = -num8;
			}
		}
		if (attackTarget >= 0)
		{
			float maxDistance2 = num;
			float num24 = 20f;
			if (flag2)
			{
				num24 = 50f;
			}
			NPC nPC2 = Main.npc[attackTarget];
			Vector2 center = nPC2.Center;
			vector = center;
			if (IsInRangeOfMeOrMyOwner(nPC2, maxDistance2, out var _, out var _, out var _))
			{
				shouldFallThrough = nPC2.Center.Y > base.Bottom.Y;
				bool flag11 = velocity.Y == 0f;
				if (wet && velocity.Y > 0f && !shouldFallThrough)
				{
					flag11 = true;
				}
				if (center.Y < base.Center.Y - 30f && flag11)
				{
					float num25 = (center.Y - base.Center.Y) * -1f;
					float num26 = 0.4f;
					float num27 = (float)Math.Sqrt(num25 * 2f * num26);
					if (num27 > 26f)
					{
						num27 = 26f;
					}
					velocity.Y = 0f - num27;
				}
				if (flag8 && Vector2.Distance(base.Center, vector) < num24)
				{
					if (velocity.Length() > 10f)
					{
						velocity /= velocity.Length() / 10f;
					}
					ai[0] = 2f;
					ai[1] = num9;
					netUpdate = true;
					direction = ((center.X - base.Center.X > 0f) ? 1 : (-1));
				}
				if (flag3)
				{
					Point point2 = nPC2.Top.ToTileCoordinates();
					int num28 = 0;
					int num29 = point2.Y;
					while (num28 < num4)
					{
						Tile tile2 = Main.tile[point2.X, num29];
						if (tile2 == null || tile2.active())
						{
							break;
						}
						num28++;
						num29++;
					}
					if (num28 >= num4)
					{
						ai[0] = 5f;
						ai[1] = 0f;
						netUpdate = true;
						return;
					}
					if (base.Hitbox.Intersects(nPC2.Hitbox) && velocity.Y >= 0f)
					{
						velocity.Y = -4f;
						velocity.X = direction * 10;
					}
				}
			}
			if (flag2)
			{
				int num30 = 1;
				if (center.X - base.Center.X < 0f)
				{
					num30 = -1;
				}
				vector.X += 20 * -num30;
			}
		}
		if (ai[0] == 0f && attackTarget < 0)
		{
			if (Main.player[owner].rocketDelay2 > 0)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			Vector2 vector7 = player.Center - base.Center;
			if (vector7.Length() > 2000f)
			{
				position = player.Center - new Vector2(width, height) / 2f;
			}
			else if (vector7.Length() > num2 || Math.Abs(vector7.Y) > num3)
			{
				ai[0] = 1f;
				netUpdate = true;
				if (velocity.Y > 0f && vector7.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y < 0f && vector7.Y > 0f)
				{
					velocity.Y = 0f;
				}
			}
		}
		if (ai[0] == 0f)
		{
			if (attackTarget < 0)
			{
				if (Distance(player.Center) > 60f && Distance(vector) > 60f && Math.Sign(vector.X - player.Center.X) != Math.Sign(base.Center.X - player.Center.X))
				{
					vector = player.Center;
				}
				Rectangle r = Utils.CenteredRectangle(vector, base.Size);
				for (int i = 0; i < 20; i++)
				{
					if (Collision.SolidCollision(r.TopLeft(), r.Width, r.Height))
					{
						break;
					}
					r.Y += 16;
					vector.Y += 16f;
				}
				Vector2 vector8 = Collision.TileCollision(player.Center - base.Size / 2f, vector - player.Center, width, height);
				vector = player.Center - base.Size / 2f + vector8;
				if (Distance(vector) < 32f)
				{
					float num31 = player.Center.Distance(vector);
					if (player.Center.Distance(base.Center) < num31)
					{
						vector = base.Center;
					}
				}
				Vector2 vector9 = player.Center - vector;
				if (vector9.Length() > num2 || Math.Abs(vector9.Y) > num3)
				{
					Rectangle r2 = Utils.CenteredRectangle(player.Center, base.Size);
					Vector2 vector10 = vector - player.Center;
					Vector2 vector11 = r2.TopLeft();
					for (float num32 = 0f; num32 < 1f; num32 += 0.05f)
					{
						Vector2 vector12 = r2.TopLeft() + vector10 * num32;
						if (Collision.SolidCollision(r2.TopLeft() + vector10 * num32, r.Width, r.Height))
						{
							break;
						}
						vector11 = vector12;
					}
					vector = vector11 + base.Size / 2f;
				}
			}
			tileCollide = true;
			float num33 = 0.5f;
			float num34 = 4f;
			float num35 = 4f;
			float num36 = 0.1f;
			if (flag5 && attackTarget != -1)
			{
				num33 = 0.65f;
				num34 = 5.5f;
				num35 = 5.5f;
			}
			if (flag && attackTarget != -1)
			{
				num33 = 1f;
				num34 = 8f;
				num35 = 8f;
			}
			if (flag2 && attackTarget != -1)
			{
				num33 = 0.7f;
				num34 = 6f;
				num35 = 6f;
			}
			if (flag3 && attackTarget != -1)
			{
				num33 = 0.7f;
				num34 = 6f;
				num35 = 6f;
			}
			if (num35 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
			{
				num35 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
				num33 = 0.7f;
			}
			int num37 = 0;
			bool flag12 = false;
			float num38 = vector.X - base.Center.X;
			Vector2 vector13 = vector - base.Center;
			if (type == 653 && Math.Abs(num38) < 150f)
			{
				rotation = rotation.AngleTowards(0f, 0.2f);
				velocity.X *= 0.9f;
				if ((double)Math.Abs(velocity.X) < 0.1)
				{
					velocity.X = 0f;
				}
			}
			else if (Math.Abs(num38) > 5f)
			{
				if (num38 < 0f)
				{
					num37 = -1;
					if (velocity.X > 0f - num34)
					{
						velocity.X -= num33;
					}
					else
					{
						velocity.X -= num36;
					}
				}
				else
				{
					num37 = 1;
					if (velocity.X < num34)
					{
						velocity.X += num33;
					}
					else
					{
						velocity.X += num36;
					}
				}
				bool flag13 = true;
				if (flag)
				{
					flag13 = false;
				}
				if (type == 653)
				{
					flag13 = false;
				}
				if (flag2 && attackTarget == -1)
				{
					flag13 = false;
				}
				if (flag3)
				{
					flag13 = vector13.Y < -80f;
				}
				if (flag5)
				{
					flag13 = attackTarget > -1 && Main.npc[attackTarget].Hitbox.Intersects(base.Hitbox);
				}
				if (flag13)
				{
					flag12 = true;
				}
			}
			else
			{
				velocity.X *= 0.9f;
				if (Math.Abs(velocity.X) < num33 * 2f)
				{
					velocity.X = 0f;
				}
			}
			bool flag14 = Math.Abs(vector13.X) >= 64f || (vector13.Y <= -48f && Math.Abs(vector13.X) >= 8f);
			if (num37 != 0 && flag14)
			{
				int num39 = (int)(position.X + (float)(width / 2)) / 16;
				int num40 = (int)position.Y / 16;
				num39 += num37;
				num39 += (int)velocity.X;
				for (int j = num40; j < num40 + height / 16 + 1; j++)
				{
					if (WorldGen.SolidTile(num39, j))
					{
						flag12 = true;
					}
				}
			}
			if (type == 500 && velocity.X != 0f)
			{
				flag12 = true;
			}
			if (type == 653 && Math.Abs(velocity.X) > 3f)
			{
				flag12 = true;
			}
			Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
			float num41 = Utils.GetLerpValue(0f, 100f, vector13.Y, clamped: true) * Utils.GetLerpValue(-2f, -6f, velocity.Y, clamped: true);
			if (velocity.Y == 0f && flag12)
			{
				for (int k = 0; k < 3; k++)
				{
					int num42 = (int)(position.X + (float)(width / 2)) / 16;
					if (k == 0)
					{
						num42 = (int)position.X / 16;
					}
					if (k == 2)
					{
						num42 = (int)(position.X + (float)width) / 16;
					}
					int num43 = (int)(position.Y + (float)height) / 16;
					if (!WorldGen.SolidTile(num42, num43) && !Main.tile[num42, num43].halfBrick() && Main.tile[num42, num43].slope() <= 0 && (!TileID.Sets.Platforms[Main.tile[num42, num43].type] || !Main.tile[num42, num43].active() || Main.tile[num42, num43].inActive()))
					{
						continue;
					}
					try
					{
						num42 = (int)(position.X + (float)(width / 2)) / 16;
						num43 = (int)(position.Y + (float)(height / 2)) / 16;
						num42 += num37;
						num42 += (int)velocity.X;
						if (!WorldGen.SolidTile(num42, num43 - 1) && !WorldGen.SolidTile(num42, num43 - 2))
						{
							velocity.Y = -5.1f;
						}
						else if (!WorldGen.SolidTile(num42, num43 - 2))
						{
							velocity.Y = -7.1f;
						}
						else if (WorldGen.SolidTile(num42, num43 - 5))
						{
							velocity.Y = -11.1f;
						}
						else if (WorldGen.SolidTile(num42, num43 - 4))
						{
							velocity.Y = -10.1f;
						}
						else
						{
							velocity.Y = -9.1f;
						}
					}
					catch
					{
						velocity.Y = -9.1f;
					}
				}
				if (vector.Y - base.Center.Y < -48f)
				{
					float num44 = vector.Y - base.Center.Y;
					num44 *= -1f;
					if (num44 < 60f)
					{
						velocity.Y = -6f;
					}
					else if (num44 < 80f)
					{
						velocity.Y = -7f;
					}
					else if (num44 < 100f)
					{
						velocity.Y = -8f;
					}
					else if (num44 < 120f)
					{
						velocity.Y = -9f;
					}
					else if (num44 < 140f)
					{
						velocity.Y = -10f;
					}
					else if (num44 < 160f)
					{
						velocity.Y = -11f;
					}
					else if (num44 < 190f)
					{
						velocity.Y = -12f;
					}
					else if (num44 < 210f)
					{
						velocity.Y = -13f;
					}
					else if (num44 < 270f)
					{
						velocity.Y = -14f;
					}
					else if (num44 < 310f)
					{
						velocity.Y = -15f;
					}
					else
					{
						velocity.Y = -16f;
					}
				}
				if (wet && num41 == 0f)
				{
					velocity.Y *= 2f;
				}
			}
			if (velocity.X > num35)
			{
				velocity.X = num35;
			}
			if (velocity.X < 0f - num35)
			{
				velocity.X = 0f - num35;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			if (velocity.X == 0f)
			{
				direction = ((player.Center.X > base.Center.X) ? 1 : (-1));
			}
			if (velocity.X > num33 && num37 == 1)
			{
				direction = 1;
			}
			if (velocity.X < 0f - num33 && num37 == -1)
			{
				direction = -1;
			}
			spriteDirection = direction;
			if (flag5)
			{
				if (velocity.Y == 0f)
				{
					rotation = rotation.AngleTowards(0f, 0.3f);
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 2 || frame >= Main.projFrames[type])
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					rotation = Math.Min(4f, velocity.Y) * -0.1f;
					if (spriteDirection == -1)
					{
						rotation -= (float)Math.PI * 2f;
					}
					frameCounter = 0;
					frame = 1;
				}
			}
			if (flag)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 4)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 14;
				}
			}
			if (flag2)
			{
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						int num45 = 4;
						if (++frameCounter >= 7 * num45 && Main.rand.Next(50) == 0)
						{
							frameCounter = 0;
						}
						int num46 = frameCounter / num45;
						if (num46 >= 4)
						{
							num46 = 6 - num46;
						}
						if (num46 < 0)
						{
							num46 = 0;
						}
						frame = 1 + num46;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						int num47 = 15;
						int num48 = 8;
						if (frameCounter >= num48 * num47)
						{
							frameCounter = 0;
						}
						int num49 = frameCounter / num47;
						frame = num49 + 5;
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						if (frame > 9 || frame < 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						if (++frameCounter >= 1 && frame < 9)
						{
							frame++;
							frameCounter = 0;
						}
					}
					else
					{
						if (frame > 13 || frame < 9)
						{
							frame = 9;
							frameCounter = 0;
						}
						if (++frameCounter >= 2 && frame < 11)
						{
							frame++;
							frameCounter = 0;
						}
					}
				}
			}
			if (flag3)
			{
				int num50 = 8;
				if (flag4)
				{
					num50 = 10;
				}
				rotation = 0f;
				if (velocity.Y == 0f)
				{
					if (velocity.X == 0f)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if (Math.Abs(velocity.X) >= 0.5f)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 10)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= num50 || frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 1;
					if (flag4)
					{
						frame = 9;
					}
				}
			}
			velocity.Y += 0.4f + num41 * 1f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		if (!flag)
		{
			return;
		}
		localAI[0] += 1f;
		if (velocity.X == 0f)
		{
			localAI[0] += 1f;
		}
		if (localAI[0] >= (float)Main.rand.Next(900, 1200))
		{
			localAI[0] = 0f;
			for (int l = 0; l < 6; l++)
			{
				int num51 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
				Main.dust[num51].velocity /= 2f;
				Main.dust[num51].scale = 0.8f;
			}
			int num52 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
			Main.gore[num52].velocity /= 2f;
			Main.gore[num52].velocity.Y = Math.Abs(Main.gore[num52].velocity.Y);
			Main.gore[num52].velocity.X = (0f - Math.Abs(Main.gore[num52].velocity.X)) * (float)direction;
		}
	}

	private void AI_157_SharpTears()
	{
		bool flag = ai[0] < 20f;
		bool flag2 = ai[0] > 20f;
		bool flag3 = ai[0] >= 30f;
		ai[0] += 1f;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			rotation = velocity.ToRotation();
			frame = Main.rand.Next(6);
			for (int i = 0; i < 30; i++)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 5, velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
				dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
			for (int j = 0; j < 30; j++)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 5, Main.rand.NextVector2Circular(2f, 2f) + velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust2.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust2.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				dust2.fadeIn = 1f;
			}
			SoundEngine.PlaySound(SoundID.Item113, base.Center);
		}
		if (flag)
		{
			Opacity += 0.1f;
			scale = Opacity * ai[1];
			for (int k = 0; k < 2; k++)
			{
				Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), 5, velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust3.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust3.velocity *= 0.5f;
				dust3.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
		}
		if (flag2)
		{
			Opacity -= 0.2f;
			for (int l = 0; l < 2; l++)
			{
				Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), 5, velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
				dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
				dust4.velocity *= 0.5f;
				dust4.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
			}
		}
		if (flag3)
		{
			Kill();
		}
		Lighting.AddLight(base.Center, new Vector3(0.5f, 0.1f, 0.1f) * scale);
	}

	private bool IsInRangeOfMeOrMyOwner(Entity entity, float maxDistance, out float myDistance, out float playerDistance, out bool closerIsMe)
	{
		myDistance = Vector2.Distance(entity.Center, base.Center);
		if (myDistance < maxDistance && !CanHitWithOwnBody(entity))
		{
			myDistance = float.PositiveInfinity;
		}
		playerDistance = Vector2.Distance(entity.Center, Main.player[owner].Center);
		if (playerDistance < maxDistance && !CanHitWithMeleeWeapon(entity))
		{
			playerDistance = float.PositiveInfinity;
		}
		closerIsMe = myDistance < playerDistance;
		if (closerIsMe)
		{
			return myDistance <= maxDistance;
		}
		return playerDistance <= maxDistance;
	}

	private void AI_156_BatOfLight()
	{
		List<int> ai156_blacklistedTargets = _ai156_blacklistedTargets;
		Player player = Main.player[owner];
		bool num = type == 755;
		bool flag = type == 946;
		if (num)
		{
			if (player.dead)
			{
				player.batsOfLight = false;
			}
			if (player.batsOfLight)
			{
				timeLeft = 2;
			}
			DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
			Point point = base.Center.ToTileCoordinates();
			DelegateMethods.CastLightOpen(point.X, point.Y);
			if (++frameCounter >= 6)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type] - 1)
				{
					frame = 0;
				}
			}
			int num2 = player.direction;
			if (velocity.X != 0f)
			{
				num2 = Math.Sign(velocity.X);
			}
			spriteDirection = num2;
		}
		if (flag)
		{
			if (player.dead)
			{
				player.empressBlade = false;
			}
			if (player.empressBlade)
			{
				timeLeft = 2;
			}
			DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
			Point point2 = base.Center.ToTileCoordinates();
			DelegateMethods.CastLightOpen(point2.X, point2.Y);
		}
		ai156_blacklistedTargets.Clear();
		AI_156_Think(ai156_blacklistedTargets);
	}

	public Color AI_156_GetColor()
	{
		if (aiStyle != 156)
		{
			return Color.Transparent;
		}
		bool num = type == 755;
		_ = type;
		if (num)
		{
			return Color.Crimson;
		}
		return Color.Transparent;
	}

	private void AI_156_Think(List<int> blacklist)
	{
		bool flag = type == 755;
		bool flag2 = type == 946;
		int num = 60;
		int num2 = num - 1;
		int num3 = num + 60;
		int num4 = num3 - 1;
		int num5 = num + 1;
		if (flag)
		{
			num = 66;
		}
		if (flag2)
		{
			num = 40;
			num2 = num - 1;
			num3 = num + 40;
			num4 = num3 - 1;
			num5 = num + 1;
		}
		Player player = Main.player[owner];
		if (player.active && Vector2.Distance(player.Center, base.Center) > 2000f)
		{
			ai[0] = 0f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == -1f)
		{
			AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index, out var totalIndexesInGroup);
			AI_156_GetIdlePosition(index, totalIndexesInGroup, out var idleSpot, out var idleRotation);
			velocity = Vector2.Zero;
			base.Center = base.Center.MoveTowards(idleSpot, 32f);
			rotation = rotation.AngleLerp(idleRotation, 0.2f);
			if (Distance(idleSpot) < 2f)
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			return;
		}
		if (ai[0] == 0f)
		{
			if (flag)
			{
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index2, out var totalIndexesInGroup2);
				AI_156_GetIdlePosition(index2, totalIndexesInGroup2, out var idleSpot2, out var _);
				velocity = Vector2.Zero;
				base.Center = Vector2.SmoothStep(base.Center, idleSpot2, 0.45f);
				if (Main.rand.Next(20) == 0)
				{
					int num6 = AI_156_TryAttackingNPCs(blacklist);
					if (num6 != -1)
					{
						ai[0] = num;
						ai[1] = num6;
						netUpdate = true;
						return;
					}
				}
			}
			if (!flag2)
			{
				return;
			}
			AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index3, out var totalIndexesInGroup3);
			AI_156_GetIdlePosition(index3, totalIndexesInGroup3, out var idleSpot3, out var idleRotation3);
			velocity = Vector2.Zero;
			base.Center = Vector2.SmoothStep(base.Center, idleSpot3, 0.45f);
			rotation = rotation.AngleLerp(idleRotation3, 0.45f);
			if (Main.rand.Next(20) == 0)
			{
				int num7 = AI_156_TryAttackingNPCs(blacklist);
				if (num7 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[0] = num3;
					ai[1] = num7;
					netUpdate = true;
				}
			}
			return;
		}
		if (flag)
		{
			int num8 = (int)ai[1];
			if (!Main.npc.IndexInRange(num8))
			{
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
			NPC nPC = Main.npc[num8];
			if (!nPC.CanBeChasedBy(this))
			{
				ai[0] = 0f;
				netUpdate = true;
				return;
			}
			ai[0] -= 1f;
			if (ai[0] >= (float)num2)
			{
				velocity *= 0.8f;
				if (ai[0] == (float)num2)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
				}
				return;
			}
			float lerpValue = Utils.GetLerpValue(num2, 0f, ai[0], clamped: true);
			Vector2 vector = new Vector2(localAI[0], localAI[1]);
			if (lerpValue >= 0.5f)
			{
				vector = Main.player[owner].Center;
			}
			Vector2 center = nPC.Center;
			float num9 = (center - vector).ToRotation();
			float num10 = ((center.X > vector.X) ? (-(float)Math.PI) : ((float)Math.PI));
			float num11 = num10 + (0f - num10) * lerpValue * 2f;
			Vector2 vector2 = num11.ToRotationVector2();
			vector2.Y *= (float)Math.Sin((float)identity * 2.3f) * 0.5f;
			vector2 = vector2.RotatedBy(num9);
			float num12 = (center - vector).Length() / 2f;
			Vector2 vector4 = (base.Center = Vector2.Lerp(vector, center, 0.5f) + vector2 * num12);
			Vector2 vector5 = (velocity = MathHelper.WrapAngle(num9 + num11 + 0f).ToRotationVector2() * 10f);
			position -= velocity;
			if (ai[0] == 0f)
			{
				int num13 = AI_156_TryAttackingNPCs(blacklist);
				if (num13 != -1)
				{
					ai[0] = num;
					ai[1] = num13;
					netUpdate = true;
					return;
				}
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		if (!flag2)
		{
			return;
		}
		bool skipBodyCheck = true;
		int num14 = 0;
		int num15 = num2;
		int num16 = 0;
		if (ai[0] >= (float)num5)
		{
			num14 = 1;
			num15 = num4;
			num16 = num5;
		}
		int num17 = (int)ai[1];
		if (!Main.npc.IndexInRange(num17))
		{
			int num18 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num18 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num3);
				ai[1] = num18;
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		NPC nPC2 = Main.npc[num17];
		if (!nPC2.CanBeChasedBy(this))
		{
			int num19 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num19 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num3);
				ai[1] = num19;
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			return;
		}
		ai[0] -= 1f;
		if (ai[0] >= (float)num15)
		{
			direction = ((base.Center.X < nPC2.Center.X) ? 1 : (-1));
			if (ai[0] == (float)num15)
			{
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
			}
		}
		float lerpValue2 = Utils.GetLerpValue(num15, num16, ai[0], clamped: true);
		if (num14 == 0)
		{
			Vector2 vector6 = new Vector2(localAI[0], localAI[1]);
			if (lerpValue2 >= 0.5f)
			{
				vector6 = Vector2.Lerp(nPC2.Center, Main.player[owner].Center, 0.5f);
			}
			Vector2 center2 = nPC2.Center;
			float num20 = (center2 - vector6).ToRotation();
			float num21 = ((direction == 1) ? (-(float)Math.PI) : ((float)Math.PI));
			float num22 = num21 + (0f - num21) * lerpValue2 * 2f;
			Vector2 vector7 = num22.ToRotationVector2();
			vector7.Y *= 0.5f;
			vector7.Y *= 0.8f + (float)Math.Sin((float)identity * 2.3f) * 0.2f;
			vector7 = vector7.RotatedBy(num20);
			float num23 = (center2 - vector6).Length() / 2f;
			Vector2 vector9 = (base.Center = Vector2.Lerp(vector6, center2, 0.5f) + vector7 * num23);
			float num24 = MathHelper.WrapAngle(num20 + num22 + 0f);
			rotation = num24 + (float)Math.PI / 2f;
			Vector2 vector10 = (velocity = num24.ToRotationVector2() * 10f);
			position -= velocity;
		}
		if (num14 == 1)
		{
			Vector2 vector11 = new Vector2(localAI[0], localAI[1]);
			vector11 += new Vector2(0f, Utils.GetLerpValue(0f, 0.4f, lerpValue2, clamped: true) * -100f);
			Vector2 v = nPC2.Center - vector11;
			Vector2 vector12 = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(v.Length(), 60f, 150f);
			Vector2 value = nPC2.Center + vector12;
			float lerpValue3 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue2, clamped: true);
			float lerpValue4 = Utils.GetLerpValue(0.6f, 1f, lerpValue2, clamped: true);
			float targetAngle = v.SafeNormalize(Vector2.Zero).ToRotation() + (float)Math.PI / 2f;
			rotation = rotation.AngleTowards(targetAngle, (float)Math.PI / 5f);
			base.Center = Vector2.Lerp(vector11, nPC2.Center, lerpValue3);
			if (lerpValue4 > 0f)
			{
				base.Center = Vector2.Lerp(nPC2.Center, value, lerpValue4);
			}
		}
		if (ai[0] == (float)num16)
		{
			int num25 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
			if (num25 != -1)
			{
				ai[0] = Main.rand.NextFromList<int>(num, num3);
				ai[1] = num25;
				netUpdate = true;
			}
			else
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
		}
	}

	private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
	{
		Vector2 center = Main.player[owner].Center;
		int result = -1;
		float num = -1f;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			bool flag = true;
			if (!ownerMinionAttackTargetNPC.boss && blackListedTargets.Contains(ownerMinionAttackTargetNPC.whoAmI))
			{
				flag = false;
			}
			if (ownerMinionAttackTargetNPC.Distance(center) > 1000f)
			{
				flag = false;
			}
			if (!skipBodyCheck && !CanHitWithOwnBody(ownerMinionAttackTargetNPC))
			{
				flag = false;
			}
			if (flag)
			{
				return ownerMinionAttackTargetNPC.whoAmI;
			}
		}
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && (nPC.boss || !blackListedTargets.Contains(i)))
			{
				float num2 = nPC.Distance(center);
				if (!(num2 > 1000f) && (!(num2 > num) || num == -1f) && (skipBodyCheck || CanHitWithOwnBody(nPC)))
				{
					num = num2;
					result = i;
				}
			}
		}
		return result;
	}

	private void AI_GetMyGroupIndexAndFillBlackList(List<int> blackListedTargets, out int index, out int totalIndexesInGroup)
	{
		index = 0;
		totalIndexesInGroup = 0;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == owner && projectile.type == type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
			{
				if (whoAmI > i)
				{
					index++;
				}
				totalIndexesInGroup++;
			}
		}
	}

	private void AI_156_GetIdlePosition(int stackedIndex, int totalIndexes, out Vector2 idleSpot, out float idleRotation)
	{
		Player player = Main.player[owner];
		bool num = type == 755;
		bool flag = type == 946;
		idleRotation = 0f;
		idleSpot = Vector2.Zero;
		if (num)
		{
			float num2 = ((float)totalIndexes - 1f) / 2f;
			idleSpot = player.Center + -Vector2.UnitY.RotatedBy(4.3982296f / (float)totalIndexes * ((float)stackedIndex - num2)) * 40f;
			idleRotation = 0f;
		}
		if (flag)
		{
			int num3 = stackedIndex + 1;
			idleRotation = (float)num3 * ((float)Math.PI * 2f) * 0.0166666675f * (float)player.direction + (float)Math.PI / 2f;
			idleRotation = MathHelper.WrapAngle(idleRotation);
			int num4 = num3 % totalIndexes;
			Vector2 vector = new Vector2(0f, 0.5f).RotatedBy((player.miscCounterNormalized * (2f + (float)num4) + (float)num4 * 0.5f + (float)player.direction * 1.3f) * ((float)Math.PI * 2f)) * 4f;
			idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2(player.direction * (num3 * -6 - 16), player.gravDir * -15f);
			idleSpot += vector;
			idleRotation += (float)Math.PI / 2f;
		}
	}

	private void AI_155_MysticSnakeCoil()
	{
		if (Main.netMode != 1 && !Main.player[owner].active)
		{
			float num = ai[0];
			float y = position.Y;
			Point point = base.Center.ToTileCoordinates();
			Point end = new Point(point.X, (int)y / 16);
			Point start = new Point(point.X, (int)num / 16);
			AI_155_RemoveRope(start, end);
			Kill();
			return;
		}
		int num2 = 80;
		int num3 = 1800;
		if (ai[1] == 0f)
		{
			spriteDirection = ((!(Main.player[owner].Center.X > base.Center.X)) ? 1 : (-1));
			ai[1] = 1f;
			velocity.Y = -5f;
		}
		if (ai[1] == 1f)
		{
			if (Main.rand.Next(6) == 0)
			{
				Dust dust = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
				dust.velocity *= 1f;
				dust.velocity.X *= 0.5f;
				dust.velocity.Y = -3f;
				dust.fadeIn = 1.2f;
				dust.noGravity = true;
			}
			alpha = Utils.Clamp(alpha - 5, 0, 255);
			if (++frameCounter >= 12)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
			if (Main.myPlayer == owner)
			{
				float num4 = ai[0];
				float y2 = position.Y;
				Point point2 = base.Center.ToTileCoordinates();
				Point point3 = new Point(point2.X, (int)y2 / 16);
				Point point4 = new Point(point2.X, (int)num4 / 16);
				bool flag = point4.Y - point3.Y >= num2;
				int x = point4.X;
				if (!WorldGen.InWorld(x, point3.Y, 40) || !WorldGen.InWorld(x, point4.Y, 40))
				{
					flag = true;
				}
				if (!flag)
				{
					for (int num5 = point4.Y; num5 >= point3.Y; num5--)
					{
						if (Main.tile[x, num5].active() && !Main.tileCut[Main.tile[x, num5].type] && Main.tile[x, num5].type != 504)
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					int num6 = 0;
					for (int num7 = point4.Y; num7 > point3.Y; num7--)
					{
						if ((WorldGen.TileEmpty(x, num7) || Main.tileCut[Main.tile[x, num7].type]) && WorldGen.PlaceTile(x, num7, 504, mute: false, forced: false, owner))
						{
							num6++;
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 1, x, num7, 504f);
							}
						}
					}
					timeLeft = num3;
					ai[1] = 2f;
					netUpdate = true;
					base.Top = new Vector2(x * 16 + 8, point3.Y * 16 + 16);
					velocity = Vector2.Zero;
				}
			}
		}
		if (ai[1] != 2f)
		{
			return;
		}
		alpha = 0;
		_ = timeLeft;
		float num8 = ai[0];
		float y3 = position.Y;
		Point point5 = base.Center.ToTileCoordinates();
		Point end2 = new Point(point5.X, (int)y3 / 16);
		Point start2 = new Point(point5.X, (int)num8 / 16);
		int x2 = start2.X;
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			for (int num9 = start2.Y; num9 >= end2.Y; num9--)
			{
				Tile tile = Main.tile[x2, num9];
				if (tile.active() && tile.type == 504)
				{
					AI_155_SpawnRopeIn(x2, num9);
				}
			}
		}
		else
		{
			for (int num10 = start2.Y; num10 >= end2.Y; num10--)
			{
				Tile tile2 = Main.tile[x2, num10];
				if (tile2.active() && tile2.type == 504 && Main.rand.Next(80) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(new Vector2(x2 * 16 - 6, num10 * 16), 28, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust2.velocity *= 1f;
					dust2.velocity.X = 0f;
					dust2.fadeIn = 1.2f;
					dust2.noGravity = true;
				}
			}
		}
		if (timeLeft == 4)
		{
			for (int num11 = start2.Y; num11 >= end2.Y; num11--)
			{
				Tile tile3 = Main.tile[x2, num11];
				if (tile3.active() && tile3.type == 504)
				{
					AI_155_SpawnRopeIn(x2, num11);
				}
			}
		}
		if (timeLeft > 4)
		{
			return;
		}
		if (!WorldGen.InWorld(x2, end2.Y, 20) || !WorldGen.InWorld(x2, start2.Y, 20))
		{
			Kill();
			return;
		}
		if (Main.myPlayer == owner)
		{
			AI_155_RemoveRope(start2, end2);
		}
		Kill();
	}

	private void AI_155_RemoveRope(Point start, Point end)
	{
		int x = start.X;
		for (int num = start.Y; num >= end.Y; num--)
		{
			Tile tile = Main.tile[x, num];
			if (tile.active() && tile.type == 504)
			{
				WorldGen.KillTile(x, num);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 0, x, num);
				}
			}
		}
	}

	private void AI_155_SpawnRopeIn(int x, int y)
	{
		Vector2 vector = new Vector2(x * 16 + 8, y * 16 + 8);
		if (Main.rand.Next(4) != 0)
		{
			Gore gore = Gore.NewGoreDirect(vector, Vector2.Zero, Main.rand.Next(61, 64));
			gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
			gore.velocity.X += 0.1f * (float)((gore.velocity.X > 0f) ? 1 : (-1));
			gore.position = vector - new Vector2(16f, 16f);
			gore.alpha = 170;
		}
		for (int i = 0; i < 5; i++)
		{
			if (Main.rand.Next(8) == 0)
			{
				Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 31, 0f, 0f, 100, Color.Transparent).velocity *= 0.4f;
			}
			Dust dust = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 27, 0f, 0f, 100, Color.Transparent, 1.7f);
			dust.velocity *= 2f;
			dust.noGravity = true;
		}
	}

	private void AI_154_VoidLens()
	{
		Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
		if (owner == Main.myPlayer)
		{
			for (int i = 0; i < 1000; i++)
			{
				if (i == whoAmI)
				{
					continue;
				}
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == type)
				{
					if (timeLeft < Main.projectile[i].timeLeft)
					{
						Kill();
						return;
					}
					Main.projectile[i].Kill();
				}
			}
		}
		velocity *= 0.94f;
		direction = 1;
		if (++frameCounter >= 5)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (Opacity < 1f)
		{
			Opacity += 0.03f;
			if (Opacity > 1f)
			{
				Opacity = 1f;
			}
		}
		new VoidLensHelper(this).Update();
	}

	private void AI_153_ToiletPop()
	{
		Vector2 center = base.Center;
		float speedY = -2f;
		int num = 0;
		int num2 = 0;
		if (ai[0] == 0f)
		{
			num = 6;
			num2 = 1;
		}
		else
		{
			if (!(ai[0] <= 10f))
			{
				Kill();
				return;
			}
			if (Main.rand.Next(5) == 0)
			{
				num2 = 1;
			}
			num = 2;
		}
		ai[0] += 1f;
		for (int i = 0; i < num; i++)
		{
			Dust dust = Dust.NewDustDirect(center, 3, 6, 216, 0f, speedY);
			dust.velocity.X *= 0.5f;
			dust.velocity.Y = 0f - Math.Abs(dust.velocity.Y);
			dust.position -= dust.velocity;
			dust.scale = 0.8f;
		}
		for (int j = 0; j < num2; j++)
		{
			Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583));
			gore.velocity.Y = 0f - Math.Abs(gore.velocity.Y);
		}
	}

	private void AI_150_GolfClubHelper()
	{
		Player player = Main.player[owner];
		if (!player.active)
		{
			Kill();
			return;
		}
		if (player.gravDir == -1f)
		{
			player.SetDummyItemTime(0);
			Kill();
			return;
		}
		bool flag = false;
		Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && rectangle.Contains(projectile.Center.ToPoint()))
			{
				flag = true;
				break;
			}
		}
		if (!flag && owner == Main.myPlayer && ai[0] == 0f)
		{
			player.TryPlacingAGolfBallNearANearbyTee(Main.player[owner].Center);
		}
		if (!player.channel && ai[0] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item1, player.Center);
			for (int j = 0; j < 1000; j++)
			{
				Projectile projectile2 = Main.projectile[j];
				Vector2 shotVector = Main.MouseWorld - projectile2.Center;
				if (!projectile2.active || !ProjectileID.Sets.IsAGolfBall[projectile2.type] || projectile2.owner != owner || !GolfHelper.ValidateShot(projectile2, player, ref shotVector))
				{
					continue;
				}
				float num = Main.rand.NextFloatDirection();
				for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
				{
					Dust dust = Dust.NewDustPerfect(projectile2.Center, 31, ((float)Math.PI * 2f * num2 + num).ToRotationVector2() * 0.8f, 127);
					dust.fadeIn = 0f;
					if (num2 % 0.2f == 0f)
					{
						dust.velocity *= 0.4f;
					}
				}
				SoundEngine.PlaySound(SoundID.Item126, projectile2.Center);
				if (owner == Main.myPlayer)
				{
					GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, projectile2);
					Vector2 vector = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
					GolfHelper.HitGolfBall(projectile2, vector, shotStrength.RoughLandResistance);
					NetMessage.SendData(27, -1, -1, null, j);
				}
			}
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			ai[1] += 1f;
			float num3 = player.HeldItem.useAnimation + 30;
			if (ai[1] >= num3)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			int num4 = player.HeldItem.useAnimation - (int)ai[1];
			if (num4 < 2)
			{
				num4 = 2;
			}
			player.SetDummyItemTime(num4);
		}
		if (ai[0] != 0f)
		{
			return;
		}
		if (owner == Main.myPlayer)
		{
			Vector2 mouseWorld = Main.MouseWorld;
			if (mouseWorld != base.Center)
			{
				netUpdate = true;
				base.Center = mouseWorld;
			}
			if (Main.mouseRight && Main.mouseRightRelease)
			{
				Kill();
				player.mouseInterface = true;
				Main.blockMouse = true;
				player.SetItemTime(0);
				player.itemAnimation = 0;
				player.itemAnimationMax = 0;
				player.reuseDelay = 0;
				return;
			}
		}
		if (position != oldPosition)
		{
			if (base.Center.X - player.Center.X > 0f)
			{
				direction = 1;
			}
			else
			{
				direction = -1;
			}
		}
		velocity = Vector2.Zero;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		ai[1] += 1f;
		int num5 = player.HeldItem.useAnimation * 4;
		if (ai[1] > (float)(num5 * 3))
		{
			ai[1] = num5;
		}
		int num6 = player.HeldItem.useAnimation + Math.Min(num5, (int)ai[1]);
		if (num6 < 2)
		{
			num6 = 2;
		}
		player.SetDummyItemTime(num6);
	}

	public Color GetCeleb2Color()
	{
		return (int)ai[0] switch
		{
			0 => Color.Red, 
			1 => Color.DarkOrange, 
			2 => Color.Gold, 
			3 => Color.LimeGreen, 
			4 => Color.RoyalBlue, 
			5 => new Color(80, 20, 180), 
			6 => Color.HotPink, 
			_ => Color.Transparent, 
		};
	}

	private void AI_007_GrapplingHooks()
	{
		if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed || Main.player[owner].frozen)
		{
			Kill();
			return;
		}
		Vector2 mountedCenter = Main.player[owner].MountedCenter;
		Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num = mountedCenter.X - vector.X;
		float num2 = mountedCenter.Y - vector.Y;
		float num3 = (float)Math.Sqrt(num * num + num2 * num2);
		rotation = (float)Math.Atan2(num2, num) - 1.57f;
		if (ai[0] == 2f && type == 865)
		{
			float num4 = (float)Math.PI / 2f;
			int num5 = (int)Math.Round(rotation / num4);
			rotation = (float)num5 * num4;
		}
		if (Main.myPlayer == owner)
		{
			int num6 = (int)(base.Center.X / 16f);
			int num7 = (int)(base.Center.Y / 16f);
			if (num6 > 0 && num7 > 0 && num6 < Main.maxTilesX && num7 < Main.maxTilesY && Main.tile[num6, num7].nactive() && TileID.Sets.CrackedBricks[Main.tile[num6, num7].type] && Main.rand.Next(16) == 0)
			{
				WorldGen.KillTile(num6, num7);
				if (Main.netMode != 0)
				{
					NetMessage.SendData(17, -1, -1, null, 20, num6, num7);
				}
			}
		}
		if (num3 > 2500f)
		{
			Kill();
		}
		if (type == 256)
		{
			rotation = (float)Math.Atan2(num2, num) + 3.92500019f;
		}
		if (type == 446)
		{
			Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
			localAI[0] += 1f;
			if (localAI[0] >= 28f)
			{
				localAI[0] = 0f;
			}
			DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
			Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
		}
		if (type == 652 && ++frameCounter >= 7)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (type >= 646 && type <= 649)
		{
			Vector3 vector2 = Vector3.Zero;
			switch (type)
			{
			case 646:
				vector2 = new Vector3(0.7f, 0.5f, 0.1f);
				break;
			case 647:
				vector2 = new Vector3(0f, 0.6f, 0.7f);
				break;
			case 648:
				vector2 = new Vector3(0.6f, 0.2f, 0.6f);
				break;
			case 649:
				vector2 = new Vector3(0.6f, 0.6f, 0.9f);
				break;
			}
			Lighting.AddLight(mountedCenter, vector2);
			Lighting.AddLight(base.Center, vector2);
			DelegateMethods.v3_1 = vector2;
			Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
		}
		if (ai[0] == 0f)
		{
			if ((num3 > 300f && type == 13) || (num3 > 400f && type == 32) || (num3 > 440f && type == 73) || (num3 > 440f && type == 74) || (num3 > 300f && type == 165) || (num3 > 350f && type == 256) || (num3 > 500f && type == 315) || (num3 > 550f && type == 322) || (num3 > 400f && type == 331) || (num3 > 550f && type == 332) || (num3 > 400f && type == 372) || (num3 > 300f && type == 396) || (num3 > 550f && type >= 646 && type <= 649) || (num3 > 600f && type == 652) || (num3 > 300f && type == 865) || (num3 > 500f && type == 935) || (num3 > 480f && type >= 486 && type <= 489) || (num3 > 500f && type == 446))
			{
				ai[0] = 1f;
			}
			else if (type >= 230 && type <= 235)
			{
				int num8 = 300 + (type - 230) * 30;
				if (num3 > (float)num8)
				{
					ai[0] = 1f;
				}
			}
			else if (type == 753)
			{
				int num9 = 420;
				if (num3 > (float)num9)
				{
					ai[0] = 1f;
				}
			}
			Vector2 vector3 = base.Center - new Vector2(5f);
			Vector2 vector4 = base.Center + new Vector2(5f);
			Point point = (vector3 - new Vector2(16f)).ToTileCoordinates();
			Point point2 = (vector4 + new Vector2(32f)).ToTileCoordinates();
			int num10 = point.X;
			int num11 = point2.X;
			int num12 = point.Y;
			int num13 = point2.Y;
			if (num10 < 0)
			{
				num10 = 0;
			}
			if (num11 > Main.maxTilesX)
			{
				num11 = Main.maxTilesX;
			}
			if (num12 < 0)
			{
				num12 = 0;
			}
			if (num13 > Main.maxTilesY)
			{
				num13 = Main.maxTilesY;
			}
			Player player = Main.player[owner];
			List<Point> list = new List<Point>();
			for (int i = 0; i < player.grapCount; i++)
			{
				Projectile projectile = Main.projectile[player.grappling[i]];
				if (projectile.aiStyle != 7 || projectile.ai[0] != 2f)
				{
					continue;
				}
				Point pt = projectile.Center.ToTileCoordinates();
				Tile tileSafely = Framing.GetTileSafely(pt);
				if (tileSafely.type != 314 && !TileID.Sets.Platforms[tileSafely.type])
				{
					continue;
				}
				for (int j = -2; j <= 2; j++)
				{
					for (int k = -2; k <= 2; k++)
					{
						Point point3 = new Point(pt.X + j, pt.Y + k);
						Tile tileSafely2 = Framing.GetTileSafely(point3);
						if (tileSafely2.type == 314 || TileID.Sets.Platforms[tileSafely2.type])
						{
							list.Add(point3);
						}
					}
				}
			}
			Vector2 vector5 = default(Vector2);
			for (int l = num10; l < num11; l++)
			{
				for (int m = num12; m < num13; m++)
				{
					if (Main.tile[l, m] == null)
					{
						Main.tile[l, m] = new Tile();
					}
					vector5.X = l * 16;
					vector5.Y = m * 16;
					if (!(vector3.X + 10f > vector5.X) || !(vector3.X < vector5.X + 16f) || !(vector3.Y + 10f > vector5.Y) || !(vector3.Y < vector5.Y + 16f))
					{
						continue;
					}
					Tile tile = Main.tile[l, m];
					if (!tile.nactive() || !AI_007_GrapplingHooks_CanTileBeLatchedOnTo(tile) || list.Contains(new Point(l, m)) || (type == 403 && tile.type != 314) || Main.player[owner].IsBlacklistedForGrappling(new Point(l, m)))
					{
						continue;
					}
					if (Main.player[owner].grapCount < 10)
					{
						Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
						Main.player[owner].grapCount++;
					}
					if (Main.myPlayer != owner)
					{
						continue;
					}
					int num14 = 0;
					int num15 = -1;
					int num16 = 100000;
					if (type == 73 || type == 74)
					{
						for (int n = 0; n < 1000; n++)
						{
							if (n != whoAmI && Main.projectile[n].active && Main.projectile[n].owner == owner && Main.projectile[n].aiStyle == 7 && Main.projectile[n].ai[0] == 2f)
							{
								Main.projectile[n].Kill();
							}
						}
					}
					else
					{
						int num17 = 3;
						if (type == 165)
						{
							num17 = 8;
						}
						if (type == 256)
						{
							num17 = 2;
						}
						if (type == 372)
						{
							num17 = 2;
						}
						if (type == 652)
						{
							num17 = 1;
						}
						if (type >= 646 && type <= 649)
						{
							num17 = 4;
						}
						for (int num18 = 0; num18 < 1000; num18++)
						{
							if (Main.projectile[num18].active && Main.projectile[num18].owner == owner && Main.projectile[num18].aiStyle == 7)
							{
								if (Main.projectile[num18].timeLeft < num16)
								{
									num15 = num18;
									num16 = Main.projectile[num18].timeLeft;
								}
								num14++;
							}
						}
						if (num14 > num17)
						{
							Main.projectile[num15].Kill();
						}
					}
					WorldGen.KillTile(l, m, fail: true, effectOnly: true);
					SoundEngine.PlaySound(0, l * 16, m * 16);
					velocity.X = 0f;
					velocity.Y = 0f;
					ai[0] = 2f;
					position.X = l * 16 + 8 - width / 2;
					position.Y = m * 16 + 8 - height / 2;
					Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(l, m);
					if (tileVisualHitbox.HasValue)
					{
						base.Center = tileVisualHitbox.Value.Center.ToVector2();
					}
					damage = 0;
					netUpdate = true;
					if (Main.myPlayer == owner)
					{
						if (type == 935)
						{
							Main.player[owner].DoQueenSlimeHookTeleport(base.Center);
						}
						NetMessage.SendData(13, -1, -1, null, owner);
					}
					break;
				}
				if (ai[0] == 2f)
				{
					break;
				}
			}
		}
		else if (ai[0] == 1f)
		{
			float num19 = 11f;
			if (type == 32)
			{
				num19 = 15f;
			}
			if (type == 73 || type == 74)
			{
				num19 = 17f;
			}
			if (type == 315)
			{
				num19 = 20f;
			}
			if (type == 322)
			{
				num19 = 22f;
			}
			if (type >= 230 && type <= 235)
			{
				num19 = 11f + (float)(type - 230) * 0.75f;
			}
			if (type == 753)
			{
				num19 = 15f;
			}
			if (type == 446)
			{
				num19 = 20f;
			}
			if (type >= 486 && type <= 489)
			{
				num19 = 18f;
			}
			if (type >= 646 && type <= 649)
			{
				num19 = 24f;
			}
			if (type == 652)
			{
				num19 = 24f;
			}
			if (type == 332)
			{
				num19 = 17f;
			}
			if (num3 < 24f)
			{
				Kill();
			}
			num3 = num19 / num3;
			num *= num3;
			num2 *= num3;
			velocity.X = num;
			velocity.Y = num2;
		}
		else if (ai[0] == 2f)
		{
			Point point4 = base.Center.ToTileCoordinates();
			if (Main.tile[point4.X, point4.Y] == null)
			{
				Main.tile[point4.X, point4.Y] = new Tile();
			}
			bool flag = true;
			if (Main.tile[point4.X, point4.Y].nactive() && AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Main.tile[point4.X, point4.Y]))
			{
				flag = false;
			}
			if (flag)
			{
				ai[0] = 1f;
			}
			else if (Main.player[owner].grapCount < 10)
			{
				Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
				Main.player[owner].grapCount++;
			}
		}
	}

	private bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Tile theTile)
	{
		return Main.tileSolid[theTile.type] | (theTile.type == 314) | (type == 865 && TileID.Sets.IsATreeTrunk[theTile.type]) | (type == 865 && theTile.type == 323);
	}

	private void AI_147_Celeb2Rocket()
	{
		int num = 0;
		int num2 = 1;
		int num3 = 1;
		localAI[num] += 1f;
		alpha = 0;
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		int num4 = (int)ai[0];
		Lighting.AddLight(base.Center, GetCeleb2Color().ToVector3() * 0.5f);
		switch (num4)
		{
		case 0:
			if (localAI[num] >= 20f)
			{
				velocity.Y += 0.12f;
				penetrate = -1;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (localAI[num] > 20f && localAI[num] % 20f == 0f)
			{
				AI_147_Explosion();
			}
			break;
		case 1:
		{
			if (localAI[num] == 10f)
			{
				velocity.Y -= 10f;
			}
			if (localAI[num] >= 10f)
			{
				velocity.Y += 0.25f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			if (!(localAI[num] >= 10f))
			{
				break;
			}
			scale += 0.015f;
			if (scale > 2.5f)
			{
				scale = 2.5f;
			}
			if (localAI[num] % 10f != 0f)
			{
				break;
			}
			_ = velocity.Y;
			_ = 0f;
			for (float num5 = 0f; num5 < 1f; num5 += 0.12f)
			{
				Vector2 spinningpoint = Vector2.UnitX * -8f;
				spinningpoint += -Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f)) * new Vector2(2f, 4f);
				spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
				int num6 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, Color.Lerp(GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f));
				Main.dust[num6].scale = 0.9f;
				Main.dust[num6].fadeIn = 1.1f;
				Main.dust[num6].noGravity = true;
				Main.dust[num6].position = base.Center + spinningpoint;
				Main.dust[num6].velocity = -velocity * 0.35f + spinningpoint * 0.35f;
				Main.dust[num6].velocity *= scale;
				if (localAI[num] == 10f)
				{
					Main.dust[num6].velocity = spinningpoint.RotatedBy(velocity.ToRotation()) * 0.3f;
				}
			}
			break;
		}
		case 2:
			if (localAI[num] >= 60f)
			{
				velocity.Y += 0.15f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		case 3:
		{
			float num7 = localAI[num2];
			if (num7 == 0f)
			{
				float num8 = velocity.Length();
				localAI[num2] = num8;
				num7 = num8;
			}
			if (localAI[num] >= 25f && ai[num3] == 0f)
			{
				if (localAI[num] >= 20f)
				{
					velocity.Y += 0.15f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			if (!(localAI[num] >= 20f))
			{
				break;
			}
			float num9 = position.X;
			float num10 = position.Y;
			float num11 = 800f;
			bool flag = false;
			int num12 = 0;
			if (ai[num3] == 0f)
			{
				for (int i = 0; i < 200; i++)
				{
					if (Main.npc[i].CanBeChasedBy(this) && (ai[num3] == 0f || ai[num3] == (float)(i + 1)))
					{
						float num13 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
						float num14 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
						float num15 = Math.Abs(position.X + (float)(width / 2) - num13) + Math.Abs(position.Y + (float)(height / 2) - num14);
						if (num15 < num11 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
						{
							num11 = num15;
							num9 = num13;
							num10 = num14;
							flag = true;
							num12 = i;
						}
					}
				}
				if (flag)
				{
					ai[1] = num12 + 1;
				}
				flag = false;
			}
			if (ai[num3] != 0f)
			{
				int num16 = (int)(ai[num3] - 1f);
				if (Main.npc[num16].active && Main.npc[num16].CanBeChasedBy(this, ignoreDontTakeDamage: true))
				{
					float num17 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
					float num18 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
					if (Math.Abs(position.X + (float)(width / 2) - num17) + Math.Abs(position.Y + (float)(height / 2) - num18) < 1000f)
					{
						flag = true;
						num9 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
						num10 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
					}
				}
			}
			if (!friendly)
			{
				flag = false;
			}
			if (flag)
			{
				float num19 = num7;
				Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num20 = num9 - vector2.X;
				float num21 = num10 - vector2.Y;
				float num22 = (float)Math.Sqrt(num20 * num20 + num21 * num21);
				num22 = num19 / num22;
				num20 *= num22;
				num21 *= num22;
				int num23 = 8;
				velocity.X = (velocity.X * (float)(num23 - 1) + num20) / (float)num23;
				velocity.Y = (velocity.Y * (float)(num23 - 1) + num21) / (float)num23;
			}
			break;
		}
		case 4:
		{
			if (localAI[num] == 1f && ai[1] == 1f)
			{
				localAI[num] += 45f;
			}
			float x = velocity.SafeNormalize(Vector2.Zero).RotatedBy(localAI[num] * ((float)Math.PI / 45f)).X;
			Vector2 vector = velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866);
			position += vector * x * 3f;
			scale = 2f;
			if (localAI[num] >= 10f)
			{
				velocity.Y += 0.04f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		}
		case 5:
			if (localAI[num] >= 40f)
			{
				velocity.Y += 0.08f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		case 6:
			if (localAI[num] >= 30f)
			{
				velocity.Y += 0.1f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
			break;
		}
	}

	private void AI_148_StarSpawner()
	{
		if (Main.dayTime)
		{
			Kill();
			return;
		}
		ai[0] += Main.dayRate;
		if (localAI[0] == 0f && Main.netMode != 2)
		{
			localAI[0] = 1f;
			if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
			{
				Star.StarFall(position.X);
			}
		}
		if (owner != Main.myPlayer || !(ai[0] >= 180f))
		{
			return;
		}
		if (ai[1] > -1f)
		{
			velocity.X *= 0.35f;
			if (base.Center.X < Main.player[(int)ai[1]].Center.X)
			{
				velocity.X = Math.Abs(velocity.X);
			}
			else
			{
				velocity.X = 0f - Math.Abs(velocity.X);
			}
		}
		NewProjectile(position.X, position.Y, velocity.X, velocity.Y, 12, 1000, 10f, Main.myPlayer);
		Kill();
	}

	private void AI_147_Explosion()
	{
		switch ((int)ai[0])
		{
		case 0:
		{
			for (int k = 0; k < 4; k++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int l = 0; l < 20; l++)
			{
				int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num5].noGravity = true;
				Main.dust[num5].velocity *= 3f;
				num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 0.5f);
				Main.dust[num5].velocity *= 1.2f;
				Main.dust[num5].noGravity = true;
			}
			for (int m = 0; m < 1; m++)
			{
				int num6 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num6].velocity *= 0.3f;
				Main.gore[num6].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num6].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 1:
		{
			Color celeb2Color2 = GetCeleb2Color();
			Vector2 center2 = base.Center;
			Main.rand.NextFloat();
			for (float num7 = 0f; num7 < 1f; num7 += 0.0125f)
			{
				Dust dust4 = Dust.NewDustPerfect(center2, 278, null, 200, Color.Lerp(celeb2Color2, Color.White, Main.rand.NextFloat() * 0.6f));
				dust4.scale = 1.1f;
				dust4.fadeIn = 1.3f;
				dust4.velocity *= Main.rand.NextFloat() * 2f + 2f;
				if (dust4.velocity.Y > 0f)
				{
					dust4.velocity *= 0.3f;
				}
				dust4.velocity *= 2f;
			}
			for (int n = 0; n < 3; n++)
			{
				int num8 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num8].velocity *= 0.3f;
				Main.gore[num8].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num8].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			int fluff = 20;
			int distFluff = 100;
			int layerStart = 2;
			int layerEnd = 10;
			int layerJump = 2;
			CreateGroundExplosion(40f, fluff, distFluff, layerStart, layerEnd, layerJump);
			break;
		}
		case 2:
		{
			Vector2 center3 = base.Center;
			Color celeb2Color3 = GetCeleb2Color();
			float num9 = 0.05f;
			float num10 = 0.13f;
			bool flag = Main.rand.Next(4) == 0;
			if (flag)
			{
				num9 = 0.1f;
				num10 = 0.1f;
			}
			float num11 = Main.rand.NextFloatDirection();
			for (float num12 = 0f; num12 < 5f; num12 += 1f)
			{
				Vector2 spinningpoint = new Vector2(0f, -100f);
				Vector2 vector4 = center3 + spinningpoint.RotatedBy(num11 + num12 * ((float)Math.PI * 2f / 5f));
				Vector2 vector5 = center3 + spinningpoint.RotatedBy(num11 + (num12 + 1f) * ((float)Math.PI * 2f / 5f));
				Vector2 vector6 = center3 + spinningpoint.RotatedBy(num11 + (num12 + 0.5f) * ((float)Math.PI * 2f / 5f)) * 0.4f;
				for (int num13 = 0; num13 < 2; num13++)
				{
					Vector2 value = vector4;
					Vector2 value2 = vector6;
					if (num13 == 1)
					{
						value = vector6;
						value2 = vector5;
					}
					for (float num14 = 0f; num14 < 1f; num14 += num10)
					{
						Vector2 vector7 = Vector2.Lerp(value, value2, num14);
						Vector2 vector8 = Vector2.Lerp(vector7, center3, 0.9f);
						Vector2 vector9 = (vector7 - vector8).SafeNormalize(Vector2.Zero);
						Dust dust5 = Dust.NewDustPerfect(vector8, 267, Vector2.Zero, 0, celeb2Color3, 0.5f);
						dust5.fadeIn = 1.2f;
						dust5.noGravity = true;
						dust5.velocity = vector9 * Vector2.Distance(vector7, vector8) * num9;
					}
				}
			}
			if (flag)
			{
				for (int num15 = 0; num15 < 4; num15++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num16 = 0; num16 < 60; num16++)
				{
					int num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num17].noGravity = true;
					Main.dust[num17].velocity *= 8f;
					num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
					Main.dust[num17].velocity *= 4.2f;
					Main.dust[num17].noGravity = true;
				}
				for (int num18 = 0; num18 < 1; num18++)
				{
					int num19 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num19].velocity *= 0.3f;
					Main.gore[num19].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num19].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else
			{
				for (int num20 = 0; num20 < 4; num20++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num21 = 0; num21 < 40; num21++)
				{
					int num22 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num22].noGravity = true;
					Main.dust[num22].velocity *= 4f;
					num22 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
					Main.dust[num22].velocity *= 2.2f;
					Main.dust[num22].noGravity = true;
				}
				for (int num23 = 0; num23 < 1; num23++)
				{
					int num24 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num24].velocity *= 0.3f;
					Main.gore[num24].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num24].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			break;
		}
		case 3:
		{
			Color celeb2Color5 = GetCeleb2Color();
			Vector2 center4 = base.Center;
			for (int num27 = 0; num27 < 4; num27++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			float num28 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			for (int num29 = 0; num29 < 40; num29++)
			{
				Dust dust6 = Dust.NewDustPerfect(center4, 278, null, 100, Color.Lerp(celeb2Color5, Color.White, Main.rand.NextFloat() * 0.3f));
				dust6.scale = 1.3f * (dust6.velocity.Length() / 2f);
				dust6.fadeIn = 1.5f * (dust6.velocity.Length() / 2f);
				dust6.noGravity = true;
				dust6.velocity *= 6f;
				if (Math.Abs(dust6.velocity.X) > Math.Abs(dust6.velocity.Y))
				{
					dust6.velocity.Y *= 0.1f;
				}
				else
				{
					dust6.velocity.X *= 0.1f;
				}
				dust6.velocity = dust6.velocity.RotatedBy(num28);
			}
			for (int num30 = 0; num30 < 1; num30++)
			{
				int num31 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num31].velocity *= 0.3f;
				Main.gore[num31].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num31].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 4:
		{
			GetCeleb2Color();
			Vector2 center5 = base.Center;
			Main.rand.NextFloat();
			for (float num32 = 0f; num32 < 1f; num32 += 0.025f)
			{
				Dust dust7 = Dust.NewDustPerfect(center5, 132, null, 200);
				dust7.scale = 1.1f;
				dust7.fadeIn = 1.5f;
				dust7.velocity *= Main.rand.NextFloat() * 2f + 2f;
				if (dust7.velocity.Y > 0f)
				{
					dust7.velocity *= 0.3f;
				}
				dust7.velocity *= 2f;
			}
			for (int num33 = 0; num33 < 3; num33++)
			{
				int num34 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num34].velocity *= 0.3f;
				Main.gore[num34].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num34].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		case 5:
		{
			Color celeb2Color4 = GetCeleb2Color();
			_ = base.Center;
			for (int num25 = 0; num25 < 20; num25++)
			{
				int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 278, 0f, 0f, 200, Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.4f), 2.5f);
				Main.dust[num26].fadeIn = 1.3f;
				Main.dust[num26].scale = 1.1f;
				Main.dust[num26].velocity *= 2f;
				num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, celeb2Color4, 2.5f);
				Main.dust[num26].velocity *= 1.2f;
				Main.dust[num26].noGravity = true;
			}
			break;
		}
		case 6:
		{
			Color celeb2Color = GetCeleb2Color();
			Vector2 center = base.Center;
			for (int i = 0; i < 4; i++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (float num = 0f; num < 1f; num += 0.015f)
			{
				Vector2 vector = Vector2.UnitY.RotatedBy(num * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.1f);
				Dust dust = Dust.NewDustPerfect(center + vector, 134, Vector2.Zero, 0, celeb2Color);
				dust.scale = 1.4f;
				dust.velocity = vector * 5f;
				dust.velocity.Y += -3f;
				dust.velocity *= 2f;
			}
			for (float num2 = 0f; num2 < 1f; num2 += 0.025f)
			{
				Vector2 vector2 = Vector2.UnitY.RotatedBy(num2 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.2f);
				Dust dust2 = Dust.NewDustPerfect(center + vector2, 267, Vector2.Zero, 0, celeb2Color);
				dust2.noGravity = true;
				dust2.scale = 0.4f;
				dust2.fadeIn = 1.2f;
				dust2.velocity = vector2 * 4f;
				dust2.velocity.Y += -3f;
				dust2.velocity *= 2f;
			}
			for (float num3 = 0f; num3 < 1f; num3 += 0.07f)
			{
				Vector2 vector3 = Vector2.UnitY.RotatedBy(num3 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.3f);
				Dust dust3 = Dust.NewDustPerfect(center + vector3, 267, Vector2.Zero, 0, celeb2Color);
				dust3.noGravity = true;
				dust3.scale = 0.4f;
				dust3.fadeIn = 1.3f;
				dust3.velocity = vector3 * 7f;
				dust3.velocity.Y += -3f;
				dust3.velocity *= 2f;
			}
			for (int j = 0; j < 1; j++)
			{
				int num4 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num4].velocity *= 0.3f;
				Main.gore[num4].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num4].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			break;
		}
		}
	}

	private void CreateGroundExplosion(float MAX_SPREAD, int fluff, int distFluff, int layerStart, int layerEnd, int layerJump)
	{
		Point point = base.TopLeft.ToTileCoordinates();
		Point point2 = base.BottomRight.ToTileCoordinates();
		point.X -= fluff;
		point.Y -= fluff;
		point2.X += fluff;
		point2.Y += fluff;
		int num = point.X / 2 + point2.X / 2;
		int num2 = width / 2 + distFluff;
		for (int i = layerStart; i < layerEnd; i += layerJump)
		{
			int num3 = i;
			for (int j = point.X; j <= point2.X; j++)
			{
				for (int k = point.Y; k <= point2.Y; k++)
				{
					if (!WorldGen.InWorld(j, k, 10))
					{
						return;
					}
					if (Vector2.Distance(base.Center, new Vector2(j * 16, k * 16)) > (float)num2)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(j, k);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(j, k - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num4 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
					for (int l = 0; l < num4; l++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
						obj.velocity.Y -= 3f + (float)num3 * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.scale += (float)num3 * 0.03f;
					}
					if (num3 >= 2)
					{
						for (int m = 0; m < num4 - 1; m++)
						{
							Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
							obj2.velocity.Y -= 1f + (float)num3;
							obj2.velocity.Y *= Main.rand.NextFloat();
						}
					}
					if (num4 > 0 && Main.rand.Next(3) != 0)
					{
						float num5 = (float)Math.Abs(num - j) / (MAX_SPREAD / 2f);
						Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
						gore.velocity.Y -= 0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f;
						gore.velocity.Y *= Main.rand.NextFloat();
						gore.position = new Vector2(j * 16 + 20, k * 16 + 20);
					}
				}
			}
		}
	}

	public void CheckUsability(Player player, ref bool currentlyUsable)
	{
		if (aiStyle == 160)
		{
			currentlyUsable = false;
		}
	}

	private void AI_163_Chum()
	{
		float num = 0.05f;
		float num2 = width / 2;
		for (int i = 0; i < 1000; i++)
		{
			if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num2)
			{
				if (position.X < Main.projectile[i].position.X)
				{
					velocity.X -= num;
				}
				else
				{
					velocity.X += num;
				}
				if (position.Y < Main.projectile[i].position.Y)
				{
					velocity.Y -= num;
				}
				else
				{
					velocity.Y += num;
				}
			}
		}
		if (wet)
		{
			velocity.X *= 0.9f;
			int num3 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
			int num4 = (int)(base.Center.Y / 16f);
			_ = position.Y / 16f;
			int num5 = (int)((position.Y + (float)height) / 16f);
			if (Main.tile[num3, num4] == null)
			{
				Main.tile[num3, num4] = new Tile();
			}
			if (Main.tile[num3, num5] == null)
			{
				Main.tile[num3, num5] = new Tile();
			}
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.5f;
			}
			num3 = (int)(base.Center.X / 16f);
			num4 = (int)(base.Center.Y / 16f);
			float num6 = AI_061_FishingBobber_GetWaterLine(num3, num4);
			if (base.Center.Y > num6)
			{
				velocity.Y -= 0.1f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (base.Center.Y + velocity.Y < num6)
				{
					velocity.Y = num6 - base.Center.Y;
				}
			}
			else
			{
				velocity.Y = num6 - base.Center.Y;
			}
		}
		else
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.95f;
			}
			velocity.X *= 0.98f;
			velocity.Y += 0.3f;
			if (velocity.Y > 15.9f)
			{
				velocity.Y = 15.9f;
			}
		}
		if (frameCounter == 0)
		{
			frameCounter = 1;
			frame = Main.rand.Next(4);
		}
		if (frameCounter < 10 && wet)
		{
			frameCounter++;
			for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
			{
				Gore gore = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
				gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
				if (gore.velocity.Y > 0f)
				{
					gore.velocity.Y *= -1f;
				}
			}
			for (float num8 = 0f; num8 < 2f; num8 += 1f)
			{
				Gore gore2 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1208, scale * 0.7f + Main.rand.NextFloat() * 0.15f);
				gore2.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
				if (gore2.velocity.Y > 0f)
				{
					gore2.velocity.Y *= -1f;
				}
			}
		}
		scale = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true);
		rotation += velocity.X * 0.14f;
		bool flag = !wet && velocity.Length() < 0.8f;
		int maxValue = (wet ? 90 : 5);
		if (Main.rand.Next(maxValue) == 0 && !flag)
		{
			Gore gore3 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
			if (wet)
			{
				gore3.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
			}
			else if (gore3.velocity.Y < 0f)
			{
				gore3.velocity.Y = 0f - gore3.velocity.Y;
			}
		}
		Vector2 spot = base.Center + Vector2.UnitY * 16f;
		if (ai[0] >= 10f && timeLeft > 60)
		{
			timeLeft = 60;
			netUpdate = true;
		}
		if (ai[0] < 10f && timeLeft > 60)
		{
			Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
		}
	}

	private void ReduceRemainingChumsInPool()
	{
		int x = (int)base.Center.X / 16;
		int num = (int)base.Center.Y / 16;
		List<Tuple<int, Point>> list = new List<Tuple<int, Point>>();
		List<int> list2 = new List<int>();
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
			{
				list.Add(new Tuple<int, Point>(i, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
			}
		}
		if (list.Count == 0)
		{
			return;
		}
		GetFishingPondWidth(x, num, out var minX, out var maxX);
		Point point = default(Point);
		for (int j = minX; j <= maxX; j++)
		{
			point.X = j;
			int num2 = num;
			while (Main.tile[j, num2].liquid > 0 && !WorldGen.SolidTile(j, num2) && num2 < Main.maxTilesY - 10)
			{
				num2 = (point.Y = num2 + 1);
				for (int num3 = list.Count - 1; num3 >= 0; num3--)
				{
					if (list[num3].Item2 == point)
					{
						list2.Add(list[num3].Item1);
						list.RemoveAt(num3);
					}
				}
				if (list.Count == 0)
				{
					break;
				}
			}
			if (list.Count == 0)
			{
				break;
			}
		}
		for (int k = 0; k < list2.Count; k++)
		{
			Projectile obj = Main.projectile[list2[k]];
			obj.ai[0] += 1f;
			obj.netUpdate = true;
		}
	}

	private void AI_061_FishingBobber()
	{
		Player player = Main.player[owner];
		timeLeft = 60;
		bool flag = false;
		if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
		{
			flag = true;
		}
		else if (player.inventory[player.selectedItem].shoot != type)
		{
			flag = true;
		}
		else if (player.pulley)
		{
			flag = true;
		}
		else if (player.dead)
		{
			flag = true;
		}
		if (flag)
		{
			Kill();
			return;
		}
		if (ai[1] > 0f && localAI[1] != 0f)
		{
			localAI[1] = 0f;
			if (!lavaWet && !honeyWet)
			{
				AI_061_FishingBobber_DoASplash();
			}
		}
		if (ai[0] >= 1f)
		{
			if (ai[0] == 2f)
			{
				ai[0] += 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
				if (!lavaWet && !honeyWet)
				{
					AI_061_FishingBobber_DoASplash();
				}
			}
			if (localAI[0] < 100f)
			{
				localAI[0] += 1f;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				ReduceRemainingChumsInPool();
			}
			tileCollide = false;
			int num = 10;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num2 = player.position.X + (float)(player.width / 2) - vector.X;
			float num3 = player.position.Y + (float)(player.height / 2) - vector.Y;
			float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
			if (num4 > 3000f)
			{
				Kill();
			}
			num4 = 15.9f / num4;
			num2 *= num4;
			num3 *= num4;
			velocity.X = (velocity.X * (float)(num - 1) + num2) / (float)num;
			velocity.Y = (velocity.Y * (float)(num - 1) + num3) / (float)num;
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			if (Main.myPlayer == owner && base.Hitbox.Intersects(player.Hitbox))
			{
				Kill();
			}
			return;
		}
		bool flag2 = false;
		Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num5 = player.position.X + (float)(player.width / 2) - vector2.X;
		float num6 = player.position.Y + (float)(player.height / 2) - vector2.Y;
		rotation = (float)Math.Atan2(num6, num5) + 1.57f;
		if ((float)Math.Sqrt(num5 * num5 + num6 * num6) > 900f)
		{
			ai[0] = 1f;
		}
		if (wet)
		{
			rotation = 0f;
			velocity.X *= 0.9f;
			int num7 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
			int num8 = (int)(base.Center.Y / 16f);
			_ = position.Y / 16f;
			int num9 = (int)((position.Y + (float)height) / 16f);
			if (Main.tile[num7, num8] == null)
			{
				Main.tile[num7, num8] = new Tile();
			}
			if (Main.tile[num7, num9] == null)
			{
				Main.tile[num7, num9] = new Tile();
			}
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.5f;
			}
			num7 = (int)(base.Center.X / 16f);
			num8 = (int)(base.Center.Y / 16f);
			float num10 = AI_061_FishingBobber_GetWaterLine(num7, num8);
			if (base.Center.Y > num10)
			{
				velocity.Y -= 0.1f;
				if (velocity.Y < -8f)
				{
					velocity.Y = -8f;
				}
				if (base.Center.Y + velocity.Y < num10)
				{
					velocity.Y = num10 - base.Center.Y;
				}
			}
			else
			{
				velocity.Y = num10 - base.Center.Y;
			}
			if ((double)velocity.Y >= -0.01 && (double)velocity.Y <= 0.01)
			{
				flag2 = true;
			}
		}
		else
		{
			if (velocity.Y == 0f)
			{
				velocity.X *= 0.95f;
			}
			velocity.X *= 0.98f;
			velocity.Y += 0.2f;
			if (velocity.Y > 15.9f)
			{
				velocity.Y = 15.9f;
			}
		}
		if (Main.myPlayer == owner && player.GetFishingConditions().BaitItemType == 2673)
		{
			player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
		}
		if (ai[1] != 0f)
		{
			flag2 = true;
		}
		if (!flag2)
		{
			return;
		}
		if (ai[1] == 0f && Main.myPlayer == owner)
		{
			int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
			if (Main.rand.Next(300) < finalFishingLevel)
			{
				localAI[1] += Main.rand.Next(1, 3);
			}
			localAI[1] += finalFishingLevel / 30;
			localAI[1] += Main.rand.Next(1, 3);
			if (Main.rand.Next(60) == 0)
			{
				localAI[1] += 60f;
			}
			if (localAI[1] > 660f)
			{
				localAI[1] = 0f;
				FishingCheck();
			}
		}
		else if (ai[1] < 0f)
		{
			if (velocity.Y == 0f || (honeyWet && Math.Abs(velocity.Y) <= 0.01f))
			{
				velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
				velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
				wet = false;
				lavaWet = false;
				honeyWet = false;
			}
			ai[1] += Main.rand.Next(1, 5);
			if (ai[1] >= 0f)
			{
				ai[1] = 0f;
				localAI[1] = 0f;
				netUpdate = true;
			}
		}
	}

	private float AI_061_FishingBobber_GetWaterLine(int X, int Y)
	{
		float result = position.Y + (float)height;
		if (Main.tile[X, Y - 1] == null)
		{
			Main.tile[X, Y - 1] = new Tile();
		}
		if (Main.tile[X, Y] == null)
		{
			Main.tile[X, Y] = new Tile();
		}
		if (Main.tile[X, Y + 1] == null)
		{
			Main.tile[X, Y + 1] = new Tile();
		}
		if (Main.tile[X, Y - 1].liquid > 0)
		{
			result = Y * 16;
			result -= (float)((int)Main.tile[X, Y - 1].liquid / 16);
		}
		else if (Main.tile[X, Y].liquid > 0)
		{
			result = (Y + 1) * 16;
			result -= (float)((int)Main.tile[X, Y].liquid / 16);
		}
		else if (Main.tile[X, Y + 1].liquid > 0)
		{
			result = (Y + 2) * 16;
			result -= (float)((int)Main.tile[X, Y + 1].liquid / 16);
		}
		return result;
	}

	private void AI_061_FishingBobber_DoASplash()
	{
		for (int i = 0; i < 100; i++)
		{
			int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y - 10f), width + 12, 24, Dust.dustWater());
			Main.dust[num].velocity.Y -= 4f;
			Main.dust[num].velocity.X *= 2.5f;
			Main.dust[num].scale = 0.8f;
			Main.dust[num].alpha = 100;
			Main.dust[num].noGravity = true;
		}
		SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
	}

	private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
	{
		Item item = new Item();
		item.SetDefaults(itemType);
		if (itemType == 3196)
		{
			int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
			int minValue = (finalFishingLevel / 20 + 3) / 2;
			int num = (finalFishingLevel / 10 + 6) / 2;
			if (Main.rand.Next(50) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(100) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(150) < finalFishingLevel)
			{
				num++;
			}
			if (Main.rand.Next(200) < finalFishingLevel)
			{
				num++;
			}
			int num2 = (item.stack = Main.rand.Next(minValue, num + 1));
		}
		if (itemType == 3197)
		{
			int finalFishingLevel2 = thePlayer.GetFishingConditions().FinalFishingLevel;
			int minValue2 = (finalFishingLevel2 / 4 + 15) / 2;
			int num3 = (finalFishingLevel2 / 2 + 30) / 2;
			if (Main.rand.Next(50) < finalFishingLevel2)
			{
				num3 += 4;
			}
			if (Main.rand.Next(100) < finalFishingLevel2)
			{
				num3 += 4;
			}
			if (Main.rand.Next(150) < finalFishingLevel2)
			{
				num3 += 4;
			}
			if (Main.rand.Next(200) < finalFishingLevel2)
			{
				num3 += 4;
			}
			int num4 = (item.stack = Main.rand.Next(minValue2, num3 + 1));
		}
		item.newAndShiny = true;
		Item item2 = thePlayer.GetItem(owner, item, default(GetItemSettings));
		if (item2.stack > 0)
		{
			int number = Item.NewItem((int)position.X, (int)position.Y, width, height, itemType, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
		else
		{
			item.position.X = base.Center.X - (float)(item.width / 2);
			item.position.Y = base.Center.Y - (float)(item.height / 2);
			item.active = true;
			PopupText.NewText(PopupTextContext.RegularItemPickup, item, 0);
		}
	}

	private void AI_146_DD2Victory()
	{
	}

	private void BetsySharpnel(int npcIndex)
	{
		if (ai[1] != -1f && owner == Main.myPlayer)
		{
			Vector2 spinningpoint = new Vector2(0f, 6f);
			Vector2 center = base.Center;
			float num = (float)Math.PI / 4f;
			int num2 = 5;
			float num3 = (0f - num * 2f) / (float)(num2 - 1);
			for (int i = 0; i < num2; i++)
			{
				int num4 = NewProjectile(center, spinningpoint.RotatedBy(num + num3 * (float)i), 710, damage, knockBack, owner, 0f, -1f);
				Projectile p = Main.projectile[num4];
				CopyLocalNPCImmunityTimes(p);
			}
		}
	}

	private void CopyLocalNPCImmunityTimes(Projectile p)
	{
		for (int i = 0; i < localNPCImmunity.Length; i++)
		{
			p.localNPCImmunity[i] = localNPCImmunity[i];
		}
	}

	private void AI_001()
	{
		//IL_21dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_57e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_57ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_58cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_58f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_58f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_7c56: Unknown result type (might be due to invalid IL or missing references)
		//IL_7e7b: Unknown result type (might be due to invalid IL or missing references)
		if (type == 469 && wet && !honeyWet)
		{
			Kill();
		}
		if (type == 601)
		{
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
			Vector3 rgb = portalColor.ToVector3();
			rgb *= 0.5f;
			Lighting.AddLight(base.Center + velocity * 3f, rgb);
			if (alpha > 0 && alpha <= 15)
			{
				Color color = portalColor;
				color.A = byte.MaxValue;
				for (int i = 0; i < 4; i++)
				{
					Dust obj = Main.dust[Dust.NewDust(base.Center, 0, 0, 264)];
					obj.position = base.Center;
					obj.velocity = velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
					obj.color = color;
					obj.scale = 1.2f;
					obj.noLight = true;
					obj.noGravity = true;
					obj.customData = Main.player[owner];
				}
				if (ai[0] != 0f)
				{
					SoundEngine.PlaySound(SoundID.Item114, position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item115, position);
				}
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (alpha == 0)
			{
				Color color2 = portalColor;
				color2.A = byte.MaxValue;
				Dust obj2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
				obj2.position = base.Center;
				obj2.velocity = velocity / 4f;
				obj2.color = color2;
				obj2.noGravity = true;
				obj2.scale = 0.6f;
			}
		}
		if (type == 472)
		{
			int num = Dust.NewDust(position, width, height, 30);
			Main.dust[num].noGravity = true;
			Main.dust[num].velocity *= 0.25f;
			Main.dust[num].velocity += velocity * 0.75f;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
				for (int j = 0; j < 20; j++)
				{
					num = Dust.NewDust(position, width, height, 30);
					Main.dust[num].noGravity = true;
					Main.dust[num].velocity *= 0.25f;
					Main.dust[num].velocity += velocity;
					Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				}
			}
		}
		if (type == 323)
		{
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 436)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
		}
		if (type == 467)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item34, position);
			}
			else if (ai[1] == 1f && Main.netMode != 1)
			{
				int num2 = -1;
				float num3 = 2000f;
				for (int k = 0; k < 255; k++)
				{
					if (Main.player[k].active && !Main.player[k].dead)
					{
						Vector2 center = Main.player[k].Center;
						float num4 = Vector2.Distance(center, base.Center);
						if ((num4 < num3 || num2 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
						{
							num3 = num4;
							num2 = k;
						}
					}
				}
				if (num3 < 20f)
				{
					Kill();
					return;
				}
				if (num2 != -1)
				{
					ai[1] = 21f;
					ai[0] = num2;
					netUpdate = true;
				}
			}
			else if (ai[1] > 20f && ai[1] < 200f)
			{
				ai[1] += 1f;
				int num5 = (int)ai[0];
				if (!Main.player[num5].active || Main.player[num5].dead)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					float num6 = velocity.ToRotation();
					Vector2 vector = Main.player[num5].Center - base.Center;
					if (vector.Length() < 20f)
					{
						Kill();
						return;
					}
					float targetAngle = vector.ToRotation();
					if (vector == Vector2.Zero)
					{
						targetAngle = num6;
					}
					float num7 = num6.AngleLerp(targetAngle, 0.008f);
					velocity = new Vector2(velocity.Length(), 0f).RotatedBy(num7);
				}
			}
			if (ai[1] >= 1f && ai[1] < 20f)
			{
				ai[1] += 1f;
				if (ai[1] == 20f)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
			localAI[0] += 1f;
			if (localAI[0] == 12f)
			{
				localAI[0] = 0f;
				for (int l = 0; l < 12; l++)
				{
					Vector2 spinningpoint = Vector2.UnitX * -width / 2f;
					spinningpoint += -Vector2.UnitY.RotatedBy((float)l * (float)Math.PI / 6f) * new Vector2(8f, 16f);
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					int num8 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160);
					Main.dust[num8].scale = 1.1f;
					Main.dust[num8].noGravity = true;
					Main.dust[num8].position = base.Center + spinningpoint;
					Main.dust[num8].velocity = velocity * 0.1f;
					Main.dust[num8].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num8].position) * 1.25f;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int m = 0; m < 1; m++)
				{
					Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num9 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Main.dust[num9].velocity *= 0.1f;
					Main.dust[num9].position = base.Center + vector2 * width / 2f;
					Main.dust[num9].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(32) == 0)
			{
				for (int n = 0; n < 1; n++)
				{
					Vector2 vector3 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num10 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Main.dust[num10].velocity *= 0.3f;
					Main.dust[num10].position = base.Center + vector3 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num10].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				for (int num11 = 0; num11 < 2; num11++)
				{
					Vector2 vector4 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
					int num12 = Dust.NewDust(position, width, height, 6, 0f, 0f, 0, default(Color), 1.2f);
					Main.dust[num12].velocity *= 0.3f;
					Main.dust[num12].noGravity = true;
					Main.dust[num12].position = base.Center + vector4 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num12].fadeIn = 1.4f;
					}
				}
			}
		}
		if (type == 468)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item34, position);
			}
			else if (ai[1] == 1f && Main.netMode != 1)
			{
				int num13 = -1;
				float num14 = 2000f;
				for (int num15 = 0; num15 < 255; num15++)
				{
					if (Main.player[num15].active && !Main.player[num15].dead)
					{
						Vector2 center2 = Main.player[num15].Center;
						float num16 = Vector2.Distance(center2, base.Center);
						if ((num16 < num14 || num13 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
						{
							num14 = num16;
							num13 = num15;
						}
					}
				}
				if (num14 < 20f)
				{
					Kill();
					return;
				}
				if (num13 != -1)
				{
					ai[1] = 21f;
					ai[0] = num13;
					netUpdate = true;
				}
			}
			else if (ai[1] > 20f && ai[1] < 200f)
			{
				ai[1] += 1f;
				int num17 = (int)ai[0];
				if (!Main.player[num17].active || Main.player[num17].dead)
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					float num18 = velocity.ToRotation();
					Vector2 vector5 = Main.player[num17].Center - base.Center;
					if (vector5.Length() < 20f)
					{
						Kill();
						return;
					}
					float targetAngle2 = vector5.ToRotation();
					if (vector5 == Vector2.Zero)
					{
						targetAngle2 = num18;
					}
					float num19 = num18.AngleLerp(targetAngle2, 0.01f);
					velocity = new Vector2(velocity.Length(), 0f).RotatedBy(num19);
				}
			}
			if (ai[1] >= 1f && ai[1] < 20f)
			{
				ai[1] += 1f;
				if (ai[1] == 20f)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
			localAI[0] += 1f;
			if (localAI[0] == 12f)
			{
				localAI[0] = 0f;
				for (int num20 = 0; num20 < 12; num20++)
				{
					Vector2 spinningpoint2 = Vector2.UnitX * -width / 2f;
					spinningpoint2 += -Vector2.UnitY.RotatedBy((float)num20 * (float)Math.PI / 6f) * new Vector2(8f, 16f);
					spinningpoint2 = spinningpoint2.RotatedBy(rotation - (float)Math.PI / 2f);
					int num21 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160);
					Main.dust[num21].scale = 1.1f;
					Main.dust[num21].noGravity = true;
					Main.dust[num21].position = base.Center + spinningpoint2;
					Main.dust[num21].velocity = velocity * 0.1f;
					Main.dust[num21].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num21].position) * 1.25f;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int num22 = 0; num22 < 1; num22++)
				{
					Vector2 vector6 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num23 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Main.dust[num23].velocity *= 0.1f;
					Main.dust[num23].position = base.Center + vector6 * width / 2f;
					Main.dust[num23].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(32) == 0)
			{
				for (int num24 = 0; num24 < 1; num24++)
				{
					Vector2 vector7 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num25 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Main.dust[num25].velocity *= 0.3f;
					Main.dust[num25].position = base.Center + vector7 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num25].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				for (int num26 = 0; num26 < 2; num26++)
				{
					Vector2 vector8 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
					int num27 = Dust.NewDust(position, width, height, 27, 0f, 0f, 0, default(Color), 1.2f);
					Main.dust[num27].velocity *= 0.3f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].position = base.Center + vector8 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num27].fadeIn = 1.4f;
					}
				}
			}
		}
		if (type == 634 || type == 635)
		{
			float num28 = 5f;
			float num29 = 250f;
			float num30 = 6f;
			Vector2 vector9 = new Vector2(8f, 10f);
			float num31 = 1.2f;
			Vector3 rgb2 = new Vector3(0.7f, 0.1f, 0.5f);
			int num32 = 4 * MaxUpdates;
			int num33 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
			int num34 = 255;
			if (type == 635)
			{
				vector9 = new Vector2(10f, 20f);
				num31 = 1f;
				num29 = 500f;
				num34 = 88;
				num32 = 3 * MaxUpdates;
				rgb2 = new Vector3(0.4f, 0.6f, 0.9f);
				num33 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				localAI[0] = -Main.rand.Next(48);
				SoundEngine.PlaySound(SoundID.Item34, position);
			}
			else if (ai[1] == 1f && owner == Main.myPlayer)
			{
				int num35 = -1;
				float num36 = num29;
				for (int num37 = 0; num37 < 200; num37++)
				{
					if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this))
					{
						Vector2 center3 = Main.npc[num37].Center;
						float num38 = Vector2.Distance(center3, base.Center);
						if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
						{
							num36 = num38;
							num35 = num37;
						}
					}
				}
				if (num36 < 20f)
				{
					Kill();
					return;
				}
				if (num35 != -1)
				{
					ai[1] = num28 + 1f;
					ai[0] = num35;
					netUpdate = true;
				}
			}
			else if (ai[1] > num28)
			{
				ai[1] += 1f;
				int num39 = (int)ai[0];
				if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this))
				{
					ai[1] = 1f;
					ai[0] = 0f;
					netUpdate = true;
				}
				else
				{
					velocity.ToRotation();
					Vector2 vector10 = Main.npc[num39].Center - base.Center;
					if (vector10.Length() < 20f)
					{
						Kill();
						return;
					}
					if (vector10 != Vector2.Zero)
					{
						vector10.Normalize();
						vector10 *= num30;
					}
					float num40 = 30f;
					velocity = (velocity * (num40 - 1f) + vector10) / num40;
				}
			}
			if (ai[1] >= 1f && ai[1] < num28)
			{
				ai[1] += 1f;
				if (ai[1] == num28)
				{
					ai[1] = 1f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= num32)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight(base.Center, rgb2);
			rotation = velocity.ToRotation();
			localAI[0] += 1f;
			if (localAI[0] == 48f)
			{
				localAI[0] = 0f;
			}
			else if (alpha == 0)
			{
				for (int num41 = 0; num41 < 2; num41++)
				{
					Vector2 vector11 = Vector2.UnitX * -30f;
					vector11 = -Vector2.UnitY.RotatedBy(localAI[0] * ((float)Math.PI / 24f) + (float)num41 * (float)Math.PI) * vector9 - rotation.ToRotationVector2() * 10f;
					int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160);
					Main.dust[num42].scale = num31;
					Main.dust[num42].noGravity = true;
					Main.dust[num42].position = base.Center + vector11 + velocity * 2f;
					Main.dust[num42].velocity = Vector2.Normalize(base.Center + velocity * 2f * 8f - Main.dust[num42].position) * 2f + velocity * 2f;
				}
			}
			if (Main.rand.Next(12) == 0)
			{
				for (int num43 = 0; num43 < 1; num43++)
				{
					Vector2 vector12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num44 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
					Main.dust[num44].velocity *= 0.1f;
					Main.dust[num44].position = base.Center + vector12 * width / 2f + velocity * 2f;
					Main.dust[num44].fadeIn = 0.9f;
				}
			}
			if (Main.rand.Next(64) == 0)
			{
				for (int num45 = 0; num45 < 1; num45++)
				{
					Vector2 vector13 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
					int num46 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
					Main.dust[num46].velocity *= 0.3f;
					Main.dust[num46].position = base.Center + vector13 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num46].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				for (int num47 = 0; num47 < 2; num47++)
				{
					Vector2 vector14 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
					int num48 = Dust.NewDust(position, width, height, num33, 0f, 0f, 0, default(Color), 1.2f);
					Main.dust[num48].velocity *= 0.3f;
					Main.dust[num48].noGravity = true;
					Main.dust[num48].position = base.Center + vector14 * width / 2f;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num48].fadeIn = 1.4f;
					}
				}
			}
			if (Main.rand.Next(12) == 0 && type == 634)
			{
				Vector2 vector15 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
				int num49 = Dust.NewDust(position, width, height, num34, 0f, 0f, 100);
				Main.dust[num49].velocity *= 0.3f;
				Main.dust[num49].position = base.Center + vector15 * width / 2f;
				Main.dust[num49].fadeIn = 0.9f;
				Main.dust[num49].noGravity = true;
			}
			if (Main.rand.Next(3) == 0 && type == 635)
			{
				Vector2 vector16 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
				int num50 = Dust.NewDust(position, width, height, num34, 0f, 0f, 100);
				Main.dust[num50].velocity *= 0.3f;
				Main.dust[num50].position = base.Center + vector16 * width / 2f;
				Main.dust[num50].fadeIn = 1.2f;
				Main.dust[num50].scale = 1.5f;
				Main.dust[num50].noGravity = true;
			}
		}
		if (type == 459)
		{
			alpha -= 30;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			position = base.Center;
			scale = ai[1];
			width = (height = (int)(22f * scale));
			base.Center = position;
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
			int num51 = 0;
			if ((double)scale < 0.85)
			{
				num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
			}
			else
			{
				num51 = 1;
				penetrate = -1;
				maxPenetrate = -1;
			}
			for (int num52 = 0; num52 < num51; num52++)
			{
				int num53 = Dust.NewDust(position, width, height, 226, velocity.X);
				Main.dust[num53].position -= Vector2.One * 3f;
				Main.dust[num53].scale = 0.5f;
				Main.dust[num53].noGravity = true;
				Main.dust[num53].velocity = velocity / 3f;
				Main.dust[num53].alpha = 255 - (int)(255f * scale);
			}
		}
		if (type == 709)
		{
			alpha -= 30;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 3)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
			if (ai[1] == 0f)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryShot, base.Center);
			}
			ai[1] += 1f;
			if (ai[1] >= 30f)
			{
				Kill();
				return;
			}
		}
		if (type == 442)
		{
			frame = 0;
			if (alpha != 0)
			{
				localAI[0] += 1f;
				if (localAI[0] >= 4f)
				{
					alpha -= 90;
					if (alpha < 0)
					{
						alpha = 0;
						localAI[0] = 2f;
					}
				}
			}
			if (Vector2.Distance(base.Center, new Vector2(ai[0], ai[1]) * 16f + Vector2.One * 8f) <= 16f)
			{
				Kill();
				return;
			}
			if (alpha == 0)
			{
				localAI[1] += 1f;
				if (localAI[1] >= 120f)
				{
					Kill();
					return;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
				localAI[0] += 1f;
				if (localAI[0] == 3f)
				{
					localAI[0] = 0f;
					for (int num54 = 0; num54 < 8; num54++)
					{
						Vector2 spinningpoint3 = Vector2.UnitX * -8f;
						spinningpoint3 += -Vector2.UnitY.RotatedBy((float)num54 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
						spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
						int num55 = Dust.NewDust(base.Center, 0, 0, 135);
						Main.dust[num55].scale = 1.5f;
						Main.dust[num55].noGravity = true;
						Main.dust[num55].position = base.Center + spinningpoint3;
						Main.dust[num55].velocity = velocity * 0.66f;
					}
				}
			}
		}
		if (type == 440 || type == 449 || type == 606)
		{
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type == 440)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
			}
			if (type == 449)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
			}
			if (type == 606)
			{
				Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
			}
			float num56 = 100f;
			float num57 = 3f;
			if (type == 606)
			{
				num56 = 150f;
				num57 = 5f;
			}
			if (ai[1] == 0f)
			{
				localAI[0] += num57;
				if (localAI[0] == num57 * 1f && type == 606)
				{
					for (int num58 = 0; num58 < 4; num58++)
					{
						int num59 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
						Main.dust[num59].velocity *= 0.2f;
						Main.dust[num59].velocity += velocity / 10f;
						Main.dust[num59].noGravity = true;
					}
				}
				if (localAI[0] > num56)
				{
					localAI[0] = num56;
				}
			}
			else
			{
				localAI[0] -= num57;
				if (localAI[0] <= 0f)
				{
					Kill();
					return;
				}
			}
		}
		if (type == 438)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
		}
		if (type == 593)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
			if (++frameCounter >= 12)
			{
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				frameCounter = 0;
			}
			if (Main.rand.Next(2) == 0)
			{
				Vector2 vector17 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
				Dust obj3 = Main.dust[Dust.NewDust(base.Center - vector17 * 8f, 0, 0, 240)];
				obj3.noGravity = true;
				obj3.position = base.Center - vector17 * 8f * scale;
				obj3.velocity = vector17.RotatedBy(-1.5707963705062866) * 2f;
				obj3.velocity = Vector2.Zero;
				obj3.scale = 0.5f + Main.rand.NextFloat();
				obj3.fadeIn = 0.5f;
			}
		}
		if (type == 592)
		{
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
		}
		if (type == 462)
		{
			int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
			Main.dust[num60].noLight = true;
			Main.dust[num60].noGravity = true;
			Main.dust[num60].velocity = velocity;
			Main.dust[num60].position -= Vector2.One * 4f;
			Main.dust[num60].scale = 0.8f;
			if (++frameCounter >= 9)
			{
				frameCounter = 0;
				if (++frame >= 5)
				{
					frame = 0;
				}
			}
		}
		if (type == 437)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num61 = 0; num61 < 4; num61++)
				{
					int num62 = Dust.NewDust(position, width, height, 226, velocity.X);
					Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
					Main.dust[num62].scale = 0.5f;
					Main.dust[num62].noGravity = true;
					Main.dust[num62].velocity /= 2f;
					Main.dust[num62].velocity += velocity * 0.66f;
				}
			}
			if (ai[0] < 16f)
			{
				for (int num63 = 0; num63 < 2; num63++)
				{
					int num64 = Dust.NewDust(position, width, height, 226, velocity.X);
					Main.dust[num64].position = position + new Vector2(((direction == 1) ? 1 : 0) * width, 2 + (height - 4) * num63);
					Main.dust[num64].scale = 0.3f;
					Main.dust[num64].noGravity = true;
					Main.dust[num64].velocity = Vector2.Zero;
				}
			}
		}
		if (type == 435)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
		}
		if (type == 682)
		{
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.DD2_LightningBugZap, position);
				for (int num65 = 0; num65 < 8; num65++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 272);
					dust.velocity *= 1f;
					dust.velocity += velocity * 0.65f;
					dust.scale = 0.6f;
					dust.fadeIn = 0.8f;
					dust.noGravity = true;
					dust.noLight = true;
					dust.position += dust.velocity * 3f;
				}
			}
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			frameCounter++;
			if (frameCounter >= 3)
			{
				frame++;
				frameCounter = 0;
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
		}
		if (type == 684)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
			localAI[0] += 1f;
			for (int num66 = 0; num66 < 1; num66++)
			{
				Vector2 spinningpoint4 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
				spinningpoint4 = spinningpoint4.RotatedBy(velocity.ToRotation());
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 60);
				dust2.alpha = 127;
				dust2.fadeIn = 1.5f;
				dust2.scale = 1.3f;
				dust2.velocity *= 0.3f;
				dust2.position = base.Center + spinningpoint4;
				dust2.noGravity = true;
				dust2.noLight = true;
				dust2.color = new Color(255, 255, 255, 0);
			}
			Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
		}
		if (type == 408)
		{
			alpha -= 40;
			if (alpha < 0)
			{
				alpha = 0;
			}
			spriteDirection = direction;
		}
		if (type == 282)
		{
			int num67 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
			Main.dust[num67].scale = (float)Main.rand.Next(1, 10) * 0.1f;
			Main.dust[num67].noGravity = true;
			Main.dust[num67].fadeIn = 1.5f;
			Main.dust[num67].velocity *= 0.25f;
			Main.dust[num67].velocity += velocity * 0.25f;
		}
		if (type == 275 || type == 276)
		{
			frameCounter++;
			if (frameCounter > 1)
			{
				frameCounter = 0;
				frame++;
				if (frame > 1)
				{
					frame = 0;
				}
			}
		}
		if (type == 225 && Main.rand.Next(2) == 0)
		{
			int num68 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
			Main.dust[num68].noGravity = true;
			Main.dust[num68].scale = 1.3f;
			Main.dust[num68].velocity *= 0.5f;
		}
		if (type == 174)
		{
			if (alpha == 0)
			{
				int num69 = Dust.NewDust(oldPosition - velocity * 3f, width, height, 76, 0f, 0f, 50);
				Main.dust[num69].noGravity = true;
				Main.dust[num69].noLight = true;
				Main.dust[num69].velocity *= 0.5f;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
		}
		else if (type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
		{
			if (type == 920 && frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(3);
			}
			if (alpha == 0 && Main.rand.Next(3) == 0)
			{
				int num70 = 4;
				Color newColor = new Color(78, 136, 255, 150);
				float num71 = 1.2f;
				bool noGravity = true;
				int num72 = 0;
				if (type == 921)
				{
					num70 = 243;
					newColor = default(Color);
				}
				if (type == 926)
				{
					num70 = 4;
					newColor = NPC.AI_121_QueenSlime_GetDustColor();
					newColor.A = 150;
					num71 = 1.2f;
					num72 = 8;
					noGravity = Main.rand.Next(2) == 0;
				}
				if (type == 937)
				{
					num70 = 4;
					newColor = NPC.AI_121_QueenSlime_GetDustColor();
					newColor.A = 150;
				}
				int num73 = Dust.NewDust(position - new Vector2(num72, num72) + velocity, width + num72 * 2, height + num72 * 2, num70, 0f, 0f, 50, newColor, num71);
				Main.dust[num73].velocity *= 0.3f;
				Main.dust[num73].velocity += velocity * 0.3f;
				Main.dust[num73].noGravity = noGravity;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (type != 937 && ai[1] == 0f)
			{
				ai[1] = 1f;
				if (type == 926)
				{
					SoundEngine.PlaySound(SoundID.Item155, position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item154, position);
				}
			}
		}
		else if (type == 176)
		{
			if (alpha == 0)
			{
				int num74 = Dust.NewDust(oldPosition, width, height, 22, 0f, 0f, 100, default(Color), 0.5f);
				Main.dust[num74].noGravity = true;
				Main.dust[num74].noLight = true;
				Main.dust[num74].velocity *= 0.15f;
				Main.dust[num74].fadeIn = 0.8f;
			}
			alpha -= 50;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
		}
		if (type == 350)
		{
			alpha -= 100;
			if (alpha < 0)
			{
				alpha = 0;
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
			if (alpha == 0)
			{
				int num75 = 2;
				if (Main.rand.Next(3) != 0)
				{
					int num76 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - velocity * 0.5f, num75 * 2, num75 * 2, 6, 0f, 0f, 100);
					Main.dust[num76].scale *= 1.3f + (float)Main.rand.Next(10) * 0.05f;
					Main.dust[num76].velocity *= 0.2f;
					Main.dust[num76].noGravity = true;
					Main.dust[num76].noLight = true;
					Main.dust[num76].velocity += velocity * 0.25f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num77 = (num77 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - velocity * 0.5f, num75 * 2, num75 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
					Main.dust[num77].fadeIn = 0.6f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num77].velocity *= 0.05f;
					Main.dust[num77].velocity += velocity * 0.25f;
				}
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item42, position);
			}
		}
		if (type == 325)
		{
			alpha -= 100;
			if (alpha < 0)
			{
				alpha = 0;
			}
			Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
			if (alpha == 0)
			{
				int num78 = 2;
				if (Main.rand.Next(3) != 0)
				{
					int num79 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - velocity * 0.5f, num78 * 2, num78 * 2, 6, 0f, 0f, 100);
					Main.dust[num79].scale *= 1.2f + (float)Main.rand.Next(10) * 0.05f;
					Main.dust[num79].velocity *= 0.2f;
					Main.dust[num79].noGravity = true;
					Main.dust[num79].noLight = true;
					Main.dust[num79].velocity += velocity * 0.25f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num80 = (num80 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - velocity * 0.5f, num78 * 2, num78 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
					Main.dust[num80].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.05f;
					Main.dust[num80].velocity *= 0.05f;
				}
			}
			if (ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item42, position);
			}
		}
		if (type == 469)
		{
			localAI[1] += 1f;
			if (localAI[1] > 2f)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
		}
		else if (type == 83 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item33, position);
		}
		else if (type == 408 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 19);
		}
		else if (type == 259 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item33, position);
		}
		else if (type == 110 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item11, position);
		}
		else if (type == 302 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item11, position);
		}
		else if (type == 438 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 593 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item11, position);
		}
		else if (type == 592 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 462 && ai[1] == 0f)
		{
			ai[1] = 1f;
			if (Main.rand.Next(2) == 0)
			{
				SoundEngine.PlaySound(SoundID.Item124, position);
			}
			else
			{
				SoundEngine.PlaySound(SoundID.Item125, position);
			}
			Vector2 vector18 = Vector2.Normalize(velocity);
			int num81 = Main.rand.Next(5, 10);
			for (int num82 = 0; num82 < num81; num82++)
			{
				int num83 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Main.dust[num83].velocity.Y -= 1f;
				Main.dust[num83].velocity += vector18 * 2f;
				Main.dust[num83].position -= Vector2.One * 4f;
				Main.dust[num83].noGravity = true;
			}
		}
		else if (type == 84 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 389 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 257 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 100 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item33, position);
		}
		else if (type == 98 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item17, position);
		}
		else if (type == 184 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item17, position);
		}
		else if (type == 195 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item17, position);
		}
		else if (type == 275 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item17, position);
		}
		else if (type == 276 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item17, position);
		}
		else if ((type == 81 || type == 82) && ai[1] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item5, position);
			ai[1] = 1f;
		}
		else if (type == 180 && ai[1] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item11, position);
			ai[1] = 1f;
		}
		else if (type == 248 && ai[1] == 0f)
		{
			SoundEngine.PlaySound(SoundID.Item17, position);
			ai[1] = 1f;
		}
		else if (type == 576 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item12, position);
		}
		else if (type == 577 && ai[1] == 0f)
		{
			ai[1] = 1f;
			SoundEngine.PlaySound(SoundID.Item36, position);
		}
		else if (type == 710)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (Main.rand.Next(4) == 0)
			{
				int num84;
				if (Main.rand.Next(2) == 0)
				{
					num84 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
					Main.dust[num84].noGravity = true;
				}
				num84 = Dust.NewDust(position, width, height, 6, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num84].noGravity = true;
				Main.dust[num84].velocity *= 2f;
				Main.dust[num84].velocity += velocity;
				if (ai[1] == -1f)
				{
					Main.dust[num84].fadeIn = 1.5f;
				}
				else
				{
					Main.dust[num84].fadeIn = 1.22f;
				}
				if (wet)
				{
					Kill();
				}
			}
		}
		else if (type == 639)
		{
			if (localAI[0] == 0f && localAI[1] == 0f)
			{
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
				ai[0] = velocity.X;
				ai[1] = velocity.Y;
			}
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 640)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (velocity == Vector2.Zero)
			{
				ai[0] = 0f;
				bool flag = true;
				for (int num85 = 1; num85 < oldPos.Length; num85++)
				{
					if (oldPos[num85] != oldPos[0])
					{
						flag = false;
					}
				}
				if (flag)
				{
					Kill();
					return;
				}
				if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
				{
					for (int num86 = 0; num86 < 2; num86++)
					{
						float num87 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num88 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector19 = new Vector2((float)Math.Cos(num87) * num88, (float)Math.Sin(num87) * num88);
						int num89 = Dust.NewDust(base.Center, 0, 0, 229, vector19.X, vector19.Y);
						Main.dust[num89].noGravity = true;
						Main.dust[num89].scale = 1.2f;
					}
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector20 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num90 = Dust.NewDust(base.Center + vector20 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num90].velocity *= 0.5f;
						Main.dust[num90].velocity.Y = 0f - Math.Abs(Main.dust[num90].velocity.Y);
					}
				}
			}
			else if (numUpdates == 1)
			{
				float num91 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
				float num92 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
				Vector2 vector21 = new Vector2((float)Math.Cos(num91) * num92, (float)Math.Sin(num91) * num92);
				int num93 = Dust.NewDust(position, 0, 0, 229, vector21.X, vector21.Y);
				Main.dust[num93].noGravity = true;
				Main.dust[num93].scale = 1.2f;
			}
		}
		if (type == 41)
		{
			int num94 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
			Main.dust[num94].noGravity = true;
			num94 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
			Main.dust[num94].noGravity = true;
		}
		else if (type == 55)
		{
			int num95 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
			Main.dust[num95].noGravity = true;
		}
		else if (type == 719)
		{
			if (Main.rand.Next(2) == 0)
			{
				Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 0.9f).noGravity = true;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num96 = 0; num96 < 20; num96++)
				{
					Dust dust3 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
					dust3.noGravity = true;
					dust3.velocity += velocity * 0.75f;
				}
				for (int num97 = 0; num97 < 10; num97++)
				{
					Dust dust4 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
					dust4.noGravity = true;
					dust4.velocity *= 2f;
				}
			}
		}
		else if (type == 763)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num98 = 0; num98 < 5; num98++)
				{
					Dust dust5 = Dust.NewDustDirect(position - velocity, width, height, 40, 0f, 0f, 0, default(Color), 1.1f);
					dust5.noGravity = true;
					dust5.velocity *= 1.5f;
				}
			}
		}
		else if (type == 772)
		{
			if (Main.rand.Next(7) == 0)
			{
				for (int num99 = 0; num99 < 1; num99++)
				{
					Dust dust6 = Dust.NewDustDirect(position - velocity, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90, 91, 138), 0f, 0f, 0, default(Color), 0.7f);
					dust6.noGravity = true;
					dust6.velocity = velocity * 0.6f;
					dust6.fadeIn = 0.8f;
				}
			}
		}
		else if (type == 374)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item17, position);
				localAI[0] = 1f;
			}
			if (Main.rand.Next(2) == 0)
			{
				int num100 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num100].noGravity = true;
				Main.dust[num100].velocity *= 0.5f;
			}
		}
		else if (type == 376)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item20, position);
			}
			localAI[0] += 1f;
			if (localAI[0] > 3f)
			{
				int num101 = 1;
				if (localAI[0] > 5f)
				{
					num101 = 2;
				}
				for (int num102 = 0; num102 < num101; num102++)
				{
					int num103 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num103].noGravity = true;
					Main.dust[num103].velocity.X *= 0.3f;
					Main.dust[num103].velocity.Y *= 0.3f;
					Main.dust[num103].noLight = true;
				}
				if (wet && !lavaWet)
				{
					Kill();
					return;
				}
			}
		}
		else if (type == 91 && Main.rand.Next(2) == 0)
		{
			int num105 = Dust.NewDust(Type: (Main.rand.Next(2) != 0) ? 58 : 15, Position: position, Width: width, Height: height, SpeedX: velocity.X * 0.25f, SpeedY: velocity.Y * 0.25f, Alpha: 150, newColor: default(Color), Scale: 0.9f);
			Main.dust[num105].velocity *= 0.25f;
		}
		if (type == 163 || type == 310)
		{
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		switch (type)
		{
		case 14:
		case 20:
		case 36:
		case 83:
		case 84:
		case 89:
		case 100:
		case 104:
		case 110:
		case 158:
		case 159:
		case 160:
		case 161:
		case 180:
		case 279:
		case 283:
		case 284:
		case 285:
		case 286:
		case 287:
		case 389:
			if (alpha > 0)
			{
				alpha -= 15;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			break;
		case 576:
		case 577:
			localAI[1] += 1f;
			if (localAI[1] > 2f)
			{
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			break;
		}
		if (type == 484)
		{
			int num106 = Dust.NewDust(position, width, height, 78);
			Main.dust[num106].noGravity = true;
			Main.dust[num106].velocity *= 0.1f;
			Main.dust[num106].scale = 0.75f;
			Main.dust[num106].position = (Main.dust[num106].position + base.Center) / 2f;
			Main.dust[num106].position += velocity * Main.rand.Next(0, 101) * 0.01f;
		}
		if (type == 242 || type == 302 || type == 438 || type == 462 || type == 592)
		{
			float num107 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
			if (alpha > 0)
			{
				alpha -= (byte)((double)num107 * 0.9);
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 660)
		{
			DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
			if (alpha > 0)
			{
				SoundEngine.PlaySound(SoundID.Item9, base.Center);
				alpha = 0;
				scale = 1.1f;
				frame = Main.rand.Next(14);
				float num108 = 16f;
				for (int num109 = 0; (float)num109 < num108; num109++)
				{
					Vector2 spinningpoint5 = Vector2.UnitX * 0f;
					spinningpoint5 += -Vector2.UnitY.RotatedBy((float)num109 * ((float)Math.PI * 2f / num108)) * new Vector2(1f, 4f);
					spinningpoint5 = spinningpoint5.RotatedBy(velocity.ToRotation());
					int num110 = Dust.NewDust(base.Center, 0, 0, 180);
					Main.dust[num110].scale = 1.5f;
					Main.dust[num110].noGravity = true;
					Main.dust[num110].position = base.Center + spinningpoint5;
					Main.dust[num110].velocity = velocity * 0f + spinningpoint5.SafeNormalize(Vector2.UnitY) * 1f;
				}
			}
		}
		if (type == 712)
		{
			DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
			if (alpha == 255)
			{
				frame = Main.rand.Next(2) * 4;
			}
			if (++frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame == 4)
				{
					frame = 0;
				}
				if (frame >= 8)
				{
					frame = 4;
				}
			}
			if (alpha > 0)
			{
				alpha = 0;
				scale = 1.1f;
				frame = Main.rand.Next(14);
				float num111 = 4f;
				for (int num112 = 0; (float)num112 < num111; num112++)
				{
					Vector2 spinningpoint6 = Vector2.UnitX * 0f;
					spinningpoint6 += -Vector2.UnitY.RotatedBy((float)num112 * ((float)Math.PI * 2f / num111)) * new Vector2(1f, 4f);
					spinningpoint6 = spinningpoint6.RotatedBy(velocity.ToRotation());
					int num113 = Dust.NewDust(base.Center, 0, 0, 15);
					Main.dust[num113].scale = 1.7f;
					Main.dust[num113].noGravity = true;
					Main.dust[num113].position = base.Center + spinningpoint6 + velocity.SafeNormalize(Vector2.Zero) * 50f;
					Main.dust[num113].velocity = Main.dust[num113].velocity * 2f + spinningpoint6.SafeNormalize(Vector2.UnitY) * 0.3f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					Main.dust[num113].velocity *= 0.7f;
					Main.dust[num113].position += Main.dust[num113].velocity * 5f;
				}
			}
		}
		if (type == 661)
		{
			if (alpha <= 0)
			{
				for (int num114 = 0; num114 < 3; num114++)
				{
					int num115 = Dust.NewDust(position, width, height, 240);
					Main.dust[num115].noGravity = true;
					Main.dust[num115].velocity *= 0.3f;
					Main.dust[num115].noLight = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 55;
				scale = 1.3f;
				if (alpha < 0)
				{
					alpha = 0;
					float num116 = 16f;
					for (int num117 = 0; (float)num117 < num116; num117++)
					{
						Vector2 spinningpoint7 = Vector2.UnitX * 0f;
						spinningpoint7 += -Vector2.UnitY.RotatedBy((float)num117 * ((float)Math.PI * 2f / num116)) * new Vector2(1f, 4f);
						spinningpoint7 = spinningpoint7.RotatedBy(velocity.ToRotation());
						int num118 = Dust.NewDust(base.Center, 0, 0, 62);
						Main.dust[num118].scale = 1.5f;
						Main.dust[num118].noLight = true;
						Main.dust[num118].noGravity = true;
						Main.dust[num118].position = base.Center + spinningpoint7;
						Main.dust[num118].velocity = Main.dust[num118].velocity * 4f + velocity * 0.3f;
					}
				}
			}
		}
		if (type == 706)
		{
			if (wet)
			{
				Kill();
				return;
			}
			SlotId val;
			if (localAI[1] == 0f)
			{
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_PhantomPhoenixShot, base.Center);
				array[0] = ((SlotId)(ref val)).ToFloat();
				localAI[1] += 1f;
				for (int num119 = 0; num119 < 15; num119++)
				{
					if (Main.rand.Next(4) != 0)
					{
						Dust dust7 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
						dust7.noGravity = true;
						dust7.velocity *= 2.3f;
						dust7.fadeIn = 1.5f;
						dust7.noLight = true;
					}
				}
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
			}
			else
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[0] = ((SlotId)(ref val)).ToFloat();
			}
			if (alpha <= 0)
			{
				for (int num120 = 0; num120 < 2; num120++)
				{
					if (Main.rand.Next(4) != 0)
					{
						Dust dust8 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
						dust8.noGravity = true;
						dust8.velocity *= 2.3f;
						dust8.fadeIn = 1.5f;
						dust8.noLight = true;
					}
				}
				Vector2 spinningpoint8 = new Vector2(0f, (float)Math.Cos((float)frameCounter * ((float)Math.PI * 2f) / 40f - (float)Math.PI / 2f)) * 16f;
				spinningpoint8 = spinningpoint8.RotatedBy(rotation);
				Vector2 vector22 = velocity.SafeNormalize(Vector2.Zero);
				for (int num121 = 0; num121 < 1; num121++)
				{
					Dust dust9 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
					dust9.noGravity = true;
					dust9.position = base.Center + spinningpoint8;
					dust9.velocity *= 0f;
					dust9.fadeIn = 1.4f;
					dust9.scale = 1.15f;
					dust9.noLight = true;
					dust9.position += velocity * 1.2f;
					dust9.velocity += vector22 * 2f;
					Dust dust10 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
					dust10.noGravity = true;
					dust10.position = base.Center + spinningpoint8;
					dust10.velocity *= 0f;
					dust10.fadeIn = 1.4f;
					dust10.scale = 1.15f;
					dust10.noLight = true;
					dust10.position += velocity * 0.5f;
					dust10.position += velocity * 1.2f;
					dust10.velocity += vector22 * 2f;
				}
			}
			if (++frameCounter >= 40)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 5;
			if (alpha > 0)
			{
				alpha -= 55;
				if (alpha < 0)
				{
					alpha = 0;
					float num122 = 16f;
					for (int num123 = 0; (float)num123 < num122; num123++)
					{
						Vector2 spinningpoint9 = Vector2.UnitX * 0f;
						spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num123 * ((float)Math.PI * 2f / num122)) * new Vector2(1f, 4f);
						spinningpoint9 = spinningpoint9.RotatedBy(velocity.ToRotation());
						int num124 = Dust.NewDust(base.Center, 0, 0, 6);
						Main.dust[num124].scale = 1.5f;
						Main.dust[num124].noLight = true;
						Main.dust[num124].noGravity = true;
						Main.dust[num124].position = base.Center + spinningpoint9;
						Main.dust[num124].velocity = Main.dust[num124].velocity * 4f + velocity * 0.3f;
					}
				}
			}
			DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
			Utils.PlotTileLine(base.Center, base.Center + velocity * 4f, 40f, DelegateMethods.CastLightOpen);
		}
		if (type == 638)
		{
			float num125 = velocity.Length();
			if (alpha > 0)
			{
				alpha -= (byte)((double)num125 * 0.3);
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			Rectangle hitbox = base.Hitbox;
			hitbox.Offset((int)velocity.X, (int)velocity.Y);
			bool flag2 = false;
			for (int num126 = 0; num126 < 200; num126++)
			{
				NPC nPC = Main.npc[num126];
				if (nPC.active && !nPC.dontTakeDamage && nPC.immune[owner] == 0 && localNPCImmunity[num126] == 0 && nPC.Hitbox.Intersects(hitbox) && !nPC.friendly)
				{
					flag2 = true;
					break;
				}
			}
			if (flag2)
			{
				int num127 = Main.rand.Next(15, 31);
				for (int num128 = 0; num128 < num127; num128++)
				{
					int num129 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num129].velocity *= 1.6f;
					Main.dust[num129].velocity.Y -= 1f;
					Main.dust[num129].velocity += velocity;
					Main.dust[num129].noGravity = true;
				}
			}
		}
		if (type == 257 || type == 593)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 876)
		{
			if (ai[1] == 0f)
			{
				tileCollide = true;
			}
			else
			{
				tileCollide = false;
			}
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 88)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 532)
		{
			ai[0] += 1f;
		}
		bool flag3 = true;
		switch (type)
		{
		case 5:
		case 14:
		case 20:
		case 36:
		case 38:
		case 55:
		case 83:
		case 84:
		case 88:
		case 89:
		case 98:
		case 100:
		case 104:
		case 110:
		case 158:
		case 159:
		case 160:
		case 161:
		case 180:
		case 184:
		case 242:
		case 248:
		case 257:
		case 259:
		case 265:
		case 270:
		case 279:
		case 283:
		case 284:
		case 285:
		case 286:
		case 287:
		case 299:
		case 302:
		case 323:
		case 325:
		case 348:
		case 349:
		case 350:
		case 355:
		case 374:
		case 376:
		case 389:
		case 435:
		case 436:
		case 438:
		case 440:
		case 442:
		case 449:
		case 459:
		case 462:
		case 467:
		case 468:
		case 469:
		case 472:
		case 483:
		case 484:
		case 485:
		case 498:
		case 576:
		case 577:
		case 585:
		case 592:
		case 593:
		case 601:
		case 606:
		case 616:
		case 634:
		case 635:
		case 638:
		case 639:
		case 660:
		case 661:
		case 682:
		case 684:
		case 706:
		case 709:
		case 710:
		case 712:
		case 876:
			flag3 = false;
			break;
		}
		if (flag3)
		{
			ai[0] += 1f;
		}
		if (type == 270)
		{
			int num130 = 0;
			num130 = Player.FindClosest(base.Center, 1, 1);
			ai[1] += 1f;
			if (ai[1] < 110f && ai[1] > 30f)
			{
				float num131 = velocity.Length();
				Vector2 vector23 = Main.player[num130].Center - base.Center;
				vector23.Normalize();
				vector23 *= num131;
				velocity = (velocity * 24f + vector23) / 25f;
				velocity.Normalize();
				velocity *= num131;
			}
			if (velocity.Length() < 18f)
			{
				velocity *= 1.02f;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, position);
				for (int num132 = 0; num132 < 10; num132++)
				{
					int num133 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, default(Color), 2f);
					Main.dust[num133].noGravity = true;
					Main.dust[num133].velocity = base.Center - Main.dust[num133].position;
					Main.dust[num133].velocity.Normalize();
					Main.dust[num133].velocity *= -5f;
					Main.dust[num133].velocity += velocity / 2f;
				}
			}
		}
		if (type == 585)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, position);
				for (int num134 = 0; num134 < 3; num134++)
				{
					int num135 = Dust.NewDust(position, width, height, 27, velocity.X, velocity.Y, 0, default(Color), 2f);
					Main.dust[num135].noGravity = true;
					Main.dust[num135].velocity = base.Center - Main.dust[num135].position;
					Main.dust[num135].velocity.Normalize();
					Main.dust[num135].velocity *= -5f;
					Main.dust[num135].velocity += velocity / 2f;
					Main.dust[num135].noLight = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			frameCounter++;
			if (frameCounter >= 12)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 2;
			if (frame > 3)
			{
				frame = 6 - frame;
			}
			Vector3 vector24 = NPCID.Sets.MagicAuraColor[54].ToVector3();
			Lighting.AddLight(base.Center, vector24.X, vector24.Y, vector24.Z);
			if (Main.rand.Next(3) == 0)
			{
				int num136 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
				Main.dust[num136].position -= velocity * 2f;
				Main.dust[num136].noLight = true;
				Main.dust[num136].noGravity = true;
				Main.dust[num136].velocity.X *= 0.3f;
				Main.dust[num136].velocity.Y *= 0.3f;
			}
		}
		if (type == 594)
		{
			int num137 = (int)(43f - ai[1]) / 13;
			if (num137 < 1)
			{
				num137 = 1;
			}
			int num138 = ((ai[1] < 20f) ? 6 : 31);
			for (int num139 = 0; num139 < num137; num139++)
			{
				int num140 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num138, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 2f);
				Main.dust[num140].position -= velocity * 2f;
				Main.dust[num140].noLight = true;
				Main.dust[num140].noGravity = true;
				Main.dust[num140].velocity.X *= 0.3f;
				Main.dust[num140].velocity.Y *= 0.3f;
				if (num138 == 6)
				{
					Main.dust[num140].fadeIn = Main.rand.NextFloat() * 2f;
				}
			}
			ai[1] += 1f;
			if (ai[1] > (float)(43 * MaxUpdates))
			{
				Kill();
				return;
			}
		}
		if (type == 622)
		{
			int num141 = 229;
			if (Main.rand.Next(3) != 0)
			{
				int num142 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num141, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 1.2f);
				Main.dust[num142].position -= velocity * 2f;
				Main.dust[num142].noLight = true;
				Main.dust[num142].noGravity = true;
				Main.dust[num142].velocity.X *= 0.3f;
				Main.dust[num142].velocity.Y *= 0.3f;
			}
			ai[1] += 1f;
			if (ai[1] > (float)(23 * MaxUpdates))
			{
				Kill();
				return;
			}
		}
		if (type == 587)
		{
			Color newColor2 = Main.hslToRgb(ai[1], 1f, 0.5f);
			newColor2.A = 200;
			localAI[0] += 1f;
			if (!(localAI[0] < 2f))
			{
				if (localAI[0] == 2f)
				{
					SoundEngine.PlaySound(SoundID.Item5, position);
					for (int num143 = 0; num143 < 4; num143++)
					{
						int num144 = Dust.NewDust(position, width, height, 76, velocity.X, velocity.Y, 0, newColor2, 1.1f);
						Main.dust[num144].noGravity = true;
						Main.dust[num144].velocity = base.Center - Main.dust[num144].position;
						Main.dust[num144].velocity.Normalize();
						Main.dust[num144].velocity *= -3f;
						Main.dust[num144].velocity += velocity / 2f;
					}
				}
				else
				{
					frame++;
					if (frame > 2)
					{
						frame = 0;
					}
					for (int num145 = 0; num145 < 1; num145++)
					{
						int num146 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, velocity.X * 0.2f, velocity.Y * 0.2f, 0, newColor2, 0.9f);
						Main.dust[num146].position = base.Center;
						Main.dust[num146].noGravity = true;
						Main.dust[num146].velocity = velocity * 0.5f;
					}
				}
			}
		}
		if (type == 349)
		{
			frame = (int)ai[0];
			velocity.Y += 0.2f;
			if (localAI[0] == 0f || localAI[0] == 2f)
			{
				scale += 0.01f;
				alpha -= 50;
				if (alpha <= 0)
				{
					localAI[0] = 1f;
					alpha = 0;
				}
			}
			else if (localAI[0] == 1f)
			{
				scale -= 0.01f;
				alpha += 50;
				if (alpha >= 255)
				{
					localAI[0] = 2f;
					alpha = 255;
				}
			}
		}
		if (type == 348)
		{
			if (localAI[1] == 0f)
			{
				localAI[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, position);
			}
			if (ai[0] == 0f || ai[0] == 2f)
			{
				scale += 0.01f;
				alpha -= 50;
				if (alpha <= 0)
				{
					ai[0] = 1f;
					alpha = 0;
				}
			}
			else if (ai[0] == 1f)
			{
				scale -= 0.01f;
				alpha += 50;
				if (alpha >= 255)
				{
					ai[0] = 2f;
					alpha = 255;
				}
			}
		}
		if (type == 572)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			for (int num147 = 0; num147 < 2; num147++)
			{
				int num148 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X, velocity.Y, 100);
				Main.dust[num148].velocity *= 0.5f;
				Main.dust[num148].velocity += velocity;
				Main.dust[num148].velocity *= 0.5f;
				Main.dust[num148].noGravity = true;
				Main.dust[num148].scale = 1.2f;
				Main.dust[num148].position = (base.Center + position) / 2f;
			}
		}
		if (type == 577)
		{
			Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
		}
		else if (type == 576)
		{
			Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
			for (int num149 = 0; num149 < 5; num149++)
			{
				Dust obj4 = Main.dust[Dust.NewDust(position, width, height, 242, velocity.X, velocity.Y, 100)];
				obj4.velocity = Vector2.Zero;
				obj4.position -= velocity / 5f * num149;
				obj4.noGravity = true;
				obj4.scale = 0.8f;
				obj4.noLight = true;
			}
		}
		else if (type == 581)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.Center);
			}
			for (int num150 = 0; num150 < 2; num150++)
			{
				int num151 = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
				Dust obj5 = Main.dust[Dust.NewDust(position, width, height, num151, velocity.X, velocity.Y, 100)];
				obj5.velocity = obj5.velocity / 4f + velocity / 2f;
				obj5.noGravity = true;
				obj5.scale = 1.2f;
				obj5.position = base.Center;
				obj5.noLight = true;
			}
		}
		else if (type == 671)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num152 = 0; num152 < 8; num152++)
				{
					int num153 = Utils.SelectRandom<int>(Main.rand, 27, 62);
					Dust obj6 = Main.dust[Dust.NewDust(position, width, height, num153, velocity.X, velocity.Y, 100)];
					obj6.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					obj6.noGravity = true;
					obj6.scale = 1.5f;
					obj6.fadeIn = 1.2f;
					obj6.position = base.Center;
					obj6.noLight = true;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num154 = 0; num154 < 2; num154++)
			{
				int num155 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
				Dust obj7 = Main.dust[Dust.NewDust(position, width, height, num155, velocity.X, velocity.Y, 100)];
				obj7.velocity = obj7.velocity / 4f + velocity / 2f;
				obj7.noGravity = true;
				obj7.scale = 1.2f;
				obj7.position = base.Center;
				obj7.noLight = true;
			}
		}
		else if (type == 811)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item17, base.Center);
				localAI[0] = 1f;
				for (int num156 = 0; num156 < 8; num156++)
				{
					Dust obj8 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj8.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
					obj8.scale = 1.5f;
					obj8.fadeIn = 1.7f;
					obj8.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num157 = 0; num157 < 2; num157++)
			{
				Dust obj9 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
				obj9.velocity = obj9.velocity / 4f + velocity / 2f;
				obj9.scale = 1.2f;
				obj9.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
			}
		}
		else if (type == 819)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num158 = 0; num158 < 8; num158++)
				{
					Dust obj10 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj10.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
					obj10.scale = 0.9f;
					obj10.fadeIn = 1.1f;
					obj10.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num159 = 1; num159 < 3; num159++)
			{
				Dust obj11 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
				obj11.velocity = velocity;
				obj11.velocity *= 0.75f;
				obj11.scale = 1f;
				obj11.position = base.Center + velocity * num159;
			}
		}
		else if (type == 814)
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item171, base.Center);
				localAI[0] = 1f;
				for (int num160 = 0; num160 < 8; num160++)
				{
					Dust obj12 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj12.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
					obj12.scale = 0.9f;
					obj12.fadeIn = 1.1f;
					obj12.position = base.Center;
				}
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num161 = 0; num161 < 2; num161++)
			{
				Dust obj13 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
				obj13.velocity = obj13.velocity / 4f + velocity / 2f;
				obj13.scale = 1.2f;
				obj13.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
			}
			for (int num162 = 1; num162 < oldPos.Length && !(oldPos[num162] == Vector2.Zero); num162++)
			{
				if (Main.rand.Next(3) == 0)
				{
					Dust obj14 = Main.dust[Dust.NewDust(oldPos[num162], width, height, 5, velocity.X, velocity.Y, 100)];
					obj14.velocity = obj14.velocity / 4f + velocity / 2f;
					obj14.scale = 1.2f;
					obj14.position = oldPos[num162] + base.Size / 2f + Main.rand.NextFloat() * velocity * 2f;
				}
			}
		}
		else if (type == 675)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageAttack, base.Center);
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 676)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, base.Center);
			}
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			for (int num163 = 0; num163 < 2; num163++)
			{
				if (Main.rand.Next(5) != 0)
				{
					int num164 = Utils.SelectRandom<int>(Main.rand, 4, 256);
					Dust dust11 = Main.dust[Dust.NewDust(position, width, height, num164, velocity.X, velocity.Y, 100)];
					dust11.velocity = dust11.velocity / 4f + velocity / 2f;
					dust11.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
					dust11.position = base.Center;
					dust11.position += new Vector2(width * 2, 0f).RotatedBy((float)Math.PI * 2f * Main.rand.NextFloat()) * Main.rand.NextFloat();
					dust11.noLight = true;
					if (dust11.type == 4)
					{
						dust11.color = new Color(80, 170, 40, 120);
					}
				}
			}
		}
		else if (type == 686)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballShot, base.Center);
			}
			if (ai[0] >= 2f)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				Dust dust12 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
				dust12.scale *= 0.7f;
				dust12.velocity += velocity * 1f;
			}
			if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
			{
				Dust dust13 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
				dust13.scale *= 0.85f;
				dust13.velocity += velocity * 0.85f;
				dust13.color = Color.Purple;
			}
		}
		else if (type == 711)
		{
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num165 = 0; num165 < 10; num165++)
				{
					Dust dust14 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
					dust14.scale *= 0.65f;
					dust14.velocity *= 1.5f;
					dust14.velocity += velocity * 0.3f;
					dust14.fadeIn = 0.7f;
				}
			}
			if (ai[0] >= 2f)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				Dust dust15 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
				dust15.scale *= 0.7f;
				dust15.velocity += velocity * 1f;
			}
			if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
			{
				Dust dust16 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
				dust16.scale *= 0.85f;
				dust16.velocity += velocity * 0.85f;
				dust16.color = Color.Purple;
			}
		}
		if (type == 299)
		{
			if (localAI[0] == 6f)
			{
				SoundEngine.PlaySound(SoundID.Item8, position);
				for (int num166 = 0; num166 < 40; num166++)
				{
					int num167 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, 0f, 0f, 100);
					Main.dust[num167].velocity *= 3f;
					Main.dust[num167].velocity += velocity * 0.75f;
					Main.dust[num167].scale *= 1.2f;
					Main.dust[num167].noGravity = true;
				}
			}
			localAI[0] += 1f;
			if (localAI[0] > 6f)
			{
				for (int num168 = 0; num168 < 3; num168++)
				{
					int num169 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
					Main.dust[num169].velocity *= 0.6f;
					Main.dust[num169].scale *= 1.4f;
					Main.dust[num169].noGravity = true;
				}
			}
		}
		else if (type == 270 || type == 837)
		{
			if (type == 270)
			{
				alpha = 0;
			}
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			frame++;
			if (frame > 2)
			{
				frame = 0;
			}
			if (type == 270)
			{
				for (int num170 = 0; num170 < 2; num170++)
				{
					int num171 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
					Main.dust[num171].position -= velocity;
					Main.dust[num171].noGravity = true;
					Main.dust[num171].velocity.X *= 0.3f;
					Main.dust[num171].velocity.Y *= 0.3f;
				}
			}
			else
			{
				for (int num172 = 0; num172 < 2; num172++)
				{
					int num173 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num173].position -= velocity * 2f;
					Main.dust[num173].noGravity = true;
					Main.dust[num173].velocity.X *= 0.3f;
					Main.dust[num173].velocity.Y *= 0.3f;
				}
			}
		}
		if (type == 259)
		{
			if (alpha > 0)
			{
				alpha -= 10;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		if (type == 265)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				int num174 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num174].noGravity = true;
				Main.dust[num174].velocity *= 0.3f;
				Main.dust[num174].velocity -= velocity * 0.4f;
			}
		}
		if (type == 355)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (alpha == 0)
			{
				int num175 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num175].noGravity = true;
				Main.dust[num175].velocity *= 0.3f;
				Main.dust[num175].velocity -= velocity * 0.4f;
			}
		}
		if (type == 357)
		{
			if (alpha < 170)
			{
				for (int num176 = 0; num176 < 10; num176++)
				{
					float x = position.X - velocity.X / 10f * (float)num176;
					float y = position.Y - velocity.Y / 10f * (float)num176;
					int num177 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
					Main.dust[num177].alpha = alpha;
					Main.dust[num177].position.X = x;
					Main.dust[num177].position.Y = y;
					Main.dust[num177].velocity *= 0f;
					Main.dust[num177].noGravity = true;
				}
			}
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		else if (type == 207 || type == 837)
		{
			if (type == 207 && alpha < 170)
			{
				for (int num178 = 0; num178 < 10; num178++)
				{
					float x2 = position.X - velocity.X / 10f * (float)num178;
					float y2 = position.Y - velocity.Y / 10f * (float)num178;
					int num179 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75);
					Main.dust[num179].alpha = alpha;
					Main.dust[num179].position.X = x2;
					Main.dust[num179].position.Y = y2;
					Main.dust[num179].velocity *= 0f;
					Main.dust[num179].noGravity = true;
				}
			}
			float num180 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
			float num181 = localAI[0];
			if (num181 == 0f)
			{
				localAI[0] = num180;
				num181 = num180;
			}
			if (alpha > 0)
			{
				alpha -= 25;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num182 = position.X;
			float num183 = position.Y;
			float num184 = 300f;
			bool flag4 = false;
			int num185 = 0;
			if (ai[1] == 0f)
			{
				for (int num186 = 0; num186 < 200; num186++)
				{
					if (Main.npc[num186].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num186 + 1)))
					{
						float num187 = Main.npc[num186].position.X + (float)(Main.npc[num186].width / 2);
						float num188 = Main.npc[num186].position.Y + (float)(Main.npc[num186].height / 2);
						float num189 = Math.Abs(position.X + (float)(width / 2) - num187) + Math.Abs(position.Y + (float)(height / 2) - num188);
						if (num189 < num184 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num186].position, Main.npc[num186].width, Main.npc[num186].height))
						{
							num184 = num189;
							num182 = num187;
							num183 = num188;
							flag4 = true;
							num185 = num186;
						}
					}
				}
				if (flag4)
				{
					ai[1] = num185 + 1;
				}
				flag4 = false;
			}
			if (ai[1] > 0f)
			{
				int num190 = (int)(ai[1] - 1f);
				if (Main.npc[num190].active && Main.npc[num190].CanBeChasedBy(this, ignoreDontTakeDamage: true) && !Main.npc[num190].dontTakeDamage)
				{
					float num191 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
					float num192 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
					if (Math.Abs(position.X + (float)(width / 2) - num191) + Math.Abs(position.Y + (float)(height / 2) - num192) < 1000f)
					{
						flag4 = true;
						num182 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
						num183 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
					}
				}
				else
				{
					ai[1] = 0f;
				}
			}
			if (!friendly)
			{
				flag4 = false;
			}
			if (flag4)
			{
				float num193 = num181;
				Vector2 vector25 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num194 = num182 - vector25.X;
				float num195 = num183 - vector25.Y;
				float num196 = (float)Math.Sqrt(num194 * num194 + num195 * num195);
				num196 = num193 / num196;
				num194 *= num196;
				num195 *= num196;
				int num197 = 8;
				if (type == 837)
				{
					num197 = 32;
				}
				velocity.X = (velocity.X * (float)(num197 - 1) + num194) / (float)num197;
				velocity.Y = (velocity.Y * (float)(num197 - 1) + num195) / (float)num197;
			}
		}
		else if (type == 81 || type == 91)
		{
			if (ai[0] >= 20f)
			{
				ai[0] = 20f;
				velocity.Y += 0.07f;
			}
		}
		else if (type == 174 || type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
		{
			if (ai[0] >= 5f)
			{
				ai[0] = 5f;
				velocity.Y += 0.15f;
			}
		}
		else if (type == 337)
		{
			if (position.Y > Main.player[owner].position.Y - 300f)
			{
				tileCollide = true;
			}
			if ((double)position.Y < Main.worldSurface * 16.0)
			{
				tileCollide = true;
			}
			frame = (int)ai[1];
			if (Main.rand.Next(2) == 0)
			{
				int num198 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
				Main.dust[num198].velocity *= 0.5f;
				Main.dust[num198].noGravity = true;
			}
		}
		else if (type == 645)
		{
			if (ai[1] != -1f && position.Y > ai[1])
			{
				tileCollide = true;
			}
			if (position.HasNaNs())
			{
				Kill();
				return;
			}
			bool num199 = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
			Dust dust17 = Main.dust[Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229)];
			dust17.position = base.Center;
			dust17.velocity = Vector2.Zero;
			dust17.noGravity = true;
			if (num199)
			{
				dust17.noLight = true;
			}
			if (ai[1] == -1f)
			{
				ai[0] += 1f;
				velocity = Vector2.Zero;
				tileCollide = false;
				penetrate = -1;
				position = base.Center;
				width = (height = 140);
				base.Center = position;
				alpha -= 10;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter >= MaxUpdates * 3)
				{
					frameCounter = 0;
					frame++;
				}
				if (ai[0] >= (float)(Main.projFrames[type] * MaxUpdates * 3))
				{
					Kill();
				}
				return;
			}
			alpha = 255;
			if (numUpdates == 0)
			{
				int num200 = -1;
				float num201 = 60f;
				for (int num202 = 0; num202 < 200; num202++)
				{
					NPC nPC2 = Main.npc[num202];
					if (nPC2.CanBeChasedBy(this))
					{
						float num203 = Distance(nPC2.Center);
						if (num203 < num201 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
						{
							num201 = num203;
							num200 = num202;
						}
					}
				}
				if (num200 != -1)
				{
					ai[0] = 0f;
					ai[1] = -1f;
					netUpdate = true;
					return;
				}
			}
		}
		else if (type >= 424 && type <= 426)
		{
			if (position.Y > Main.player[owner].position.Y - 300f)
			{
				tileCollide = true;
			}
			if ((double)position.Y < Main.worldSurface * 16.0)
			{
				tileCollide = true;
			}
			scale = ai[1];
			rotation += velocity.X * 2f;
			Vector2 vector26 = base.Center + Vector2.Normalize(velocity) * 10f;
			Dust obj15 = Main.dust[Dust.NewDust(position, width, height, 6)];
			obj15.position = vector26;
			obj15.velocity = velocity.RotatedBy(1.5707963705062866) * 0.33f + velocity / 4f;
			obj15.position += velocity.RotatedBy(1.5707963705062866);
			obj15.fadeIn = 0.5f;
			obj15.noGravity = true;
			Dust obj16 = Main.dust[Dust.NewDust(position, width, height, 6)];
			obj16.position = vector26;
			obj16.velocity = velocity.RotatedBy(-1.5707963705062866) * 0.33f + velocity / 4f;
			obj16.position += velocity.RotatedBy(-1.5707963705062866);
			obj16.fadeIn = 0.5f;
			obj16.noGravity = true;
			for (int num204 = 0; num204 < 1; num204++)
			{
				int num205 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6);
				Main.dust[num205].velocity *= 0.5f;
				Main.dust[num205].scale *= 1.3f;
				Main.dust[num205].fadeIn = 1f;
				Main.dust[num205].noGravity = true;
			}
		}
		else if (type == 344)
		{
			if (WorldGen.SolidTile((int)position.X / 16, (int)(position.Y + velocity.Y) / 16 + 1) || WorldGen.SolidTile((int)(position.X + (float)width) / 16, (int)(position.Y + velocity.Y) / 16 + 1))
			{
				Kill();
				return;
			}
			localAI[1] += 1f;
			if (localAI[1] > 5f)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			frame = (int)ai[1];
			if (localAI[1] > 20f)
			{
				localAI[1] = 20f;
				velocity.Y += 0.15f;
			}
			rotation += Main.windSpeedCurrent * 0.2f;
			velocity.X += Main.windSpeedCurrent * 0.1f;
		}
		else if (type == 336 || type == 345)
		{
			if (type == 345 && localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item1, position);
			}
			if (ai[0] >= 50f)
			{
				ai[0] = 50f;
				velocity.Y += 0.5f;
			}
		}
		else if (type == 246)
		{
			alpha -= 20;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[0] >= 60f)
			{
				ai[0] = 60f;
				velocity.Y += 0.15f;
			}
		}
		else if (type == 311)
		{
			if (alpha > 0)
			{
				alpha -= 50;
			}
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (ai[0] >= 30f)
			{
				ai[0] = 30f;
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
				}
				velocity.Y += 0.5f;
			}
		}
		else if (type == 312)
		{
			if (ai[0] >= 5f)
			{
				alpha = 0;
			}
			if (ai[0] >= 20f)
			{
				ai[0] = 30f;
				velocity.Y += 0.5f;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.4f, 0.3f);
		}
		else if (type != 239 && type != 264)
		{
			if (type == 176)
			{
				if (ai[0] >= 15f)
				{
					ai[0] = 15f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 275 || type == 276)
			{
				if (alpha > 0)
				{
					alpha -= 30;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 35f)
				{
					ai[0] = 35f;
					velocity.Y += 0.025f;
				}
				if (Main.expertMode)
				{
					float num206 = 18f;
					int num207 = Player.FindClosest(base.Center, 1, 1);
					Vector2 vector27 = Main.player[num207].Center - base.Center;
					vector27.Normalize();
					vector27 *= num206;
					int num208 = 70;
					velocity = (velocity * (num208 - 1) + vector27) / num208;
					if (velocity.Length() < 14f)
					{
						velocity.Normalize();
						velocity *= 14f;
					}
					tileCollide = false;
					if (timeLeft > 180)
					{
						timeLeft = 180;
					}
				}
			}
			else if (type == 172)
			{
				if (ai[0] >= 17f)
				{
					ai[0] = 17f;
					velocity.Y += 0.085f;
				}
			}
			else if (type == 117)
			{
				if (ai[0] >= 35f)
				{
					ai[0] = 35f;
					velocity.Y += 0.06f;
				}
			}
			else if (type == 120)
			{
				int num209 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num209].noGravity = true;
				Main.dust[num209].velocity *= 0.3f;
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 195)
			{
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					velocity.Y += 0.3f;
					tileCollide = true;
				}
				else
				{
					tileCollide = false;
				}
			}
			else if (type == 267 || type == 477 || type == 478 || type == 479)
			{
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					alpha = 0;
				}
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					if (type != 477)
					{
						velocity.Y += 0.075f;
					}
				}
				if (type == 479 && Main.myPlayer == owner)
				{
					if (ai[1] >= 0f)
					{
						penetrate = -1;
					}
					else if (penetrate < 0)
					{
						penetrate = 1;
					}
					if (ai[1] >= 0f)
					{
						ai[1] += 1f;
					}
					if (ai[1] > (float)Main.rand.Next(5, 30))
					{
						ai[1] = -1000f;
						float num210 = velocity.Length();
						Vector2 vector28 = velocity;
						vector28.Normalize();
						int num211 = Main.rand.Next(2, 4);
						if (Main.rand.Next(4) == 0)
						{
							num211++;
						}
						for (int num212 = 0; num212 < num211; num212++)
						{
							Vector2 vector29 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
							vector29.Normalize();
							vector29 += vector28 * 2f;
							vector29.Normalize();
							vector29 *= num210;
							NewProjectile(base.Center.X, base.Center.Y, vector29.X, vector29.Y, type, damage, knockBack, owner, 0f, -1000f);
						}
					}
				}
				if (type == 478 && Main.myPlayer == owner)
				{
					ai[1] += 1f;
					if (ai[1] > (float)Main.rand.Next(5, 20))
					{
						if (timeLeft > 40)
						{
							timeLeft -= 20;
						}
						ai[1] = 0f;
						NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
					}
				}
			}
			else if (type == 408)
			{
				if (ai[0] >= 45f)
				{
					ai[0] = 45f;
					velocity.Y += 0.05f;
				}
			}
			else if (type == 616)
			{
				if (alpha < 170)
				{
					float num213 = 3f;
					for (int num214 = 0; (float)num214 < num213; num214++)
					{
						int num215 = Dust.NewDust(position, 1, 1, 229);
						Main.dust[num215].position = base.Center - velocity / num213 * num214;
						Main.dust[num215].velocity *= 0f;
						Main.dust[num215].noGravity = true;
						Main.dust[num215].alpha = 200;
						Main.dust[num215].scale = 0.5f;
					}
				}
				float num216 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
				float num217 = localAI[0];
				if (num217 == 0f)
				{
					localAI[0] = num216;
					num217 = num216;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num218 = position.X;
				float num219 = position.Y;
				float num220 = 800f;
				bool flag5 = false;
				int num221 = 0;
				ai[0] += 1f;
				if (ai[0] > 20f)
				{
					ai[0] -= 1f;
					if (ai[1] == 0f)
					{
						for (int num222 = 0; num222 < 200; num222++)
						{
							if (Main.npc[num222].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num222 + 1)))
							{
								float num223 = Main.npc[num222].position.X + (float)(Main.npc[num222].width / 2);
								float num224 = Main.npc[num222].position.Y + (float)(Main.npc[num222].height / 2);
								float num225 = Math.Abs(position.X + (float)(width / 2) - num223) + Math.Abs(position.Y + (float)(height / 2) - num224);
								if (num225 < num220 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num222].position, Main.npc[num222].width, Main.npc[num222].height))
								{
									num220 = num225;
									num218 = num223;
									num219 = num224;
									flag5 = true;
									num221 = num222;
								}
							}
						}
						if (flag5)
						{
							ai[1] = num221 + 1;
						}
						flag5 = false;
					}
					if (ai[1] != 0f)
					{
						int num226 = (int)(ai[1] - 1f);
						if (Main.npc[num226].active && Main.npc[num226].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							float num227 = Main.npc[num226].position.X + (float)(Main.npc[num226].width / 2);
							float num228 = Main.npc[num226].position.Y + (float)(Main.npc[num226].height / 2);
							if (Math.Abs(position.X + (float)(width / 2) - num227) + Math.Abs(position.Y + (float)(height / 2) - num228) < 1000f)
							{
								flag5 = true;
								num218 = Main.npc[num226].position.X + (float)(Main.npc[num226].width / 2);
								num219 = Main.npc[num226].position.Y + (float)(Main.npc[num226].height / 2);
							}
						}
					}
					if (!friendly)
					{
						flag5 = false;
					}
					if (flag5)
					{
						float num229 = num217;
						Vector2 vector30 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num230 = num218 - vector30.X;
						float num231 = num219 - vector30.Y;
						float num232 = (float)Math.Sqrt(num230 * num230 + num231 * num231);
						num232 = num229 / num232;
						num230 *= num232;
						num231 *= num232;
						int num233 = 8;
						velocity.X = (velocity.X * (float)(num233 - 1) + num230) / (float)num233;
						velocity.Y = (velocity.Y * (float)(num233 - 1) + num231) / (float)num233;
					}
				}
			}
			else if (type == 507 || type == 508 || type == 662 || type == 680 || type == 685)
			{
				if (ai[0] > 45f)
				{
					velocity.X *= 0.98f;
					velocity.Y += 0.3f;
				}
			}
			else if (type == 495)
			{
				int num234 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
				Main.dust[num234].noGravity = true;
				Main.dust[num234].velocity *= 0.3f;
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					velocity.Y += 0.04f;
				}
			}
			else if (type == 498)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] += 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
				}
				ai[0] += 1f;
				if (ai[0] >= 50f)
				{
					velocity.X *= 0.98f;
					velocity.Y += 0.15f;
					rotation += (float)direction * 0.5f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 437)
			{
				if (ai[0] >= 12f)
				{
					if (ai[0] >= 20f)
					{
						Kill();
					}
					alpha += 30;
				}
			}
			else if (type != 442 && type != 634 && type != 635 && type != 675)
			{
				if (type == 686 || type == 711)
				{
					if (ai[0] >= 10f)
					{
						velocity.Y += 0.1f;
					}
					if (ai[0] >= 20f)
					{
						velocity.Y += 0.1f;
					}
					if (ai[0] > 20f)
					{
						ai[0] = 20f;
					}
					velocity.X *= 0.99f;
					if (velocity.Y > 32f)
					{
						velocity.Y = 32f;
					}
				}
				else if (type == 639)
				{
					if (timeLeft <= MaxUpdates * 45 - 14)
					{
						velocity.Y += 0.1f;
					}
				}
				else if (type == 710)
				{
					if (ai[0] >= 0f)
					{
						ai[0] += 1f;
						if (ai[0] >= 20f)
						{
							velocity.Y += 0.2f;
							if (velocity.Y > 0f)
							{
								velocity.X *= 0.98f;
							}
							if (velocity.Y > 12f)
							{
								velocity.Y = 12f;
							}
						}
					}
				}
				else if (ai[0] >= 15f)
				{
					ai[0] = 15f;
					velocity.Y += 0.1f;
				}
			}
		}
		if (type == 921 || type == 926 || type == 937)
		{
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
		}
		else if (type == 248)
		{
			if (velocity.X < 0f)
			{
				rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
			else
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
		}
		else if (type == 270 || type == 585 || type == 601 || type == 706 || type == 837)
		{
			spriteDirection = direction;
			if (direction < 0)
			{
				rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
		}
		else if (type == 311)
		{
			if (ai[1] != 0f)
			{
				rotation += velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		else if (type == 312)
		{
			rotation += velocity.X * 0.02f;
		}
		else if (type == 675)
		{
			rotation += velocity.X * 0.03f;
		}
		else if (type != 676)
		{
			if (type == 408)
			{
				rotation = velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 435 || type == 459 || type == 682 || type == 709)
			{
				rotation = velocity.ToRotation();
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 660)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 4f;
			}
			else if (type == 662 || type == 685)
			{
				rotation = velocity.ToRotation() - (float)Math.PI - (float)Math.PI / 4f;
			}
			else if (type == 680 || type == 684 || type == 686 || type == 711 || type == 712)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 436)
			{
				rotation = velocity.ToRotation();
				rotation += (float)Math.PI;
				if (direction == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 469)
			{
				if (velocity.X > 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 477)
			{
				if (localAI[1] < 5f)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					localAI[1] += 1f;
				}
				else
				{
					rotation = (rotation * 2f + (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f) / 3f;
				}
			}
			else if (type == 532)
			{
				rotation += 0.2f + Math.Abs(velocity.X) * 0.1f;
			}
			else if (type == 483)
			{
				rotation += velocity.X * 0.05f;
			}
			else if (type == 772)
			{
				rotation += (float)Math.Sign(velocity.X) * (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
			else if (type == 485)
			{
				Vector2 vector31 = new Vector2(ai[0], ai[1]);
				velocity = (velocity * 39f + vector31) / 40f;
				int num235 = Dust.NewDust(position, width, height, 6);
				Main.dust[num235].noGravity = true;
				Main.dust[num235].velocity *= 0.2f;
				Main.dust[num235].position = (Main.dust[num235].position + base.Center) / 2f;
				frameCounter++;
				if (frameCounter >= 2)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 5)
					{
						frame = 0;
					}
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
			else if (type == 640)
			{
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				}
			}
			else if (type == 325)
			{
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else if (type != 344 && type != 498)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
		}
		if (velocity.Y > 16f)
		{
			velocity.Y = 16f;
		}
	}

	private void AI_010()
	{
		if (type == 31 && ai[0] != 2f)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32, 0f, velocity.Y / 2f);
				Main.dust[num].velocity.X *= 0.4f;
			}
		}
		else if (type == 39)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38, 0f, velocity.Y / 2f);
				Main.dust[num2].velocity.X *= 0.4f;
			}
		}
		else if (type >= 411 && type <= 414)
		{
			if (Main.rand.Next(3) == 0)
			{
				int num3 = 9;
				if (type == 412 || type == 414)
				{
					num3 = 11;
				}
				if (type == 413)
				{
					num3 = 19;
				}
				int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num3, 0f, velocity.Y / 2f);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].velocity -= velocity * 0.5f;
			}
		}
		else if (type == 40)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36, 0f, velocity.Y / 2f);
				Main.dust[num5].velocity *= 0.4f;
			}
		}
		else if (type == 42 || type == 31)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
				Main.dust[num6].velocity.X *= 0.4f;
			}
		}
		else if (type == 56 || type == 65)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num7 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14);
				Main.dust[num7].velocity.X *= 0.4f;
			}
		}
		else if (type == 67 || type == 68)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num8 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51);
				Main.dust[num8].velocity.X *= 0.4f;
			}
		}
		else if (type == 71)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
				Main.dust[num9].velocity.X *= 0.4f;
			}
		}
		else if (type == 179)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num10 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 149);
				Main.dust[num10].velocity.X *= 0.4f;
			}
		}
		else if (type == 241 || type == 354)
		{
			if (Main.rand.Next(2) == 0)
			{
				int num11 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
				Main.dust[num11].velocity.X *= 0.4f;
			}
		}
		else if (type >= 736 && type <= 738)
		{
			if (Main.rand.Next(40) == 0)
			{
				int num12 = Dust.NewDust(position, width, height, type - 736 + 275);
				if (num12 >= 0)
				{
					Main.dust[num12].velocity = Main.dust[num12].velocity * 0.5f + velocity * 0.5f;
				}
			}
		}
		else if (type != 109 && Main.rand.Next(20) == 0)
		{
			Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
		}
		if (type >= 736 && type <= 738)
		{
			if (localAI[0] == 0f)
			{
				frame = Main.rand.Next(3);
				scale = 1f - (float)Main.rand.Next(30) * 0.01f;
			}
			localAI[0] += 1f;
		}
		tileCollide = true;
		localAI[1] = 0f;
		if (Main.myPlayer == owner && ai[0] == 0f)
		{
			tileCollide = false;
			if (Main.player[owner].channel && (type < 736 || type > 738) && type != 40)
			{
				localAI[1] = -1f;
				float num13 = 12f;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num14 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
				float num15 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
				if (Main.player[owner].gravDir == -1f)
				{
					num15 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
				}
				float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
				num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
				if (num16 > num13)
				{
					num16 = num13 / num16;
					num14 *= num16;
					num15 *= num16;
					if (num14 != velocity.X || num15 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num14;
					velocity.Y = num15;
				}
				else
				{
					if (num14 != velocity.X || num15 != velocity.Y)
					{
						netUpdate = true;
					}
					velocity.X = num14;
					velocity.Y = num15;
				}
			}
			else
			{
				ai[0] = 1f;
				netUpdate = true;
			}
		}
		if (ai[0] == 1f && type != 109)
		{
			if (type == 42 || type == 65 || type == 68 || type == 354)
			{
				ai[1] += 1f;
				if (ai[1] >= 60f)
				{
					ai[1] = 60f;
					velocity.Y += 0.2f;
				}
			}
			else
			{
				velocity.Y += 0.41f;
			}
		}
		else if (ai[0] == 2f && type != 109)
		{
			velocity.Y += 0.2f;
			if ((double)velocity.X < -0.04)
			{
				velocity.X += 0.04f;
			}
			else if ((double)velocity.X > 0.04)
			{
				velocity.X -= 0.04f;
			}
			else
			{
				velocity.X = 0f;
			}
		}
		if (owner == Main.myPlayer)
		{
			for (int i = (int)(position.X / 16f); i <= (int)((position.X + (float)width) / 16f); i++)
			{
				for (int j = (int)(position.Y / 16f); j <= (int)((position.Y + (float)height) / 16f); j++)
				{
					if (!WorldGen.InWorld(i, j))
					{
						continue;
					}
					Tile tile = Main.tile[i, j];
					if (tile != null && tile.active())
					{
						if ((tile.type >= 185 && tile.type <= 187) || tile.type == 165 || tile.type == 12 || tile.type == 105 || tile.type == 178)
						{
							WorldGen.KillTile(i, j);
						}
						else if (tile.topSlope() && !TileID.Sets.Platforms[tile.type])
						{
							tile.slope(0);
						}
					}
				}
			}
		}
		if (type >= 736 && type <= 738)
		{
			if (frame == 0)
			{
				rotation -= 0.1f;
			}
			else if (frame == 1)
			{
				rotation += 0.1f;
			}
			else
			{
				rotation += 0.15f;
			}
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
		else
		{
			rotation += 0.1f;
			if (velocity.Y > 10f)
			{
				velocity.Y = 10f;
			}
		}
	}

	private void AI_026()
	{
		if (!Main.player[owner].active)
		{
			active = false;
			return;
		}
		bool flag = false;
		bool flag2 = false;
		bool flag3 = false;
		bool flag4 = false;
		int num = 85;
		bool flag5 = type >= 191 && type <= 194;
		if (type == 324)
		{
			num = 120;
		}
		if (type == 112)
		{
			num = 100;
		}
		if (type == 127)
		{
			num = 50;
		}
		switch (type)
		{
		case 816:
		case 821:
		case 825:
		case 854:
		case 858:
		case 859:
		case 860:
		case 881:
		case 885:
		case 889:
		case 891:
		case 897:
		case 899:
		case 900:
		case 934:
			num = 95;
			break;
		case 884:
		case 890:
			num = 80;
			break;
		}
		if (flag5)
		{
			if (lavaWet)
			{
				ai[0] = 1f;
				ai[1] = 0f;
			}
			num = 60 + 30 * minionPos;
		}
		else if (type == 266)
		{
			num = 60 + 30 * minionPos;
		}
		if (type == 111)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].bunny = false;
			}
			if (Main.player[owner].bunny)
			{
				timeLeft = 2;
			}
		}
		if (type == 112)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].penguin = false;
			}
			if (Main.player[owner].penguin)
			{
				timeLeft = 2;
			}
		}
		if (type == 334)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].puppy = false;
			}
			if (Main.player[owner].puppy)
			{
				timeLeft = 2;
			}
		}
		if (type == 353)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].grinch = false;
			}
			if (Main.player[owner].grinch)
			{
				timeLeft = 2;
			}
		}
		if (type == 127)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].turtle = false;
			}
			if (Main.player[owner].turtle)
			{
				timeLeft = 2;
			}
		}
		if (type == 175)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].eater = false;
			}
			if (Main.player[owner].eater)
			{
				timeLeft = 2;
			}
		}
		if (type == 197)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].skeletron = false;
			}
			if (Main.player[owner].skeletron)
			{
				timeLeft = 2;
			}
		}
		if (type == 198)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].hornet = false;
			}
			if (Main.player[owner].hornet)
			{
				timeLeft = 2;
			}
		}
		if (type == 199)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].tiki = false;
			}
			if (Main.player[owner].tiki)
			{
				timeLeft = 2;
			}
		}
		if (type == 200)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].lizard = false;
			}
			if (Main.player[owner].lizard)
			{
				timeLeft = 2;
			}
		}
		if (type == 208)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].parrot = false;
			}
			if (Main.player[owner].parrot)
			{
				timeLeft = 2;
			}
		}
		if (type == 209)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].truffle = false;
			}
			if (Main.player[owner].truffle)
			{
				timeLeft = 2;
			}
		}
		if (type == 210)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].sapling = false;
			}
			if (Main.player[owner].sapling)
			{
				timeLeft = 2;
			}
		}
		if (type == 324)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].cSapling = false;
			}
			if (Main.player[owner].cSapling)
			{
				timeLeft = 2;
			}
		}
		if (type == 313)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].spider = false;
			}
			if (Main.player[owner].spider)
			{
				timeLeft = 2;
			}
		}
		if (type == 314)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].squashling = false;
			}
			if (Main.player[owner].squashling)
			{
				timeLeft = 2;
			}
		}
		if (type == 211)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].wisp = false;
			}
			if (Main.player[owner].wisp)
			{
				timeLeft = 2;
			}
		}
		if (type == 236)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].dino = false;
			}
			if (Main.player[owner].dino)
			{
				timeLeft = 2;
			}
		}
		if (type == 499)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].babyFaceMonster = false;
			}
			if (Main.player[owner].babyFaceMonster)
			{
				timeLeft = 2;
			}
		}
		if (type == 765)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSugarGlider = false;
			}
			if (Main.player[owner].petFlagSugarGlider)
			{
				timeLeft = 2;
			}
		}
		if (type == 266)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].slime = false;
			}
			if (Main.player[owner].slime)
			{
				timeLeft = 2;
			}
		}
		if (type == 268)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].eyeSpring = false;
			}
			if (Main.player[owner].eyeSpring)
			{
				timeLeft = 2;
			}
		}
		if (type == 269)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].snowman = false;
			}
			if (Main.player[owner].snowman)
			{
				timeLeft = 2;
			}
		}
		if (type == 319)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].blackCat = false;
			}
			if (Main.player[owner].blackCat)
			{
				timeLeft = 2;
			}
		}
		if (type == 380)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].zephyrfish = false;
			}
			if (Main.player[owner].zephyrfish)
			{
				timeLeft = 2;
			}
		}
		if (type == 774)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyShark = false;
			}
			if (Main.player[owner].petFlagBabyShark)
			{
				timeLeft = 2;
			}
		}
		if (type == 815)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagLilHarpy = false;
			}
			if (Main.player[owner].petFlagLilHarpy)
			{
				timeLeft = 2;
			}
		}
		if (type == 816)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagFennecFox = false;
			}
			if (Main.player[owner].petFlagFennecFox)
			{
				timeLeft = 2;
			}
		}
		if (type == 817)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagGlitteryButterfly = false;
			}
			if (Main.player[owner].petFlagGlitteryButterfly)
			{
				timeLeft = 2;
			}
		}
		if (type == 821)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyImp = false;
			}
			if (Main.player[owner].petFlagBabyImp)
			{
				timeLeft = 2;
			}
		}
		if (type == 825)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyRedPanda = false;
			}
			if (Main.player[owner].petFlagBabyRedPanda)
			{
				timeLeft = 2;
			}
		}
		if (type == 854)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagPlantero = false;
			}
			if (Main.player[owner].petFlagPlantero)
			{
				timeLeft = 2;
			}
		}
		if (type == 858)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDynamiteKitten = false;
			}
			if (Main.player[owner].petFlagDynamiteKitten)
			{
				timeLeft = 2;
			}
		}
		if (type == 859)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBabyWerewolf = false;
			}
			if (Main.player[owner].petFlagBabyWerewolf)
			{
				timeLeft = 2;
			}
		}
		if (type == 860)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagShadowMimic = false;
			}
			if (Main.player[owner].petFlagShadowMimic)
			{
				timeLeft = 2;
			}
		}
		if (type == 875)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagVoltBunny = false;
			}
			if (Main.player[owner].petFlagVoltBunny)
			{
				timeLeft = 2;
			}
		}
		if (type == 881)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagKingSlimePet = false;
			}
			if (Main.player[owner].petFlagKingSlimePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 884)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagBrainOfCthulhuPet = false;
			}
			if (Main.player[owner].petFlagBrainOfCthulhuPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 885)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSkeletronPet = false;
			}
			if (Main.player[owner].petFlagSkeletronPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 886)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagQueenBeePet = false;
			}
			if (Main.player[owner].petFlagQueenBeePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 889)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagSkeletronPrimePet = false;
			}
			if (Main.player[owner].petFlagSkeletronPrimePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 890)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagPlanteraPet = false;
			}
			if (Main.player[owner].petFlagPlanteraPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 891)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagGolemPet = false;
			}
			if (Main.player[owner].petFlagGolemPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 892)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDukeFishronPet = false;
			}
			if (Main.player[owner].petFlagDukeFishronPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 894)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagMoonLordPet = false;
			}
			if (Main.player[owner].petFlagMoonLordPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 897)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagEverscreamPet = false;
			}
			if (Main.player[owner].petFlagEverscreamPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 899)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagMartianPet = false;
			}
			if (Main.player[owner].petFlagMartianPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 900)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDD2OgrePet = false;
			}
			if (Main.player[owner].petFlagDD2OgrePet)
			{
				timeLeft = 2;
			}
		}
		if (type == 901)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagDD2BetsyPet = false;
			}
			if (Main.player[owner].petFlagDD2BetsyPet)
			{
				timeLeft = 2;
			}
		}
		if (type == 934)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].petFlagQueenSlimePet = false;
			}
			if (Main.player[owner].petFlagQueenSlimePet)
			{
				timeLeft = 2;
			}
		}
		if (flag5)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].pygmy = false;
			}
			if (Main.player[owner].pygmy)
			{
				timeLeft = Main.rand.Next(2, 10);
			}
		}
		if (type >= 390 && type <= 392)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].spiderMinion = false;
			}
			if (Main.player[owner].spiderMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 398)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].miniMinotaur = false;
			}
			if (Main.player[owner].miniMinotaur)
			{
				timeLeft = 2;
			}
		}
		if (flag5 || type == 266 || (type >= 390 && type <= 392))
		{
			num = 10;
			int num2 = 40 * (minionPos + 1) * Main.player[owner].direction;
			if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num + (float)num2)
			{
				flag = true;
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num + (float)num2)
			{
				flag2 = true;
			}
		}
		else if (type == 891)
		{
			num = 30;
			float num3 = -50 * -Main.player[owner].direction;
			float num4 = Main.player[owner].Center.X + num3;
			if (num4 < position.X + (float)(width / 2) - (float)num)
			{
				flag = true;
			}
			else if (num4 > position.X + (float)(width / 2) + (float)num)
			{
				flag2 = true;
			}
		}
		else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num)
		{
			flag = true;
		}
		else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num)
		{
			flag2 = true;
		}
		if (type == 175)
		{
			float num5 = 0.1f;
			tileCollide = false;
			int num6 = 300;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num7 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector.X;
			float num8 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector.Y;
			if (type == 127)
			{
				num8 = Main.player[owner].position.Y - vector.Y;
			}
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			float num10 = 7f;
			float num11 = 2000f;
			bool num12 = num9 > num11;
			if (num9 < (float)num6 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num9 < 150f)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					velocity *= 0.99f;
				}
				num5 = 0.01f;
				if (num7 < -2f)
				{
					num7 = -2f;
				}
				if (num7 > 2f)
				{
					num7 = 2f;
				}
				if (num8 < -2f)
				{
					num8 = -2f;
				}
				if (num8 > 2f)
				{
					num8 = 2f;
				}
			}
			else
			{
				if (num9 > 300f)
				{
					num5 = 0.2f;
				}
				num9 = num10 / num9;
				num7 *= num9;
				num8 *= num9;
			}
			if (num12)
			{
				int num13 = 17;
				for (int i = 0; i < 12; i++)
				{
					float speedX = 1f - Main.rand.NextFloat() * 2f;
					float speedY = 1f - Main.rand.NextFloat() * 2f;
					int num14 = Dust.NewDust(position, width, height, num13, speedX, speedY);
					Main.dust[num14].noLightEmittence = true;
					Main.dust[num14].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (Math.Abs(num7) > Math.Abs(num8) || num5 == 0.05f)
			{
				if (velocity.X < num7)
				{
					velocity.X += num5;
					if (num5 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num5;
					}
				}
				if (velocity.X > num7)
				{
					velocity.X -= num5;
					if (num5 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num5;
					}
				}
			}
			if (Math.Abs(num7) <= Math.Abs(num8) || num5 == 0.05f)
			{
				if (velocity.Y < num8)
				{
					velocity.Y += num5;
					if (num5 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num5;
					}
				}
				if (velocity.Y > num8)
				{
					velocity.Y -= num5;
					if (num5 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num5;
					}
				}
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
			frameCounter++;
			if (frameCounter > 6)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 1)
			{
				frame = 0;
			}
			return;
		}
		if (type == 197)
		{
			float num15 = 0.1f;
			tileCollide = false;
			int num16 = 300;
			Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num17 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector2.X;
			float num18 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector2.Y;
			if (type == 127)
			{
				num18 = Main.player[owner].position.Y - vector2.Y;
			}
			float num19 = (float)Math.Sqrt(num17 * num17 + num18 * num18);
			float num20 = 3f;
			if (num19 > 500f)
			{
				localAI[0] = 10000f;
			}
			if (localAI[0] >= 10000f)
			{
				num20 = 14f;
			}
			float num21 = 2000f;
			bool num22 = num19 > num21;
			if (num19 < (float)num16 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num19 < 150f)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					velocity *= 0.99f;
				}
				num15 = 0.01f;
				if (num17 < -2f)
				{
					num17 = -2f;
				}
				if (num17 > 2f)
				{
					num17 = 2f;
				}
				if (num18 < -2f)
				{
					num18 = -2f;
				}
				if (num18 > 2f)
				{
					num18 = 2f;
				}
			}
			else
			{
				if (num19 > 300f)
				{
					num15 = 0.2f;
				}
				num19 = num20 / num19;
				num17 *= num19;
				num18 *= num19;
			}
			if (num22)
			{
				int num23 = 26;
				for (int j = 0; j < 12; j++)
				{
					float speedX2 = 1f - Main.rand.NextFloat() * 2f;
					float speedY2 = 1f - Main.rand.NextFloat() * 2f;
					int num24 = Dust.NewDust(position, width, height, num23, speedX2, speedY2);
					Main.dust[num24].noLightEmittence = true;
					Main.dust[num24].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num17)
			{
				velocity.X += num15;
				if (num15 > 0.05f && velocity.X < 0f)
				{
					velocity.X += num15;
				}
			}
			if (velocity.X > num17)
			{
				velocity.X -= num15;
				if (num15 > 0.05f && velocity.X > 0f)
				{
					velocity.X -= num15;
				}
			}
			if (velocity.Y < num18)
			{
				velocity.Y += num15;
				if (num15 > 0.05f && velocity.Y < 0f)
				{
					velocity.Y += num15;
				}
			}
			if (velocity.Y > num18)
			{
				velocity.Y -= num15;
				if (num15 > 0.05f && velocity.Y > 0f)
				{
					velocity.Y -= num15;
				}
			}
			localAI[0] += Main.rand.Next(10);
			if (localAI[0] > 10000f)
			{
				if (localAI[1] == 0f)
				{
					if (velocity.X < 0f)
					{
						localAI[1] = -1f;
					}
					else
					{
						localAI[1] = 1f;
					}
				}
				rotation += 0.25f * localAI[1];
				if (localAI[0] > 12000f)
				{
					localAI[0] = 0f;
				}
			}
			else
			{
				localAI[1] = 0f;
				float num25 = velocity.X * 0.1f;
				if (rotation > num25)
				{
					rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
					if (rotation < num25)
					{
						rotation = num25;
					}
				}
				if (rotation < num25)
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
					if (rotation > num25)
					{
						rotation = num25;
					}
				}
			}
			if ((double)rotation > 6.28)
			{
				rotation -= 6.28f;
			}
			if ((double)rotation < -6.28)
			{
				rotation += 6.28f;
			}
			return;
		}
		if (type == 198 || type == 380 || type == 774 || type == 815 || type == 817 || type == 886 || type == 892 || type == 894 || type == 901)
		{
			float num26 = 0.4f;
			if (type == 380)
			{
				num26 = 0.3f;
			}
			if (type == 774)
			{
				num26 = 0.3f;
			}
			tileCollide = false;
			int num27 = 100;
			float num28 = 50f;
			float num29 = 400f;
			float num30 = num29 / 2f;
			float num31 = 2000f;
			bool flag6 = false;
			Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num32 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector3.X;
			float num33 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector3.Y;
			if (type == 774)
			{
				num28 = 2f;
				float num34 = (float)Math.Sin((float)Math.PI * 2f * ((float)Main.player[owner].miscCounter / 60f));
				float num35 = Utils.GetLerpValue(0.5f, 1f, num34, clamped: true);
				if (new Vector2(num32 - (float)(70 * Main.player[owner].direction), num33 - 60f).Length() > 50f)
				{
					num34 = 0f;
					num35 = 0f;
				}
				num33 += -60f + num35 * -8f + num34 * 8f;
				num32 += (float)(70 * -Main.player[owner].direction);
			}
			else
			{
				if (type != 892 && type != 894)
				{
					num33 += (float)Main.rand.Next(-10, 21);
					num32 += (float)Main.rand.Next(-10, 21);
				}
				num32 += (float)(60 * -Main.player[owner].direction);
				num33 -= 60f;
			}
			Vector2 vector4 = new Vector2(num32, num33);
			if (type == 127)
			{
				num33 = Main.player[owner].position.Y - vector3.Y;
			}
			float num36 = (float)Math.Sqrt(num32 * num32 + num33 * num33);
			float num37 = num36;
			float num38 = 14f;
			if (type == 380)
			{
				num38 = 6f;
			}
			if (type == 815 || type == 817)
			{
				num38 = ((!(num36 < num29)) ? 10f : 6f);
			}
			if (type == 892 || type == 894 || type == 901)
			{
				if (num36 < num30)
				{
					num38 = 6f;
				}
				num38 = ((!(num36 < num29)) ? 12f : 9f);
			}
			if (type == 774)
			{
				num38 = 5f;
			}
			if (num36 < (float)num27 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num36 < num28)
			{
				if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
				{
					if (type == 892 || type == 892)
					{
						velocity *= 0.95f;
					}
					else
					{
						velocity *= 0.99f;
					}
				}
				num26 = 0.01f;
			}
			else
			{
				if (type == 892 || type == 894 || type == 901)
				{
					if (num36 < 100f)
					{
						num26 = 0.1f;
					}
					if (num36 > num31)
					{
						flag6 = true;
					}
					else if (num36 > num29)
					{
						num26 = 0.7f;
					}
					else if (num36 > num30)
					{
						num26 = 0.5f;
					}
				}
				else if (type == 815 || type == 817)
				{
					if (num36 < 100f)
					{
						num26 = 0.1f;
					}
					if (num36 > num31)
					{
						flag6 = true;
					}
					else if (type != 815 && num36 > num29)
					{
						num26 = 0.5f;
					}
				}
				else if (type == 380)
				{
					if (num36 < 100f)
					{
						num26 = 0.1f;
					}
					if (num36 > 300f)
					{
						num26 = 0.4f;
					}
					if (num36 > num31)
					{
						flag6 = true;
					}
				}
				else if (type == 198 || type == 886)
				{
					if (num36 < 100f)
					{
						num26 = 0.1f;
					}
					if (num36 > 300f)
					{
						num26 = 0.6f;
					}
					if (num36 > num31)
					{
						flag6 = true;
					}
				}
				else if (type == 774)
				{
					if (num36 < 40f)
					{
						num26 = 0.1f;
					}
					if (num36 > 300f)
					{
						num26 = 0.6f;
					}
					if (num36 > num31)
					{
						flag6 = true;
					}
				}
				num36 = num38 / num36;
				num32 *= num36;
				num33 *= num36;
			}
			if (velocity.X < num32)
			{
				velocity.X += num26;
				if (num26 > 0.05f && velocity.X < 0f)
				{
					velocity.X += num26;
				}
			}
			if (velocity.X > num32)
			{
				velocity.X -= num26;
				if (num26 > 0.05f && velocity.X > 0f)
				{
					velocity.X -= num26;
				}
			}
			if (velocity.Y < num33)
			{
				velocity.Y += num26;
				if (num26 > 0.05f && velocity.Y < 0f)
				{
					velocity.Y += num26 * 2f;
				}
			}
			if (velocity.Y > num33)
			{
				velocity.Y -= num26;
				if (num26 > 0.05f && velocity.Y > 0f)
				{
					velocity.Y -= num26 * 2f;
				}
			}
			if ((double)velocity.X > 0.25)
			{
				direction = -1;
			}
			else if ((double)velocity.X < -0.25)
			{
				direction = 1;
			}
			spriteDirection = direction;
			rotation = velocity.X * 0.05f;
			if (flag6)
			{
				int num39 = 33;
				if (type == 198 || type == 886)
				{
					num39 = 147;
				}
				if (type == 815)
				{
					num39 = 31;
				}
				if (type == 817)
				{
					num39 = 21;
				}
				for (int k = 0; k < 12; k++)
				{
					float speedX3 = 1f - Main.rand.NextFloat() * 2f;
					float speedY3 = 1f - Main.rand.NextFloat() * 2f;
					int num40 = Dust.NewDust(position, width, height, num39, speedX3, speedY3);
					Main.dust[num40].noLightEmittence = true;
					Main.dust[num40].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			int num41 = 3;
			int num42 = 0;
			int num43 = 3;
			if (type == 380)
			{
				num41 = 6;
			}
			if (type == 815)
			{
				num41 = 5;
				num42 = 0;
				num43 = 5;
				if (num37 > num29)
				{
					num42 = 6;
					num43 = 9;
				}
			}
			if (type == 817)
			{
				num41 = 6;
				num42 = 0;
				num43 = 2;
			}
			if (type == 901)
			{
				num41 = 4;
				num42 = 0;
				num43 = 5;
				if (num37 > num29 / 2f)
				{
					num41 = 3;
					num42 = 6;
					num43 = 11;
				}
			}
			if (type == 892)
			{
				num41 = 6;
				num42 = 0;
				num43 = Main.projFrames[type] - 1;
			}
			if (type == 886 || type == 894)
			{
				num41 = 4;
				num42 = 0;
				num43 = Main.projFrames[type] - 1;
			}
			if (type == 774)
			{
				if (Main.player[owner].velocity.Length() < 2f && vector4.Length() < 10f)
				{
					direction = -Main.player[owner].direction;
					spriteDirection = direction;
				}
				num41 = 6;
				if (!wet)
				{
					num42 += 4;
					num43 += 4;
				}
				rotation = velocity.X * 0.05f + Math.Abs(velocity.Y * -0.05f);
			}
			if (++frameCounter >= num41)
			{
				frameCounter = 0;
				frame++;
				if (frame < num42 || frame > num43)
				{
					frame = num42;
				}
			}
			return;
		}
		if (type == 211)
		{
			float num44 = 0.2f;
			float num45 = 5f;
			tileCollide = false;
			Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num46 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector5.X;
			float num47 = Main.player[owner].position.Y + Main.player[owner].gfxOffY + (float)(Main.player[owner].height / 2) - vector5.Y;
			if (Main.player[owner].controlLeft)
			{
				num46 -= 120f;
			}
			else if (Main.player[owner].controlRight)
			{
				num46 += 120f;
			}
			if (Main.player[owner].controlDown)
			{
				num47 += 120f;
			}
			else
			{
				if (Main.player[owner].controlUp)
				{
					num47 -= 120f;
				}
				num47 -= 60f;
			}
			float num48 = (float)Math.Sqrt(num46 * num46 + num47 * num47);
			if (num48 > 1000f)
			{
				position.X += num46;
				position.Y += num47;
			}
			if (localAI[0] == 1f)
			{
				if (num48 < 10f)
				{
					Player player = Main.player[owner];
					if (Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y) < num45 && (player.velocity.Y == 0f || (player.mount.Active && player.mount.CanFly())))
					{
						localAI[0] = 0f;
					}
				}
				num45 = 12f;
				if (num48 < num45)
				{
					velocity.X = num46;
					velocity.Y = num47;
				}
				else
				{
					num48 = num45 / num48;
					velocity.X = num46 * num48;
					velocity.Y = num47 * num48;
				}
				if ((double)velocity.X > 0.5)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation -= (0.2f + Math.Abs(velocity.X) * 0.025f) * (float)direction;
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 5)
				{
					frame = 5;
				}
				if (frame > 9)
				{
					frame = 5;
				}
				for (int l = 0; l < 2; l++)
				{
					int num49 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 4f), 14, 14, 156);
					Main.dust[num49].velocity *= 0.2f;
					Main.dust[num49].noGravity = true;
					Main.dust[num49].scale = 1.25f;
					Main.dust[num49].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
				}
				return;
			}
			if (num48 > 200f)
			{
				localAI[0] = 1f;
			}
			if ((double)velocity.X > 0.5)
			{
				direction = -1;
			}
			else if ((double)velocity.X < -0.5)
			{
				direction = 1;
			}
			spriteDirection = direction;
			if (num48 < 10f)
			{
				velocity.X = num46;
				velocity.Y = num47;
				rotation = velocity.X * 0.05f;
				if (num48 < num45)
				{
					position += velocity;
					velocity *= 0f;
					num44 = 0f;
				}
				direction = -Main.player[owner].direction;
			}
			num48 = num45 / num48;
			num46 *= num48;
			num47 *= num48;
			if (velocity.X < num46)
			{
				velocity.X += num44;
				if (velocity.X < 0f)
				{
					velocity.X *= 0.99f;
				}
			}
			if (velocity.X > num46)
			{
				velocity.X -= num44;
				if (velocity.X > 0f)
				{
					velocity.X *= 0.99f;
				}
			}
			if (velocity.Y < num47)
			{
				velocity.Y += num44;
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.99f;
				}
			}
			if (velocity.Y > num47)
			{
				velocity.Y -= num44;
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.99f;
				}
			}
			if (velocity.X != 0f || velocity.Y != 0f)
			{
				rotation = velocity.X * 0.05f;
			}
			frameCounter++;
			if (frameCounter > 3)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 4)
			{
				frame = 0;
			}
			return;
		}
		if (type == 199)
		{
			float num50 = 0.1f;
			tileCollide = false;
			int num51 = 200;
			Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num52 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector6.X;
			float num53 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector6.Y;
			num53 -= 60f;
			num52 -= 2f;
			if (type == 127)
			{
				num53 = Main.player[owner].position.Y - vector6.Y;
			}
			float num54 = (float)Math.Sqrt(num52 * num52 + num53 * num53);
			float num55 = 4f;
			float num56 = num54;
			float num57 = 2000f;
			bool num58 = num54 > num57;
			if (num54 < (float)num51 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num54 < 4f)
			{
				velocity.X = num52;
				velocity.Y = num53;
				num50 = 0f;
			}
			else
			{
				if (num54 > 350f)
				{
					num50 = 0.2f;
					num55 = 10f;
				}
				num54 = num55 / num54;
				num52 *= num54;
				num53 *= num54;
			}
			if (num58)
			{
				int num59 = 2;
				for (int m = 0; m < 12; m++)
				{
					float speedX4 = 1f - Main.rand.NextFloat() * 2f;
					float speedY4 = 1f - Main.rand.NextFloat() * 2f;
					int num60 = Dust.NewDust(position, width, height, num59, speedX4, speedY4);
					Main.dust[num60].noLightEmittence = true;
					Main.dust[num60].noGravity = true;
				}
				base.Center = Main.player[owner].Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num52)
			{
				velocity.X += num50;
				if (velocity.X < 0f)
				{
					velocity.X += num50;
				}
			}
			if (velocity.X > num52)
			{
				velocity.X -= num50;
				if (velocity.X > 0f)
				{
					velocity.X -= num50;
				}
			}
			if (velocity.Y < num53)
			{
				velocity.Y += num50;
				if (velocity.Y < 0f)
				{
					velocity.Y += num50;
				}
			}
			if (velocity.Y > num53)
			{
				velocity.Y -= num50;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num50;
				}
			}
			direction = -Main.player[owner].direction;
			spriteDirection = 1;
			rotation = velocity.Y * 0.05f * (float)(-direction);
			if (num56 >= 50f)
			{
				frameCounter++;
				if (frameCounter <= 6)
				{
					return;
				}
				frameCounter = 0;
				if (velocity.X < 0f)
				{
					if (frame < 2)
					{
						frame++;
					}
					if (frame > 2)
					{
						frame--;
					}
				}
				else
				{
					if (frame < 6)
					{
						frame++;
					}
					if (frame > 6)
					{
						frame--;
					}
				}
			}
			else
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame += direction;
					frameCounter = 0;
				}
				if (frame > 7)
				{
					frame = 0;
				}
				if (frame < 0)
				{
					frame = 7;
				}
			}
			return;
		}
		if (type == 885 || type == 889)
		{
			Player player2 = Main.player[owner];
			float num61 = 0.15f;
			tileCollide = false;
			int num62 = 150;
			Vector2 center = base.Center;
			float num63 = player2.Center.X - center.X;
			float num64 = player2.Center.Y - center.Y;
			num64 -= 65f;
			num63 -= (float)(30 * player2.direction);
			float num65 = (float)Math.Sqrt(num63 * num63 + num64 * num64);
			float num66 = 8f;
			float num67 = num65;
			float num68 = 2000f;
			bool num69 = num65 > num68;
			if (num65 < (float)num62 && player2.velocity.Y == 0f && position.Y + (float)height <= player2.position.Y + (float)player2.height && !Collision.SolidCollision(position, width, height) && velocity.Y < -6f)
			{
				velocity.Y = -6f;
			}
			if (num65 < 10f)
			{
				velocity *= 0.9f;
				if (velocity.Length() < 0.5f)
				{
					velocity = Vector2.Zero;
				}
				num61 = 0f;
			}
			else
			{
				if (num65 > (float)num62)
				{
					num61 = 0.2f;
					num66 = 12f;
				}
				num65 = num66 / num65;
				num63 *= num65;
				num64 *= num65;
			}
			if (num69)
			{
				int num70 = 234;
				if (type == 889)
				{
					num70 = 60;
				}
				for (int n = 0; n < 12; n++)
				{
					float speedX5 = 1f - Main.rand.NextFloat() * 2f;
					float speedY5 = 1f - Main.rand.NextFloat() * 2f;
					int num71 = Dust.NewDust(position, width, height, num70, speedX5, speedY5);
					Main.dust[num71].noLightEmittence = true;
					Main.dust[num71].noGravity = true;
				}
				base.Center = player2.Center;
				velocity = Vector2.Zero;
				if (Main.myPlayer == owner)
				{
					netUpdate = true;
				}
			}
			if (velocity.X < num63)
			{
				velocity.X += num61;
				if (velocity.X < 0f)
				{
					velocity.X += num61;
				}
			}
			if (velocity.X > num63)
			{
				velocity.X -= num61;
				if (velocity.X > 0f)
				{
					velocity.X -= num61;
				}
			}
			if (velocity.Y < num64)
			{
				velocity.Y += num61;
				if (velocity.Y < 0f)
				{
					velocity.Y += num61;
				}
			}
			if (velocity.Y > num64)
			{
				velocity.Y -= num61;
				if (velocity.Y > 0f)
				{
					velocity.Y -= num61;
				}
			}
			direction = -player2.direction;
			spriteDirection = -direction;
			int num72 = 100;
			if (num67 >= (float)num62)
			{
				rotation += 0.5f;
				if (rotation > (float)Math.PI * 2f)
				{
					rotation -= (float)Math.PI * 2f;
				}
				frame = 6;
				frameCounter = 0;
				if (type == 885)
				{
					localAI[0] = 0f;
				}
				if (type == 889)
				{
					localAI[0] += 3f;
					if (localAI[0] > (float)num72)
					{
						localAI[0] = num72;
					}
				}
				return;
			}
			rotation *= 0.95f;
			if (rotation < 0.05f)
			{
				rotation = 0f;
			}
			frameCounter++;
			if (type == 885)
			{
				switch (frameCounter)
				{
				case 10:
					localAI[0] = 0f;
					break;
				case 20:
					localAI[0] = 1f;
					break;
				case 30:
					localAI[0] = 2f;
					break;
				case 40:
					localAI[0] = 1f;
					break;
				}
			}
			if (type == 889)
			{
				localAI[0] -= 3f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
			}
			if (frameCounter % 5 == 0)
			{
				frame++;
				if (frame > 5)
				{
					frame = 0;
				}
			}
			if (frameCounter >= 40)
			{
				frameCounter = 0;
			}
			return;
		}
		if (ai[1] == 0f)
		{
			int num73 = 500;
			if (type == 127)
			{
				num73 = 200;
			}
			if (type == 208)
			{
				num73 = 300;
			}
			switch (type)
			{
			case 816:
			case 825:
			case 854:
			case 858:
			case 859:
			case 860:
			case 881:
			case 884:
			case 890:
			case 891:
			case 897:
			case 900:
			case 934:
				num73 = 400;
				break;
			case 821:
			case 899:
				num73 = 500;
				break;
			}
			if (flag5 || type == 266 || (type >= 390 && type <= 392))
			{
				num73 += 40 * minionPos;
				if (localAI[0] > 0f)
				{
					num73 += 500;
				}
				if (type == 266 && localAI[0] > 0f)
				{
					num73 += 100;
				}
				if (type >= 390 && type <= 392 && localAI[0] > 0f)
				{
					num73 += 400;
				}
			}
			if (Main.player[owner].rocketDelay2 > 0)
			{
				ai[0] = 1f;
			}
			Vector2 vector7 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num74 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector7.X;
			float num75 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector7.Y;
			float num76 = (float)Math.Sqrt(num74 * num74 + num75 * num75);
			if (num76 > 2000f)
			{
				position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
				position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
			}
			else if (num76 > (float)num73 || (Math.Abs(num75) > 300f && ((!flag5 && type != 266 && (type < 390 || type > 392)) || !(localAI[0] > 0f))))
			{
				if (type != 324)
				{
					if (num75 > 0f && velocity.Y < 0f)
					{
						velocity.Y = 0f;
					}
					if (num75 < 0f && velocity.Y > 0f)
					{
						velocity.Y = 0f;
					}
				}
				ai[0] = 1f;
			}
		}
		if (type == 209 && ai[0] != 0f)
		{
			if (Main.player[owner].velocity.Y == 0f && alpha >= 100)
			{
				position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
				position.Y = Main.player[owner].position.Y + (float)Main.player[owner].height - (float)height;
				ai[0] = 0f;
			}
			else
			{
				velocity.X = 0f;
				velocity.Y = 0f;
				alpha += 5;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
		}
		else if (ai[0] != 0f)
		{
			float num77 = 0.2f;
			int num78 = 200;
			if (type == 127)
			{
				num78 = 100;
			}
			if (flag5 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
			{
				num77 = 0.5f;
				num78 = 100;
			}
			if (type == 875)
			{
				num77 = 2f;
				num78 = 100;
			}
			tileCollide = false;
			Vector2 vector8 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num79 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector8.X;
			if (flag5 || type == 266 || (type >= 390 && type <= 392))
			{
				num79 -= (float)(40 * Main.player[owner].direction);
				float num80 = 700f;
				if (flag5)
				{
					num80 += 100f;
				}
				bool flag7 = false;
				int num81 = -1;
				for (int num82 = 0; num82 < 200; num82++)
				{
					if (!Main.npc[num82].CanBeChasedBy(this))
					{
						continue;
					}
					float num83 = Main.npc[num82].position.X + (float)(Main.npc[num82].width / 2);
					float num84 = Main.npc[num82].position.Y + (float)(Main.npc[num82].height / 2);
					if (Math.Abs(Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - num83) + Math.Abs(Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - num84) < num80)
					{
						if (Collision.CanHit(position, width, height, Main.npc[num82].position, Main.npc[num82].width, Main.npc[num82].height))
						{
							num81 = num82;
						}
						flag7 = true;
						break;
					}
				}
				if (!flag7)
				{
					num79 -= (float)(40 * minionPos * Main.player[owner].direction);
				}
				if (flag7 && num81 >= 0)
				{
					ai[0] = 0f;
				}
			}
			float num85 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector8.Y;
			if (type == 127)
			{
				num85 = Main.player[owner].position.Y - vector8.Y;
			}
			float num86 = (float)Math.Sqrt(num79 * num79 + num85 * num85);
			float num87 = num86;
			float num88 = 10f;
			float num89 = num86;
			if (type == 111)
			{
				num88 = 11f;
			}
			if (type == 127)
			{
				num88 = 9f;
			}
			if (type == 875)
			{
				num77 = 1.8f;
				num88 = 16f;
			}
			if (type == 324)
			{
				num88 = 20f;
			}
			if (flag5 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
			{
				num77 = 0.4f;
				num88 = 12f;
				if (num88 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num88 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
				}
			}
			if (type == 208 && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) > 4f)
			{
				num78 = -1;
			}
			if (num86 < (float)num78 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
			}
			if (num86 < 60f)
			{
				num79 = velocity.X;
				num85 = velocity.Y;
			}
			else
			{
				num86 = num88 / num86;
				num79 *= num86;
				num85 *= num86;
			}
			if (type == 324)
			{
				if (num89 > 1000f)
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num88 - 1.25)
					{
						velocity *= 1.025f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num88 + 1.25)
					{
						velocity *= 0.975f;
					}
				}
				else if (num89 > 600f)
				{
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num88 - 1f)
					{
						velocity *= 1.05f;
					}
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num88 + 1f)
					{
						velocity *= 0.95f;
					}
				}
				else if (num89 > 400f)
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num88 - 0.5)
					{
						velocity *= 1.075f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num88 + 0.5)
					{
						velocity *= 0.925f;
					}
				}
				else
				{
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num88 - 0.25)
					{
						velocity *= 1.1f;
					}
					if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num88 + 0.25)
					{
						velocity *= 0.9f;
					}
				}
				velocity.X = (velocity.X * 34f + num79) / 35f;
				velocity.Y = (velocity.Y * 34f + num85) / 35f;
			}
			else if (type == 875)
			{
				if (num87 < (float)num78)
				{
					if (velocity.X < num79)
					{
						velocity.X += num77;
					}
					else if (velocity.X > num79)
					{
						velocity.X -= num77;
					}
					if (velocity.Y < num85)
					{
						velocity.Y += num77;
					}
					else if (velocity.Y > num85)
					{
						velocity.Y -= num77;
					}
				}
				else
				{
					velocity = Vector2.Lerp(velocity, new Vector2(num79, num85), 0.75f);
				}
			}
			else
			{
				if (velocity.X < num79)
				{
					velocity.X += num77;
					if (velocity.X < 0f)
					{
						velocity.X += num77 * 1.5f;
					}
				}
				if (velocity.X > num79)
				{
					velocity.X -= num77;
					if (velocity.X > 0f)
					{
						velocity.X -= num77 * 1.5f;
					}
				}
				if (velocity.Y < num85)
				{
					velocity.Y += num77;
					if (velocity.Y < 0f)
					{
						velocity.Y += num77 * 1.5f;
					}
				}
				if (velocity.Y > num85)
				{
					velocity.Y -= num77;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num77 * 1.5f;
					}
				}
			}
			if (type == 111)
			{
				frame = 7;
			}
			if (type == 112)
			{
				frame = 2;
			}
			if (flag5 && frame < 12)
			{
				frame = Main.rand.Next(12, 18);
				frameCounter = 0;
			}
			if (type != 313)
			{
				if ((double)velocity.X > 0.5)
				{
					spriteDirection = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					spriteDirection = 1;
				}
			}
			if (type == 900)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 10)
				{
					frame = 10;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 10;
					}
				}
				rotation = velocity.X * 0.125f;
			}
			else if (type == 899)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 10)
				{
					frame = 10;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 10;
					}
				}
				Vector2 v = velocity;
				v.Normalize();
				rotation = v.ToRotation();
				if (velocity.X < 0f)
				{
					rotation += (float)Math.PI;
				}
			}
			else if (type == 897)
			{
				spriteDirection = 1;
				frameCounter++;
				if (frame < 8)
				{
					frame = 8;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 8;
					}
				}
				Vector2 v2 = velocity;
				v2.Normalize();
				rotation = v2.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 891)
			{
				spriteDirection = 1;
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				Vector2 v3 = velocity;
				v3.Normalize();
				rotation = v3.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 890)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 884)
			{
				spriteDirection = -1;
				if (velocity.X > 0f)
				{
					spriteDirection = 1;
				}
				frameCounter++;
				if (frame < 9)
				{
					frame = 9;
					frameCounter = 0;
				}
				if (frameCounter > 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 9;
					}
				}
				Vector2 v4 = velocity;
				v4.Normalize();
				rotation = v4.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 881 || type == 934)
			{
				int num90 = 1226;
				if (type == 934)
				{
					num90 = 1261;
				}
				if (frame < 6 || frame > 11)
				{
					Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, num90);
				}
				frameCounter++;
				if (frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 11)
				{
					frame = 6;
				}
				Vector2 v5 = velocity;
				v5.Normalize();
				rotation = v5.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 875)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 7 || frame > 10)
				{
					frame = 7;
				}
				Vector2 v6 = velocity;
				v6.Normalize();
				rotation = v6.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
			}
			else if (type == 825)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 21 || frame > 25)
				{
					frame = 21;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 854)
			{
				if (frame < 13)
				{
					Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, 1269);
				}
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 13 || frame > 18)
				{
					frame = 13;
				}
				Vector2 v7 = velocity;
				v7.Normalize();
				rotation = v7.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 858)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 10 || frame > 13)
				{
					frame = 10;
				}
				Vector2 v8 = velocity;
				v8.Normalize();
				rotation = v8.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
			}
			else if (type == 859)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 18 || frame > 23)
				{
					frame = 18;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 860)
			{
				if (frame < 6)
				{
					frame = 8;
					frameCounter = 0;
				}
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 13)
				{
					frame = 6;
				}
				Vector2 v9 = velocity;
				v9.Normalize();
				rotation = v9.ToRotation() + (float)Math.PI / 2f;
			}
			else if (type == 816)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 11 || frame > 16)
				{
					frame = 11;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 821)
			{
				if (++frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 19 || frame > 22)
				{
					frame = 19;
				}
				rotation = velocity.X * 0.025f;
			}
			else if (type == 112)
			{
				if (spriteDirection == -1)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type >= 390 && type <= 392)
			{
				int num91 = (int)(base.Center.X / 16f);
				int num92 = (int)(base.Center.Y / 16f);
				if (Main.tile[num91, num92] != null && Main.tile[num91, num92].wall > 0)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 4;
					}
					if (frame < 4)
					{
						frame = 7;
					}
				}
				else
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 8 || frame > 10)
					{
						frame = 8;
					}
					rotation = velocity.X * 0.1f;
				}
			}
			else if (type == 334)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 7 || frame > 10)
				{
					frame = 7;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 353)
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 10 || frame > 13)
				{
					frame = 10;
				}
				rotation = velocity.X * 0.05f;
			}
			else if (type == 127)
			{
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame <= 5 || frame > 15)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 269)
			{
				if (frame == 6)
				{
					frameCounter = 0;
				}
				else if (frame < 4 || frame > 6)
				{
					frameCounter = 0;
					frame = 4;
				}
				else
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
				}
				rotation = velocity.X * 0.05f;
			}
			else if (type == 266)
			{
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 2 || frame > 5)
				{
					frame = 2;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 324)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 9)
				{
					frame = 6;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				for (int num93 = 0; num93 < 2; num93++)
				{
					int num94 = 4;
					int num95 = Dust.NewDust(new Vector2(base.Center.X - (float)num94, base.Center.Y - (float)num94) - velocity * 0f, num94 * 2, num94 * 2, 6, 0f, 0f, 100);
					Main.dust[num95].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num95].velocity *= 0.2f;
					if (num93 == 1)
					{
						Main.dust[num95].position -= velocity * 0.5f;
					}
					Main.dust[num95].noGravity = true;
					num95 = Dust.NewDust(new Vector2(base.Center.X - (float)num94, base.Center.Y - (float)num94) - velocity * 0f, num94 * 2, num94 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num95].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num95].velocity *= 0.05f;
					if (num93 == 1)
					{
						Main.dust[num95].position -= velocity * 0.5f;
					}
				}
			}
			else if (type == 268)
			{
				frameCounter++;
				if (frameCounter > 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 7)
				{
					frame = 6;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
			}
			else if (type == 200)
			{
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame <= 5 || frame > 9)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (type == 208)
			{
				rotation = velocity.X * 0.075f;
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 4)
				{
					frame = 1;
				}
				if (frame < 1)
				{
					frame = 1;
				}
			}
			else if (type == 236)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				if (velocity.Y < 0f)
				{
					frameCounter += 2;
				}
				else
				{
					frameCounter++;
				}
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 12)
				{
					frame = 9;
				}
				if (frame < 9)
				{
					frame = 9;
				}
			}
			else if (type == 499)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				if (velocity.Y < 0f)
				{
					frameCounter += 2;
				}
				else
				{
					frameCounter++;
				}
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 12)
				{
					frame = 8;
				}
				if (frame < 8)
				{
					frame = 8;
				}
			}
			else if (type == 765)
			{
				rotation = velocity.Y * 0.05f * (float)direction;
				frameCounter++;
				if (frameCounter >= 8)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 10)
				{
					frame = 8;
				}
				if (frame < 6)
				{
					frame = 6;
				}
			}
			else if (type == 314)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 12)
				{
					frame = 7;
				}
				if (frame < 7)
				{
					frame = 7;
				}
			}
			else if (type == 319)
			{
				rotation = velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 10)
				{
					frame = 6;
				}
				if (frame < 6)
				{
					frame = 6;
				}
			}
			else if (type == 210)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				frameCounter += 3;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 11)
				{
					frame = 7;
				}
				if (frame < 7)
				{
					frame = 7;
				}
			}
			else if (type == 313)
			{
				position.Y += height;
				height = 54;
				position.Y -= height;
				position.X += width / 2;
				width = 54;
				position.X -= width / 2;
				rotation += velocity.X * 0.01f;
				frameCounter = 0;
				frame = 11;
			}
			else if (type == 398)
			{
				if ((double)velocity.X > 0.5)
				{
					spriteDirection = 1;
				}
				else if ((double)velocity.X < -0.5)
				{
					spriteDirection = -1;
				}
				frameCounter++;
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame < 6 || frame > 9)
				{
					frame = 6;
				}
				rotation = velocity.X * 0.1f;
			}
			else if (spriteDirection == -1)
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X);
			}
			else
			{
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			}
			if (!flag5 && type != 499 && type != 765 && type != 816 && type != 821 && type != 825 && type != 859 && type != 881 && type != 884 && type != 890 && type != 891 && type != 900 && type != 934)
			{
				if (type == 899)
				{
					int num96 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num96 = 31;
					}
					int num97 = Dust.NewDust(base.Center + new Vector2(-8f, 0f) - velocity * 0.25f, 15, 15, num96, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num97].velocity.X = Main.dust[num97].velocity.X * 0.2f;
					Main.dust[num97].velocity.Y = Main.dust[num97].velocity.Y * 0.2f - 0.2f;
					Main.dust[num97].noGravity = true;
				}
				else if (type == 897)
				{
					int num98 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num98 = 31;
					}
					int num99 = Dust.NewDust(base.Center + new Vector2(-8f, -8f) - velocity * 0.25f, 15, 15, num98, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num99].velocity.X = Main.dust[num99].velocity.X * 0.2f;
					Main.dust[num99].velocity.Y = Main.dust[num99].velocity.Y * 0.2f - 0.2f;
					Main.dust[num99].noGravity = true;
				}
				else if (type == 875)
				{
					if (Main.rand.Next(3) == 0)
					{
						Gore.NewGorePerfect(base.Center + new Vector2(-10f + (float)Main.rand.Next(-20, 20) * 0.5f, -10f + (float)Main.rand.Next(-20, 20) * 0.5f), velocity * 0.1f, 1225, 0.5f + Main.rand.NextFloat() * 1f);
						Vector2 vector9 = Main.rand.NextVector2CircularEdge(2f, 2f) + velocity * -0.5f;
						vector9 *= 0.5f;
						int num100 = Dust.NewDust(base.Center - velocity * 1.5f - new Vector2(7f, 7f), 15, 15, 226, vector9.X, vector9.Y, 0, default(Color), 0.65f);
						Main.dust[num100].noGravity = true;
					}
				}
				else if (type == 860)
				{
					int num101 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) + velocity, 8, 8, 27, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f);
					Main.dust[num101].velocity.X = Main.dust[num101].velocity.X * 0.2f;
					Main.dust[num101].velocity.Y = Main.dust[num101].velocity.Y * 0.2f - 0.2f;
					Main.dust[num101].velocity += new Vector2((float)Main.rand.Next(-10, 10) * 0.4f, (float)Main.rand.Next(-10, 10) * 0.4f) * 0.5f;
					Main.dust[num101].noGravity = true;
				}
				else if (type == 858)
				{
					int num102 = 6;
					if (Main.rand.Next(4) == 0)
					{
						num102 = 31;
					}
					int num103 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 10, 10, num102, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
					Main.dust[num103].velocity.X = Main.dust[num103].velocity.X * 0.2f;
					Main.dust[num103].velocity.Y = Main.dust[num103].velocity.Y * 0.2f - 0.2f;
					Main.dust[num103].noGravity = true;
				}
				else if (type == 854)
				{
					if (Main.rand.Next(6) == 0)
					{
						Vector2 vector10 = base.Center / 16f;
						int i2 = (int)vector10.X;
						int num104 = (int)vector10.Y;
						Tile tileSafely = Framing.GetTileSafely(i2, num104 + 1);
						if (!WorldGen.SolidTile(tileSafely) && tileSafely.liquid == 0)
						{
							Gore gore = Gore.NewGorePerfect(base.Center + new Vector2((float)Main.rand.Next(-30, 30) * 0.5f, (float)Main.rand.Next(-30, 30) * 0.5f), velocity * -0.2f, 910);
							gore.Frame.CurrentColumn = 0;
							gore.timeLeft = 1;
						}
					}
				}
				else if (type != 398 && type != 390 && type != 391 && type != 392 && type != 127 && type != 200 && type != 208 && type != 210 && type != 236 && type != 266 && type != 268 && type != 269 && type != 313 && type != 314 && type != 319 && type != 324 && type != 334 && type != 353)
				{
					int num105 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 8, 8, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.7f);
					Main.dust[num105].velocity.X = Main.dust[num105].velocity.X * 0.2f;
					Main.dust[num105].velocity.Y = Main.dust[num105].velocity.Y * 0.2f;
					Main.dust[num105].noGravity = true;
				}
			}
		}
		else
		{
			if (flag5)
			{
				float num106 = 40 * minionPos;
				int num107 = 30;
				int num108 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num109 = position.X;
					float num110 = position.Y;
					float num111 = 100000f;
					float num112 = num111;
					int num113 = -1;
					NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						float num114 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
						float num115 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
						float num116 = Math.Abs(position.X + (float)(width / 2) - num114) + Math.Abs(position.Y + (float)(height / 2) - num115);
						if (num116 < num111)
						{
							if (num113 == -1 && num116 <= num112)
							{
								num112 = num116;
								num109 = num114;
								num110 = num115;
							}
							if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
							{
								num111 = num116;
								num109 = num114;
								num110 = num115;
								num113 = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
					if (num113 == -1)
					{
						for (int num117 = 0; num117 < 200; num117++)
						{
							if (!Main.npc[num117].CanBeChasedBy(this))
							{
								continue;
							}
							float num118 = Main.npc[num117].position.X + (float)(Main.npc[num117].width / 2);
							float num119 = Main.npc[num117].position.Y + (float)(Main.npc[num117].height / 2);
							float num120 = Math.Abs(position.X + (float)(width / 2) - num118) + Math.Abs(position.Y + (float)(height / 2) - num119);
							if (num120 < num111)
							{
								if (num113 == -1 && num120 <= num112)
								{
									num112 = num120;
									num109 = num118;
									num110 = num119;
								}
								if (Collision.CanHit(position, width, height, Main.npc[num117].position, Main.npc[num117].width, Main.npc[num117].height))
								{
									num111 = num120;
									num109 = num118;
									num110 = num119;
									num113 = num117;
								}
							}
						}
					}
					if (num113 == -1 && num112 < num111)
					{
						num111 = num112;
					}
					float num121 = 400f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num121 = 200f;
					}
					if (num111 < num121 + num106 && num113 == -1)
					{
						float num122 = num109 - (position.X + (float)(width / 2));
						if (num122 < -5f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num122 > 5f)
						{
							flag2 = true;
							flag = false;
						}
					}
					else if (num113 >= 0 && num111 < 800f + num106)
					{
						localAI[0] = num108;
						float num123 = num109 - (position.X + (float)(width / 2));
						if (num123 > 450f || num123 < -450f)
						{
							if (num123 < -50f)
							{
								flag = true;
								flag2 = false;
							}
							else if (num123 > 50f)
							{
								flag2 = true;
								flag = false;
							}
						}
						else if (owner == Main.myPlayer)
						{
							ai[1] = num107;
							Vector2 vector11 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2) - 8f);
							float num124 = num109 - vector11.X + (float)Main.rand.Next(-20, 21);
							float num125 = Math.Abs(num124) * 0.1f;
							num125 = num125 * (float)Main.rand.Next(0, 100) * 0.001f;
							float num126 = num110 - vector11.Y + (float)Main.rand.Next(-20, 21) - num125;
							float num127 = (float)Math.Sqrt(num124 * num124 + num126 * num126);
							num127 = 18f / num127;
							num124 *= num127;
							num126 *= num127;
							int num128 = damage;
							int num129 = 195;
							int num130 = NewProjectile(vector11.X, vector11.Y, num124, num126, num129, num128, knockBack, Main.myPlayer);
							Main.projectile[num130].timeLeft = 300;
							if (num124 < 0f)
							{
								direction = -1;
							}
							if (num124 > 0f)
							{
								direction = 1;
							}
							netUpdate = true;
						}
					}
				}
			}
			bool flag8 = false;
			Vector2 vector12 = Vector2.Zero;
			bool flag9 = false;
			if (type == 266 || (type >= 390 && type <= 392))
			{
				float num131 = 40 * minionPos;
				int num132 = 60;
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					float num133 = position.X;
					float num134 = position.Y;
					float num135 = 100000f;
					float num136 = num135;
					int num137 = -1;
					NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
					{
						float x = ownerMinionAttackTargetNPC2.Center.X;
						float y = ownerMinionAttackTargetNPC2.Center.Y;
						float num138 = Math.Abs(position.X + (float)(width / 2) - x) + Math.Abs(position.Y + (float)(height / 2) - y);
						if (num138 < num135)
						{
							if (num137 == -1 && num138 <= num136)
							{
								num136 = num138;
								num133 = x;
								num134 = y;
							}
							if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
							{
								num135 = num138;
								num133 = x;
								num134 = y;
								num137 = ownerMinionAttackTargetNPC2.whoAmI;
							}
						}
					}
					if (num137 == -1)
					{
						for (int num139 = 0; num139 < 200; num139++)
						{
							if (!Main.npc[num139].CanBeChasedBy(this))
							{
								continue;
							}
							float num140 = Main.npc[num139].position.X + (float)(Main.npc[num139].width / 2);
							float num141 = Main.npc[num139].position.Y + (float)(Main.npc[num139].height / 2);
							float num142 = Math.Abs(position.X + (float)(width / 2) - num140) + Math.Abs(position.Y + (float)(height / 2) - num141);
							if (num142 < num135)
							{
								if (num137 == -1 && num142 <= num136)
								{
									num136 = num142;
									num133 = num140;
									num134 = num141;
								}
								if (Collision.CanHit(position, width, height, Main.npc[num139].position, Main.npc[num139].width, Main.npc[num139].height))
								{
									num135 = num142;
									num133 = num140;
									num134 = num141;
									num137 = num139;
								}
							}
						}
					}
					if (type >= 390 && type <= 392 && !Collision.SolidCollision(position, width, height))
					{
						tileCollide = true;
					}
					if (num137 == -1 && num136 < num135)
					{
						num135 = num136;
					}
					else if (num137 >= 0)
					{
						flag8 = true;
						vector12 = new Vector2(num133, num134) - base.Center;
						if (type >= 390 && type <= 392)
						{
							if (Main.npc[num137].position.Y > position.Y + (float)height)
							{
								int num143 = (int)(base.Center.X / 16f);
								int num144 = (int)((position.Y + (float)height + 1f) / 16f);
								if (Main.tile[num143, num144] != null && Main.tile[num143, num144].active() && TileID.Sets.Platforms[Main.tile[num143, num144].type])
								{
									tileCollide = false;
								}
							}
							Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
							Rectangle value = new Rectangle((int)Main.npc[num137].position.X, (int)Main.npc[num137].position.Y, Main.npc[num137].width, Main.npc[num137].height);
							int num145 = 10;
							value.X -= num145;
							value.Y -= num145;
							value.Width += num145 * 2;
							value.Height += num145 * 2;
							if (rectangle.Intersects(value))
							{
								flag9 = true;
								Vector2 vector13 = Main.npc[num137].Center - base.Center;
								if (velocity.Y > 0f && vector13.Y < 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.Y < 0f && vector13.Y > 0f)
								{
									velocity.Y *= 0.5f;
								}
								if (velocity.X > 0f && vector13.X < 0f)
								{
									velocity.X *= 0.5f;
								}
								if (velocity.X < 0f && vector13.X > 0f)
								{
									velocity.X *= 0.5f;
								}
								if (vector13.Length() > 14f)
								{
									vector13.Normalize();
									vector13 *= 14f;
								}
								rotation = (rotation * 5f + vector13.ToRotation() + (float)Math.PI / 2f) / 6f;
								velocity = (velocity * 9f + vector13) / 10f;
								for (int num146 = 0; num146 < 1000; num146++)
								{
									if (whoAmI != num146 && owner == Main.projectile[num146].owner && Main.projectile[num146].type >= 390 && Main.projectile[num146].type <= 392 && (Main.projectile[num146].Center - base.Center).Length() < 15f)
									{
										float num147 = 0.5f;
										if (base.Center.Y > Main.projectile[num146].Center.Y)
										{
											Main.projectile[num146].velocity.Y -= num147;
											velocity.Y += num147;
										}
										else
										{
											Main.projectile[num146].velocity.Y += num147;
											velocity.Y -= num147;
										}
										if (base.Center.X > Main.projectile[num146].Center.X)
										{
											velocity.X += num147;
											Main.projectile[num146].velocity.X -= num147;
										}
										else
										{
											velocity.X -= num147;
											Main.projectile[num146].velocity.Y += num147;
										}
									}
								}
							}
						}
					}
					float num148 = 300f;
					if ((double)position.Y > Main.worldSurface * 16.0)
					{
						num148 = 150f;
					}
					if (type >= 390 && type <= 392)
					{
						num148 = 500f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num148 = 250f;
						}
					}
					if (num135 < num148 + num131 && num137 == -1)
					{
						float num149 = num133 - (position.X + (float)(width / 2));
						if (num149 < -5f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num149 > 5f)
						{
							flag2 = true;
							flag = false;
						}
					}
					bool flag10 = false;
					if (type >= 390 && type <= 392 && localAI[1] > 0f)
					{
						flag10 = true;
						localAI[1] -= 1f;
					}
					if (num137 >= 0 && num135 < 800f + num131)
					{
						friendly = true;
						localAI[0] = num132;
						float num150 = num133 - (position.X + (float)(width / 2));
						if (num150 < -10f)
						{
							flag = true;
							flag2 = false;
						}
						else if (num150 > 10f)
						{
							flag2 = true;
							flag = false;
						}
						if (num134 < base.Center.Y - 100f && num150 > -50f && num150 < 50f && velocity.Y == 0f)
						{
							float num151 = Math.Abs(num134 - base.Center.Y);
							if (num151 < 120f)
							{
								velocity.Y = -10f;
							}
							else if (num151 < 210f)
							{
								velocity.Y = -13f;
							}
							else if (num151 < 270f)
							{
								velocity.Y = -15f;
							}
							else if (num151 < 310f)
							{
								velocity.Y = -17f;
							}
							else if (num151 < 380f)
							{
								velocity.Y = -18f;
							}
						}
						if (flag10)
						{
							friendly = false;
							if (velocity.X < 0f)
							{
								flag = true;
							}
							else if (velocity.X > 0f)
							{
								flag2 = true;
							}
						}
					}
					else
					{
						friendly = false;
					}
				}
			}
			if (ai[1] != 0f)
			{
				flag = false;
				flag2 = false;
			}
			else if (flag5 && localAI[0] == 0f)
			{
				direction = Main.player[owner].direction;
			}
			else if (type >= 390 && type <= 392)
			{
				int num152 = (int)(base.Center.X / 16f);
				int num153 = (int)(base.Center.Y / 16f);
				if (Main.tile[num152, num153] != null && Main.tile[num152, num153].wall > 0)
				{
					flag = (flag2 = false);
				}
			}
			if (type == 127)
			{
				if ((double)rotation > -0.1 && (double)rotation < 0.1)
				{
					rotation = 0f;
				}
				else if (rotation < 0f)
				{
					rotation += 0.1f;
				}
				else
				{
					rotation -= 0.1f;
				}
			}
			else if (type != 313 && !flag9)
			{
				rotation = 0f;
			}
			if (type < 390 || type > 392)
			{
				tileCollide = true;
			}
			float num154 = 0.08f;
			float num155 = 6.5f;
			if (type == 127)
			{
				num155 = 2f;
				num154 = 0.04f;
			}
			if (type == 112)
			{
				num155 = 6f;
				num154 = 0.06f;
			}
			if (type == 334)
			{
				num155 = 8f;
				num154 = 0.08f;
			}
			if (type == 268)
			{
				num155 = 8f;
				num154 = 0.4f;
			}
			if (type == 324)
			{
				num154 = 0.1f;
				num155 = 3f;
			}
			if (type == 858)
			{
				num154 = 0.3f;
				num155 = 7f;
			}
			if (flag5 || type == 266 || (type >= 390 && type <= 392) || type == 816 || type == 821 || type == 825 || type == 859 || type == 860 || type == 881 || type == 884 || type == 890 || type == 891 || type == 897 || type == 899 || type == 900 || type == 934)
			{
				num155 = 6f;
				num154 = 0.2f;
				if (num155 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num155 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					num154 = 0.3f;
				}
			}
			if (type == 875)
			{
				num155 = 7f;
				num154 = 0.25f;
				if (num155 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
				{
					num155 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					num154 = 0.35f;
				}
			}
			if (type >= 390 && type <= 392)
			{
				num154 *= 2f;
			}
			if (flag)
			{
				if ((double)velocity.X > -3.5)
				{
					velocity.X -= num154;
				}
				else
				{
					velocity.X -= num154 * 0.25f;
				}
			}
			else if (flag2)
			{
				if ((double)velocity.X < 3.5)
				{
					velocity.X += num154;
				}
				else
				{
					velocity.X += num154 * 0.25f;
				}
			}
			else
			{
				velocity.X *= 0.9f;
				if (velocity.X >= 0f - num154 && velocity.X <= num154)
				{
					velocity.X = 0f;
				}
			}
			if (type == 208)
			{
				velocity.X *= 0.95f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				flag = false;
				flag2 = false;
			}
			if (flag || flag2)
			{
				int num156 = (int)(position.X + (float)(width / 2)) / 16;
				int j2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (type == 236)
				{
					num156 += direction;
				}
				if (flag)
				{
					num156--;
				}
				if (flag2)
				{
					num156++;
				}
				num156 += (int)velocity.X;
				if (WorldGen.SolidTile(num156, j2))
				{
					flag4 = true;
				}
			}
			if (Main.player[owner].position.Y + (float)Main.player[owner].height - 8f > position.Y + (float)height)
			{
				flag3 = true;
			}
			if (type == 268 && frameCounter < 10)
			{
				flag4 = false;
			}
			if (type == 860 && velocity.X != 0f)
			{
				flag4 = true;
			}
			if ((type == 881 || type == 934) && velocity.X != 0f)
			{
				flag4 = true;
			}
			Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
			if (velocity.Y == 0f || type == 200)
			{
				if (!flag3 && (velocity.X < 0f || velocity.X > 0f))
				{
					int num157 = (int)(position.X + (float)(width / 2)) / 16;
					int j3 = (int)(position.Y + (float)(height / 2)) / 16 + 1;
					if (flag)
					{
						num157--;
					}
					if (flag2)
					{
						num157++;
					}
					WorldGen.SolidTile(num157, j3);
				}
				if (flag4)
				{
					int num158 = (int)(position.X + (float)(width / 2)) / 16;
					int num159 = (int)(position.Y + (float)height) / 16;
					if (WorldGen.SolidTileAllowBottomSlope(num158, num159) || Main.tile[num158, num159].halfBrick() || Main.tile[num158, num159].slope() > 0 || type == 200)
					{
						if (type == 200)
						{
							velocity.Y = -3.1f;
						}
						else
						{
							try
							{
								num158 = (int)(position.X + (float)(width / 2)) / 16;
								num159 = (int)(position.Y + (float)(height / 2)) / 16;
								if (flag)
								{
									num158--;
								}
								if (flag2)
								{
									num158++;
								}
								num158 += (int)velocity.X;
								if (!WorldGen.SolidTile(num158, num159 - 1) && !WorldGen.SolidTile(num158, num159 - 2))
								{
									velocity.Y = -5.1f;
								}
								else if (!WorldGen.SolidTile(num158, num159 - 2))
								{
									velocity.Y = -7.1f;
								}
								else if (WorldGen.SolidTile(num158, num159 - 5))
								{
									velocity.Y = -11.1f;
								}
								else if (WorldGen.SolidTile(num158, num159 - 4))
								{
									velocity.Y = -10.1f;
								}
								else
								{
									velocity.Y = -9.1f;
								}
							}
							catch
							{
								velocity.Y = -9.1f;
							}
						}
						if (type == 127)
						{
							ai[0] = 1f;
						}
					}
				}
				else if (type == 266 && (flag || flag2))
				{
					velocity.Y -= 6f;
				}
			}
			if (velocity.X > num155)
			{
				velocity.X = num155;
			}
			if (velocity.X < 0f - num155)
			{
				velocity.X = 0f - num155;
			}
			if (velocity.X < 0f)
			{
				direction = -1;
			}
			if (velocity.X > 0f)
			{
				direction = 1;
			}
			if (velocity.X > num154 && flag2)
			{
				direction = 1;
			}
			if (velocity.X < 0f - num154 && flag)
			{
				direction = -1;
			}
			if (type != 313)
			{
				if (direction == -1)
				{
					spriteDirection = 1;
				}
				if (direction == 1)
				{
					spriteDirection = -1;
				}
			}
			if (type == 398)
			{
				spriteDirection = direction;
			}
			bool flag11 = position.X - oldPosition.X == 0f;
			if (type == 816)
			{
				if (velocity.Y != 0f)
				{
					frame = 4;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 0 || frame > 3)
					{
						frame = 0;
					}
				}
				else
				{
					int num160 = 5;
					float num161 = velocity.Length();
					if (num161 > 4f)
					{
						num160 = 3;
					}
					else if (num161 > 2f)
					{
						num160 = 4;
					}
					if (++frameCounter > num160)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 4 || frame > 10)
					{
						frame = 4;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (type == 860)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					if (frame >= 5)
					{
						frame = 5;
						frameCounter = 0;
					}
					else if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
				}
				else if (Math.Abs(velocity.X) < 1f)
				{
					if (localAI[0] > 800f)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frameCounter = 0;
							frame++;
							if (frame > 3)
							{
								frame = 3;
							}
						}
						localAI[0] += 1f;
						if (localAI[0] > 850f)
						{
							localAI[0] = 0f;
						}
						if (frame == 3 && localAI[0] == 820f)
						{
							for (int num162 = 0; num162 < 3 + Main.rand.Next(3); num162++)
							{
								int num163 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
								Main.gore[num163].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * (float)(-spriteDirection), 0f - (2f + (float)Main.rand.Next(4) * 0.3f));
							}
						}
					}
					else if (frame == 0)
					{
						localAI[0] += 1f;
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						localAI[0] = 0f;
						if (frame > 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						if (++frameCounter > 4)
						{
							frame--;
							frameCounter = 0;
						}
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (type == 859)
			{
				if (velocity.Y != 0f)
				{
					frame = 4;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (frame == 6)
					{
						if (++frameCounter > 5)
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (frame > 3)
					{
						frame = 6;
						frameCounter = 0;
					}
					else
					{
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
				}
				else
				{
					float num164 = velocity.Length();
					int num165 = 8;
					if (num164 < 3f)
					{
						num165 = 4;
					}
					if (num164 < 1f)
					{
						num165 = 2;
					}
					frameCounter += (int)num164;
					if (frameCounter > num165)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5 || frame > 17)
					{
						frame = 5;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 858)
			{
				if (velocity.Y != 0f)
				{
					frame = 1;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
				}
				else
				{
					float num166 = velocity.Length();
					frameCounter += (int)num166;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 900)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 899)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 897)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 891)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = Main.player[owner].direction;
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 8)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 890)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					frame = 1;
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
					if (frame < 2)
					{
						frame = 2;
						frameCounter = 0;
					}
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 884)
			{
				spriteDirection = direction;
				if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						frame = 9;
					}
					else
					{
						frame = 1;
					}
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.5f);
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 8)
					{
						frame = 2;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 881 || type == 934)
			{
				spriteDirection = 1;
				if (Main.player[owner].Center.X < base.Center.X)
				{
					spriteDirection = -1;
				}
				if (velocity.Y > 0f)
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						if (frame >= 2)
						{
							frame = 2;
						}
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter++;
					if (frameCounter > 2)
					{
						frame++;
						if (frame >= 5)
						{
							frame = 0;
						}
						frameCounter = 0;
					}
				}
				else if (frame == 0)
				{
					frame = 0;
				}
				else if (++frameCounter > 3)
				{
					frame++;
					if (frame >= 6)
					{
						frame = 0;
					}
					frameCounter = 0;
				}
				if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
				{
					if (velocity.Y > -4f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
				}
				else
				{
					velocity.Y += 0.4f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 875)
			{
				if (velocity.Y != 0f)
				{
					if (velocity.Y < 0f)
					{
						frame = 3;
					}
					else
					{
						frame = 6;
					}
					frameCounter = 0;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					frame = 0;
					frameCounter = 0;
				}
				else
				{
					frameCounter += 1 + (int)Math.Abs(velocity.X * 0.75f);
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 6)
					{
						frame = 0;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 854)
			{
				if (velocity.Y != 0f)
				{
					frame = 7;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (++frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 0 || frame > 3)
					{
						frame = 0;
					}
				}
				else
				{
					int num167 = 3;
					float num168 = velocity.Length();
					if (num168 > 4f)
					{
						num167 = 1;
					}
					else if (num168 > 2f)
					{
						num167 = 2;
					}
					if (++frameCounter > num167)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 4 || frame > 12)
					{
						frame = 4;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 825)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					frame = 12;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					if (frame >= 1 && frame <= 2)
					{
						localAI[0] = 0f;
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 2)
						{
							frame = 0;
						}
					}
					else if (frame >= 3 && frame <= 11)
					{
						localAI[0] = 0f;
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 0;
						}
					}
					else
					{
						if (frame == 13)
						{
							if (++frameCounter > 8)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame == 14)
							{
								frame = 0;
							}
						}
						if (frame != 0)
						{
							frame = 13;
						}
						else
						{
							frame = 0;
						}
						if (frame == 0)
						{
							localAI[0] += 1f;
							if (localAI[0] > 300f && Main.rand.Next(50) == 0)
							{
								switch (Main.rand.Next(2))
								{
								case 0:
									frame = 1;
									break;
								case 1:
									frame = 3;
									break;
								}
							}
						}
					}
				}
				else
				{
					localAI[0] = 0f;
					int num169 = 3;
					float num170 = velocity.Length();
					if (num170 > 4f)
					{
						num169 = 2;
					}
					else if (num170 > 2f)
					{
						num169 = 1;
					}
					if (++frameCounter > num169)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 13)
					{
						frame = 13;
					}
					if (frame > 19)
					{
						frame = 14;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 821)
			{
				if (velocity.Y != 0f)
				{
					localAI[0] = 0f;
					frame = 12;
				}
				else if (flag11)
				{
					spriteDirection = -1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = 1;
					}
					localAI[0] += 1f;
					if (localAI[0] > 400f)
					{
						int num171 = 7;
						if (frame == 9)
						{
							num171 = 25;
						}
						if (++frameCounter > num171)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5)
						{
							frame = 5;
						}
						if (frame > 11)
						{
							localAI[0] = 0f;
							frame = 0;
						}
					}
					else
					{
						if (++frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 4)
						{
							frame = 0;
						}
					}
				}
				else
				{
					localAI[0] = 0f;
					int num172 = 4;
					float num173 = velocity.Length();
					if (num173 > 3f)
					{
						num172 = 3;
					}
					if (num173 > 5f)
					{
						num172 = 2;
					}
					if (++frameCounter > num172)
					{
						frame++;
						if (num172 == 0)
						{
							frame++;
						}
						frameCounter = 0;
					}
					if (frame < 13 || frame > 18)
					{
						frame = 13;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (flag5)
			{
				if (ai[1] > 0f)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						frame = 1;
					}
					if (frame != 0)
					{
						frameCounter++;
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 4)
						{
							frame = 0;
						}
					}
				}
				else if (velocity.Y == 0f)
				{
					localAI[1] = 0f;
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5)
						{
							frame = 5;
						}
						if (frame >= 11)
						{
							frame = 5;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				_ = velocity;
			}
			else if (type == 268)
			{
				if (velocity.Y == 0f)
				{
					if (frame > 5)
					{
						frameCounter = 0;
					}
					if (flag11)
					{
						int num174 = 3;
						frameCounter++;
						if (frameCounter < num174)
						{
							frame = 0;
						}
						else if (frameCounter < num174 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num174 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num174 * 4)
						{
							frame = 3;
						}
						else
						{
							frameCounter = num174 * 4;
						}
					}
					else
					{
						velocity.X *= 0.8f;
						frameCounter++;
						int num175 = 3;
						if (frameCounter < num175)
						{
							frame = 0;
						}
						else if (frameCounter < num175 * 2)
						{
							frame = 1;
						}
						else if (frameCounter < num175 * 3)
						{
							frame = 2;
						}
						else if (frameCounter < num175 * 4)
						{
							frame = 3;
						}
						else if (flag || flag2)
						{
							velocity.X *= 2f;
							frame = 4;
							velocity.Y = -6.1f;
							frameCounter = 0;
							for (int num176 = 0; num176 < 4; num176++)
							{
								int num177 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 4, 5);
								Main.dust[num177].velocity += velocity;
								Main.dust[num177].velocity *= 0.4f;
							}
						}
						else
						{
							frameCounter = num175 * 4;
						}
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				else
				{
					frame = 4;
					frameCounter = 3;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 269)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						int num178 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, 76);
						Main.dust[num178].noGravity = true;
						Main.dust[num178].velocity *= 0.3f;
						Main.dust[num178].noLight = true;
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 2;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 313)
			{
				int i3 = (int)(base.Center.X / 16f);
				int num179 = (int)(base.Center.Y / 16f);
				int num180 = 0;
				Tile tileSafely2 = Framing.GetTileSafely(i3, num179);
				Tile tileSafely3 = Framing.GetTileSafely(i3, num179 - 1);
				Tile tileSafely4 = Framing.GetTileSafely(i3, num179 + 1);
				if (tileSafely2.wall > 0)
				{
					num180++;
				}
				if (tileSafely3.wall > 0)
				{
					num180++;
				}
				if (tileSafely4.wall > 0)
				{
					num180++;
				}
				if (num180 > 1)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					Vector2 vector14 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num181 = Main.player[owner].Center.X - vector14.X;
					float num182 = Main.player[owner].Center.Y - vector14.Y;
					float num183 = (float)Math.Sqrt(num181 * num181 + num182 * num182);
					float num184 = 4f / num183;
					num181 *= num184;
					num182 *= num184;
					if (num183 < 120f)
					{
						velocity.X *= 0.9f;
						velocity.Y *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else
					{
						velocity.X = (velocity.X * 9f + num181) / 10f;
						velocity.Y = (velocity.Y * 9f + num182) / 10f;
					}
					if (num183 >= 120f)
					{
						spriteDirection = direction;
						rotation = (float)Math.Atan2(velocity.Y * (float)(-direction), velocity.X * (float)(-direction));
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 5;
					}
					if (frame < 5)
					{
						frame = 10;
					}
				}
				else
				{
					rotation = 0f;
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					position.Y += height;
					height = 30;
					position.Y -= height;
					position.X += width / 2;
					width = 30;
					position.X -= width / 2;
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 4;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
			}
			else if (type >= 390 && type <= 392)
			{
				int i4 = (int)(base.Center.X / 16f);
				int num185 = (int)(base.Center.Y / 16f);
				int num186 = 0;
				Tile tileSafely5 = Framing.GetTileSafely(i4, num185);
				Tile tileSafely6 = Framing.GetTileSafely(i4, num185 - 1);
				Tile tileSafely7 = Framing.GetTileSafely(i4, num185 + 1);
				if (tileSafely5.wall > 0)
				{
					num186++;
				}
				if (tileSafely6.wall > 0)
				{
					num186++;
				}
				if (tileSafely7.wall > 0)
				{
					num186++;
				}
				if (num186 > 1)
				{
					position.Y += height;
					height = 34;
					position.Y -= height;
					position.X += width / 2;
					width = 34;
					position.X -= width / 2;
					float num187 = 9f;
					float num188 = 40 * (minionPos + 1);
					Vector2 vector15 = Main.player[owner].Center - base.Center;
					if (flag8)
					{
						vector15 = vector12;
						num188 = 10f;
					}
					else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
					{
						ai[0] = 1f;
					}
					if (vector15.Length() < num188)
					{
						velocity *= 0.9f;
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
						{
							velocity *= 0f;
						}
					}
					else if (vector15.Length() < 800f || !flag8)
					{
						velocity = (velocity * 9f + Vector2.Normalize(vector15) * num187) / 10f;
					}
					if (vector15.Length() >= num188)
					{
						spriteDirection = direction;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
					else
					{
						rotation = vector15.ToRotation() + (float)Math.PI / 2f;
					}
					frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
					if (frameCounter > 5)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 4;
					}
					if (frame < 4)
					{
						frame = 7;
					}
				}
				else
				{
					if (!flag9)
					{
						rotation = 0f;
					}
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
					position.Y += height;
					height = 30;
					position.Y -= height;
					position.X += width / 2;
					width = 30;
					position.X -= width / 2;
					if (!flag8 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
					{
						ai[0] = 1f;
					}
					if (!flag9 && frame >= 4 && frame <= 7)
					{
						Vector2 vector16 = Main.player[owner].Center - base.Center;
						if (flag8)
						{
							vector16 = vector12;
						}
						float num189 = 0f - vector16.Y;
						if (!(vector16.Y > 0f))
						{
							if (num189 < 120f)
							{
								velocity.Y = -10f;
							}
							else if (num189 < 210f)
							{
								velocity.Y = -13f;
							}
							else if (num189 < 270f)
							{
								velocity.Y = -15f;
							}
							else if (num189 < 310f)
							{
								velocity.Y = -17f;
							}
							else if (num189 < 380f)
							{
								velocity.Y = -18f;
							}
						}
					}
					if (flag9)
					{
						frameCounter++;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 8)
						{
							frame = 4;
						}
						if (frame <= 3)
						{
							frame = 7;
						}
					}
					else if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag11)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 2)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 3;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
			}
			else if (type == 314)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 1;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 7;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 319)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 8)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 236)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 499)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 2)
						{
							frame = 2;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 8)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 765)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						if (frame < 1)
						{
							frame = 1;
						}
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 6)
						{
							frame = 1;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 0;
					frameCounter = 0;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 266)
			{
				if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
				{
					if (flag11)
					{
						frameCounter++;
					}
					else
					{
						frameCounter += 3;
					}
				}
				else
				{
					frameCounter += 5;
				}
				if (frameCounter >= 20)
				{
					frameCounter -= 20;
					frame++;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
				{
					if (velocity.Y > -4f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
				}
				else
				{
					velocity.Y += 0.4f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 334)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						if (frame > 0)
						{
							frameCounter += 2;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs((double)velocity.X * 0.75);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7 || frame < 1)
						{
							frame = 1;
						}
					}
					else if (frame > 0)
					{
						frameCounter += 2;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 353)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 111)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 7)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 4;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 6;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 112)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 3)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y < 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				else if (velocity.Y > 0f)
				{
					frameCounter = 0;
					frame = 2;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 127)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 0;
					frameCounter = 0;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 200)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.1f;
					frameCounter++;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 9)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 208)
			{
				if (velocity.Y == 0f && flag11)
				{
					if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
					{
						direction = -1;
					}
					else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2))
					{
						direction = 1;
					}
					rotation = 0f;
					frame = 0;
				}
				else
				{
					rotation = velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				velocity.Y += 0.1f;
				if (velocity.Y > 4f)
				{
					velocity.Y = 4f;
				}
			}
			else if (type == 209)
			{
				if (alpha > 0)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frame = 1;
					frameCounter = 0;
					rotation = 0f;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 324)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 5)
						{
							frame = 2;
						}
						if (frame < 2)
						{
							frame = 2;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					frameCounter = 0;
					frame = 1;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 14f)
				{
					velocity.Y = 14f;
				}
			}
			else if (type == 210)
			{
				if (velocity.Y == 0f)
				{
					if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else
				{
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (type == 398)
			{
				if (velocity.Y == 0f)
				{
					if (flag11)
					{
						frame = 0;
						frameCounter = 0;
					}
					else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
					{
						frameCounter += (int)Math.Abs(velocity.X);
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame >= 5)
						{
							frame = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
				}
				else if (velocity.Y != 0f)
				{
					frameCounter = 0;
					frame = 5;
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
		}
		if (type == 891)
		{
			_ = Main.player[owner];
			DelegateMethods.v3_1 = new Vector3(1f, 0.61f, 0.16f) * 1.5f;
			Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
		}
	}

	private void AI_062()
	{
		if (type == 373)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].hornetMinion = false;
			}
			if (Main.player[owner].hornetMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 375)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].impMinion = false;
			}
			if (Main.player[owner].impMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 407)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].sharknadoMinion = false;
			}
			if (Main.player[owner].sharknadoMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 423)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].UFOMinion = false;
			}
			if (Main.player[owner].UFOMinion)
			{
				timeLeft = 2;
			}
		}
		if (type == 613)
		{
			if (Main.player[owner].dead)
			{
				Main.player[owner].stardustMinion = false;
			}
			if (Main.player[owner].stardustMinion)
			{
				timeLeft = 2;
			}
			Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
		}
		if (type == 423)
		{
			if (ai[0] == 2f)
			{
				ai[1] -= 1f;
				tileCollide = false;
				if (ai[1] > 3f)
				{
					int num = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), velocity.X, velocity.Y, 100);
					Main.dust[num].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
					Main.dust[num].velocity /= 2.5f;
					Main.dust[num].noGravity = true;
					Main.dust[num].noLight = true;
					Main.dust[num].frame.Y = 80;
				}
				if (ai[1] != 0f)
				{
					return;
				}
				ai[1] = 30f;
				ai[0] = 0f;
				velocity /= 5f;
				velocity.Y = 0f;
				extraUpdates = 0;
				numUpdates = 0;
				netUpdate = true;
				extraUpdates = 0;
				numUpdates = 0;
			}
			if (extraUpdates > 1)
			{
				extraUpdates = 0;
			}
			if (numUpdates > 1)
			{
				numUpdates = 0;
			}
		}
		if (type == 613)
		{
			if (ai[0] == 2f)
			{
				ai[1] -= 1f;
				tileCollide = false;
				if (ai[1] > 3f)
				{
					if (numUpdates < 20)
					{
						for (int i = 0; i < 3; i++)
						{
							Dust obj = Main.dust[Dust.NewDust(position, width, height, 229)];
							obj.noGravity = true;
							obj.position = base.Center;
							obj.velocity *= 3f;
							obj.velocity += velocity * 3f;
							obj.fadeIn = 1f;
						}
					}
					float num2 = 2f - (float)numUpdates / 30f;
					if (scale > 0f)
					{
						float num3 = 2f;
						for (int j = 0; (float)j < num3; j++)
						{
							Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 229)];
							obj2.noGravity = true;
							obj2.position = base.Center + Vector2.UnitY.RotatedBy((float)numUpdates * ((float)Math.PI / 30f) + (float)whoAmI * ((float)Math.PI / 4f) + (float)Math.PI / 2f) * (height / 2) - velocity * ((float)j / num3);
							obj2.velocity = velocity / 3f;
							obj2.fadeIn = num2 / 2f;
							obj2.scale = num2;
						}
					}
				}
				if (ai[1] != 0f)
				{
					return;
				}
				ai[1] = 30f;
				ai[0] = 0f;
				velocity /= 5f;
				velocity.Y = 0f;
				extraUpdates = 0;
				numUpdates = 0;
				netUpdate = true;
				float num4 = 15f;
				for (int k = 0; (float)k < num4; k++)
				{
					Dust dust = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust.noGravity = true;
					dust.position = base.Center - velocity * 5f;
					dust.velocity *= 3f;
					dust.velocity += velocity * 3f;
					dust.fadeIn = 1f;
					if (Main.rand.Next(3) != 0)
					{
						dust.fadeIn = 2f;
						dust.scale = 2f;
						dust.velocity /= 8f;
					}
				}
				for (int l = 0; (float)l < num4; l++)
				{
					Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust2.noGravity = true;
					dust2.position = base.Center;
					dust2.velocity *= 3f;
					dust2.velocity += velocity * 3f;
					dust2.fadeIn = 1f;
					if (Main.rand.Next(3) != 0)
					{
						dust2.fadeIn = 2f;
						dust2.scale = 2f;
						dust2.velocity /= 8f;
					}
				}
				extraUpdates = 0;
				numUpdates = 0;
			}
			if (extraUpdates > 1)
			{
				extraUpdates = 0;
			}
			if (numUpdates > 1)
			{
				numUpdates = 0;
			}
		}
		if (type == 423 && localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		if (type == 613 && localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		float num5 = 0.05f;
		float num6 = width;
		if (type == 407)
		{
			num5 = 0.1f;
			num6 *= 2f;
		}
		for (int m = 0; m < 1000; m++)
		{
			if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == owner && Main.projectile[m].type == type && Math.Abs(position.X - Main.projectile[m].position.X) + Math.Abs(position.Y - Main.projectile[m].position.Y) < num6)
			{
				if (position.X < Main.projectile[m].position.X)
				{
					velocity.X -= num5;
				}
				else
				{
					velocity.X += num5;
				}
				if (position.Y < Main.projectile[m].position.Y)
				{
					velocity.Y -= num5;
				}
				else
				{
					velocity.Y += num5;
				}
			}
		}
		Vector2 vector = position;
		float num7 = 400f;
		if (type == 423)
		{
			num7 = 300f;
		}
		if (type == 613)
		{
			num7 = 300f;
		}
		num7 = 2000f;
		bool flag = false;
		int num8 = -1;
		tileCollide = true;
		if (type == 407)
		{
			tileCollide = false;
			if (Collision.SolidCollision(position, width, height))
			{
				alpha += 20;
				if (alpha > 150)
				{
					alpha = 150;
				}
			}
			else
			{
				alpha -= 50;
				if (alpha < 60)
				{
					alpha = 60;
				}
			}
		}
		if (type == 407 || type == 613 || type == 423)
		{
			Vector2 center = Main.player[owner].Center;
			Vector2 vector2 = new Vector2(0.5f);
			if (type == 423)
			{
				vector2.Y = 0f;
			}
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				Vector2 vector3 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * vector2;
				float num9 = num7 * 3f;
				float num10 = Vector2.Distance(vector3, center);
				if (num10 < num9 && !flag && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
				{
					num7 = num10;
					vector = vector3;
					flag = true;
					num8 = ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			if (!flag)
			{
				for (int n = 0; n < 200; n++)
				{
					NPC nPC = Main.npc[n];
					if (nPC.CanBeChasedBy(this))
					{
						Vector2 vector4 = nPC.position + nPC.Size * vector2;
						float num11 = Vector2.Distance(vector4, center);
						if (!(num11 >= num7) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
						{
							num7 = num11;
							vector = vector4;
							flag = true;
							num8 = n;
						}
					}
				}
			}
		}
		else
		{
			NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
			{
				float num12 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
				float num13 = num7 * 3f;
				if (num12 < num13 && !flag && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
				{
					num7 = num12;
					vector = ownerMinionAttackTargetNPC2.Center;
					flag = true;
					num8 = ownerMinionAttackTargetNPC2.whoAmI;
				}
			}
			if (!flag)
			{
				for (int num14 = 0; num14 < 200; num14++)
				{
					NPC nPC2 = Main.npc[num14];
					if (nPC2.CanBeChasedBy(this))
					{
						float num15 = Vector2.Distance(nPC2.Center, base.Center);
						if (!(num15 >= num7) && Collision.CanHitLine(position, width, height, nPC2.position, nPC2.width, nPC2.height))
						{
							num7 = num15;
							vector = nPC2.Center;
							flag = true;
							num8 = num14;
						}
					}
				}
			}
		}
		int num16 = 500;
		if (flag)
		{
			num16 = 1000;
		}
		if (flag && type == 423)
		{
			num16 = 1200;
		}
		if (flag && type == 613)
		{
			num16 = 1350;
		}
		Player player = Main.player[owner];
		if (Vector2.Distance(player.Center, base.Center) > (float)num16)
		{
			ai[0] = 1f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			tileCollide = false;
		}
		if (flag && ai[0] == 0f)
		{
			Vector2 vector5 = vector - base.Center;
			float num17 = vector5.Length();
			vector5.Normalize();
			if (type == 423)
			{
				vector5 = vector - Vector2.UnitY * 80f;
				int num18 = (int)vector5.Y / 16;
				if (num18 < 0)
				{
					num18 = 0;
				}
				Tile tile = Main.tile[(int)vector5.X / 16, num18];
				if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
				{
					vector5 += Vector2.UnitY * 16f;
					tile = Main.tile[(int)vector5.X / 16, (int)vector5.Y / 16];
					if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
					{
						vector5 += Vector2.UnitY * 16f;
					}
				}
				vector5 -= base.Center;
				num17 = vector5.Length();
				vector5.Normalize();
				if (num17 > 300f && num17 <= 800f && localAI[0] == 0f)
				{
					ai[0] = 2f;
					ai[1] = (int)(num17 / 10f);
					extraUpdates = (int)ai[1];
					velocity = vector5 * 10f;
					localAI[0] = 60f;
					return;
				}
			}
			if (type == 613)
			{
				vector5 = vector;
				Vector2 vector6 = base.Center - vector5;
				if (vector6 == Vector2.Zero)
				{
					vector6 = -Vector2.UnitY;
				}
				vector6.Normalize();
				vector5 += vector6 * 60f;
				int num19 = (int)vector5.Y / 16;
				if (num19 < 0)
				{
					num19 = 0;
				}
				Tile tile2 = Main.tile[(int)vector5.X / 16, num19];
				if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
				{
					vector5 += Vector2.UnitY * 16f;
					tile2 = Main.tile[(int)vector5.X / 16, (int)vector5.Y / 16];
					if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
					{
						vector5 += Vector2.UnitY * 16f;
					}
				}
				vector5 -= base.Center;
				num17 = vector5.Length();
				vector5.Normalize();
				if (num17 > 400f && num17 <= 800f && localAI[0] == 0f)
				{
					ai[0] = 2f;
					ai[1] = (int)(num17 / 10f);
					extraUpdates = (int)ai[1];
					velocity = vector5 * 10f;
					localAI[0] = 60f;
					return;
				}
			}
			if (type == 407)
			{
				if (num17 > 400f)
				{
					float num20 = 3f;
					vector5 *= num20;
					velocity = (velocity * 20f + vector5) / 21f;
				}
				else
				{
					velocity *= 0.96f;
				}
			}
			if (num17 > 200f)
			{
				float num21 = 6f;
				vector5 *= num21;
				velocity.X = (velocity.X * 40f + vector5.X) / 41f;
				velocity.Y = (velocity.Y * 40f + vector5.Y) / 41f;
			}
			else if (type == 423 || type == 613)
			{
				if (num17 > 70f && num17 < 130f)
				{
					float num22 = 7f;
					if (num17 < 100f)
					{
						num22 = -3f;
					}
					vector5 *= num22;
					velocity = (velocity * 20f + vector5) / 21f;
					if (Math.Abs(vector5.X) > Math.Abs(vector5.Y))
					{
						velocity.X = (velocity.X * 10f + vector5.X) / 11f;
					}
				}
				else
				{
					velocity *= 0.97f;
				}
			}
			else if (type == 375)
			{
				if (num17 < 150f)
				{
					float num23 = 4f;
					vector5 *= 0f - num23;
					velocity.X = (velocity.X * 40f + vector5.X) / 41f;
					velocity.Y = (velocity.Y * 40f + vector5.Y) / 41f;
				}
				else
				{
					velocity *= 0.97f;
				}
			}
			else if (velocity.Y > -1f)
			{
				velocity.Y -= 0.1f;
			}
		}
		else
		{
			if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
			{
				ai[0] = 1f;
			}
			float num24 = 6f;
			if (ai[0] == 1f)
			{
				num24 = 15f;
			}
			if (type == 407)
			{
				num24 = 9f;
			}
			Vector2 center2 = base.Center;
			Vector2 vector7 = player.Center - center2 + new Vector2(0f, -60f);
			if (type == 407)
			{
				vector7 += new Vector2(0f, 40f);
			}
			if (type == 375)
			{
				ai[1] = 3600f;
				netUpdate = true;
				vector7 = player.Center - center2;
				int num25 = 1;
				for (int num26 = 0; num26 < whoAmI; num26++)
				{
					if (Main.projectile[num26].active && Main.projectile[num26].owner == owner && Main.projectile[num26].type == type)
					{
						num25++;
					}
				}
				vector7.X -= 10 * Main.player[owner].direction;
				vector7.X -= num25 * 40 * Main.player[owner].direction;
				vector7.Y -= 10f;
			}
			float num27 = vector7.Length();
			if (num27 > 200f && num24 < 9f)
			{
				num24 = 9f;
			}
			if (type == 375)
			{
				num24 = (int)((double)num24 * 0.75);
			}
			if (num27 < 100f && ai[0] == 1f && !Collision.SolidCollision(position, width, height))
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			if (num27 > 2000f)
			{
				position.X = Main.player[owner].Center.X - (float)(width / 2);
				position.Y = Main.player[owner].Center.Y - (float)(width / 2);
			}
			if (type == 375)
			{
				if (num27 > 10f)
				{
					vector7.Normalize();
					if (num27 < 50f)
					{
						num24 /= 2f;
					}
					vector7 *= num24;
					velocity = (velocity * 20f + vector7) / 21f;
				}
				else
				{
					direction = Main.player[owner].direction;
					velocity *= 0.9f;
				}
			}
			else if (type == 407)
			{
				if (Math.Abs(vector7.X) > 40f || Math.Abs(vector7.Y) > 10f)
				{
					vector7.Normalize();
					vector7 *= num24;
					vector7 *= new Vector2(1.25f, 0.65f);
					velocity = (velocity * 20f + vector7) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
			}
			else if (num27 > 70f)
			{
				vector7.Normalize();
				vector7 *= num24;
				velocity = (velocity * 20f + vector7) / 21f;
			}
			else
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					velocity.X = -0.15f;
					velocity.Y = -0.05f;
				}
				velocity *= 1.01f;
			}
		}
		rotation = velocity.X * 0.05f;
		frameCounter++;
		if (type == 373)
		{
			if (frameCounter > 1)
			{
				frame++;
				frameCounter = 0;
			}
			if (frame > 2)
			{
				frame = 0;
			}
		}
		if (type == 375)
		{
			if (frameCounter >= 16)
			{
				frameCounter = 0;
			}
			frame = frameCounter / 4;
			if (ai[1] > 0f && ai[1] < 16f)
			{
				frame += 4;
			}
			if (Main.rand.Next(6) == 0)
			{
				int num28 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num28].velocity *= 0.3f;
				Main.dust[num28].noGravity = true;
				Main.dust[num28].noLight = true;
			}
		}
		if (type == 407)
		{
			int num29 = 2;
			if (frameCounter >= 6 * num29)
			{
				frameCounter = 0;
			}
			frame = frameCounter / num29;
			if (Main.rand.Next(5) == 0)
			{
				int num30 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 217, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num30].velocity *= 0.3f;
				Main.dust[num30].noGravity = true;
				Main.dust[num30].noLight = true;
			}
		}
		if (type == 423 || type == 613)
		{
			int num31 = 3;
			if (frameCounter >= 4 * num31)
			{
				frameCounter = 0;
			}
			frame = frameCounter / num31;
		}
		if (velocity.X > 0f)
		{
			spriteDirection = (direction = -1);
		}
		else if (velocity.X < 0f)
		{
			spriteDirection = (direction = 1);
		}
		if (type == 373)
		{
			if (ai[1] > 0f)
			{
				ai[1] += Main.rand.Next(1, 4);
			}
			if (ai[1] > 90f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 375)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) == 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 90f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 407)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 50f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 423)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 33f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		else if (type == 613)
		{
			if (ai[1] > 0f)
			{
				ai[1] += 1f;
				if (Main.rand.Next(3) != 0)
				{
					ai[1] += 1f;
				}
			}
			if (ai[1] > 60f)
			{
				ai[1] = 0f;
				netUpdate = true;
			}
		}
		if (ai[0] != 0f)
		{
			return;
		}
		float num32 = 0f;
		int num33 = 0;
		if (type == 373)
		{
			num32 = 10f;
			num33 = 374;
		}
		else if (type == 375)
		{
			num32 = 11f;
			num33 = 376;
		}
		else if (type == 407)
		{
			num32 = 20f;
			num33 = 408;
		}
		else if (type == 423)
		{
			num32 = 4f;
			num33 = 433;
		}
		else if (type == 613)
		{
			num32 = 14f;
			num33 = 614;
		}
		if (!flag)
		{
			return;
		}
		if (type == 375)
		{
			if ((vector - base.Center).X > 0f)
			{
				spriteDirection = (direction = -1);
			}
			else if ((vector - base.Center).X < 0f)
			{
				spriteDirection = (direction = 1);
			}
		}
		if (type == 407 && Collision.SolidCollision(position, width, height))
		{
			return;
		}
		if (type == 423)
		{
			if (Math.Abs((vector - base.Center).ToRotation() - (float)Math.PI / 2f) > (float)Math.PI / 4f)
			{
				velocity += Vector2.Normalize(vector - base.Center - Vector2.UnitY * 80f);
			}
			else if (!((vector - base.Center).Length() > 400f) && ai[1] == 0f)
			{
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 vector8 = vector - base.Center;
					vector8.Normalize();
					vector8 *= num32;
					NewProjectile(base.Center.X, base.Center.Y, vector8.X, vector8.Y, num33, damage, knockBack, Main.myPlayer);
					netUpdate = true;
				}
			}
		}
		else if (ai[1] == 0f && type == 613)
		{
			if ((vector - base.Center).Length() > 500f || ai[1] != 0f)
			{
				return;
			}
			ai[1] += 1f;
			if (Main.myPlayer == owner)
			{
				Vector2 vector9 = vector - base.Center;
				vector9.Normalize();
				vector9 *= num32;
				int num34 = NewProjectile(base.Center.X, base.Center.Y, vector9.X, vector9.Y, num33, damage, knockBack, Main.myPlayer, 0f, num8);
				Main.projectile[num34].timeLeft = 300;
				Main.projectile[num34].netUpdate = true;
				velocity -= vector9 / 3f;
				netUpdate = true;
			}
			for (int num35 = 0; num35 < 5; num35++)
			{
				int num36 = width / 4;
				_ = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
				int num37 = Dust.NewDust(base.Center - Vector2.One * num36, num36 * 2, num36 * 2, 88);
				Dust dust3 = Main.dust[num37];
				Vector2 vector10 = Vector2.Normalize(dust3.position - base.Center);
				dust3.position = base.Center + vector10 * num36 * scale - new Vector2(4f);
				if (num35 < 30)
				{
					dust3.velocity = vector10 * dust3.velocity.Length() * 2f;
				}
				else
				{
					dust3.velocity = 2f * vector10 * Main.rand.Next(45, 91) / 10f;
				}
				dust3.noGravity = true;
				dust3.scale = 0.7f + Main.rand.NextFloat();
			}
		}
		else if (ai[1] == 0f)
		{
			Vector2 vector11 = vector - base.Center;
			ai[1] += 1f;
			if (Main.myPlayer == owner)
			{
				vector11.Normalize();
				vector11 *= num32;
				int num38 = NewProjectile(base.Center.X, base.Center.Y, vector11.X, vector11.Y, num33, damage, knockBack, Main.myPlayer);
				Main.projectile[num38].timeLeft = 300;
				Main.projectile[num38].netUpdate = true;
				netUpdate = true;
			}
		}
	}

	private void AI_075()
	{
		Player player = Main.player[owner];
		float num = (float)Math.PI / 2f;
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		int num2 = 2;
		float num3 = 0f;
		if (type == 439)
		{
			ai[0] += 1f;
			int num4 = 0;
			if (ai[0] >= 40f)
			{
				num4++;
			}
			if (ai[0] >= 80f)
			{
				num4++;
			}
			if (ai[0] >= 120f)
			{
				num4++;
			}
			int num5 = 24;
			int num6 = 6;
			ai[1] += 1f;
			bool flag = false;
			if (ai[1] >= (float)(num5 - num6 * num4))
			{
				ai[1] = 0f;
				flag = true;
			}
			frameCounter += 1 + num4;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= 6)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num5 - num6 * num4;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item91, position);
				}
			}
			if (ai[1] == 1f && ai[0] != 1f)
			{
				Vector2 spinningpoint = Vector2.UnitX * 24f;
				spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector2 = base.Center + spinningpoint;
				for (int i = 0; i < 2; i++)
				{
					int num7 = Dust.NewDust(vector2 - Vector2.One * 8f, 16, 16, 135, velocity.X / 2f, velocity.Y / 2f, 100);
					Main.dust[num7].velocity *= 0.66f;
					Main.dust[num7].noGravity = true;
					Main.dust[num7].scale = 1.4f;
				}
			}
			if (flag && Main.myPlayer == owner)
			{
				if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, pay: true) && !player.noItems && !player.CCed)
				{
					float num8 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector3 = vector;
					Vector2 value = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector3;
					if (player.gravDir == -1f)
					{
						value.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector3.Y;
					}
					Vector2 vector4 = Vector2.Normalize(value);
					if (float.IsNaN(vector4.X) || float.IsNaN(vector4.Y))
					{
						vector4 = -Vector2.UnitY;
					}
					vector4 *= num8;
					if (vector4.X != velocity.X || vector4.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector4;
					int num9 = 440;
					float num10 = 14f;
					int num11 = 7;
					for (int j = 0; j < 2; j++)
					{
						vector3 = base.Center + new Vector2(Main.rand.Next(-num11, num11 + 1), Main.rand.Next(-num11, num11 + 1));
						Vector2 spinningpoint2 = Vector2.Normalize(velocity) * num10;
						spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
						if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
						{
							spinningpoint2 = -Vector2.UnitY;
						}
						NewProjectile(vector3.X, vector3.Y, spinningpoint2.X, spinningpoint2.Y, num9, damage, knockBack, owner);
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 445)
		{
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(SoundID.Item132, position);
				soundDelay = 23;
			}
			localAI[0] += 1f;
			if (localAI[0] >= 60f)
			{
				localAI[0] = 0f;
			}
			if (Vector2.Distance(vector, base.Center) >= 5f)
			{
				float num12 = localAI[0] / 60f;
				if (num12 > 0.5f)
				{
					num12 = 1f - num12;
				}
				Vector3 value2 = new Vector3(0f, 1f, 0.7f);
				Vector3 value3 = new Vector3(0f, 0.7f, 1f);
				Vector3 vector5 = Vector3.Lerp(value2, value3, 1f - num12 * 2f) * 0.5f;
				if (Vector2.Distance(vector, base.Center) >= 30f)
				{
					Vector2 vector6 = base.Center - vector;
					vector6.Normalize();
					vector6 *= Vector2.Distance(vector, base.Center) - 30f;
					DelegateMethods.v3_1 = vector5 * 0.8f;
					Utils.PlotTileLine(base.Center - vector6, base.Center, 8f, DelegateMethods.CastLightOpen);
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, vector5.X, vector5.Y, vector5.Z);
			}
			if (Main.myPlayer == owner)
			{
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				if (!player.channel || player.noItems || player.CCed)
				{
					Kill();
				}
				else if (localAI[1] == 0f)
				{
					Vector2 vector7 = vector;
					Vector2 vector8 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector7;
					if (player.gravDir == -1f)
					{
						vector8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector7.Y;
					}
					if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
					{
						vector8 = new Vector2(Player.tileTargetX, Player.tileTargetY) * 16f + Vector2.One * 8f - vector7;
						localAI[1] = 2f;
					}
					vector8 = Vector2.Lerp(vector8, velocity, 0.7f);
					if (float.IsNaN(vector8.X) || float.IsNaN(vector8.Y))
					{
						vector8 = -Vector2.UnitY;
					}
					float num13 = 30f;
					if (vector8.Length() < num13)
					{
						vector8 = Vector2.Normalize(vector8) * num13;
					}
					int tileBoost = player.inventory[player.selectedItem].tileBoost;
					int num14 = -Player.tileRangeX - tileBoost + 1;
					int num15 = Player.tileRangeX + tileBoost - 1;
					int num16 = -Player.tileRangeY - tileBoost;
					int num17 = Player.tileRangeY + tileBoost - 1;
					int num18 = 12;
					bool flag2 = false;
					if (vector8.X < (float)(num14 * 16 - num18))
					{
						flag2 = true;
					}
					if (vector8.Y < (float)(num16 * 16 - num18))
					{
						flag2 = true;
					}
					if (vector8.X > (float)(num15 * 16 + num18))
					{
						flag2 = true;
					}
					if (vector8.Y > (float)(num17 * 16 + num18))
					{
						flag2 = true;
					}
					if (flag2)
					{
						Vector2 vector9 = Vector2.Normalize(vector8);
						float num19 = -1f;
						if (vector9.X < 0f && ((float)(num14 * 16 - num18) / vector9.X < num19 || num19 == -1f))
						{
							num19 = (float)(num14 * 16 - num18) / vector9.X;
						}
						if (vector9.X > 0f && ((float)(num15 * 16 + num18) / vector9.X < num19 || num19 == -1f))
						{
							num19 = (float)(num15 * 16 + num18) / vector9.X;
						}
						if (vector9.Y < 0f && ((float)(num16 * 16 - num18) / vector9.Y < num19 || num19 == -1f))
						{
							num19 = (float)(num16 * 16 - num18) / vector9.Y;
						}
						if (vector9.Y > 0f && ((float)(num17 * 16 + num18) / vector9.Y < num19 || num19 == -1f))
						{
							num19 = (float)(num17 * 16 + num18) / vector9.Y;
						}
						vector8 = vector9 * num19;
					}
					if (vector8.X != velocity.X || vector8.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector8;
				}
			}
		}
		if (type == 460)
		{
			ai[0] += 1f;
			int num20 = 0;
			if (ai[0] >= 80f)
			{
				num20++;
			}
			if (ai[0] >= 180f)
			{
				num20++;
			}
			bool flag3 = false;
			_ = ai[0];
			if (ai[0] == 80f || ai[0] == 180f || (ai[0] > 180f && ai[0] % 20f == 0f))
			{
				flag3 = true;
			}
			bool flag4 = ai[0] >= 180f;
			int num21 = 5;
			if (!flag4)
			{
				ai[1] += 1f;
			}
			bool flag5 = false;
			if (ai[0] == 1f)
			{
				flag5 = true;
			}
			if (flag4 && ai[0] % 20f == 0f)
			{
				flag5 = true;
			}
			if ((!flag4 && ai[1] >= (float)num21) || (flag4 && ai[0] % 5f == 0f))
			{
				if (!flag4)
				{
					ai[1] = 0f;
				}
				flag5 = true;
				float num22 = player.inventory[player.selectedItem].shootSpeed * scale;
				Vector2 vector10 = vector;
				Vector2 value4 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector10;
				if (player.gravDir == -1f)
				{
					value4.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector10.Y;
				}
				Vector2 vector11 = Vector2.Normalize(value4);
				if (float.IsNaN(vector11.X) || float.IsNaN(vector11.Y))
				{
					vector11 = -Vector2.UnitY;
				}
				vector11 *= num22;
				if (vector11.X != velocity.X || vector11.Y != velocity.Y)
				{
					netUpdate = true;
				}
				velocity = vector11;
			}
			if (soundDelay <= 0 && !flag4)
			{
				soundDelay = num21 - num20;
				soundDelay *= 2;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item15, position);
				}
			}
			if (ai[0] > 10f && !flag4)
			{
				Vector2 spinningpoint3 = Vector2.UnitX * 18f;
				spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector12 = base.Center + spinningpoint3;
				for (int k = 0; k < num20 + 1; k++)
				{
					int num23 = 226;
					float num24 = 0.4f;
					if (k % 2 == 1)
					{
						num23 = 226;
						num24 = 0.65f;
					}
					Vector2 vector13 = vector12 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num20 * 2));
					int num25 = Dust.NewDust(vector13 - Vector2.One * 8f, 16, 16, num23, velocity.X / 2f, velocity.Y / 2f);
					Main.dust[num25].velocity = Vector2.Normalize(vector12 - vector13) * 1.5f * (10f - (float)num20 * 2f) / 10f;
					Main.dust[num25].noGravity = true;
					Main.dust[num25].scale = num24;
					Main.dust[num25].customData = player;
				}
			}
			if (flag4)
			{
				Vector2 spinningpoint4 = Vector2.UnitX * 14f;
				spinningpoint4 = spinningpoint4.RotatedBy(rotation - (float)Math.PI / 2f);
				Vector2 vector14 = base.Center + spinningpoint4;
				for (int l = 0; l < 2; l++)
				{
					int num26 = 226;
					float num27 = 0.35f;
					if (l % 2 == 1)
					{
						num26 = 226;
						num27 = 0.45f;
					}
					float num28 = Main.rand.NextFloatDirection();
					Vector2 vector15 = vector14 + (rotation + num28 * ((float)Math.PI / 4f) * 0.8f - (float)Math.PI / 2f).ToRotationVector2() * 6f;
					int num29 = 24;
					int num30 = Dust.NewDust(vector15 - Vector2.One * (num29 / 2), num29, num29, num26, velocity.X / 2f, velocity.Y / 2f);
					Main.dust[num30].velocity = (vector15 - vector14).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0f, Math.Abs(num28), clamped: true));
					Main.dust[num30].noGravity = true;
					Main.dust[num30].scale = num27;
					Main.dust[num30].customData = player;
					Main.dust[num30].fadeIn = 0.5f;
				}
			}
			if (flag5 && Main.myPlayer == owner)
			{
				bool flag6 = false;
				flag6 = !flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
				if (player.channel && flag6 && !player.noItems && !player.CCed)
				{
					if (ai[0] == 180f)
					{
						Vector2 center = base.Center;
						Vector2 vector16 = Vector2.Normalize(velocity);
						if (float.IsNaN(vector16.X) || float.IsNaN(vector16.Y))
						{
							vector16 = -Vector2.UnitY;
						}
						int num31 = (int)((float)damage * 1.5f);
						int num32 = NewProjectile(center.X, center.Y, vector16.X, vector16.Y, 461, num31, knockBack, owner, 0f, whoAmI);
						ai[1] = num32;
						netUpdate = true;
					}
					else if (flag4)
					{
						Projectile projectile = Main.projectile[(int)ai[1]];
						if (!projectile.active || projectile.type != 461)
						{
							Kill();
							return;
						}
					}
					else
					{
						bool flag7 = false;
						if (ai[0] == 1f)
						{
							flag7 = true;
						}
						if (ai[0] <= 50f && ai[0] % 10f == 0f)
						{
							flag7 = true;
						}
						if (ai[0] >= 80f && ai[0] < 180f && ai[0] % 30f == 0f)
						{
							flag7 = true;
						}
						if (flag7)
						{
							Vector2 vector17 = vector;
							int num33 = 459;
							float num34 = 10f;
							vector17 = base.Center;
							Vector2 vector18 = Vector2.Normalize(velocity) * num34;
							if (float.IsNaN(vector18.X) || float.IsNaN(vector18.Y))
							{
								vector18 = -Vector2.UnitY;
							}
							float num35 = 0.7f + (float)num20 * 0.3f;
							int num36 = ((num35 < 1f) ? damage : ((int)((float)damage * 2.5f)));
							NewProjectile(vector17.X, vector17.Y, vector18.X, vector18.Y, num33, num36, knockBack, owner, 0f, num35);
						}
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 633)
		{
			float num37 = 30f;
			if (ai[0] > 90f)
			{
				num37 = 15f;
			}
			if (ai[0] > 120f)
			{
				num37 = 5f;
			}
			damage = (int)((float)player.inventory[player.selectedItem].damage * player.magicDamage);
			ai[0] += 1f;
			ai[1] += 1f;
			bool flag8 = false;
			if (ai[0] % num37 == 0f)
			{
				flag8 = true;
			}
			int num38 = 10;
			bool flag9 = false;
			if (ai[0] % num37 == 0f)
			{
				flag9 = true;
			}
			if (ai[1] >= 1f)
			{
				ai[1] = 0f;
				flag9 = true;
				if (Main.myPlayer == owner)
				{
					float num39 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector19 = vector;
					Vector2 value5 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector19;
					if (player.gravDir == -1f)
					{
						value5.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector19.Y;
					}
					Vector2 value6 = Vector2.Normalize(value5);
					if (float.IsNaN(value6.X) || float.IsNaN(value6.Y))
					{
						value6 = -Vector2.UnitY;
					}
					value6 = Vector2.Normalize(Vector2.Lerp(value6, Vector2.Normalize(velocity), 0.92f));
					value6 *= num39;
					if (value6.X != velocity.X || value6.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = value6;
				}
			}
			frameCounter++;
			int num40 = ((!(ai[0] < 120f)) ? 1 : 4);
			if (frameCounter >= num40)
			{
				frameCounter = 0;
				if (++frame >= 5)
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num38;
				soundDelay *= 2;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item15, position);
				}
			}
			if (flag9 && Main.myPlayer == owner)
			{
				bool flag10 = false;
				flag10 = !flag8 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
				if (player.channel && flag10 && !player.noItems && !player.CCed)
				{
					if (ai[0] == 1f)
					{
						Vector2 center2 = base.Center;
						Vector2 vector20 = Vector2.Normalize(velocity);
						if (float.IsNaN(vector20.X) || float.IsNaN(vector20.Y))
						{
							vector20 = -Vector2.UnitY;
						}
						int num41 = damage;
						for (int m = 0; m < 6; m++)
						{
							NewProjectile(center2.X, center2.Y, vector20.X, vector20.Y, 632, num41, knockBack, owner, m, whoAmI);
						}
						netUpdate = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 595)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(SoundID.Item1, base.Center);
				soundDelay = 12;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num42 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num42 = player.inventory[player.selectedItem].shootSpeed * scale;
					}
					Vector2 vec = Main.MouseWorld - vector;
					vec.Normalize();
					if (vec.HasNaNs())
					{
						vec = Vector2.UnitX * player.direction;
					}
					vec *= num42;
					if (vec.X != velocity.X || vec.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec;
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector21 = base.Center + velocity * 3f;
			Lighting.AddLight(vector21, 0.8f, 0.8f, 0.8f);
			if (Main.rand.Next(3) == 0)
			{
				int num43 = Dust.NewDust(vector21 - base.Size / 2f, width, height, 63, velocity.X, velocity.Y, 100, default(Color), 2f);
				Main.dust[num43].noGravity = true;
				Main.dust[num43].position -= velocity;
			}
		}
		if (type == 735)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(SoundID.Item1, base.Center);
				soundDelay = 12;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num44 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num44 = player.inventory[player.selectedItem].shootSpeed * scale;
					}
					Vector2 vec2 = Main.MouseWorld - vector;
					vec2.Normalize();
					if (vec2.HasNaNs())
					{
						vec2 = Vector2.UnitX * player.direction;
					}
					vec2 *= num44;
					if (vec2.X != velocity.X || vec2.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec2;
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector22 = base.Center + velocity * 3f;
			Lighting.AddLight(vector22, 0.8f, 0.8f, 0.8f);
			if (Main.rand.Next(3) == 0)
			{
				int num45 = Dust.NewDust(vector22 - base.Size / 2f, width, height, 302, velocity.X, velocity.Y, 100, default(Color), 2f);
				Main.dust[num45].noGravity = true;
				Main.dust[num45].position -= velocity;
			}
		}
		if (type == 927)
		{
			num = 0f;
			ai[0] += 1f;
			if (ai[0] >= 8f)
			{
				ai[0] = 0f;
			}
			num2 = 9;
			num3 = Main.rand.NextFloatDirection() * ((float)Math.PI * 2f) * 0.05f;
			soundDelay--;
			if (soundDelay <= 0)
			{
				SoundEngine.PlaySound(SoundID.Item1, base.Center);
				soundDelay = 6;
			}
			if (Main.myPlayer == owner)
			{
				if (player.channel && !player.noItems && !player.CCed)
				{
					float num46 = 1f;
					if (player.inventory[player.selectedItem].shoot == type)
					{
						num46 = player.inventory[player.selectedItem].shootSpeed * scale;
					}
					Vector2 vec3 = Main.MouseWorld - vector;
					vec3.Normalize();
					if (vec3.HasNaNs())
					{
						vec3 = Vector2.UnitX * player.direction;
					}
					vec3 *= num46;
					if (vec3.X != velocity.X || vec3.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vec3;
				}
				else
				{
					Kill();
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
			Utils.PlotTileLine(base.Center - velocity, base.Center + velocity.SafeNormalize(Vector2.Zero) * 80f, 16f, DelegateMethods.CastLightOpen);
		}
		if (type == 600)
		{
			_ = ai[0];
			_ = 0f;
			ai[0] += 1f;
			if (Main.myPlayer == owner && ai[0] == 1f)
			{
				float num47 = player.inventory[player.selectedItem].shootSpeed * scale;
				Vector2 vector23 = vector;
				Vector2 value7 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector23;
				if (player.gravDir == -1f)
				{
					value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector23.Y;
				}
				Vector2 vector24 = Vector2.Normalize(value7);
				if (float.IsNaN(vector24.X) || float.IsNaN(vector24.Y))
				{
					vector24 = -Vector2.UnitY;
				}
				vector24 *= num47;
				if (vector24.X != velocity.X || vector24.Y != velocity.Y)
				{
					netUpdate = true;
				}
				velocity = vector24;
				int num48 = 601;
				float num49 = 3f;
				vector23 = base.Center;
				Vector2 vector25 = Vector2.Normalize(velocity) * num49;
				if (float.IsNaN(vector25.X) || float.IsNaN(vector25.Y))
				{
					vector25 = -Vector2.UnitY;
				}
				NewProjectile(vector23.X, vector23.Y, vector25.X, vector25.Y, num48, damage, knockBack, owner, ai[1]);
			}
			if (ai[0] >= 30f)
			{
				Kill();
			}
		}
		if (type == 611)
		{
			if (Main.netMode != 2 && localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item116, base.Center);
			}
			if (localAI[1] > 0f)
			{
				localAI[1] -= 1f;
			}
			alpha -= 42;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = velocity.ToRotation();
			}
			float num50 = ((localAI[0].ToRotationVector2().X >= 0f) ? 1 : (-1));
			if (ai[1] <= 0f)
			{
				num50 *= -1f;
			}
			Vector2 vector26 = (num50 * (ai[0] / 30f * ((float)Math.PI * 2f) - (float)Math.PI / 2f)).ToRotationVector2();
			vector26.Y *= (float)Math.Sin(ai[1]);
			if (ai[1] <= 0f)
			{
				vector26.Y *= -1f;
			}
			vector26 = vector26.RotatedBy(localAI[0]);
			ai[0] += 1f;
			if (ai[0] < 30f)
			{
				velocity += 48f * vector26;
			}
			else
			{
				Kill();
			}
		}
		if (type == 615)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num51 = 0;
			if (ai[0] >= 40f)
			{
				num51++;
			}
			if (ai[0] >= 80f)
			{
				num51++;
			}
			if (ai[0] >= 120f)
			{
				num51++;
			}
			int num52 = 5;
			int num53 = 0;
			ai[1] -= 1f;
			bool flag11 = false;
			int num54 = -1;
			if (ai[1] <= 0f)
			{
				ai[1] = num52 - num53 * num51;
				flag11 = true;
				if ((int)ai[0] / (num52 - num53 * num51) % 7 == 0)
				{
					num54 = 0;
				}
			}
			frameCounter += 1 + num51;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0)
			{
				soundDelay = num52 - num53 * num51;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item36, position);
				}
			}
			if (flag11 && Main.myPlayer == owner)
			{
				bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				int projToShoot = 14;
				float speed = 14f;
				int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack = player.inventory[player.selectedItem].knockBack;
				if (canShoot)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref Damage, ref KnockBack);
					KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
					float num55 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector27 = vector;
					Vector2 value8 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector27;
					if (player.gravDir == -1f)
					{
						value8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector27.Y;
					}
					Vector2 spinningpoint5 = Vector2.Normalize(value8);
					if (float.IsNaN(spinningpoint5.X) || float.IsNaN(spinningpoint5.Y))
					{
						spinningpoint5 = -Vector2.UnitY;
					}
					spinningpoint5 *= num55;
					spinningpoint5 = spinningpoint5.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276);
					if (spinningpoint5.X != velocity.X || spinningpoint5.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = spinningpoint5;
					for (int n = 0; n < 1; n++)
					{
						Vector2 spinningpoint6 = Vector2.Normalize(velocity) * speed;
						spinningpoint6 = spinningpoint6.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
						if (float.IsNaN(spinningpoint6.X) || float.IsNaN(spinningpoint6.Y))
						{
							spinningpoint6 = -Vector2.UnitY;
						}
						NewProjectile(vector27.X, vector27.Y, spinningpoint6.X, spinningpoint6.Y, projToShoot, Damage, KnockBack, owner);
					}
					if (num54 == 0)
					{
						projToShoot = 616;
						speed = 8f;
						for (int num56 = 0; num56 < 1; num56++)
						{
							Vector2 spinningpoint7 = Vector2.Normalize(velocity) * speed;
							spinningpoint7 = spinningpoint7.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
							if (float.IsNaN(spinningpoint7.X) || float.IsNaN(spinningpoint7.Y))
							{
								spinningpoint7 = -Vector2.UnitY;
							}
							NewProjectile(vector27.X, vector27.Y, spinningpoint7.X, spinningpoint7.Y, projToShoot, Damage + 20, KnockBack * 1.25f, owner);
						}
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 714)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num57 = 0;
			int num58 = 8;
			int num59 = 0;
			ai[1] -= 1f;
			bool flag12 = false;
			int num60 = -1;
			if (ai[1] <= 0f)
			{
				ai[1] = num58 - num59 * num57;
				flag12 = true;
				int num61 = (int)ai[0] / (num58 - num59 * num57);
				if (num61 % 7 == 0)
				{
					num60 = 0;
				}
				num60 = num61 % 7;
			}
			_ = rotation;
			Vector2 center3 = base.Center;
			_ = direction;
			Vector2 v = velocity;
			frameCounter += 1 + num57;
			if (frameCounter >= 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (soundDelay <= 0 && Main.player[owner].controlUseItem)
			{
				soundDelay = num58 - num59 * num57;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item156, position);
				}
			}
			if (flag12 && Main.myPlayer == owner)
			{
				bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				int projToShoot2 = 134;
				float speed2 = 8f;
				int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack2 = player.inventory[player.selectedItem].knockBack;
				if (num60 == 3)
				{
					speed2 += 1f;
				}
				if (canShoot2)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot2, ref speed2, ref canShoot2, ref Damage2, ref KnockBack2);
					KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
					float num62 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector28 = vector;
					Vector2 value9 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector28;
					if (player.gravDir == -1f)
					{
						value9.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector28.Y;
					}
					Vector2 spinningpoint8 = Vector2.Normalize(value9);
					if (float.IsNaN(spinningpoint8.X) || float.IsNaN(spinningpoint8.Y))
					{
						spinningpoint8 = -Vector2.UnitY;
					}
					spinningpoint8 *= num62;
					spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276) * 0.5);
					if (spinningpoint8.X != velocity.X || spinningpoint8.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = spinningpoint8;
					for (int num63 = 0; num63 < 1; num63++)
					{
						Vector2 spinningpoint9 = Vector2.Normalize(velocity) * speed2;
						spinningpoint9 = spinningpoint9.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
						if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
						{
							spinningpoint9 = -Vector2.UnitY;
						}
						NewProjectile(vector28.X, vector28.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num60);
						if (num60 == 5)
						{
							for (float num64 = -1f; num64 <= 1f; num64 += 2f)
							{
								Vector2 vector29 = spinningpoint9.RotatedBy((float)Math.PI * 2f * num64 * 1f / 80f);
								if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
								{
									vector29 = -Vector2.UnitY;
								}
								NewProjectile(vector28.X, vector28.Y, vector29.X, vector29.Y, projToShoot2, Damage2, KnockBack2, owner, num60);
							}
						}
						if (num60 == 4)
						{
							NewProjectile(vector28.X, vector28.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num60, 1f);
						}
					}
				}
				else
				{
					Kill();
				}
			}
			Vector2 vector30 = base.Center + velocity.ToRotation().ToRotationVector2() * 40f;
			Vector2 vector31 = center3 + v.ToRotation().ToRotationVector2() * 40f;
			Color color = Main.hslToRgb(ai[0] / 90f % 1f, 1f, 0.5f);
			color.A = 120;
			int num65 = 267;
			Dust dust = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
			dust.color = color;
			dust.scale = 0.6f;
			dust.fadeIn = 0.9f;
			dust.noGravity = true;
			Dust dust2 = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
			dust2.color = color;
			dust2.scale = 0.6f;
			dust2.fadeIn = 0.7f;
			dust2.noGravity = true;
			dust2.velocity = -velocity.RotatedBy(2.0943951606750488) / 10f;
			Dust dust3 = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
			dust3.color = color;
			dust3.scale = 0.6f;
			dust3.fadeIn = 0.7f;
			dust3.noGravity = true;
			dust3.velocity = -velocity.RotatedBy(-2.0943951606750488) / 10f;
			if (vector30 != vector31)
			{
				float num66 = -1f;
				Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.8f), num65, Vector2.Zero);
				dust4.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
				dust4.color = color;
				dust4.scale = 0.6f;
				dust4.fadeIn = 0.9f;
				dust4.velocity *= num66;
				dust4.noGravity = true;
				Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.5f), num65, Vector2.Zero);
				dust5.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
				dust5.color = color;
				dust5.scale = 0.6f;
				dust5.fadeIn = 0.9f;
				dust5.velocity *= num66;
				dust5.noGravity = true;
				Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.2f), num65, Vector2.Zero);
				dust6.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
				dust6.color = color;
				dust6.scale = 0.6f;
				dust6.fadeIn = 0.9f;
				dust6.velocity *= num66;
				dust6.noGravity = true;
			}
		}
		if (type == 630)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int num67 = 0;
			if (ai[0] >= 40f)
			{
				num67++;
			}
			if (ai[0] >= 80f)
			{
				num67++;
			}
			if (ai[0] >= 120f)
			{
				num67++;
			}
			int num68 = 24;
			int num69 = 2;
			ai[1] -= 1f;
			bool flag13 = false;
			if (ai[1] <= 0f)
			{
				ai[1] = num68 - num69 * num67;
				flag13 = true;
				_ = (int)ai[0] / (num68 - num69 * num67);
			}
			bool canShoot3 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (soundDelay <= 0 && canShoot3)
			{
				soundDelay = num68 - num69 * num67;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item5, position);
				}
				localAI[0] = 12f;
			}
			player.phantasmTime = 2;
			if (flag13 && Main.myPlayer == owner)
			{
				int projToShoot3 = 14;
				float speed3 = 14f;
				int Damage3 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack3 = player.inventory[player.selectedItem].knockBack;
				if (canShoot3)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot3, ref speed3, ref canShoot3, ref Damage3, ref KnockBack3);
					KnockBack3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack3);
					float num70 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector32 = vector;
					Vector2 value10 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector32;
					if (player.gravDir == -1f)
					{
						value10.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector32.Y;
					}
					Vector2 vector33 = Vector2.Normalize(value10);
					if (float.IsNaN(vector33.X) || float.IsNaN(vector33.Y))
					{
						vector33 = -Vector2.UnitY;
					}
					vector33 *= num70;
					if (vector33.X != velocity.X || vector33.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector33 * 0.55f;
					for (int num71 = 0; num71 < 4; num71++)
					{
						Vector2 vector34 = Vector2.Normalize(velocity) * speed3 * (0.6f + Main.rand.NextFloat() * 0.8f);
						if (float.IsNaN(vector34.X) || float.IsNaN(vector34.Y))
						{
							vector34 = -Vector2.UnitY;
						}
						Vector2 vector35 = vector32 + Utils.RandomVector2(Main.rand, -15f, 15f);
						int num72 = NewProjectile(vector35.X, vector35.Y, vector34.X, vector34.Y, projToShoot3, Damage3, KnockBack3, owner);
						Main.projectile[num72].noDropItem = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		if (type == 705)
		{
			num = 0f;
			if (spriteDirection == -1)
			{
				num = (float)Math.PI;
			}
			ai[0] += 1f;
			int itemAnimationMax = player.itemAnimationMax;
			ai[1] -= 1f;
			bool flag14 = false;
			if (ai[1] <= 0f)
			{
				ai[1] = itemAnimationMax;
				flag14 = true;
			}
			bool canShoot4 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (soundDelay <= 0 && canShoot4)
			{
				soundDelay = itemAnimationMax;
				if (ai[0] != 1f)
				{
					SoundEngine.PlaySound(SoundID.Item5, position);
				}
				localAI[0] = 12f;
			}
			if (flag14 && Main.myPlayer == owner)
			{
				int projToShoot4 = 14;
				float speed4 = 12f;
				int Damage4 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
				float KnockBack4 = player.inventory[player.selectedItem].knockBack;
				int num73 = 2;
				float num74 = 1.5f;
				if (canShoot4)
				{
					player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot4, ref speed4, ref canShoot4, ref Damage4, ref KnockBack4);
					KnockBack4 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack4);
					if (projToShoot4 == 1)
					{
						projToShoot4 = 2;
					}
					if (++player.phantomPhoneixCounter >= 3)
					{
						player.phantomPhoneixCounter = 0;
						num73 = 1;
						Damage4 *= 2;
						num74 = 0f;
						ai[1] *= 1.5f;
						projToShoot4 = 706;
						speed4 = 16f;
					}
					float num75 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector36 = vector;
					Vector2 value11 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector36;
					if (player.gravDir == -1f)
					{
						value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector36.Y;
					}
					Vector2 vector37 = Vector2.Normalize(value11);
					if (float.IsNaN(vector37.X) || float.IsNaN(vector37.Y))
					{
						vector37 = -Vector2.UnitY;
					}
					vector37 *= num75;
					if (vector37.X != velocity.X || vector37.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector37 * 0.55f;
					for (int num76 = 0; num76 < num73; num76++)
					{
						Vector2 vector38 = Vector2.Normalize(velocity) * speed4;
						vector38 += Main.rand.NextVector2Square(0f - num74, num74);
						if (float.IsNaN(vector38.X) || float.IsNaN(vector38.Y))
						{
							vector38 = -Vector2.UnitY;
						}
						Vector2 vector39 = vector36;
						int num77 = NewProjectile(vector39.X, vector39.Y, vector38.X, vector38.Y, projToShoot4, Damage4, KnockBack4, owner);
						Main.projectile[num77].noDropItem = true;
					}
				}
				else
				{
					Kill();
				}
			}
		}
		position = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) - base.Size / 2f;
		rotation = velocity.ToRotation() + num;
		spriteDirection = direction;
		timeLeft = 2;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(num2);
		player.itemRotation = MathHelper.WrapAngle((float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction) + num3);
		if (type == 460 || type == 611)
		{
			Vector2 vector40 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				vector40.X = (float)player.bodyFrame.Width - vector40.X;
			}
			if (player.gravDir != 1f)
			{
				vector40.Y = (float)player.bodyFrame.Height - vector40.Y;
			}
			vector40 -= new Vector2(player.bodyFrame.Width - player.width, player.bodyFrame.Height - 42) / 2f;
			base.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + vector40, reverseRotation: false, addGfxOffY: false) - velocity;
		}
		if (type == 615)
		{
			position.Y += player.gravDir * 2f;
		}
		if (type == 714)
		{
			position.Y += player.gravDir * 2f;
		}
		if (type == 611 && alpha == 0)
		{
			for (int num78 = 0; num78 < 2; num78++)
			{
				Dust obj = Main.dust[Dust.NewDust(position + velocity * 2f, width, height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
				obj.noGravity = true;
				obj.velocity *= 2f;
				obj.velocity += localAI[0].ToRotationVector2();
				obj.fadeIn = 1.5f;
			}
			float num79 = 18f;
			for (int num80 = 0; (float)num80 < num79; num80++)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 vector41 = position + velocity + velocity * ((float)num80 / num79);
					Dust obj2 = Main.dust[Dust.NewDust(vector41, width, height, 6, 0f, 0f, 100, Color.Transparent)];
					obj2.noGravity = true;
					obj2.fadeIn = 0.5f;
					obj2.velocity += localAI[0].ToRotationVector2();
					obj2.noLight = true;
				}
			}
		}
		if (type == 927)
		{
			player.itemAnimation = num2 - (int)ai[0];
		}
	}

	private void AI_099_1()
	{
		timeLeft = 6;
		bool flag = true;
		float num = 250f;
		float num2 = 0.1f;
		float num3 = 15f;
		float num4 = 12f;
		num *= 0.5f;
		num3 *= 0.8f;
		num4 *= 1.5f;
		if (owner == Main.myPlayer)
		{
			bool flag2 = false;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
				{
					flag2 = true;
				}
			}
			if (!flag2)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
		}
		if (Main.player[owner].yoyoString)
		{
			num += num * 0.25f + 10f;
		}
		rotation += 0.5f;
		if (Main.player[owner].dead)
		{
			Kill();
			return;
		}
		if (!flag)
		{
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
		}
		if (ai[0] == 0f || ai[0] == 1f)
		{
			if (ai[0] == 1f)
			{
				num *= 0.75f;
			}
			num4 *= 0.5f;
			bool flag3 = false;
			Vector2 vector = Main.player[owner].Center - base.Center;
			if ((double)vector.Length() > (double)num * 0.9)
			{
				flag3 = true;
			}
			if (vector.Length() > num)
			{
				float num5 = vector.Length() - num;
				Vector2 vector2 = default(Vector2);
				vector2.X = vector.Y;
				vector2.Y = vector.X;
				vector.Normalize();
				vector *= num;
				position = Main.player[owner].Center - vector;
				position.X -= width / 2;
				position.Y -= height / 2;
				float num6 = velocity.Length();
				velocity.Normalize();
				if (num5 > num6 - 1f)
				{
					num5 = num6 - 1f;
				}
				velocity *= num6 - num5;
				num6 = velocity.Length();
				Vector2 vector3 = new Vector2(base.Center.X, base.Center.Y);
				Vector2 vector4 = new Vector2(Main.player[owner].Center.X, Main.player[owner].Center.Y);
				if (vector3.Y < vector4.Y)
				{
					vector2.Y = Math.Abs(vector2.Y);
				}
				else if (vector3.Y > vector4.Y)
				{
					vector2.Y = 0f - Math.Abs(vector2.Y);
				}
				if (vector3.X < vector4.X)
				{
					vector2.X = Math.Abs(vector2.X);
				}
				else if (vector3.X > vector4.X)
				{
					vector2.X = 0f - Math.Abs(vector2.X);
				}
				vector2.Normalize();
				vector2 *= velocity.Length();
				new Vector2(vector2.X, vector2.Y);
				if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
				{
					Vector2 vector5 = velocity;
					vector5.Y += vector2.Y;
					vector5.Normalize();
					vector5 *= velocity.Length();
					if ((double)Math.Abs(vector2.X) < 0.1 || (double)Math.Abs(vector2.Y) < 0.1)
					{
						velocity = vector5;
					}
					else
					{
						velocity = (vector5 + velocity * 2f) / 3f;
					}
				}
				else
				{
					Vector2 vector6 = velocity;
					vector6.X += vector2.X;
					vector6.Normalize();
					vector6 *= velocity.Length();
					if ((double)Math.Abs(vector2.X) < 0.2 || (double)Math.Abs(vector2.Y) < 0.2)
					{
						velocity = vector6;
					}
					else
					{
						velocity = (vector6 + velocity * 2f) / 3f;
					}
				}
			}
			if (Main.myPlayer == owner)
			{
				if (Main.player[owner].channel)
				{
					Vector2 vector7 = new Vector2(Main.mouseX - Main.lastMouseX, Main.mouseY - Main.lastMouseY);
					if (velocity.X != 0f || velocity.Y != 0f)
					{
						if (flag)
						{
							vector7 *= -1f;
						}
						if (flag3)
						{
							if (base.Center.X < Main.player[owner].Center.X && vector7.X < 0f)
							{
								vector7.X = 0f;
							}
							if (base.Center.X > Main.player[owner].Center.X && vector7.X > 0f)
							{
								vector7.X = 0f;
							}
							if (base.Center.Y < Main.player[owner].Center.Y && vector7.Y < 0f)
							{
								vector7.Y = 0f;
							}
							if (base.Center.Y > Main.player[owner].Center.Y && vector7.Y > 0f)
							{
								vector7.Y = 0f;
							}
						}
						velocity += vector7 * num2;
						netUpdate = true;
					}
				}
				else
				{
					ai[0] = 10f;
					netUpdate = true;
				}
			}
			if (flag || type == 562 || type == 547 || type == 555 || type == 564 || type == 552 || type == 563 || type == 549 || type == 550 || type == 554 || type == 553 || type == 603)
			{
				float num7 = 800f;
				Vector2 vector8 = default(Vector2);
				bool flag4 = false;
				if (type == 549)
				{
					num7 = 200f;
				}
				if (type == 554)
				{
					num7 = 400f;
				}
				if (type == 553)
				{
					num7 = 250f;
				}
				if (type == 603)
				{
					num7 = 320f;
				}
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].CanBeChasedBy(this))
					{
						float num8 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
						float num9 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
						float num10 = Math.Abs(position.X + (float)(width / 2) - num8) + Math.Abs(position.Y + (float)(height / 2) - num9);
						if (num10 < num7 && (type != 563 || !(num10 < 200f)) && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[owner].Center).Length() < (double)num * 0.9)
						{
							num7 = num10;
							vector8.X = num8;
							vector8.Y = num9;
							flag4 = true;
						}
					}
				}
				if (flag4)
				{
					vector8 -= base.Center;
					vector8.Normalize();
					if (type == 563)
					{
						vector8 *= 4f;
						velocity = (velocity * 14f + vector8) / 15f;
					}
					else if (type == 553)
					{
						vector8 *= 5f;
						velocity = (velocity * 12f + vector8) / 13f;
					}
					else if (type == 603)
					{
						vector8 *= 16f;
						velocity = (velocity * 9f + vector8) / 10f;
					}
					else if (type == 554)
					{
						vector8 *= 8f;
						velocity = (velocity * 6f + vector8) / 7f;
					}
					else
					{
						vector8 *= 6f;
						velocity = (velocity * 7f + vector8) / 8f;
					}
				}
			}
			if (velocity.Length() > num3)
			{
				velocity.Normalize();
				velocity *= num3;
			}
			if (velocity.Length() < num4)
			{
				velocity.Normalize();
				velocity *= num4;
			}
			return;
		}
		tileCollide = false;
		Vector2 vector9 = Main.player[owner].Center - base.Center;
		float num11 = vector9.Length();
		if (num11 < 40f || vector9.HasNaNs() || num11 > 2000f)
		{
			Kill();
			return;
		}
		float num12 = num3 * 1.5f;
		if (type == 546)
		{
			num12 *= 1.5f;
		}
		if (type == 554)
		{
			num12 *= 1.25f;
		}
		if (type == 555)
		{
			num12 *= 1.35f;
		}
		if (type == 562)
		{
			num12 *= 1.25f;
		}
		float num13 = 12f;
		vector9.Normalize();
		vector9 *= num12;
		velocity = (velocity * (num13 - 1f) + vector9) / num13;
	}

	private void AI_099_2()
	{
		bool flag = false;
		for (int i = 0; i < whoAmI; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type)
			{
				flag = true;
			}
		}
		if (owner == Main.myPlayer)
		{
			localAI[0] += 1f;
			if (flag)
			{
				localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
			}
			float num = localAI[0] / 60f;
			num /= (1f + Main.player[owner].meleeSpeed) / 2f;
			float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[type];
			if (num2 != -1f && num > num2)
			{
				ai[0] = -1f;
			}
		}
		if (type == 603 && owner == Main.myPlayer)
		{
			localAI[1] += 1f;
			if (localAI[1] >= 6f)
			{
				float num3 = 400f;
				Vector2 vector = velocity;
				Vector2 vector2 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector2.Normalize();
				vector2 *= (float)Main.rand.Next(10, 41) * 0.1f;
				if (Main.rand.Next(3) == 0)
				{
					vector2 *= 2f;
				}
				vector *= 0.25f;
				vector += vector2;
				for (int j = 0; j < 200; j++)
				{
					if (Main.npc[j].CanBeChasedBy(this))
					{
						float num4 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
						float num5 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
						float num6 = Math.Abs(position.X + (float)(width / 2) - num4) + Math.Abs(position.Y + (float)(height / 2) - num5);
						if (num6 < num3 && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
						{
							num3 = num6;
							vector.X = num4;
							vector.Y = num5;
							vector -= base.Center;
							vector.Normalize();
							vector *= 8f;
						}
					}
				}
				vector *= 0.8f;
				NewProjectile(base.Center.X - vector.X, base.Center.Y - vector.Y, vector.X, vector.Y, 604, damage, knockBack, owner);
				localAI[1] = 0f;
			}
		}
		bool flag2 = false;
		if (type >= 556 && type <= 561)
		{
			flag2 = true;
		}
		if (Main.player[owner].dead)
		{
			Kill();
			return;
		}
		if (!flag2 && !flag)
		{
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].SetDummyItemTime(2);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
		}
		if (velocity.HasNaNs())
		{
			Kill();
		}
		timeLeft = 6;
		float num7 = 10f;
		float num8 = 10f;
		float num9 = 3f;
		float num10 = 200f;
		num10 = ProjectileID.Sets.YoyosMaximumRange[type];
		num8 = ProjectileID.Sets.YoyosTopSpeed[type];
		if (type == 545)
		{
			if (Main.rand.Next(6) == 0)
			{
				int num11 = Dust.NewDust(position, width, height, 6);
				Main.dust[num11].noGravity = true;
			}
		}
		else if (type == 553 && Main.rand.Next(2) == 0)
		{
			int num12 = Dust.NewDust(position, width, height, 6);
			Main.dust[num12].noGravity = true;
			Main.dust[num12].scale = 1.6f;
		}
		if (Main.player[owner].yoyoString)
		{
			num10 = num10 * 1.25f + 30f;
		}
		num10 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
		num8 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
		num7 = 14f - num8 / 2f;
		if (num7 < 1f)
		{
			num7 = 1f;
		}
		num9 = 5f + num8 / 2f;
		if (flag)
		{
			num9 += 20f;
		}
		if (ai[0] >= 0f)
		{
			if (velocity.Length() > num8)
			{
				velocity *= 0.98f;
			}
			bool flag3 = false;
			bool flag4 = false;
			Vector2 vector3 = Main.player[owner].Center - base.Center;
			if (vector3.Length() > num10)
			{
				flag3 = true;
				if ((double)vector3.Length() > (double)num10 * 1.3)
				{
					flag4 = true;
				}
			}
			if (owner == Main.myPlayer)
			{
				if (!Main.player[owner].channel || Main.player[owner].stoned || Main.player[owner].frozen)
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					Vector2 vector4 = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
					float x = vector4.X;
					float y = vector4.Y;
					Vector2 vector5 = new Vector2(x, y) - Main.player[owner].Center;
					if (vector5.Length() > num10)
					{
						vector5.Normalize();
						vector5 *= num10;
						vector5 = Main.player[owner].Center + vector5;
						x = vector5.X;
						y = vector5.Y;
					}
					if (ai[0] != x || ai[1] != y)
					{
						Vector2 vector6 = new Vector2(x, y) - Main.player[owner].Center;
						if (vector6.Length() > num10 - 1f)
						{
							vector6.Normalize();
							vector6 *= num10 - 1f;
							Vector2 vector7 = Main.player[owner].Center + vector6;
							x = vector7.X;
							y = vector7.Y;
						}
						ai[0] = x;
						ai[1] = y;
						netUpdate = true;
					}
				}
			}
			if (flag4 && owner == Main.myPlayer)
			{
				ai[0] = -1f;
				netUpdate = true;
			}
			if (ai[0] >= 0f)
			{
				if (flag3)
				{
					num7 /= 2f;
					num8 *= 2f;
					if (base.Center.X > Main.player[owner].Center.X && velocity.X > 0f)
					{
						velocity.X *= 0.5f;
					}
					if (base.Center.Y > Main.player[owner].Center.Y && velocity.Y > 0f)
					{
						velocity.Y *= 0.5f;
					}
					if (base.Center.X < Main.player[owner].Center.X && velocity.X < 0f)
					{
						velocity.X *= 0.5f;
					}
					if (base.Center.Y < Main.player[owner].Center.Y && velocity.Y < 0f)
					{
						velocity.Y *= 0.5f;
					}
				}
				Vector2 vector8 = new Vector2(ai[0], ai[1]) - base.Center;
				if (flag3)
				{
					num7 = 1f;
				}
				velocity.Length();
				float num13 = vector8.Length();
				if (num13 > num9)
				{
					vector8.Normalize();
					float num14 = Math.Min(num13 / 2f, num8);
					if (flag3)
					{
						num14 = Math.Min(num14, num8 / 2f);
					}
					vector8 *= num14;
					velocity = (velocity * (num7 - 1f) + vector8) / num7;
				}
				else if (flag)
				{
					if ((double)velocity.Length() < (double)num8 * 0.6)
					{
						vector8 = velocity;
						vector8.Normalize();
						vector8 *= num8 * 0.6f;
						velocity = (velocity * (num7 - 1f) + vector8) / num7;
					}
				}
				else
				{
					velocity *= 0.8f;
				}
				if (flag && !flag3 && (double)velocity.Length() < (double)num8 * 0.6)
				{
					velocity.Normalize();
					velocity *= num8 * 0.6f;
				}
			}
		}
		else
		{
			num7 = (int)((double)num7 * 0.8);
			num8 *= 1.5f;
			tileCollide = false;
			Vector2 vector9 = Main.player[owner].Center - base.Center;
			float num15 = vector9.Length();
			if (num15 < num8 + 10f || num15 == 0f || num15 > 2000f)
			{
				Kill();
			}
			else
			{
				vector9.Normalize();
				vector9 *= num8;
				velocity = (velocity * (num7 - 1f) + vector9) / num7;
			}
		}
		rotation += 0.45f;
	}

	private void AI_130_FlameBurstTower()
	{
		float num = 900f;
		float angleRatioMax = 1f;
		Vector2 vector = base.Center;
		int num2 = 664;
		int num3 = 12;
		float num4 = 12f;
		int num5 = 1;
		int num6 = 6;
		int num7 = 4;
		int num8 = 80;
		switch (type)
		{
		case 663:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
			vector = base.Bottom + new Vector2(direction * 6, -40f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r3 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 3, 6);
			if (direction == 1)
			{
				r3.X -= width / 4;
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust5 = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust5.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust5.scale = 0.4f;
					dust5.noGravity = true;
					dust5.noLight = true;
					dust5.velocity = Vector2.Zero;
					dust5.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust5.fadeIn;
				}
			}
			r3 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r3.X -= r3.Width;
			}
			r3.X += direction * 4;
			r3.Y -= height - 10;
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6);
					dust6.fadeIn = 1f;
					dust6.scale = 1f;
					dust6.noGravity = true;
					dust6.noLight = true;
					dust6.velocity *= 2f;
				}
			}
			break;
		}
		case 665:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
			num8 = 70;
			num4 += 3f;
			num6 = 8;
			num2 = 666;
			vector = base.Bottom + new Vector2(direction * 6, -44f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r2 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
			if (direction == 1)
			{
				r2.X -= width / 4;
			}
			for (int k = 0; k < 1; k++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust3.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust3.scale = 0.4f;
					dust3.noGravity = true;
					dust3.noLight = true;
					dust3.velocity = Vector2.Zero;
					dust3.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust3.fadeIn;
				}
			}
			r2 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r2.X -= r2.Width;
			}
			r2.X += direction * 4;
			r2.Y -= height - 10;
			for (int l = 0; l < 2; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust4 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6);
					dust4.fadeIn = 1f;
					dust4.scale = 1f;
					dust4.noGravity = true;
					dust4.noLight = true;
					dust4.velocity *= 2f;
				}
			}
			break;
		}
		case 667:
		{
			Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
			Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
			num8 = 60;
			num4 += 6f;
			num6 = 8;
			num2 = 668;
			vector = base.Bottom + new Vector2(direction * 6, -46f);
			if ((localAI[0] += 1f) >= 300f)
			{
				localAI[0] = 0f;
			}
			Rectangle r = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
			if (direction == 1)
			{
				r.X -= width / 4;
			}
			for (int i = 0; i < 1; i++)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(r.TopLeft() + new Vector2(-2f, -2f), r.Width + 4, r.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
					dust.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
					dust.scale = 0.4f;
					dust.noGravity = true;
					dust.noLight = true;
					dust.velocity = Vector2.Zero;
					dust.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust.fadeIn;
				}
			}
			r = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
			if (direction == -1)
			{
				r.X -= r.Width;
			}
			r.X += direction * 4;
			r.Y -= height - 10;
			for (int j = 0; j < 3; j++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6);
					dust2.fadeIn = 1.1f;
					dust2.scale = 1f;
					dust2.noGravity = true;
					dust2.noLight = true;
					dust2.velocity *= 2.4f;
				}
			}
			break;
		}
		}
		if (Main.player[owner].setApprenticeT2)
		{
			angleRatioMax = 0.1f;
			num *= 1.5f;
			num4 *= 1.4f;
		}
		if (ai[0] == 0f)
		{
			direction = (spriteDirection = Main.player[owner].direction);
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
		}
		if (ai[0] == 1f)
		{
			frame = 0;
			bool flag = false;
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			else
			{
				flag = true;
			}
			if (flag && owner == Main.myPlayer)
			{
				int num9 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector);
				if (num9 != -1)
				{
					direction = Math.Sign(DirectionTo(Main.npc[num9].Center).X);
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
		}
		else if (ai[0] == 2f)
		{
			frame = num5 + (int)(ai[1] / (float)num7);
			if (ai[1] == (float)num3)
			{
				Vector2 vector2 = new Vector2(direction, 0f);
				int num10 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, canChangeDirection: false);
				if (num10 != -1)
				{
					vector2 = (Main.npc[num10].Center - vector).SafeNormalize(Vector2.UnitX * direction);
				}
				Vector2 vector3 = vector2 * num4;
				if (owner == Main.myPlayer)
				{
					NewProjectile(vector, vector3, num2, damage, knockBack, owner);
				}
			}
			if ((ai[1] += 1f) >= (float)(num6 * num7))
			{
				ai[0] = 1f;
				ai[1] = num8;
			}
		}
		spriteDirection = direction;
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
	{
		int num = -1;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			for (int i = 0; i < 1; i++)
			{
				if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
				if (!(num2 > shot_range))
				{
					Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if (!(Math.Abs(vector.X) < Math.Abs(vector.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector.X < 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
					{
						num = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
			}
			if (num != -1)
			{
				return num;
			}
		}
		for (int j = 0; j < 200; j++)
		{
			NPC nPC = Main.npc[j];
			if (!nPC.CanBeChasedBy(this))
			{
				continue;
			}
			float num3 = Vector2.Distance(shootingSpot, nPC.Center);
			if (!(num3 > shot_range))
			{
				Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
				if (!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector2.X < 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
				{
					num = j;
				}
			}
		}
		return num;
	}

	private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
	{
		int num = -1;
		NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
		if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
		{
			for (int i = 0; i < 1; i++)
			{
				if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
				if (!(num2 > shot_range))
				{
					Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if ((!(Math.Abs(vector.X) < Math.Abs(vector.Y) * deadBottomAngle) || !(vector.Y > 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
					{
						num = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
			}
			if (num != -1)
			{
				return num;
			}
		}
		for (int j = 0; j < 200; j++)
		{
			NPC nPC = Main.npc[j];
			if (!nPC.CanBeChasedBy(this))
			{
				continue;
			}
			float num3 = Vector2.Distance(shootingSpot, nPC.Center);
			if (!(num3 > shot_range))
			{
				Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
				if ((!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * deadBottomAngle) || !(vector2.Y > 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
				{
					num = j;
				}
			}
		}
		return num;
	}

	private void AI_131_FlameBurstShot()
	{
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		if (type != 664 && type != 666 && type != 668)
		{
			return;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			SoundEngine.PlayTrackedSound(SoundID.DD2_FlameburstTowerShot, base.Center);
		}
		if (alpha > 0)
		{
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
		}
		int num = 1;
		if (type == 666)
		{
			num = 2;
		}
		if (type == 668)
		{
			num = 3;
		}
		for (int i = 0; i < num; i++)
		{
			if (Main.rand.Next(2) != 0)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
				dust.noGravity = true;
				dust.velocity *= 0.3f;
				if (Main.rand.Next(1) == 0)
				{
					dust.velocity.Y += (float)Math.Sign(dust.velocity.Y) * 1.2f;
					dust.fadeIn += 0.5f;
				}
			}
		}
		rotation = velocity.ToRotation() + (float)Math.PI / 2f;
	}

	private void AI_134_Ballista()
	{
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		float shot_range = 900f;
		float deadBottomAngle = 0.75f;
		Vector2 center = base.Center;
		int num = 680;
		int num2 = 12;
		float num3 = 16f;
		int num4 = 1;
		int num5 = 5;
		int num6 = 5;
		int num7 = 180;
		if (Main.player[owner].setSquireT2)
		{
			num3 = 21f;
		}
		if (Main.player[owner].setSquireT3)
		{
			num7 = 100;
		}
		if (Main.player[owner].ballistaPanic)
		{
			num7 = 60;
		}
		if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3)
		{
			num7 = 30;
		}
		num2 = num6;
		int num8 = type;
		if (num8 == 677)
		{
			center.Y -= 4f;
		}
		if (ai[0] == 0f)
		{
			direction = (spriteDirection = Main.player[owner].direction);
			ai[0] = 1f;
			ai[1] = 0f;
			netUpdate = true;
			if (direction == -1)
			{
				rotation = (float)Math.PI;
			}
		}
		if (ai[0] == 1f)
		{
			frame = 0;
			bool flag = false;
			if (Main.player[owner].ballistaPanic && ai[1] > 60f)
			{
				ai[1] = 60f;
			}
			if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3 && ai[1] > 30f)
			{
				ai[1] = 30f;
			}
			if (ai[1] > 0f)
			{
				ai[1] -= 1f;
			}
			else
			{
				flag = true;
			}
			int num9 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
			if (num9 != -1)
			{
				Vector2 vector = (vector = (Main.npc[num9].Center - center).SafeNormalize(Vector2.UnitY));
				rotation = rotation.AngleLerp(vector.ToRotation(), 0.08f);
				if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				if (flag && owner == Main.myPlayer)
				{
					direction = Math.Sign(vector.X);
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else
			{
				float targetAngle = 0f;
				if (direction == -1)
				{
					targetAngle = (float)Math.PI;
				}
				rotation = rotation.AngleLerp(targetAngle, 0.05f);
			}
		}
		else if (ai[0] == 2f)
		{
			frame = num4 + (int)(ai[1] / (float)num6);
			if (ai[1] == (float)num2)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BallistaTowerShot, base.Center);
				Vector2 vector2 = new Vector2(direction, 0f);
				int num10 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num10 != -1)
				{
					vector2 = (Main.npc[num10].Center - center).SafeNormalize(Vector2.UnitX * direction);
				}
				rotation = vector2.ToRotation();
				if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				Vector2 vector3 = vector2 * num3;
				if (owner == Main.myPlayer)
				{
					NewProjectile(center, vector3, num, damage, knockBack, owner);
				}
			}
			if ((ai[1] += 1f) >= (float)(num5 * num6))
			{
				ai[0] = 1f;
				ai[1] = num7;
			}
		}
		spriteDirection = direction;
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private void AI_135_OgreStomp()
	{
		float num = 40f;
		if (type == 922)
		{
			num = 30f;
		}
		ai[0] += 1f;
		if (ai[0] > 9f)
		{
			Kill();
			return;
		}
		velocity = Vector2.Zero;
		position = base.Center;
		base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num, Utils.GetLerpValue(0f, 9f, ai[0]));
		base.Center = position;
		Point point = base.TopLeft.ToTileCoordinates();
		Point point2 = base.BottomRight.ToTileCoordinates();
		int num2 = point.X / 2 + point2.X / 2;
		int num3 = width / 2;
		if ((int)ai[0] % 3 != 0)
		{
			return;
		}
		int num4 = (int)ai[0] / 3;
		for (int i = point.X; i <= point2.X; i++)
		{
			for (int j = point.Y; j <= point2.Y; j++)
			{
				if (Vector2.Distance(base.Center, new Vector2(i * 16, j * 16)) > (float)num3)
				{
					continue;
				}
				Tile tileSafely = Framing.GetTileSafely(i, j);
				if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
				{
					continue;
				}
				Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
				if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
				{
					continue;
				}
				int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
				for (int k = 0; k < num5; k++)
				{
					Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
					obj.velocity.Y -= 3f + (float)num4 * 1.5f;
					obj.velocity.Y *= Main.rand.NextFloat();
					obj.velocity.Y *= 0.75f;
					obj.scale += (float)num4 * 0.03f;
				}
				if (num4 >= 2)
				{
					if (type == 922)
					{
						Color newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
						for (int l = 0; l < num5 - 1; l++)
						{
							int num6 = Dust.NewDust(position, 12, 12, 4, 0f, 0f, 50, newColor, 1.5f);
							Main.dust[num6].velocity.Y -= 0.1f + (float)num4 * 0.5f;
							Main.dust[num6].velocity.Y *= Main.rand.NextFloat();
							Main.dust[num6].velocity.X *= Main.rand.NextFloatDirection() * 3f;
							Main.dust[num6].position = new Vector2(i * 16 + Main.rand.Next(16), j * 16 + Main.rand.Next(16));
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num6].velocity *= 0.5f;
								Main.dust[num6].noGravity = true;
							}
						}
					}
					else
					{
						for (int m = 0; m < num5 - 1; m++)
						{
							Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
							obj2.velocity.Y -= 1f + (float)num4;
							obj2.velocity.Y *= Main.rand.NextFloat();
							obj2.velocity.Y *= 0.75f;
						}
					}
				}
				if (num5 <= 0 || Main.rand.Next(3) == 0)
				{
					continue;
				}
				float num7 = (float)Math.Abs(num2 - i) / (num / 2f);
				if (type == 922)
				{
					Color newColor2 = NPC.AI_121_QueenSlime_GetDustColor();
					newColor2.A = 150;
					for (int n = 0; n < 3; n++)
					{
						int num8 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, newColor2, 2f - (float)num4 * 0.15f + num7 * 0.5f);
						Main.dust[num8].velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
						Main.dust[num8].velocity.Y *= Main.rand.NextFloat();
						Main.dust[num8].velocity.X *= Main.rand.NextFloatDirection() * 3f;
						Main.dust[num8].position = new Vector2(i * 16 + 20, j * 16 + 20);
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num8].velocity *= 0.5f;
							Main.dust[num8].noGravity = true;
						}
					}
				}
				else
				{
					Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num4 * 0.15f + num7 * 0.5f);
					gore.velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
					gore.velocity.Y *= Main.rand.NextFloat();
					gore.position = new Vector2(i * 16 + 20, j * 16 + 20);
				}
			}
		}
	}

	private void AI_136_BetsyBreath()
	{
		if (ai[1] < 0f || ai[1] > 200f)
		{
			Kill();
			return;
		}
		NPC nPC = Main.npc[(int)ai[1]];
		float num = -8f;
		Vector2 vector2 = (base.Center = nPC.Center + new Vector2((110f + num) * (float)nPC.spriteDirection, 30f).RotatedBy(nPC.rotation));
		rotation = nPC.DirectionTo(base.Center).ToRotation();
		DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
		float num2 = ai[0] / 40f;
		if (num2 > 1f)
		{
			num2 = 1f;
		}
		float num3 = (ai[0] - 38f) / 40f;
		if (num3 < 0f)
		{
			num3 = 0f;
		}
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, 16f, DelegateMethods.CastLight);
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
		Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
		if (num3 == 0f && num2 > 0.1f)
		{
			for (int i = 0; i < 3; i++)
			{
				Dust dust = Dust.NewDustDirect(position, width, height, 6);
				dust.fadeIn = 1.5f;
				dust.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				dust.velocity += nPC.velocity * 2f;
				dust.noLight = true;
				dust.noGravity = true;
				dust.alpha = 200;
			}
		}
		if (Main.rand.Next(5) == 0 && ai[0] >= 15f)
		{
			Gore gore = Gore.NewGoreDirect(base.Center + rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
			gore.velocity *= 0.3f;
			gore.velocity += rotation.ToRotationVector2() * 4f;
		}
		for (int j = 0; j < 1; j++)
		{
			Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
			dust2.fadeIn = 1.5f;
			dust2.scale = 0.4f;
			dust2.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
			dust2.velocity += nPC.velocity * 2f;
			dust2.velocity *= 0.3f;
			dust2.noLight = true;
			dust2.noGravity = true;
			float num4 = Main.rand.NextFloat();
			dust2.position = Vector2.Lerp(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, num4);
			dust2.position += rotation.ToRotationVector2().RotatedBy(1.5707963705062866) * (20f + 100f * (num4 - 0.5f));
		}
		frameCounter++;
		ai[0] += 1f;
		if (ai[0] >= 78f)
		{
			Kill();
		}
	}

	private void AI_137_LightningAura()
	{
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		int num = 10;
		int num2 = 999;
		int num3 = 30;
		int num4 = 40;
		int num5 = 4;
		knockBack = 0f;
		if (Main.player[owner].setMonkT2)
		{
			num3 -= 5;
		}
		if (Main.player[owner].setMonkT3)
		{
			num = 14;
			num5 = 8;
		}
		ai[0] += 1f;
		if (ai[0] >= (float)num3)
		{
			ai[0] = 0f;
		}
		if (ai[0] == 0f)
		{
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Distance(base.Center) < (float)(width / 2) && Colliding(base.Hitbox, nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_LightningAuraZap, base.Center);
			}
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
			velocity = Vector2.Zero;
			Point origin = base.Center.ToTileCoordinates();
			bool flag2 = true;
			if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(500), _cachedConditions_notNull, _cachedConditions_solid), out var result))
			{
				flag2 = false;
				position.Y += 16f;
				return;
			}
			if (!WorldUtils.Find(new Point(result.X, result.Y - 1), Searches.Chain(new Searches.Up(num), _cachedConditions_notNull, _cachedConditions_solid), out var result2))
			{
				result2 = new Point(origin.X, origin.Y - num - 1);
			}
			int num6 = 0;
			if (flag2 && Main.tile[result.X, result.Y] != null && Main.tile[result.X, result.Y].blockType() == 1)
			{
				num6 += 8;
			}
			Vector2 center = result.ToWorldCoordinates(8f, num6);
			Vector2 vector = result2.ToWorldCoordinates(8f, 0f);
			base.Size = new Vector2(1f, center.Y - vector.Y);
			if (height > num * 16)
			{
				height = num * 16;
			}
			if (height < num5 * 16)
			{
				height = num5 * 16;
			}
			height *= 2;
			width = (int)((float)height * 1f);
			if (width > num2)
			{
				width = num2;
			}
			base.Center = center;
		}
		if (++frameCounter >= 8)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
		Utils.PlotTileLine(base.Center + Vector2.UnitX * -40f, base.Center + Vector2.UnitX * 40f, 80f, DelegateMethods.CastLightOpen);
		Vector2 vector2 = new Vector2(base.Top.X, position.Y + (float)num4);
		for (int j = 0; j < 4; j++)
		{
			if (Main.rand.Next(6) != 0)
			{
				continue;
			}
			Vector2 vector3 = Main.rand.NextVector2Unit();
			if (!(Math.Abs(vector3.X) < 0.12f))
			{
				Vector2 targetPosition = base.Center + vector3 * new Vector2((height - num4) / 2);
				if (!WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16) && AI_137_CanHit(targetPosition))
				{
					Dust dust = Dust.NewDustDirect(targetPosition, 0, 0, 226, 0f, 0f, 100);
					dust.position = targetPosition;
					dust.velocity = (vector2 - dust.position).SafeNormalize(Vector2.Zero);
					dust.scale = 0.7f;
					dust.fadeIn = 1f;
					dust.noGravity = true;
					dust.noLight = true;
				}
			}
		}
		for (int k = 0; k < 0; k++)
		{
			if (Main.rand.Next(10) != 0)
			{
				continue;
			}
			Vector2 vector4 = Main.rand.NextVector2Unit();
			if (!(Math.Abs(vector4.X) < 0.12f))
			{
				Vector2 targetPosition2 = base.Center + vector4 * new Vector2((height - num4) / 2) * Main.rand.NextFloat();
				if (!WorldGen.SolidTile((int)targetPosition2.X / 16, (int)targetPosition2.Y / 16) && AI_137_CanHit(targetPosition2))
				{
					Dust dust2 = Dust.NewDustDirect(targetPosition2, 0, 0, 226, 0f, 0f, 100);
					dust2.velocity *= 0.6f;
					dust2.velocity += Vector2.UnitY * -2f;
					dust2.noGravity = true;
					dust2.noLight = true;
				}
			}
		}
		for (int l = 0; l < 4; l++)
		{
			if (Main.rand.Next(10) == 0)
			{
				Dust dust3 = Dust.NewDustDirect(vector2 - new Vector2(8f, 0f), 16, height / 2 - 40, 226, 0f, 0f, 100);
				dust3.velocity *= 0.6f;
				dust3.velocity += Vector2.UnitY * -2f;
				dust3.scale = 0.7f;
				dust3.noGravity = true;
				dust3.noLight = true;
			}
		}
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private void AI_138_ExplosiveTrap()
	{
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		spriteDirection = (direction = 1);
		int num = 90;
		int num2 = 694;
		int num3 = 48;
		if (Main.player[owner].setHuntressT2)
		{
			num = 60;
		}
		if (Main.player[owner].setHuntressT3)
		{
			num = 30;
		}
		switch (type)
		{
		case 692:
			num2 = 695;
			break;
		case 693:
			num2 = 696;
			break;
		}
		Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
		if (++frameCounter >= 12)
		{
			frameCounter = 0;
			if (++frame >= Main.projFrames[type])
			{
				frame = 0;
			}
		}
		if (localAI[0] > 0f)
		{
			localAI[0] -= 1f;
		}
		if (localAI[0] <= 0f && owner == Main.myPlayer)
		{
			localAI[0] = 3f;
			bool flag = false;
			Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, -num3), new Vector2(num3 * 3));
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && rectangle.Intersects(nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_ExplosiveTrapExplode);
				localAI[0] = num;
				NewProjectile(base.Center + new Vector2(0f, -num3), Vector2.Zero, num2, damage, knockBack, owner);
			}
		}
		tileCollide = true;
		velocity.Y += 0.2f;
	}

	private void AI_139_ExplosiveTrapExplosion()
	{
		int num = Main.projFrames[type];
		int num2 = 3;
		alpha -= 25;
		if (alpha < 0)
		{
			alpha = 0;
		}
		if (localAI[0] == 0f)
		{
			localAI[0] = 1f;
		}
		if (++frameCounter >= num2)
		{
			frameCounter = 0;
			if (++frame >= num)
			{
				Kill();
				return;
			}
		}
		DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
		Utils.PlotTileLine(base.Top, base.Bottom, 2f, DelegateMethods.CastLightOpen);
	}

	private void AI_140_MonkStaffT1()
	{
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_050d: Unknown result type (might be due to invalid IL or missing references)
		float num = 50f;
		float num2 = 2f;
		float num3 = 20f;
		Player player = Main.player[owner];
		float num4 = -(float)Math.PI / 4f;
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		Vector2 vector2 = Vector2.Zero;
		if (player.dead)
		{
			Kill();
			return;
		}
		if (type == 697)
		{
			int num5 = damage * 3;
			int num6 = Math.Sign(velocity.X);
			velocity = new Vector2(num6, 0f);
			if (ai[0] == 0f)
			{
				rotation = new Vector2(num6, 0f - player.gravDir).ToRotation() + num4 + (float)Math.PI;
				if (velocity.X < 0f)
				{
					rotation -= (float)Math.PI / 2f;
				}
			}
			alpha -= 128;
			if (alpha < 0)
			{
				alpha = 0;
			}
			float num7 = ai[0] / num;
			float num8 = 1f;
			ai[0] += num8;
			rotation += (float)Math.PI * 2f * num2 / num * (float)num6;
			bool flag = ai[0] == (float)(int)(num / 2f);
			if (ai[0] >= num || (flag && !player.controlUseItem))
			{
				Kill();
				player.reuseDelay = 10;
			}
			else if (flag)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				int num9 = ((player.DirectionTo(mouseWorld).X > 0f) ? 1 : (-1));
				if ((float)num9 != velocity.X)
				{
					player.ChangeDir(num9);
					velocity = new Vector2(num9, 0f);
					netUpdate = true;
					rotation -= (float)Math.PI;
				}
			}
			float num10 = rotation - (float)Math.PI / 4f * (float)num6;
			vector2 = (num10 + ((num6 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num3;
			Vector2 vector3 = base.Center + (num10 + ((num6 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
			if (Main.rand.Next(2) == 0)
			{
				Dust dust = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
				dust.velocity = DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
			}
			if (num7 >= 0.75f)
			{
				Dust dust2 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
				dust2.velocity = DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
				dust2.noGravity = true;
				dust2.color = new Color(20, 255, 100, 160);
			}
			if (ai[0] >= num - 8f && ai[0] < num - 2f)
			{
				for (int i = 0; i < 5; i++)
				{
					Dust dust3 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
					dust3.velocity *= 1.2f;
					dust3.noGravity = true;
					dust3.scale += 0.1f;
					dust3.color = new Color(20, 255, 100, 160);
				}
			}
			if (ai[0] == num - 3f && owner == Main.myPlayer)
			{
				if (localAI[1] == 1f || WorldUtils.Find(vector3.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), _cachedConditions_notNull, _cachedConditions_solid), out var _))
				{
					NewProjectile(vector3 + new Vector2(num6 * 20, -60f), Vector2.Zero, 698, num5, 0f, owner);
					SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundImpact, base.Center);
				}
				else
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundMiss, base.Center);
				}
			}
		}
		if (type == 707)
		{
			Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
			int num11 = Math.Sign(velocity.X);
			velocity = new Vector2(num11, 0f);
			if (ai[0] == 0f)
			{
				rotation = new Vector2(num11, 0f - player.gravDir).ToRotation() + num4 + (float)Math.PI;
				if (velocity.X < 0f)
				{
					rotation -= (float)Math.PI / 2f;
				}
			}
			alpha -= 128;
			if (alpha < 0)
			{
				alpha = 0;
			}
			_ = ai[0] / num;
			float num12 = 1f;
			ai[0] += num12;
			rotation += (float)Math.PI * 2f * num2 / num * (float)num11;
			bool flag2 = ai[0] == (float)(int)(num / 2f);
			if (ai[0] >= num || (flag2 && !player.controlUseItem))
			{
				Kill();
				player.reuseDelay = 2;
			}
			else if (flag2)
			{
				Vector2 mouseWorld2 = Main.MouseWorld;
				int num13 = ((player.DirectionTo(mouseWorld2).X > 0f) ? 1 : (-1));
				if ((float)num13 != velocity.X)
				{
					player.ChangeDir(num13);
					velocity = new Vector2(num13, 0f);
					netUpdate = true;
					rotation -= (float)Math.PI;
				}
			}
			if ((ai[0] == num12 || (ai[0] == (float)(int)(num / 2f) && active)) && owner == Main.myPlayer)
			{
				Vector2 mouseWorld3 = Main.MouseWorld;
				_ = player.DirectionTo(mouseWorld3) * 0f;
			}
			float num14 = rotation - (float)Math.PI / 4f * (float)num11;
			vector2 = (num14 + ((num11 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num3;
			Vector2 vector4 = base.Center + (num14 + ((num11 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
			Vector2 vector5 = num14.ToRotationVector2();
			Vector2 vector6 = vector5.RotatedBy((float)Math.PI / 2f * (float)spriteDirection);
			if (Main.rand.Next(2) == 0)
			{
				Dust dust4 = Dust.NewDustDirect(vector4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
				dust4.velocity = DirectionTo(dust4.position) * 0.1f + dust4.velocity * 0.1f;
			}
			for (int j = 0; j < 4; j++)
			{
				float num15 = 1f;
				float num16 = 1f;
				switch (j)
				{
				case 1:
					num16 = -1f;
					break;
				case 2:
					num16 = 1.25f;
					num15 = 0.5f;
					break;
				case 3:
					num16 = -1.25f;
					num15 = 0.5f;
					break;
				}
				if (Main.rand.Next(6) != 0)
				{
					Dust dust5 = Dust.NewDustDirect(position, 0, 0, 226, 0f, 0f, 100);
					dust5.position = base.Center + vector5 * (60f + Main.rand.NextFloat() * 20f) * num16;
					dust5.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num16 * num15;
					dust5.noGravity = true;
					dust5.noLight = true;
					dust5.scale = 0.5f;
					dust5.customData = this;
					if (Main.rand.Next(4) == 0)
					{
						dust5.noGravity = false;
					}
				}
			}
		}
		position = vector - base.Size / 2f;
		position += vector2;
		spriteDirection = direction;
		timeLeft = 2;
		player.ChangeDir(direction);
		player.heldProj = whoAmI;
		player.SetDummyItemTime(2);
		player.itemRotation = MathHelper.WrapAngle(rotation);
	}

	private void AI_141_MonkStaffT1Explosion()
	{
		Point scanAreaStart = base.TopLeft.ToTileCoordinates();
		Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
		_ = scanAreaStart.X / 2;
		_ = scanAreaEnd.X / 2;
		int explosionRange = width;
		ai[0] += 1f;
		if (ai[0] > 20f)
		{
			Kill();
		}
		else if (ai[0] == 1f)
		{
			CreateImpactExplosion(6, base.Bottom, ref scanAreaStart, ref scanAreaEnd, explosionRange, out var causedShockwaves);
			CreateImpactExplosion2_SleepyOctopod(base.Bottom, causedShockwaves);
		}
	}

	private void CreateImpactExplosion(int dustAmountMultiplier, Vector2 explosionOrigin, ref Point scanAreaStart, ref Point scanAreaEnd, int explosionRange, out bool causedShockwaves)
	{
		causedShockwaves = false;
		int num = 4;
		for (int i = scanAreaStart.X; i <= scanAreaEnd.X; i++)
		{
			for (int j = scanAreaStart.Y; j <= scanAreaEnd.Y; j++)
			{
				if (Vector2.Distance(explosionOrigin, new Vector2(i * 16, j * 16)) > (float)explosionRange)
				{
					continue;
				}
				Tile tileSafely = Framing.GetTileSafely(i, j);
				if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
				{
					continue;
				}
				Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
				if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
				{
					continue;
				}
				int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely) * dustAmountMultiplier;
				for (int k = 0; k < num2; k++)
				{
					Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
					obj.velocity.Y -= 3f + (float)num * 1.5f;
					obj.velocity.Y *= Main.rand.NextFloat();
					obj.scale += (float)num * 0.03f;
				}
				if (num >= 2)
				{
					for (int l = 0; l < num2 - 1; l++)
					{
						Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj2.velocity.Y -= 1f + (float)num;
						obj2.velocity.Y *= Main.rand.NextFloat();
					}
				}
				if (num2 > 0)
				{
					causedShockwaves = true;
				}
			}
		}
	}

	private void CreateImpactExplosion2_SleepyOctopod(Vector2 explosionOrigin, bool causedShockwaves)
	{
		Vector2 spinningpoint = new Vector2(7f, 0f);
		Vector2 vector = new Vector2(1f, 0.7f);
		Color color = new Color(20, 255, 100, 200);
		for (float num = 0f; num < 25f; num += 1f)
		{
			Vector2 vector2 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 25f) * vector;
			Dust dust = Dust.NewDustDirect(position, width, height, 55);
			dust.alpha = 0;
			if (!causedShockwaves)
			{
				dust.alpha = 50;
			}
			dust.color = color;
			dust.position = explosionOrigin + vector2;
			dust.velocity.Y -= 3f;
			dust.velocity.X *= 0.5f;
			dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
			dust.noLight = true;
		}
		if (!causedShockwaves)
		{
			for (float num2 = 0f; num2 < 25f; num2 += 1f)
			{
				Vector2 vector3 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 25f) * vector;
				Dust dust2 = Dust.NewDustDirect(position, width, height, 55);
				dust2.alpha = 100;
				dust2.color = color;
				dust2.position = explosionOrigin + vector3;
				dust2.velocity.Y -= 5f;
				dust2.velocity.X *= 0.8f;
				dust2.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
				dust2.noLight = true;
			}
		}
	}

	private void CreateImpactExplosion2_FlailTileCollision(Vector2 explosionOrigin, bool causedShockwaves, Vector2 velocityBeforeCollision)
	{
		Vector2 spinningpoint = new Vector2(7f, 0f);
		Vector2 vector = new Vector2(1f, 0.7f);
		Color color = Color.White * 0.5f;
		Vector2 vector2 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
		for (float num = 0f; num < 8f; num += 1f)
		{
			Vector2 vector3 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 8f) * vector;
			Dust dust = Dust.NewDustDirect(position, width, height, 31);
			dust.alpha = 0;
			if (!causedShockwaves)
			{
				dust.alpha = 50;
			}
			dust.color = color;
			dust.position = explosionOrigin + vector3;
			dust.velocity.Y -= 0.8f;
			dust.velocity.X *= 0.8f;
			dust.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
			dust.scale = 0.4f;
			dust.noLight = true;
			dust.velocity += vector2 * 2f;
		}
		if (!causedShockwaves)
		{
			for (float num2 = 0f; num2 < 8f; num2 += 1f)
			{
				Vector2 vector4 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 8f) * vector;
				Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
				dust2.alpha = 100;
				dust2.color = color;
				dust2.position = explosionOrigin + vector4;
				dust2.velocity.Y -= 1f;
				dust2.velocity.X *= 0.4f;
				dust2.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
				dust2.scale = 0.4f;
				dust2.noLight = true;
				dust2.velocity += vector2 * 1.5f;
			}
		}
	}

	private void AI_142_MonkStaffT2And3()
	{
		Player player = Main.player[owner];
		Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
		direction = player.direction;
		player.heldProj = whoAmI;
		base.Center = vector;
		if (player.dead)
		{
			Kill();
			return;
		}
		if (!player.frozen)
		{
			if (type == 699)
			{
				spriteDirection = (direction = player.direction);
				Vector2 vector2 = vector;
				alpha -= 127;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
				float num2 = 1f - num;
				float num3 = velocity.ToRotation();
				float num4 = velocity.Length();
				float num5 = 22f;
				Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num2 * ((float)Math.PI * 2f)) * new Vector2(num4, ai[0]);
				position += spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5, 0f).RotatedBy(num3);
				Vector2 target = vector2 + spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5 + 40f, 0f).RotatedBy(num3);
				rotation = vector2.AngleTo(target) + (float)Math.PI / 4f * (float)player.direction;
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
				vector2.DirectionTo(base.Center);
				Vector2 vector3 = vector2.DirectionTo(target);
				Vector2 vector4 = velocity.SafeNormalize(Vector2.UnitY);
				float num6 = 2f;
				for (int i = 0; (float)i < num6; i++)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
					dust.velocity = vector2.DirectionTo(dust.position) * 2f;
					dust.position = base.Center + vector4.RotatedBy(num2 * ((float)Math.PI * 2f) * 2f + (float)i / num6 * ((float)Math.PI * 2f)) * 10f;
					dust.scale = 1f + 0.6f * Main.rand.NextFloat();
					dust.velocity += vector4 * 3f;
					dust.noGravity = true;
				}
				for (int j = 0; j < 1; j++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110);
						dust2.velocity = vector2.DirectionTo(dust2.position) * 2f;
						dust2.position = base.Center + vector3 * -110f;
						dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
						dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
						dust2.noGravity = true;
						dust2.noLight = true;
					}
				}
			}
			else if (type == 708)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				spriteDirection = (direction = player.direction);
				alpha -= 127;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num7 = (float)player.itemAnimation / (float)player.itemAnimationMax;
				float num8 = 1f - num7;
				float num9 = velocity.ToRotation();
				float num10 = velocity.Length();
				float num11 = 22f;
				Vector2 spinningpoint2 = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num8 * ((float)Math.PI * 2f)) * new Vector2(num10, ai[0]);
				position += spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11, 0f).RotatedBy(num9);
				Vector2 vector5 = vector + spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11 + 40f, 0f).RotatedBy(num9);
				rotation = (vector5 - vector).SafeNormalize(Vector2.UnitX).ToRotation() + (float)Math.PI / 4f * (float)player.direction;
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
				(base.Center - vector).SafeNormalize(Vector2.Zero);
				(vector5 - vector).SafeNormalize(Vector2.Zero);
				Vector2 vector6 = velocity.SafeNormalize(Vector2.UnitY);
				if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && owner == Main.myPlayer)
				{
					Vector2 vector7 = vector6 + Main.rand.NextVector2Square(-0.2f, 0.2f);
					vector7 *= 12f;
					switch (player.itemAnimation)
					{
					case 2:
						vector7 = vector6.RotatedBy(0.38397246599197388);
						break;
					case 6:
						vector7 = vector6.RotatedBy(-0.38397246599197388);
						break;
					case 10:
						vector7 = vector6.RotatedBy(0.0);
						break;
					}
					vector7 *= 10f + (float)Main.rand.Next(4);
					NewProjectile(base.Center, vector7, 709, damage, 0f, owner);
				}
				for (int k = 0; k < 3; k += 2)
				{
					float num12 = 1f;
					float num13 = 1f;
					switch (k)
					{
					case 1:
						num13 = -1f;
						break;
					case 2:
						num13 = 1.25f;
						num12 = 0.5f;
						break;
					case 3:
						num13 = -1.25f;
						num12 = 0.5f;
						break;
					}
					if (Main.rand.Next(6) != 0)
					{
						num13 *= 1.2f;
						Dust dust3 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100);
						dust3.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num13 * num12;
						dust3.noGravity = true;
						dust3.noLight = true;
						dust3.scale = 0.75f;
						dust3.fadeIn = 0.8f;
						dust3.customData = this;
						if (Main.rand.Next(3) == 0)
						{
							dust3.noGravity = false;
							dust3.fadeIn = 0f;
						}
					}
				}
			}
		}
		if (player.itemAnimation == 2)
		{
			Kill();
			player.reuseDelay = 2;
		}
	}

	private void AI_143_MonkStaffT2Ghast()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		SlotId val;
		if (ai[0] == 0f)
		{
			float[] array = localAI;
			val = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center);
			array[1] = ((SlotId)(ref val)).ToFloat();
		}
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound == null)
		{
			float[] array2 = localAI;
			val = SlotId.Invalid;
			array2[1] = ((SlotId)(ref val)).ToFloat();
		}
		else
		{
			activeSound.Position = base.Center;
		}
		ai[0] += 1f;
		if (ai[0] > 50f)
		{
			alpha += 25;
			if (alpha > 255)
			{
				alpha = 255;
			}
		}
		else
		{
			alpha -= 25;
			if (alpha < 100)
			{
				alpha = 100;
			}
		}
		velocity *= 0.98f;
		if (++frameCounter >= 5)
		{
			frameCounter = 0;
			if (++frame >= 4)
			{
				frame = 0;
			}
		}
		if (ai[0] >= 60f)
		{
			Kill();
		}
		direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
		rotation = velocity.ToRotation();
		if (spriteDirection == -1)
		{
			rotation += (float)Math.PI;
		}
		if (ai[0] >= 10f && ai[0] < 34f)
		{
			Vector2 vector = velocity.SafeNormalize(Vector2.UnitY);
			float num = ai[0] / 60f;
			float num2 = 2f;
			for (int i = 0; (float)i < num2; i++)
			{
				Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
				dust.velocity = vector * 2f;
				dust.position = base.Center + vector.RotatedBy(num * ((float)Math.PI * 2f) * 2f + (float)i / num2 * ((float)Math.PI * 2f)) * 7f;
				dust.scale = 1f + 0.6f * Main.rand.NextFloat();
				dust.velocity += vector * 3f;
				dust.noGravity = true;
			}
		}
	}

	private void AI_144_DD2Pet()
	{
		Player player = Main.player[owner];
		float num = 4f;
		int num2 = 6;
		int num3 = 4;
		int num4 = Main.projFrames[type];
		int num5 = 0;
		float num6 = 0.08f;
		bool flag = false;
		float num7 = 0.1f;
		Vector2 vector = new Vector2(player.direction * 30, -20f);
		if (player.dead)
		{
			Kill();
			return;
		}
		bool flag2 = true;
		switch (type)
		{
		case 702:
		{
			if (player.petFlagDD2Ghost)
			{
				timeLeft = 2;
			}
			vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 60f)) * 2f;
			num3 = 4;
			num2 = 10;
			flag2 = false;
			num = 6f;
			Vector2 vector3 = new Vector2((spriteDirection == -1) ? (-6) : (-2), -26f).RotatedBy(rotation);
			if (Main.rand.Next(24) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center + vector3, 4, 4, 135, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					dust2.noGravity = true;
					dust2.velocity.Y -= 3f;
					dust2.noLight = true;
				}
				else if (Main.rand.Next(2) != 0)
				{
					dust2.noLight = true;
				}
				dust2.velocity *= 0.5f;
				dust2.velocity.Y -= 0.9f;
				dust2.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
			}
			DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
			Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(player.Left, player.Right, 40f, DelegateMethods.CastLightOpen);
			break;
		}
		case 703:
			if (player.petFlagDD2Gato)
			{
				timeLeft = 2;
			}
			vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 30f)) * 2f;
			num2 = 4;
			num3 = 2;
			num = 3f;
			num4 = 4;
			break;
		case 701:
			if (player.petFlagDD2Dragon)
			{
				timeLeft = 2;
			}
			break;
		case 764:
		{
			num7 = 0.025f;
			num6 = 0.04f;
			flag = true;
			localAI[0] += 1f;
			if (localAI[0] > 120f)
			{
				localAI[0] = 0f;
			}
			localAI[1] += velocity.X * 0.01f;
			localAI[1] += 0.008333334f;
			if (localAI[1] < (float)Math.PI * -2f)
			{
				localAI[1] += (float)Math.PI * 2f;
			}
			if (localAI[1] > (float)Math.PI * 2f)
			{
				localAI[1] -= (float)Math.PI * 2f;
			}
			if (velocity.Length() < 4f)
			{
				localAI[1] *= 0.9f;
				if (velocity.Length() > 0.1f && Main.rand.Next(30) == 0)
				{
					Dust dust = Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150);
					dust.velocity *= 0.3f;
					dust.noLightEmittence = true;
				}
			}
			else
			{
				Vector2 vector2 = new Vector2(Main.screenWidth, Main.screenHeight);
				base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f)));
				if (Main.rand.Next(15) == 0)
				{
					Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 0.9f).noLightEmittence = true;
				}
			}
			float num8 = localAI[0] / 120f * 2f;
			if (num8 > 1f)
			{
				num8 = 2f - num8;
			}
			Opacity = MathHelper.Lerp(0.4f, 0.75f, num8);
			vector.Y += (float)Math.Cos(localAI[0] / 120f * ((float)Math.PI * 2f)) * 2f;
			if (player.petFlagUpbeatStar)
			{
				timeLeft = 2;
			}
			break;
		}
		}
		if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
		{
			vector.X += -player.direction * 64;
		}
		direction = (spriteDirection = player.direction);
		Vector2 vector4 = player.MountedCenter + vector;
		float num9 = Vector2.Distance(base.Center, vector4);
		if (num9 > 1000f)
		{
			base.Center = player.Center + vector;
		}
		Vector2 vector5 = vector4 - base.Center;
		if (num9 < num)
		{
			velocity *= 0.25f;
		}
		if (vector5 != Vector2.Zero)
		{
			if (vector5.Length() < num * 0.5f)
			{
				velocity = vector5;
			}
			else
			{
				velocity = vector5 * num7;
			}
		}
		if (velocity.Length() > 6f)
		{
			float num10 = velocity.X * num6 + velocity.Y * (float)spriteDirection * 0.02f;
			if (Math.Abs(rotation - num10) >= (float)Math.PI)
			{
				if (num10 < rotation)
				{
					rotation -= (float)Math.PI * 2f;
				}
				else
				{
					rotation += (float)Math.PI * 2f;
				}
			}
			float num11 = 12f;
			rotation = (rotation * (num11 - 1f) + num10) / num11;
			if (++frameCounter >= num3)
			{
				frameCounter = 0;
				if (++frame >= num4)
				{
					frame = num5;
				}
			}
		}
		else
		{
			if (rotation > (float)Math.PI)
			{
				rotation -= (float)Math.PI * 2f;
			}
			if (rotation > -0.005f && rotation < 0.005f)
			{
				rotation = 0f;
			}
			else
			{
				rotation *= 0.96f;
			}
			if (++frameCounter >= num2)
			{
				frameCounter = 0;
				if (++frame >= num4)
				{
					frame = num5;
				}
			}
		}
		if (!flag)
		{
			localAI[0] += 1f;
			if (localAI[0] > 120f)
			{
				localAI[0] = 0f;
			}
		}
	}

	private void AI_145_BookStaffStorm()
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		float num = 300f;
		SlotId val;
		if (soundDelay == 0)
		{
			soundDelay = -1;
			float[] array = localAI;
			val = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, base.Center);
			array[1] = ((SlotId)(ref val)).ToFloat();
		}
		ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
		if (activeSound != null)
		{
			activeSound.Position = base.Center;
			activeSound.Volume = 1f - Math.Max(ai[0] - (num - 15f), 0f) / 15f;
		}
		else
		{
			float[] array2 = localAI;
			val = SlotId.Invalid;
			array2[1] = ((SlotId)(ref val)).ToFloat();
		}
		if (localAI[0] >= 16f && ai[0] < num - 15f)
		{
			ai[0] = num - 15f;
		}
		ai[0] += 1f;
		if (ai[0] >= num)
		{
			Kill();
		}
		Vector2 top = base.Top;
		Vector2 bottom = base.Bottom;
		Vector2 vector = Vector2.Lerp(top, bottom, 0.5f);
		Vector2 vector2 = new Vector2(0f, bottom.Y - top.Y);
		vector2.X = vector2.Y * 0.2f;
		int num2 = 16;
		int num3 = 160;
		for (int i = 0; i < 1; i++)
		{
			Vector2 vector3 = new Vector2(base.Center.X - (float)(num2 / 2), position.Y + (float)height - (float)num3);
			if (Collision.SolidCollision(vector3, num2, num3) || Collision.WetCollision(vector3, num2, num3))
			{
				if (velocity.Y > 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y > -4f)
				{
					velocity.Y -= 2f;
				}
				else
				{
					velocity.Y -= 4f;
					localAI[0] += 2f;
				}
				if (velocity.Y < -16f)
				{
					velocity.Y = -16f;
				}
				continue;
			}
			localAI[0] -= 1f;
			if (localAI[0] < 0f)
			{
				localAI[0] = 0f;
			}
			if (velocity.Y < 0f)
			{
				velocity.Y = 0f;
			}
			if (velocity.Y < 4f)
			{
				velocity.Y += 2f;
			}
			else
			{
				velocity.Y += 4f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}
		if (ai[0] < num - 30f)
		{
			for (int j = 0; j < 1; j++)
			{
				float value = -1f;
				float value2 = 0.9f;
				float amount = Main.rand.NextFloat();
				Vector2 vector4 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value, value2, amount));
				vector4.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
				vector4.X *= -1f;
				Vector2 vector5 = new Vector2(6f, 10f);
				Vector2 vector6 = vector + vector2 * vector4 * 0.5f + vector5;
				Dust dust = Main.dust[Dust.NewDust(vector6, 0, 0, 274)];
				dust.position = vector6;
				dust.fadeIn = 1.3f;
				dust.scale = 0.87f;
				dust.alpha = 211;
				if (vector4.X > -1.2f)
				{
					dust.velocity.X = 1f + Main.rand.NextFloat();
				}
				dust.noGravity = true;
				dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
				dust.velocity.X += velocity.X * 2.1f;
				dust.noLight = true;
			}
		}
		Vector2 vector7 = base.Bottom + new Vector2(-25f, -25f);
		for (int k = 0; k < 4; k++)
		{
			Dust dust2 = Dust.NewDustDirect(vector7, 50, 25, 31, velocity.X, -2f, 100);
			dust2.fadeIn = 1.1f;
			dust2.noGravity = true;
		}
		for (int l = 0; l < 1; l++)
		{
			if (Main.rand.Next(5) == 0)
			{
				Gore gore = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore.timeLeft = 60;
				gore.alpha = 50;
				gore.velocity.X += velocity.X;
			}
		}
		for (int m = 0; m < 1; m++)
		{
			if (Main.rand.Next(7) == 0)
			{
				Gore gore2 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore2.timeLeft = 0;
				gore2.alpha = 80;
			}
		}
		for (int n = 0; n < 1; n++)
		{
			if (Main.rand.Next(7) == 0)
			{
				Gore gore3 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
				gore3.timeLeft = 0;
				gore3.alpha = 80;
			}
		}
	}

	public bool AI_137_CanHit(Vector2 targetPosition)
	{
		if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16))
		{
			return false;
		}
		Vector2 vector = base.Top + Vector2.UnitY * 20f;
		bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
		if (!flag)
		{
			Vector2 v = targetPosition - vector;
			Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
			Vector2 vector2 = Vector2.Lerp(vector, targetPosition, 0.5f);
			Vector2 vector3 = vector2 + spinningpoint.RotatedBy(1.5707963705062866) * v.Length() * 0.2f;
			if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
			{
				flag = true;
			}
			if (!flag)
			{
				Vector2 vector4 = vector2 + spinningpoint.RotatedBy(-1.5707963705062866) * v.Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector4, 0, 0) && Collision.CanHitLine(vector4, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
			}
		}
		return flag;
	}

	private Point GetScarabBombDigDirectionSnap8()
	{
		Player player = Main.player[owner];
		Vector2 vector = DirectionTo(player.Center);
		Point result = new Point((!(vector.X > 0f)) ? 1 : (-1), (!(vector.Y > 0f)) ? 1 : (-1));
		if (Math.Abs(vector.X) > Math.Abs(vector.Y) * 2f)
		{
			result.Y = 0;
		}
		else if (Math.Abs(vector.Y) > Math.Abs(vector.X) * 2f)
		{
			result.X = 0;
		}
		return result;
	}

	public Color GetFirstFractalColor()
	{
		return Main.hslToRgb(ai[1], 1f, 0.5f);
	}

	public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(Point pt, float size, Utils.TileActionAttempt plot)
	{
		Tile tile = Main.tile[pt.X, pt.Y];
		if (tile != null && tile.active() && tile.halfBrick())
		{
			int num = pt.Y - 1;
			if (num >= 0)
			{
				tile = Main.tile[pt.X, num];
				if (!WorldGen.SolidOrSlopedTile(tile))
				{
					pt.Y--;
				}
			}
		}
		DelegateMethods.v2_1 = pt.ToVector2();
		DelegateMethods.f_1 = size;
		Utils.PlotTileArea(pt.X, pt.Y, plot);
	}

	public bool IsAttachedTo(NPC npc)
	{
		if (aiStyle == 113 && ai[0] == 1f && ai[1] == (float)npc.whoAmI)
		{
			return true;
		}
		return false;
	}

	public void Kill()
	{
		//IL_201b: Unknown result type (might be due to invalid IL or missing references)
		//IL_203b: Unknown result type (might be due to invalid IL or missing references)
		//IL_2058: Unknown result type (might be due to invalid IL or missing references)
		//IL_c001: Unknown result type (might be due to invalid IL or missing references)
		//IL_c006: Unknown result type (might be due to invalid IL or missing references)
		if (!active)
		{
			return;
		}
		Main.projectileIdentity[owner, identity] = -1;
		int num = timeLeft;
		timeLeft = 0;
		ParticleOrchestraSettings settings;
		if (type == 949)
		{
			SoundEngine.PlaySound(SoundID.Item10, base.Center);
			int num2 = (int)ai[0];
			float num3 = 20f;
			for (float num4 = 0f; num4 < num3; num4++)
			{
				Vector2 vector = position;
				int num5 = Dust.NewDust(vector, 4, 4, num2, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num5].noGravity = true;
				}
				Dust dust = Main.dust[num5];
				dust.velocity *= 0.8f;
				if (num2 == 66)
				{
					Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					Main.dust[num5].noGravity = true;
				}
			}
		}
		else if (type == 756)
		{
			for (float num6 = 0f; num6 < 1f; num6 += 0.025f)
			{
				Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + velocity.SafeNormalize(Vector2.UnitY) * num6 * 200f * scale, 5, Main.rand.NextVector2Circular(3f, 3f));
				dust2.velocity.Y += -0.3f;
				Dust dust = dust2;
				dust.velocity += velocity * 0.2f;
				dust2.scale = 1f;
				dust2.alpha = 100;
			}
		}
		else if (type == 932)
		{
			Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
			SoundEngine.PlaySound(SoundID.Item10, base.Center);
			Vector2 target = base.Center;
			Main.rand.NextFloat();
			int num7 = 10;
			for (int i = 0; i < num7; i++)
			{
				Vector2 vector2 = position - velocity * i;
				int num8 = Main.rand.Next(1, 3);
				float num9 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(num7, 0f, i, clamped: true));
				if ((float)i >= (float)oldPos.Length * 0.3f)
				{
					num8--;
				}
				if ((float)i >= (float)oldPos.Length * 0.75f)
				{
					num8 -= 2;
				}
				vector2.DirectionTo(target).SafeNormalize(Vector2.Zero);
				target = vector2;
				for (float num10 = 0f; num10 < (float)num8; num10++)
				{
					int num11 = Dust.NewDust(vector2, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor);
					Dust dust = Main.dust[num11];
					dust.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num11].noGravity = true;
					Main.dust[num11].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num11].fadeIn = Main.rand.NextFloat() * 1.2f * num9;
					dust = Main.dust[num11];
					dust.scale *= num9;
					if (num11 != 6000)
					{
						Dust dust3 = Dust.CloneDust(num11);
						dust = dust3;
						dust.scale /= 2f;
						dust = dust3;
						dust.fadeIn *= 0.85f;
						dust3.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		else if (type == 931)
		{
			Color fairyQueenWeaponsColor2 = GetFairyQueenWeaponsColor();
			SoundEngine.PlaySound(SoundID.Item10, base.Center);
			Vector2 target2 = base.Center;
			Main.rand.NextFloat();
			for (int j = 0; j < oldPos.Length; j++)
			{
				Vector2 vector3 = oldPos[j];
				if (vector3 == Vector2.Zero)
				{
					break;
				}
				int num12 = Main.rand.Next(1, 3);
				float num13 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, j, clamped: true));
				if ((float)j >= (float)oldPos.Length * 0.3f)
				{
					num12--;
				}
				if ((float)j >= (float)oldPos.Length * 0.75f)
				{
					num12 -= 2;
				}
				vector3.DirectionTo(target2).SafeNormalize(Vector2.Zero);
				target2 = vector3;
				for (float num14 = 0f; num14 < (float)num12; num14++)
				{
					int num15 = Dust.NewDust(vector3, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor2);
					Dust dust = Main.dust[num15];
					dust.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num15].noGravity = true;
					Main.dust[num15].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num15].fadeIn = Main.rand.NextFloat() * 1.2f * num13;
					dust = Main.dust[num15];
					dust.scale *= num13;
					if (num15 != 6000)
					{
						Dust dust4 = Dust.CloneDust(num15);
						dust = dust4;
						dust.scale /= 2f;
						dust = dust4;
						dust.fadeIn *= 0.85f;
						dust4.color = new Color(255, 255, 255, 255);
					}
				}
			}
		}
		else if (type == 79)
		{
			int newWidth = width;
			int newHeight = height;
			Resize(128, 128);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth, newHeight);
			SoundEngine.PlaySound(SoundID.Item10, base.Center);
			Vector2 target3 = base.Center;
			float num16 = Main.rand.NextFloat();
			for (int k = 0; k < oldPos.Length; k++)
			{
				Vector2 vector4 = oldPos[k];
				if (vector4 == Vector2.Zero)
				{
					break;
				}
				Color newColor = Main.hslToRgb((num16 + Utils.GetLerpValue(oldPos.Length, 0f, k, clamped: true)) % 1f, 1f, 0.65f);
				int num17 = Main.rand.Next(1, 4);
				float lerpValue = Utils.GetLerpValue(oldPos.Length, 0f, k, clamped: true);
				float num18 = MathHelper.Lerp(0.3f, 1f, lerpValue);
				if ((float)k >= (float)oldPos.Length * 0.3f)
				{
					num17--;
				}
				if ((float)k >= (float)oldPos.Length * 0.65f)
				{
					num17 -= 2;
				}
				if ((float)k >= (float)oldPos.Length * 0.85f)
				{
					num17 -= 3;
				}
				Vector2 vector5 = vector4.DirectionTo(target3).SafeNormalize(Vector2.Zero);
				target3 = vector4;
				Vector2 vector6 = base.Size / 2f;
				for (float num19 = 0f; num19 < (float)num17; num19++)
				{
					int num20 = Dust.NewDust(vector4, width, height, 267, 0f, 0f, 0, newColor);
					Dust dust = Main.dust[num20];
					dust.velocity *= Main.rand.NextFloat() * 0.8f;
					Main.dust[num20].noGravity = true;
					Main.dust[num20].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
					Main.dust[num20].fadeIn = Main.rand.NextFloat() * 1.2f * num18;
					dust = Main.dust[num20];
					dust.velocity += vector5 * 6f;
					dust = Main.dust[num20];
					dust.scale *= num18;
					Main.dust[num20].position = Vector2.Lerp(vector4 + vector6, Main.dust[num20].position, lerpValue);
					if (num20 != 6000)
					{
						Dust dust5 = Dust.CloneDust(num20);
						dust = dust5;
						dust.scale /= 2f;
						dust = dust5;
						dust.fadeIn *= 0.85f;
						dust5.color = new Color(255, 255, 255, 255);
					}
				}
			}
			for (float num21 = 0f; num21 < 0.5f; num21 += 0.25f)
			{
				settings = new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					MovementVector = Vector2.UnitX.RotatedBy(num21 * ((float)Math.PI * 2f)) * 16f
				};
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.RainbowRodHit, settings, owner);
			}
			for (int l = 0; l < 14; l++)
			{
				int num22 = Dust.NewDust(position, width, height, 66, 0f, 0f, 100, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), 1.7f);
				Main.dust[num22].noGravity = true;
				Dust dust = Main.dust[num22];
				dust.velocity *= 3f;
			}
		}
		else if (type == 16)
		{
			int newWidth2 = width;
			int newHeight2 = height;
			Resize(128, 128);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth2, newHeight2);
			SoundEngine.PlaySound(SoundID.Item10, base.Center);
			Vector2 target4 = base.Center;
			for (int m = 0; m < oldPos.Length; m++)
			{
				Vector2 vector7 = oldPos[m];
				if (vector7 == Vector2.Zero)
				{
					break;
				}
				Color newColor2 = Main.hslToRgb(4f / 9f + Main.rand.NextFloat() * (2f / 9f), 1f, 0.65f);
				int num23 = Main.rand.Next(1, 4);
				float num24 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, m, clamped: true));
				if ((float)m >= (float)oldPos.Length * 0.3f)
				{
					num23--;
				}
				if ((float)m >= (float)oldPos.Length * 0.75f)
				{
					num23 -= 2;
				}
				Vector2 vector8 = vector7.DirectionTo(target4).SafeNormalize(Vector2.Zero);
				target4 = vector7;
				for (float num25 = 0f; num25 < (float)num23; num25++)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num26 = Dust.NewDust(vector7, width, height, 267, 0f, 0f, 0, newColor2);
						Dust dust = Main.dust[num26];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num26].noGravity = true;
						Main.dust[num26].scale = Main.rand.NextFloat() * 0.8f;
						Main.dust[num26].fadeIn = Main.rand.NextFloat() * 1.2f * num24;
						dust = Main.dust[num26];
						dust.velocity += vector8 * 6f;
						dust = Main.dust[num26];
						dust.scale *= num24;
						if (num26 != 6000)
						{
							Dust dust6 = Dust.CloneDust(num26);
							dust = dust6;
							dust.scale /= 2f;
							dust = dust6;
							dust.fadeIn /= 2f;
							dust6.color = new Color(255, 255, 255, 255);
						}
					}
					else
					{
						Dust dust7 = Dust.NewDustDirect(vector7, width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Main.rand.Next(2);
						dust7.noGravity = true;
						Dust dust = dust7;
						dust.velocity *= 2f;
						dust = dust7;
						dust.velocity += vector8 * 9f;
						dust = dust7;
						dust.scale *= num24;
						dust7.fadeIn = (0.6f + Main.rand.NextFloat() * 0.4f) * num24;
						dust7.noLightEmittence = (dust7.noLight = true);
					}
				}
			}
			for (int n = 0; n < 20; n++)
			{
				Dust dust8 = Dust.NewDustDirect(position, width, height, 15);
				dust8.noGravity = true;
				dust8.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
				dust8.scale = 1.2f + Main.rand.NextFloat() * 0.5f;
				dust8.noLightEmittence = (dust8.noLight = true);
				Dust dust = dust8;
				dust.velocity += velocity * 0.01f;
				dust = dust8;
				dust.position += dust8.velocity * Main.rand.Next(1, 16);
				dust8 = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100);
				dust = dust8;
				dust.velocity *= 1.2f;
				dust8.noLightEmittence = (dust8.noLight = true);
				dust = dust8;
				dust.velocity += velocity * 0.01f;
				dust = dust8;
				dust.scale *= 0.8f + Main.rand.NextFloat() * 0.2f;
				dust = dust8;
				dust.position += dust8.velocity * Main.rand.Next(1, 16);
			}
		}
		else if (type == 34)
		{
			int newWidth3 = width;
			int newHeight3 = height;
			Resize(96, 96);
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			Resize(newWidth3, newHeight3);
			SoundEngine.PlaySound(SoundID.Item10, position);
			Vector2 target5 = base.Center;
			for (int num27 = 0; num27 < oldPos.Length; num27++)
			{
				Vector2 vector9 = oldPos[num27];
				if (vector9 == Vector2.Zero)
				{
					break;
				}
				Color newColor3 = Main.hslToRgb(Main.rand.NextFloat() * 0.111111112f, 1f, 0.5f);
				int num28 = Main.rand.Next(1, 5);
				float num29 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num27, clamped: true));
				if ((float)num27 >= (float)oldPos.Length * 0.3f)
				{
					num28--;
				}
				if ((float)num27 >= (float)oldPos.Length * 0.75f)
				{
					num28 -= 2;
				}
				Vector2 vector10 = vector9.DirectionTo(target5).SafeNormalize(Vector2.Zero);
				target5 = vector9;
				for (float num30 = 0f; num30 < (float)num28; num30++)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num31 = Dust.NewDust(vector9, width, height, 267, 0f, 0f, 0, newColor3);
						Dust dust = Main.dust[num31];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num31].noGravity = true;
						Main.dust[num31].scale = Main.rand.NextFloat() * 1f;
						Main.dust[num31].fadeIn = Main.rand.NextFloat() * 2f;
						dust = Main.dust[num31];
						dust.velocity += vector10 * 8f;
						dust = Main.dust[num31];
						dust.scale *= num29;
						if (num31 != 6000)
						{
							Dust dust9 = Dust.CloneDust(num31);
							dust = dust9;
							dust.scale /= 2f;
							dust = dust9;
							dust.fadeIn /= 2f;
							dust9.color = new Color(255, 255, 255, 255);
						}
					}
					else
					{
						Dust dust10 = Dust.NewDustDirect(vector9, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						Dust dust;
						if (Main.rand.Next(2) == 0)
						{
							dust10.noGravity = true;
							dust = dust10;
							dust.scale *= 2.5f;
						}
						dust = dust10;
						dust.velocity *= 2f;
						dust = dust10;
						dust.velocity += vector10 * 6f;
						dust = dust10;
						dust.scale *= num29;
						dust10.noLightEmittence = (dust10.noLight = true);
					}
				}
			}
			for (int num32 = 0; num32 < 20; num32++)
			{
				Dust dust11 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
				dust11.noGravity = true;
				dust11.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
				dust11.scale = 1.6f;
				dust11.fadeIn = 1.3f + Main.rand.NextFloat() * 1f;
				dust11.noLightEmittence = (dust11.noLight = true);
				Dust dust = dust11;
				dust.velocity += velocity * 0.1f;
				dust11 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
				dust = dust11;
				dust.velocity *= 2f;
				dust11.noLightEmittence = (dust11.noLight = true);
				dust = dust11;
				dust.velocity += velocity * 0.1f;
			}
		}
		if (type == 873)
		{
			int num33 = 20;
			float num34 = (float)Math.PI * 2f / (float)num33;
			float num35 = velocity.ToRotation();
			Color value = AI_171_GetColor();
			for (int num36 = 0; num36 < num33; num36++)
			{
				Dust dust12 = Dust.NewDustPerfect(base.Center, 267);
				dust12.fadeIn = 1f;
				dust12.noGravity = true;
				dust12.alpha = 100;
				dust12.color = Color.Lerp(value, Color.White, Main.rand.NextFloat() * 0.4f);
				if (num36 % 4 == 0)
				{
					dust12.velocity = num35.ToRotationVector2() * 3.2f;
					dust12.scale = 2.3f;
				}
				else if (num36 % 2 == 0)
				{
					dust12.velocity = num35.ToRotationVector2() * 1.8f;
					dust12.scale = 1.9f;
				}
				else
				{
					dust12.velocity = num35.ToRotationVector2();
					dust12.scale = 1.6f;
				}
				num35 += num34;
				Dust dust = dust12;
				dust.velocity += velocity * Main.rand.NextFloat() * 0.5f;
			}
		}
		_ = type;
		_ = 857;
		if (type == 920)
		{
			for (int num37 = 0; num37 < 6; num37++)
			{
				Vector2 vector11 = Vector2.UnitY.RotatedBy((float)num37 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f);
				int num38 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 4, 4, 4, vector11.X, vector11.Y, 80, new Color(78, 136, 255, 150), 1.5f);
				Main.dust[num38].noGravity = true;
			}
		}
		if (type == 921)
		{
			for (int num39 = 0; num39 < 12; num39++)
			{
				Vector2 vector12 = Vector2.UnitY.RotatedBy((float)num39 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
				int num40 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 6, 6, 243, vector12.X, vector12.Y, 80, default(Color), 1.5f);
				Main.dust[num40].noGravity = true;
			}
		}
		if (type == 926)
		{
			for (int num41 = 0; num41 < 22; num41++)
			{
				Vector2 vector13 = Vector2.UnitY.RotatedBy((float)num41 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
				int num42 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector13.X, vector13.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
				Main.dust[num42].noGravity = true;
			}
		}
		if (type == 937)
		{
			for (int num43 = 0; num43 < 12; num43++)
			{
				Vector2 vector14 = Vector2.UnitY.RotatedBy((float)num43 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
				int num44 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector14.X, vector14.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
				Main.dust[num44].noGravity = true;
			}
		}
		if (type == 818)
		{
			for (float num45 = 0f; num45 < 1f; num45 += 0.34f)
			{
				Dust.NewDustPerfect(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num45 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
			}
			for (float num46 = 0f; num46 < 1f; num46 += 0.34f)
			{
				Dust.NewDustPerfect(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num46 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (1f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
			}
		}
		if (type == 856)
		{
			for (int num47 = 0; num47 < 6; num47++)
			{
				Dust.NewDust(position, width, height, 58, 0f, 0f, 150, default(Color), 0.8f);
			}
			for (float num48 = 0f; num48 < 1f; num48 += 0.34f)
			{
				Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num48 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (4f + Main.rand.NextFloat() * 2f), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
			}
			for (float num49 = 0f; num49 < 1f; num49 += 0.34f)
			{
				Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num49 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.Orange, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
			}
			Vector2 vector15 = new Vector2(Main.screenWidth, Main.screenHeight);
			if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector15 / 2f, vector15 + new Vector2(400f))))
			{
				for (int num50 = 0; num50 < 1; num50++)
				{
					Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, 16));
				}
			}
			settings = new ParticleOrchestraSettings
			{
				PositionInWorld = base.Center
			};
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.StellarTune, settings, owner);
			position = base.Center;
			width = (height = 128);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
		}
		if (type == 818)
		{
			Damage();
		}
		if (type == 686)
		{
			SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballImpact, base.Center);
		}
		else if (type == 711)
		{
			SoundEngine.PlayTrackedSound(SoundID.DD2_BetsysWrathImpact, base.Center);
		}
		else if (type == 704)
		{
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound != null)
			{
				activeSound.Volume = 0f;
				activeSound.Stop();
			}
		}
		if (type == 710)
		{
			ai[1] = -1f;
			position = base.Center;
			width = (height = 40);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num51 = 0; num51 < 2; num51++)
			{
				int num52 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num52].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num53 = 0; num53 < 10; num53++)
			{
				int num54 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num54].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num54].noGravity = true;
				Dust dust = Main.dust[num54];
				dust.velocity *= 2f;
			}
			for (int num55 = 0; num55 < 5; num55++)
			{
				int num56 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num56].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num56].noGravity = true;
				Dust dust = Main.dust[num56];
				dust.velocity *= 2f;
			}
		}
		else if (type == 711)
		{
			Rectangle hitbox = base.Hitbox;
			for (int num57 = 0; num57 < oldPos.Length / 2; num57 += 2)
			{
				hitbox.X = (int)oldPos[num57].X;
				hitbox.Y = (int)oldPos[num57].Y;
				for (int num58 = 0; num58 < 2; num58++)
				{
					int num59 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
					int num60 = Dust.NewDust(hitbox.TopLeft(), width, height, num59, direction, -2.5f);
					Main.dust[num60].alpha = 200;
					Dust dust = Main.dust[num60];
					dust.velocity *= 2.4f;
					dust = Main.dust[num60];
					dust.scale += Main.rand.NextFloat();
					dust = Main.dust[num60];
					dust.scale -= 0.5f;
					if (Main.dust[num60].type == 55)
					{
						Main.dust[num60].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
					}
					Main.dust[num60].noLight = true;
				}
			}
			for (int num61 = 10; num61 < oldPos.Length; num61 += 2)
			{
				hitbox.X = (int)oldPos[num61].X;
				hitbox.Y = (int)oldPos[num61].Y;
				for (int num62 = 0; num62 < 2; num62++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num63 = Utils.SelectRandom<int>(Main.rand, 55);
						int num64 = Dust.NewDust(hitbox.TopLeft(), width, height, num63, direction, -2.5f);
						Main.dust[num64].alpha = 120;
						Dust dust = Main.dust[num64];
						dust.velocity *= 2.4f;
						dust = Main.dust[num64];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num64];
						dust.scale -= 0.5f;
						if (Main.dust[num64].type == 55)
						{
							Main.dust[num64].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num64].noLight = true;
					}
				}
			}
			for (int num65 = 5; num65 < oldPos.Length; num65++)
			{
				hitbox.X = (int)oldPos[num65].X;
				hitbox.Y = (int)oldPos[num65].Y;
				for (int num66 = 0; num66 < 1; num66++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num67 = Utils.SelectRandom<int>(Main.rand, 55);
						int num68 = Dust.NewDust(hitbox.TopLeft(), width, height, num67, direction, -2.5f);
						Main.dust[num68].alpha = 80;
						Dust dust = Main.dust[num68];
						dust.velocity *= 0.3f;
						dust = Main.dust[num68];
						dust.velocity += velocity * 0.5f;
						dust = Main.dust[num68];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num68];
						dust.scale -= 0.5f;
						if (Main.dust[num68].type == 55)
						{
							Main.dust[num68].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num68].noLight = true;
					}
				}
			}
			for (int num69 = 0; num69 < 20; num69++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num70 = 228;
					Dust dust13 = Main.dust[Dust.NewDust(position, width, height, num70)];
					dust13.noGravity = true;
					dust13.scale = 1.25f + Main.rand.NextFloat();
					dust13.fadeIn = 1.5f;
					Dust dust = dust13;
					dust.velocity *= 6f;
					dust13.noLight = true;
				}
			}
			for (int num71 = 0; num71 < 20; num71++)
			{
				if (Main.rand.Next(3) != 0)
				{
					int num72 = 55;
					Dust dust14 = Main.dust[Dust.NewDust(position, width, height, num72)];
					dust14.noGravity = true;
					dust14.scale = 1.25f + Main.rand.NextFloat();
					dust14.fadeIn = 1.5f;
					Dust dust = dust14;
					dust.velocity *= 6f;
					dust14.noLight = true;
					dust14.color = new Color(0, 0, 220, 128);
				}
			}
			if (owner == Main.myPlayer)
			{
				position = base.Center;
				base.Size = new Vector2(140f);
				base.Center = position;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				Damage();
			}
		}
		else if (type == 662 || type == 685)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector16 = oldVelocity.SafeNormalize(Vector2.Zero);
			Vector2 vector17 = position + vector16 * 16f;
			for (int num73 = 0; num73 < 16; num73++)
			{
				if (Main.rand.Next(2) == 0)
				{
					vector17 -= vector16 * 8f;
					continue;
				}
				Dust dust15 = Dust.NewDustDirect(vector17, width, height, 11);
				dust15.position = (dust15.position + base.Center) / 2f;
				Dust dust = dust15;
				dust.velocity += oldVelocity * 0.4f;
				dust = dust15;
				dust.velocity *= 0.5f;
				dust15.noGravity = true;
				vector17 -= vector16 * 8f;
			}
		}
		if (type == 680)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector18 = oldVelocity.SafeNormalize(Vector2.Zero);
			Vector2 vector19 = position + vector18 * 16f;
			for (int num74 = 0; num74 < 16; num74++)
			{
				if (Main.rand.Next(2) == 0)
				{
					vector19 -= vector18 * 8f;
					continue;
				}
				Dust dust16 = Dust.NewDustDirect(vector19, width, height, 11);
				dust16.position = (dust16.position + base.Center) / 2f;
				Dust dust = dust16;
				dust.velocity += oldVelocity * 0.4f;
				dust = dust16;
				dust.velocity *= 0.5f;
				dust16.noGravity = true;
				vector19 -= vector18 * 8f;
			}
			Dust.NewDustDirect(position, width, height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
		}
		if (type == 664 || type == 666 || type == 668 || type == 706)
		{
			int num75 = 4;
			int num76 = 20;
			int num77 = 10;
			int num78 = 20;
			int num79 = 20;
			int num80 = 4;
			float num81 = 1.5f;
			int num82 = 6;
			int num83 = 6;
			if (Main.player[owner].setApprenticeT3)
			{
				num75 += 4;
				num79 += 10;
				num76 += 20;
				num78 += 30;
				num77 /= 2;
				num80 += 4;
				num81 += 0.5f;
				num82 += 7;
				num83 = 270;
			}
			position = base.Center;
			width = (height = 16 * num82);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(SoundID.Item100, position);
			for (int num84 = 0; num84 < num75; num84++)
			{
				int num85 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num85].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num86 = 0; num86 < num76; num86++)
			{
				Dust dust17 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.5f);
				dust17.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 10f;
				Dust dust = dust17;
				dust.velocity *= 16f;
				if (dust17.velocity.Y > -2f)
				{
					dust17.velocity.Y *= -0.4f;
				}
				dust17.noLight = true;
				dust17.noGravity = true;
			}
			for (int num87 = 0; num87 < num78; num87++)
			{
				Dust dust18 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, num83, 0f, 0f, 100, default(Color), 1.5f);
				dust18.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Dust dust = dust18;
				dust.velocity *= 2f;
				dust18.noGravity = true;
				dust18.fadeIn = num81;
			}
			for (int num88 = 0; num88 < num77; num88++)
			{
				int num89 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num89].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num89].noGravity = true;
				Dust dust = Main.dust[num89];
				dust.velocity *= 3f;
			}
			for (int num90 = 0; num90 < num79; num90++)
			{
				int num91 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num91].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num91].noGravity = true;
				Dust dust = Main.dust[num91];
				dust.velocity *= 3f;
			}
			for (int num92 = 0; num92 < num80; num92++)
			{
				int num93 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num93].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Gore gore = Main.gore[num93];
				gore.position -= Vector2.One * 16f;
				if (Main.rand.Next(2) == 0)
				{
					Main.gore[num93].position.Y -= 30f;
				}
				gore = Main.gore[num93];
				gore.velocity *= 0.3f;
				Main.gore[num93].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num93].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 681)
		{
			position.X += width / 2;
			position.Y += height / 2;
			SoundEngine.PlaySound(SoundID.DD2_GoblinBomb, position);
			width = 22;
			height = 22;
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num94 = 0; num94 < 10; num94++)
			{
				int num95 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust = Main.dust[num95];
				dust.velocity *= 1.4f;
				num95 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num95];
				dust.velocity *= 1.4f;
				Main.dust[num95].noGravity = true;
				Main.dust[num95].fadeIn = 2f;
			}
			for (int num96 = 0; num96 < 10; num96++)
			{
				int num97 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num97].noGravity = true;
				Dust dust = Main.dust[num97];
				dust.velocity *= 5f;
				num97 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num97];
				dust.velocity *= 3f;
			}
			int num98 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
			Gore gore = Main.gore[num98];
			gore.velocity *= 0.4f;
			Main.gore[num98].velocity.X += 1f;
			Main.gore[num98].velocity.Y += 1f;
			num98 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
			gore = Main.gore[num98];
			gore.velocity *= 0.4f;
			Main.gore[num98].velocity.X -= 1f;
			Main.gore[num98].velocity.Y += 1f;
			num98 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
			gore = Main.gore[num98];
			gore.velocity *= 0.4f;
			Main.gore[num98].velocity.X += 1f;
			Main.gore[num98].velocity.Y -= 1f;
			num98 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
			gore = Main.gore[num98];
			gore.velocity *= 0.4f;
			Main.gore[num98].velocity.X -= 1f;
			Main.gore[num98].velocity.Y -= 1f;
			position.X += width / 2;
			position.Y += height / 2;
			width = 80;
			height = 80;
			position.X -= width / 2;
			position.Y -= height / 2;
			Damage();
		}
		if (type == 669)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			Vector2 vector20 = new Vector2(20f, 20f);
			for (int num99 = 0; num99 < 10; num99++)
			{
				Dust dust19 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
				Dust dust = dust19;
				dust.velocity *= 1.4f;
			}
			for (int num100 = 0; num100 < 40; num100++)
			{
				Dust dust20 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
				dust20.noGravity = true;
				Dust dust = dust20;
				dust.velocity *= 4f;
				dust20 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
				dust = dust20;
				dust.velocity *= 2f;
			}
		}
		if (Main.myPlayer == owner && bobber)
		{
			PopupText.ClearSonarText();
			if (ai[1] > 0f && ai[1] < 5088f)
			{
				AI_061_FishingBobber_GiveItemToPlayer(Main.player[owner], (int)ai[1]);
			}
			ai[1] = 0f;
		}
		if (type == 634 || type == 635)
		{
			int num101 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
			int num102 = 255;
			int num103 = 255;
			int num104 = 50;
			float num105 = 1.7f;
			float num106 = 0.8f;
			float num107 = 2f;
			Vector2 vector21 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			Vector2 vector22 = vector21 * velocity.Length() * MaxUpdates;
			if (type == 635)
			{
				num102 = 88;
				num103 = 88;
				num101 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				num105 = 3.7f;
				num106 = 1.5f;
				num107 = 2.2f;
				vector22 *= 0.5f;
			}
			SoundEngine.PlaySound(SoundID.Item14, position);
			position = base.Center;
			width = (height = num104);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			for (int num108 = 0; num108 < 40; num108++)
			{
				num101 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				if (type == 635)
				{
					num101 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				}
				int num109 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num101, 0f, 0f, 200, default(Color), num105);
				Main.dust[num109].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num109].noGravity = true;
				Dust dust = Main.dust[num109];
				dust.velocity *= 3f;
				dust = Main.dust[num109];
				dust.velocity += vector22 * Main.rand.NextFloat();
				num109 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num102, 0f, 0f, 100, default(Color), num106);
				Main.dust[num109].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				dust = Main.dust[num109];
				dust.velocity *= 2f;
				Main.dust[num109].noGravity = true;
				Main.dust[num109].fadeIn = 1f;
				Main.dust[num109].color = Color.Crimson * 0.5f;
				dust = Main.dust[num109];
				dust.velocity += vector22 * Main.rand.NextFloat();
			}
			for (int num110 = 0; num110 < 20; num110++)
			{
				int num111 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num103, 0f, 0f, 0, default(Color), num107);
				Main.dust[num111].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 3f;
				Main.dust[num111].noGravity = true;
				Dust dust = Main.dust[num111];
				dust.velocity *= 0.5f;
				dust = Main.dust[num111];
				dust.velocity += vector22 * (0.6f + 0.6f * Main.rand.NextFloat());
			}
		}
		else if (type == 651)
		{
			if (localAI[0] == 1f && owner == Main.myPlayer)
			{
				Player master = Main.player[owner];
				Point ps = new Vector2(ai[0], ai[1]).ToPoint();
				Point pe = base.Center.ToTileCoordinates();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(109, -1, -1, null, ps.X, ps.Y, pe.X, pe.Y, (int)WiresUI.Settings.ToolMode);
				}
				else
				{
					Wiring.MassWireOperation(ps, pe, master);
				}
			}
		}
		else if (type == 641)
		{
			if (owner == Main.myPlayer)
			{
				for (int num112 = 0; num112 < 1000; num112++)
				{
					if (Main.projectile[num112].active && Main.projectile[num112].owner == owner && Main.projectile[num112].type == 642)
					{
						Main.projectile[num112].Kill();
					}
				}
			}
		}
		else if (type == 643)
		{
			if (owner == Main.myPlayer)
			{
				for (int num113 = 0; num113 < 1000; num113++)
				{
					if (Main.projectile[num113].active && Main.projectile[num113].owner == owner && Main.projectile[num113].type == 644)
					{
						Main.projectile[num113].Kill();
					}
				}
			}
		}
		else if (type == 645)
		{
			bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
			for (int num114 = 0; num114 < 4; num114++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num115 = 0; num115 < 4; num115++)
			{
				int num116 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num116].noGravity = true;
				Dust dust = Main.dust[num116];
				dust.velocity *= 3f;
				if (flag)
				{
					Main.dust[num116].noLight = true;
				}
				num116 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num116];
				dust.velocity *= 2f;
				Main.dust[num116].noGravity = true;
				if (flag)
				{
					Main.dust[num116].noLight = true;
				}
			}
			for (int num117 = 0; num117 < 1; num117++)
			{
				int num118 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num118];
				gore.velocity *= 0.3f;
				Main.gore[num118].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num118].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 636)
		{
			Rectangle hitbox2 = base.Hitbox;
			for (int num119 = 0; num119 < 6; num119 += 3)
			{
				hitbox2.X = (int)oldPos[num119].X;
				hitbox2.Y = (int)oldPos[num119].Y;
				for (int num120 = 0; num120 < 5; num120++)
				{
					int num121 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num122 = Dust.NewDust(hitbox2.TopLeft(), width, height, num121, 2.5f * (float)direction, -2.5f);
					Main.dust[num122].alpha = 200;
					Dust dust = Main.dust[num122];
					dust.velocity *= 2.4f;
					dust = Main.dust[num122];
					dust.scale += Main.rand.NextFloat();
				}
			}
			if (Main.myPlayer == owner)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 953, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
			}
		}
		else if (type == 614)
		{
			for (int num123 = 0; num123 < 10; num123++)
			{
				Dust dust21 = Main.dust[Dust.NewDust(position, width, height, 229)];
				dust21.noGravity = true;
				Dust dust = dust21;
				dust.velocity *= 3f;
			}
		}
		if (type == 644)
		{
			DoRainbowCrystalStaffExplosion();
			if (Main.myPlayer == owner)
			{
				friendly = true;
				int num124 = width;
				int num125 = height;
				int num126 = penetrate;
				position = base.Center;
				width = (height = 60);
				base.Center = position;
				penetrate = -1;
				maxPenetrate = -1;
				Damage();
				penetrate = num126;
				position = base.Center;
				width = num124;
				height = num125;
				base.Center = position;
			}
		}
		if (type == 608)
		{
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num127 = 0; num127 < 4; num127++)
			{
				int num128 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num128].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num129 = 0; num129 < 30; num129++)
			{
				int num130 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num130].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num130].noGravity = true;
				Dust dust = Main.dust[num130];
				dust.velocity *= 3f;
				Main.dust[num130].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				num130 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num130].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				dust = Main.dust[num130];
				dust.velocity *= 2f;
				Main.dust[num130].noGravity = true;
				Main.dust[num130].fadeIn = 2.5f;
				Main.dust[num130].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
			}
			for (int num131 = 0; num131 < 10; num131++)
			{
				int num132 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num132].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num132].noGravity = true;
				Dust dust = Main.dust[num132];
				dust.velocity *= 3f;
				Main.dust[num132].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
			}
			for (int num133 = 0; num133 < 10; num133++)
			{
				int num134 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num134].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num134].noGravity = true;
				Dust dust = Main.dust[num134];
				dust.velocity *= 3f;
			}
			for (int num135 = 0; num135 < 2; num135++)
			{
				int num136 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num136].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Gore gore = Main.gore[num136];
				gore.velocity *= 0.3f;
				Main.gore[num136].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num136].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		else if (type == 661)
		{
			position = base.Center;
			width = (height = 160);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			Vector2 vector23 = base.Center + Vector2.One * -20f;
			int num137 = 40;
			int num138 = num137;
			for (int num139 = 0; num139 < 4; num139++)
			{
				int num140 = Dust.NewDust(vector23, num137, num138, 240, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num140].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num137 / 2f;
			}
			for (int num141 = 0; num141 < 20; num141++)
			{
				int num142 = Dust.NewDust(vector23, num137, num138, 62, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num142].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num137 / 2f;
				Main.dust[num142].noGravity = true;
				Main.dust[num142].noLight = true;
				Dust dust = Main.dust[num142];
				dust.velocity *= 3f;
				dust = Main.dust[num142];
				dust.velocity += DirectionTo(Main.dust[num142].position) * (2f + Main.rand.NextFloat() * 4f);
				num142 = Dust.NewDust(vector23, num137, num138, 62, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num142].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num137 / 2f;
				dust = Main.dust[num142];
				dust.velocity *= 2f;
				Main.dust[num142].noGravity = true;
				Main.dust[num142].fadeIn = 1f;
				Main.dust[num142].color = Color.Crimson * 0.5f;
				Main.dust[num142].noLight = true;
				dust = Main.dust[num142];
				dust.velocity += DirectionTo(Main.dust[num142].position) * 8f;
			}
			for (int num143 = 0; num143 < 20; num143++)
			{
				int num144 = Dust.NewDust(vector23, num137, num138, 62, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num144].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * num137 / 2f;
				Main.dust[num144].noGravity = true;
				Main.dust[num144].noLight = true;
				Dust dust = Main.dust[num144];
				dust.velocity *= 3f;
				dust = Main.dust[num144];
				dust.velocity += DirectionTo(Main.dust[num144].position) * 2f;
			}
			for (int num145 = 0; num145 < 70; num145++)
			{
				int num146 = Dust.NewDust(vector23, num137, num138, 240, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num146].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * num137 / 2f;
				Main.dust[num146].noGravity = true;
				Dust dust = Main.dust[num146];
				dust.velocity *= 3f;
				dust = Main.dust[num146];
				dust.velocity += DirectionTo(Main.dust[num146].position) * 3f;
			}
		}
		else if (type == 617)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			maxPenetrate = -1;
			penetrate = -1;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num147 = 0; num147 < 4; num147++)
			{
				int num148 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num148].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num149 = 0; num149 < 30; num149++)
			{
				int num150 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num150].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num150].noGravity = true;
				Dust dust = Main.dust[num150];
				dust.velocity *= 3f;
				num150 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 90, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num150].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				dust = Main.dust[num150];
				dust.velocity *= 2f;
				Main.dust[num150].noGravity = true;
				Main.dust[num150].fadeIn = 1f;
				Main.dust[num150].color = Color.Crimson * 0.5f;
			}
			for (int num151 = 0; num151 < 10; num151++)
			{
				int num152 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num152].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num152].noGravity = true;
				Dust dust = Main.dust[num152];
				dust.velocity *= 3f;
			}
			for (int num153 = 0; num153 < 10; num153++)
			{
				int num154 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num154].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num154].noGravity = true;
				Dust dust = Main.dust[num154];
				dust.velocity *= 3f;
			}
			for (int num155 = 0; num155 < 2; num155++)
			{
				int num156 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num156].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Gore gore = Main.gore[num156];
				gore.velocity *= 0.3f;
				Main.gore[num156].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num156].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (Main.myPlayer == owner)
			{
				for (int num157 = 0; num157 < 1000; num157++)
				{
					if (Main.projectile[num157].active && Main.projectile[num157].type == 618 && Main.projectile[num157].ai[1] == (float)whoAmI)
					{
						Main.projectile[num157].Kill();
					}
				}
				int num158 = Main.rand.Next(5, 9);
				int num159 = Main.rand.Next(5, 9);
				int num160 = Utils.SelectRandom<int>(Main.rand, 86, 90);
				int num161 = ((num160 == 86) ? 90 : 86);
				for (int num162 = 0; num162 < num158; num162++)
				{
					Vector2 vector24 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
					Vector2 vector25 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					while (vector25.X == 0f && vector25.Y == 0f)
					{
						vector25 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					}
					vector25.Normalize();
					if (vector25.Y > 0.2f)
					{
						vector25.Y *= -1f;
					}
					vector25 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(vector24.X, vector24.Y, vector25.X, vector25.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num160);
				}
				for (int num163 = 0; num163 < num159; num163++)
				{
					Vector2 vector26 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
					Vector2 vector27 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					while (vector27.X == 0f && vector27.Y == 0f)
					{
						vector27 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					}
					vector27.Normalize();
					if (vector27.Y > 0.4f)
					{
						vector27.Y *= -1f;
					}
					vector27 *= (float)Main.rand.Next(40, 81) * 0.1f;
					NewProjectile(vector26.X, vector26.Y, vector27.X, vector27.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num161);
				}
			}
		}
		else if (type == 658)
		{
			for (int num164 = 0; num164 < 10; num164++)
			{
				int num165 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 269, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num165].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num165].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust = Main.dust[num165];
					dust.type++;
				}
				else
				{
					Main.dust[num165].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num165].noGravity = true;
				dust = Main.dust[num165];
				dust.velocity *= 1.25f;
				dust = Main.dust[num165];
				dust.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 620 || type == 618)
		{
			if (type == 618)
			{
				ai[0] = 86f;
			}
			for (int num166 = 0; num166 < 10; num166++)
			{
				int num167 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num167].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num167].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust = Main.dust[num167];
					dust.type++;
				}
				else
				{
					Main.dust[num167].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num167].noGravity = true;
				dust = Main.dust[num167];
				dust.velocity *= 1.25f;
				dust = Main.dust[num167];
				dust.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 619)
		{
			SoundEngine.PlaySound(SoundID.Item50, position);
			for (int num168 = 0; num168 < 20; num168++)
			{
				int num169 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num169].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num169].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
					dust = Main.dust[num169];
					dust.type++;
				}
				else
				{
					Main.dust[num169].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num169].noGravity = true;
				dust = Main.dust[num169];
				dust.velocity *= 2.5f;
				dust = Main.dust[num169];
				dust.velocity -= oldVelocity / 10f;
			}
			if (Main.myPlayer == owner)
			{
				int num170 = Main.rand.Next(3, 6);
				for (int num171 = 0; num171 < num170; num171++)
				{
					Vector2 vector28 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					while (vector28.X == 0f && vector28.Y == 0f)
					{
						vector28 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					}
					vector28.Normalize();
					vector28 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector28.X, vector28.Y, 620, (int)((double)damage * 0.8), knockBack * 0.8f, owner, ai[0]);
				}
			}
		}
		if (type == 601)
		{
			Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
			Color color = portalColor;
			color.A = byte.MaxValue;
			for (int num172 = 0; num172 < 6; num172++)
			{
				Vector2 vector29 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
				Dust dust22 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
				dust22.position = base.Center;
				dust22.velocity = vector29 + velocity / 5f;
				dust22.color = color;
				dust22.scale = 2f;
				dust22.noLight = true;
				dust22.noGravity = true;
			}
		}
		if (type == 596)
		{
			position = base.Center;
			width = (height = 60);
			base.Center = position;
			int num173 = 40;
			if (Main.expertMode)
			{
				num173 = 30;
			}
			damage = num173;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num174 = 0; num174 < 4; num174++)
			{
				int num175 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num175].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num176 = 0; num176 < 20; num176++)
			{
				int num177 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num177].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num177].noGravity = true;
				Dust dust = Main.dust[num177];
				dust.velocity *= 2f;
			}
			for (int num178 = 0; num178 < 10; num178++)
			{
				int num179 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num179].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num179].noGravity = true;
				Dust dust = Main.dust[num179];
				dust.velocity *= 2f;
			}
		}
		if (type == 659)
		{
			if (ai[0] >= 0f)
			{
				position = base.Center;
				width = (height = 40);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num180 = 0; num180 < 2; num180++)
				{
					int num181 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num181].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num182 = 0; num182 < 10; num182++)
				{
					int num183 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num183].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num183].noGravity = true;
					Dust dust = Main.dust[num183];
					dust.velocity *= 2f;
				}
				for (int num184 = 0; num184 < 5; num184++)
				{
					int num185 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num185].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num185].noGravity = true;
					Dust dust = Main.dust[num185];
					dust.velocity *= 2f;
				}
			}
		}
		else if (type >= 625 && type <= 628)
		{
			for (int num186 = 0; num186 < 6; num186++)
			{
				int num187 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num187].noGravity = true;
				Main.dust[num187].noLight = true;
			}
		}
		if (type == 631)
		{
			int num188 = Main.rand.Next(5, 10);
			for (int num189 = 0; num189 < num188; num189++)
			{
				int num190 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Dust dust = Main.dust[num190];
				dust.velocity *= 1.6f;
				Main.dust[num190].velocity.Y -= 1f;
				dust = Main.dust[num190];
				dust.position -= Vector2.One * 4f;
				Main.dust[num190].position = Vector2.Lerp(Main.dust[num190].position, base.Center, 0.5f);
				Main.dust[num190].noGravity = true;
			}
		}
		if (type == 539)
		{
			position = base.Center;
			width = (height = 80);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 7);
			for (int num191 = 0; num191 < 4; num191++)
			{
				int num192 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num192].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num193 = 0; num193 < 20; num193++)
			{
				int num194 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 176, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num194].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num194].noGravity = true;
				Dust dust = Main.dust[num194];
				dust.velocity *= 3f;
			}
			for (int num195 = 0; num195 < 20; num195++)
			{
				int num196 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 180, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num196].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num196].noGravity = true;
				Dust dust = Main.dust[num196];
				dust.velocity *= 3f;
			}
			for (int num197 = 0; num197 < 10; num197++)
			{
				int num198 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num198].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num198].noGravity = true;
				Dust dust = Main.dust[num198];
				dust.velocity *= 3f;
			}
		}
		else if (type == 585)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			for (int num199 = 0; num199 < 20; num199++)
			{
				int num200 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
				Main.dust[num200].noGravity = true;
				Dust dust = Main.dust[num200];
				dust.velocity *= 1.2f;
				Main.dust[num200].scale = 1.3f;
				dust = Main.dust[num200];
				dust.velocity -= oldVelocity * 0.3f;
				num200 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num200].noGravity = true;
				dust = Main.dust[num200];
				dust.velocity *= 3f;
			}
		}
		else if (type == 590)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			for (int num201 = 0; num201 < 10; num201++)
			{
				int num202 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
				Dust dust = Main.dust[num202];
				dust.velocity *= 2f;
				Main.dust[num202].noGravity = true;
			}
			float num203 = 0.6f + Main.rand.NextFloat() * 0.4f;
			int num204 = Gore.NewGore(position, Vector2.Zero, 375, num203);
			Gore gore = Main.gore[num204];
			gore.velocity *= 0.3f;
			num204 = Gore.NewGore(position, Vector2.Zero, 376, num203);
			gore = Main.gore[num204];
			gore.velocity *= 0.3f;
			num204 = Gore.NewGore(position, Vector2.Zero, 377, num203);
			gore = Main.gore[num204];
			gore.velocity *= 0.3f;
		}
		else if (type == 587)
		{
			Color newColor4 = Main.hslToRgb(ai[1], 1f, 0.5f);
			newColor4.A = 200;
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num205 = 0; num205 < 10; num205++)
			{
				int num206 = Dust.NewDust(position, width, height, 76, 0f, 0f, 0, newColor4);
				Main.dust[num206].noGravity = true;
				Dust dust = Main.dust[num206];
				dust.velocity *= 1.2f;
				Main.dust[num206].scale = 0.9f;
				dust = Main.dust[num206];
				dust.velocity -= oldVelocity * 0.3f;
				num206 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, 0f, 0f, 0, newColor4, 1.1f);
				Main.dust[num206].noGravity = true;
				dust = Main.dust[num206];
				dust.velocity *= 2f;
			}
		}
		else if (type == 572)
		{
			for (int num207 = 0; num207 < 15; num207++)
			{
				int num208 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
				Dust dust = Main.dust[num208];
				dust.velocity *= 3f;
				Main.dust[num208].noGravity = true;
				Main.dust[num208].scale = 1.25f;
				Main.dust[num208].position = (base.Center + position) / 2f;
			}
		}
		else if (type == 581)
		{
			for (int num209 = 0; num209 < 30; num209++)
			{
				int num210 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
				Dust dust23 = Main.dust[Dust.NewDust(position, width, height, num210)];
				dust23.noGravity = true;
				dust23.scale = 1.25f + Main.rand.NextFloat();
				dust23.fadeIn = 0.25f;
				Dust dust = dust23;
				dust.velocity *= 2f;
				dust23.noLight = true;
			}
		}
		else if (type == 671)
		{
			for (int num211 = 0; num211 < 30; num211++)
			{
				int num212 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
				Dust dust24 = Main.dust[Dust.NewDust(position, width, height, num212)];
				dust24.noGravity = true;
				dust24.scale = 1.25f + Main.rand.NextFloat();
				dust24.fadeIn = 0.25f;
				Dust dust = dust24;
				dust.velocity *= 2f;
				dust24.noLight = true;
			}
		}
		else if (type == 811 || type == 814)
		{
			for (int num213 = 0; num213 < 30; num213++)
			{
				Dust dust25 = Main.dust[Dust.NewDust(position, width, height, 5)];
				dust25.scale = 1.25f + Main.rand.NextFloat();
				Dust dust = dust25;
				dust.velocity *= 2f;
			}
		}
		else if (type == 819)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num214 = 0; num214 < 20; num214++)
			{
				Dust dust26 = Main.dust[Dust.NewDust(position, width, height, 5)];
				dust26.scale = 1f + Main.rand.NextFloat() * 0.5f;
				Dust dust = dust26;
				dust.velocity *= 1.5f;
			}
		}
		else if (type == 675)
		{
			for (int num215 = 0; num215 < 40; num215++)
			{
				int num216 = Utils.SelectRandom<int>(Main.rand, 27, 242, 73, 72, 71, 255, 255, 255);
				Dust dust27 = Main.dust[Dust.NewDust(position, width, height, num216)];
				dust27.noGravity = true;
				dust27.scale = 1.25f + Main.rand.NextFloat();
				dust27.fadeIn = 0.25f;
				Dust dust = dust27;
				dust.velocity *= 3f;
				dust27.noLight = true;
			}
		}
		else if (type == 676)
		{
			for (int num217 = 0; num217 < 120; num217++)
			{
				int num218 = Utils.SelectRandom<int>(Main.rand, 4, 256);
				Dust dust28 = Main.dust[Dust.NewDust(position, width, height, num218, 0f, 0f, 100)];
				dust28.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
				dust28.fadeIn = 0.5f;
				Dust dust = dust28;
				dust.velocity *= 4.5f;
				dust28.noLight = true;
				if (dust28.velocity.Y > 0f)
				{
					dust = dust28;
					dust.velocity *= -0.5f;
				}
				if (dust28.type == 4)
				{
					dust28.color = new Color(80, 170, 40, 120);
				}
			}
			for (int num219 = 0; num219 < 10; num219++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1024);
			}
			for (int num220 = 0; num220 < 10; num220++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1025);
			}
			for (int num221 = 0; num221 < 10; num221++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1026);
			}
			for (int num222 = 0; num222 < 20; num222++)
			{
				Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 2f), 1026);
			}
			if (Main.netMode != 2)
			{
				Player player = Main.player[Main.myPlayer];
				if (!player.dead && player.active && (player.Center - base.Center).Length() < 300f && !player.creativeGodMode)
				{
					player.AddBuff(197, 900, quiet: false);
				}
			}
		}
		else if (type == 686)
		{
			Rectangle hitbox3 = base.Hitbox;
			for (int num223 = 0; num223 < oldPos.Length / 2; num223 += 2)
			{
				hitbox3.X = (int)oldPos[num223].X;
				hitbox3.Y = (int)oldPos[num223].Y;
				for (int num224 = 0; num224 < 3; num224++)
				{
					int num225 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
					int num226 = Dust.NewDust(hitbox3.TopLeft(), width, height, num225, direction, -2.5f);
					Main.dust[num226].alpha = 200;
					Dust dust = Main.dust[num226];
					dust.velocity *= 2.4f;
					dust = Main.dust[num226];
					dust.scale += Main.rand.NextFloat();
					dust = Main.dust[num226];
					dust.scale -= 0.5f;
					if (Main.dust[num226].type == 55)
					{
						Main.dust[num226].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
					}
					Main.dust[num226].noLight = true;
				}
			}
			for (int num227 = 10; num227 < oldPos.Length; num227 += 2)
			{
				hitbox3.X = (int)oldPos[num227].X;
				hitbox3.Y = (int)oldPos[num227].Y;
				for (int num228 = 0; num228 < 2; num228++)
				{
					int num229 = Utils.SelectRandom<int>(Main.rand, 55);
					int num230 = Dust.NewDust(hitbox3.TopLeft(), width, height, num229, direction, -2.5f);
					Main.dust[num230].alpha = 120;
					Dust dust = Main.dust[num230];
					dust.velocity *= 2.4f;
					dust = Main.dust[num230];
					dust.scale += Main.rand.NextFloat() * 0.7f;
					dust = Main.dust[num230];
					dust.scale -= 0.5f;
					if (Main.dust[num230].type == 55)
					{
						Main.dust[num230].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
					}
					Main.dust[num230].noLight = true;
				}
			}
			for (int num231 = 5; num231 < oldPos.Length; num231++)
			{
				hitbox3.X = (int)oldPos[num231].X;
				hitbox3.Y = (int)oldPos[num231].Y;
				for (int num232 = 0; num232 < 1; num232++)
				{
					int num233 = Utils.SelectRandom<int>(Main.rand, 55);
					int num234 = Dust.NewDust(hitbox3.TopLeft(), width, height, num233, direction, -2.5f);
					Main.dust[num234].alpha = 80;
					Dust dust = Main.dust[num234];
					dust.velocity *= 0.3f;
					dust = Main.dust[num234];
					dust.velocity += velocity * 0.5f;
					dust = Main.dust[num234];
					dust.scale += Main.rand.NextFloat() * 0.7f;
					dust = Main.dust[num234];
					dust.scale -= 0.5f;
					if (Main.dust[num234].type == 55)
					{
						Main.dust[num234].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
					}
					Main.dust[num234].noLight = true;
				}
			}
			for (int num235 = 0; num235 < 30; num235++)
			{
				int num236 = 228;
				Dust dust29 = Main.dust[Dust.NewDust(position, width, height, num236)];
				dust29.noGravity = true;
				dust29.scale = 1.25f + Main.rand.NextFloat();
				dust29.fadeIn = 1.5f;
				Dust dust = dust29;
				dust.velocity *= 6f;
				dust29.noLight = true;
			}
		}
		if (type == 405)
		{
			SoundEngine.PlaySound(SoundID.Item54, position);
			_ = base.Center;
			for (int num237 = 0; num237 < 20; num237++)
			{
				int num238 = 10;
				int num239 = Dust.NewDust(base.Center - Vector2.One * num238, num238 * 2, num238 * 2, 212);
				Dust dust30 = Main.dust[num239];
				Vector2 vector30 = Vector2.Normalize(dust30.position - base.Center);
				dust30.position = base.Center + vector30 * num238 * scale;
				if (num237 < 30)
				{
					dust30.velocity = vector30 * dust30.velocity.Length();
				}
				else
				{
					dust30.velocity = vector30 * Main.rand.Next(45, 91) / 10f;
				}
				dust30.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
				dust30.color = Color.Lerp(dust30.color, Color.White, 0.3f);
				dust30.noGravity = true;
				dust30.scale = 0.7f;
			}
		}
		if (type == 501)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			int num240 = 20;
			position.X -= num240;
			position.Y -= num240;
			width += num240 * 2;
			height += num240 * 2;
			num240 += 20;
			for (int num241 = 0; num241 < 20; num241++)
			{
				int num242 = Dust.NewDust(position, width, height, 188, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust = Main.dust[num242];
				dust.velocity *= 0.5f;
			}
			for (int num243 = 0; num243 < 5; num243++)
			{
				int num244 = Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), default(Vector2), Main.rand.Next(435, 438));
				Gore gore = Main.gore[num244];
				gore.velocity *= 0.5f;
				switch (num243)
				{
				case 0:
					Main.gore[num244].velocity.X += 1f;
					Main.gore[num244].velocity.Y += 1f;
					break;
				case 1:
					Main.gore[num244].velocity.X -= 1f;
					Main.gore[num244].velocity.Y += 1f;
					break;
				case 2:
					Main.gore[num244].velocity.X += 1f;
					Main.gore[num244].velocity.Y -= 1f;
					break;
				default:
					Main.gore[num244].velocity.X -= 1f;
					Main.gore[num244].velocity.Y -= 1f;
					break;
				}
				gore = Main.gore[num244];
				gore.velocity *= 0.5f;
			}
			position.X -= num240;
			position.Y -= num240;
			width += num240 * 2;
			height += num240 * 2;
			Damage();
		}
		if (type == 410)
		{
			SoundEngine.PlaySound(SoundID.Item54, position);
			_ = base.Center;
			for (int num245 = 0; num245 < 10; num245++)
			{
				int num246 = (int)(10f * ai[1]);
				int num247 = Dust.NewDust(base.Center - Vector2.One * num246, num246 * 2, num246 * 2, 212);
				Dust dust31 = Main.dust[num247];
				Vector2 vector31 = Vector2.Normalize(dust31.position - base.Center);
				dust31.position = base.Center + vector31 * num246 * scale;
				if (num245 < 30)
				{
					dust31.velocity = vector31 * dust31.velocity.Length();
				}
				else
				{
					dust31.velocity = vector31 * Main.rand.Next(45, 91) / 10f;
				}
				dust31.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
				dust31.color = Color.Lerp(dust31.color, Color.White, 0.3f);
				dust31.noGravity = true;
				dust31.scale = 0.7f;
			}
		}
		if (type == 629 && Main.netMode != 1)
		{
			switch (Main.npc[(int)ai[0]].type)
			{
			case 517:
				if (NPC.ShieldStrengthTowerSolar != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerSolar - 1, 0f, NPC.ShieldStrengthTowerMax);
				break;
			case 422:
				if (NPC.ShieldStrengthTowerVortex != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerVortex - 1, 0f, NPC.ShieldStrengthTowerMax);
				break;
			case 507:
				if (NPC.ShieldStrengthTowerNebula != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerNebula - 1, 0f, NPC.ShieldStrengthTowerMax);
				break;
			case 493:
				if (NPC.ShieldStrengthTowerStardust != 0)
				{
					Main.npc[(int)ai[0]].ai[3] = 1f;
				}
				NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerStardust - 1, 0f, NPC.ShieldStrengthTowerMax);
				break;
			}
			Main.npc[(int)ai[0]].netUpdate = true;
			NetMessage.SendData(101);
		}
		if (aiStyle == 105 && owner == Main.myPlayer && ai[1] == 0f)
		{
			Vector2 vector32 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
			vector32.Normalize();
			vector32 *= 0.3f;
			NewProjectile(base.Center.X, base.Center.Y, vector32.X, vector32.Y, Main.rand.Next(569, 572), damage, 0f, owner);
		}
		if (type == 452)
		{
			SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 103);
			position = base.Center;
			width = (height = 144);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num248 = 0; num248 < 4; num248++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num249 = 0; num249 < 40; num249++)
			{
				int num250 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num250].noGravity = true;
				Dust dust = Main.dust[num250];
				dust.velocity *= 3f;
				num250 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num250];
				dust.velocity *= 2f;
				Main.dust[num250].noGravity = true;
			}
			for (int num251 = 0; num251 < 1; num251++)
			{
				int num252 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num252];
				gore.velocity *= 0.3f;
				Main.gore[num252].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num252].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 454)
		{
			SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
			position = base.Center;
			width = (height = 208);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num253 = 0; num253 < 7; num253++)
			{
				int num254 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num254].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
			}
			for (int num255 = 0; num255 < 60; num255++)
			{
				int num256 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num256].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				Main.dust[num256].noGravity = true;
				Dust dust = Main.dust[num256];
				dust.velocity *= 1f;
				num256 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num256].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				dust = Main.dust[num256];
				dust.velocity *= 1f;
				Main.dust[num256].noGravity = true;
			}
			for (int num257 = 0; num257 < 3; num257++)
			{
				int num258 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num258];
				gore.velocity *= 0.3f;
				Main.gore[num258].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num258].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 467)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num259 = 0; num259 < 4; num259++)
			{
				int num260 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num260].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num261 = 0; num261 < 30; num261++)
			{
				int num262 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num262].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num262].noGravity = true;
				Dust dust = Main.dust[num262];
				dust.velocity *= 3f;
				num262 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num262].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				dust = Main.dust[num262];
				dust.velocity *= 2f;
				Main.dust[num262].noGravity = true;
				Main.dust[num262].fadeIn = 2.5f;
			}
			for (int num263 = 0; num263 < 10; num263++)
			{
				int num264 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num264].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num264].noGravity = true;
				Dust dust = Main.dust[num264];
				dust.velocity *= 3f;
			}
			for (int num265 = 0; num265 < 10; num265++)
			{
				int num266 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num266].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num266].noGravity = true;
				Dust dust = Main.dust[num266];
				dust.velocity *= 3f;
			}
			for (int num267 = 0; num267 < 2; num267++)
			{
				int num268 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num268].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Gore gore = Main.gore[num268];
				gore.velocity *= 0.3f;
				Main.gore[num268].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num268].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		if (type == 468)
		{
			position = base.Center;
			width = (height = 176);
			base.Center = position;
			Damage();
			SoundEngine.PlaySound(SoundID.Item14, position);
			for (int num269 = 0; num269 < 4; num269++)
			{
				int num270 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num270].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
			}
			for (int num271 = 0; num271 < 20; num271++)
			{
				int num272 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, default(Color), 3.7f);
				Main.dust[num272].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Main.dust[num272].noGravity = true;
				Dust dust = Main.dust[num272];
				dust.velocity *= 3f;
				num272 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num272].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				dust = Main.dust[num272];
				dust.velocity *= 2f;
				Main.dust[num272].noGravity = true;
				Main.dust[num272].fadeIn = 2.5f;
			}
			for (int num273 = 0; num273 < 10; num273++)
			{
				int num274 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.7f);
				Main.dust[num274].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num274].noGravity = true;
				Dust dust = Main.dust[num274];
				dust.velocity *= 3f;
			}
			for (int num275 = 0; num275 < 10; num275++)
			{
				int num276 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num276].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
				Main.dust[num276].noGravity = true;
				Dust dust = Main.dust[num276];
				dust.velocity *= 3f;
			}
			for (int num277 = 0; num277 < 2; num277++)
			{
				int num278 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Main.gore[num278].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				Gore gore = Main.gore[num278];
				gore.velocity *= 0.3f;
				Main.gore[num278].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num278].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
		}
		if (type == 485)
		{
			for (int num279 = 0; num279 < 15; num279++)
			{
				int num280 = Dust.NewDust(position, width, height, 6);
				Main.dust[num280].noGravity = true;
				Dust dust = Main.dust[num280];
				dust.velocity -= oldVelocity * Main.rand.Next(20, 60) * 0.01f;
			}
		}
		else if (type == 484)
		{
			for (int num281 = 0; num281 < 5; num281++)
			{
				int num282 = Dust.NewDust(position, width, height, 78);
				Main.dust[num282].noGravity = true;
				Dust dust = Main.dust[num282];
				dust.velocity -= oldVelocity / 5f;
				Main.dust[num282].scale = 0.85f;
			}
		}
		else if (type == 483)
		{
			SoundEngine.PlaySound(SoundID.Item14, position);
			if (owner == Main.myPlayer)
			{
				int num283 = Main.rand.Next(4, 8);
				int[] array = new int[num283];
				int num284 = 0;
				for (int num285 = 0; num285 < 200; num285++)
				{
					if (!Main.npc[num285].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						continue;
					}
					float num286 = Distance(Main.npc[num285].Center);
					if (!(num286 > 2000f) && Collision.CanHitLine(position, width, height, Main.npc[num285].position, Main.npc[num285].width, Main.npc[num285].height))
					{
						array[num284] = num285;
						num284++;
						if (num284 == num283)
						{
							break;
						}
					}
				}
				if (num284 > 1)
				{
					for (int num287 = 0; num287 < 100; num287++)
					{
						int num288 = Main.rand.Next(num284);
						int num289;
						for (num289 = num288; num289 == num288; num289 = Main.rand.Next(num284))
						{
						}
						int num290 = array[num288];
						array[num288] = array[num289];
						array[num289] = num290;
					}
				}
				Vector2 vector33 = new Vector2(-1f, -1f);
				for (int num291 = 0; num291 < num284; num291++)
				{
					Vector2 vector34 = Main.npc[array[num291]].Center - base.Center;
					vector34.Normalize();
					vector33 += vector34;
				}
				vector33.Normalize();
				for (int num292 = 0; num292 < num283; num292++)
				{
					float num293 = Main.rand.Next(8, 15);
					Vector2 vector35 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					vector35.Normalize();
					if (num284 > 0)
					{
						vector35 += vector33;
						vector35.Normalize();
					}
					vector35 *= num293;
					if (num284 > 0)
					{
						num284--;
						vector35 = Main.npc[array[num284]].Center - base.Center;
						vector35.Normalize();
						vector35 *= num293;
					}
					NewProjectile(base.Center.X, base.Center.Y, vector35.X, vector35.Y, 484, (int)((double)damage * 0.7), knockBack * 0.7f, owner);
				}
			}
			for (int num294 = 0; num294 < 20; num294++)
			{
				int num295 = Dust.NewDust(position, width, height, 78);
				Main.dust[num295].noGravity = true;
				Dust dust = Main.dust[num295];
				dust.velocity *= 4f;
			}
			for (int num296 = 0; num296 < 7; num296++)
			{
				int num297 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust = Main.dust[num297];
				dust.velocity *= 0.9f;
				Main.dust[num297].scale = 0.9f;
			}
			for (int num298 = 0; num298 < 3; num298++)
			{
				int num299 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num299].noGravity = true;
				Dust dust = Main.dust[num299];
				dust.velocity *= 3f;
				num299 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num299];
				dust.velocity *= 2f;
			}
			int num300 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
			Gore gore = Main.gore[num300];
			gore.velocity *= 0.3f;
			Main.gore[num300].velocity.X += Main.rand.Next(-1, 2);
			Main.gore[num300].velocity.Y += Main.rand.Next(-1, 2);
			if (owner == Main.myPlayer)
			{
				int num301 = 100;
				position.X -= num301 / 2;
				position.Y -= num301 / 2;
				width += num301;
				height++;
				penetrate = -1;
				Damage();
			}
		}
		if (type == 523)
		{
			SoundEngine.PlaySound(SoundID.Item54, position);
			for (int num302 = 0; num302 < 25; num302++)
			{
				int num303 = Dust.NewDust(position, width, height, 256);
				Main.dust[num303].noGravity = true;
				Main.dust[num303].position = (Main.dust[num303].position + position) / 2f;
				Main.dust[num303].velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				Main.dust[num303].velocity.Normalize();
				Dust dust = Main.dust[num303];
				dust.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
				Main.dust[num303].alpha = alpha;
			}
		}
		else if (type == 522)
		{
			SoundEngine.PlaySound(SoundID.Item118, position);
			for (int num304 = 0; num304 < 10; num304++)
			{
				int num305 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num305].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num305].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
					dust = Main.dust[num305];
					dust.type++;
				}
				else
				{
					Main.dust[num305].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num305].noGravity = true;
				dust = Main.dust[num305];
				dust.velocity *= 1.25f;
				dust = Main.dust[num305];
				dust.velocity -= oldVelocity / 10f;
			}
		}
		else if (type == 521)
		{
			SoundEngine.PlaySound(SoundID.Item110, position);
			for (int num306 = 0; num306 < 20; num306++)
			{
				int num307 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
				Dust dust;
				if (Main.rand.Next(3) == 0)
				{
					Main.dust[num307].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					Main.dust[num307].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
					dust = Main.dust[num307];
					dust.type++;
				}
				else
				{
					Main.dust[num307].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
				}
				Main.dust[num307].noGravity = true;
				dust = Main.dust[num307];
				dust.velocity *= 2.5f;
				dust = Main.dust[num307];
				dust.velocity -= oldVelocity / 10f;
			}
			if (Main.myPlayer == owner)
			{
				int num308 = Main.rand.Next(3, 6);
				for (int num309 = 0; num309 < num308; num309++)
				{
					Vector2 vector36 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					while (vector36.X == 0f && vector36.Y == 0f)
					{
						vector36 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					}
					vector36.Normalize();
					vector36 *= (float)Main.rand.Next(70, 101) * 0.1f;
					NewProjectile(oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector36.X, vector36.Y, 522, (int)((double)damage * 0.8), knockBack * 0.8f, owner);
				}
			}
		}
		if (type == 520)
		{
			SoundEngine.PlaySound(SoundID.Item50, position);
			for (int num310 = 0; num310 < 10; num310++)
			{
				int num311 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 252, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
				Main.dust[num311].noGravity = true;
				Dust dust = Main.dust[num311];
				dust.velocity -= oldVelocity / 3f;
			}
		}
		if (type == 459 || type == 709)
		{
			int num312 = 3;
			int num313 = 10;
			int num314 = 0;
			if (scale >= 1f)
			{
				position = base.Center;
				width = (height = 144);
				base.Center = position;
				num312 = 7;
				num313 = 30;
				num314 = 2;
				Damage();
			}
			for (int num315 = 0; num315 < num312; num315++)
			{
				int num316 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num316].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
			}
			for (int num317 = 0; num317 < num313; num317++)
			{
				int num318 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 226, 0f, 0f, 0, default(Color), 1.5f);
				Main.dust[num318].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				Main.dust[num318].noGravity = true;
				Dust dust = Main.dust[num318];
				dust.velocity *= 1f;
			}
			for (int num319 = 0; num319 < num314; num319++)
			{
				int num320 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num320];
				gore.velocity *= 0.3f;
				Main.gore[num320].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num320].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (type == 709 && Main.myPlayer == owner)
			{
				Rectangle value2 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
				for (int num321 = 0; num321 < 1000; num321++)
				{
					if (num321 != whoAmI && Main.projectile[num321].active && Main.projectile[num321].owner == owner && Main.projectile[num321].type == 443 && Main.projectile[num321].getRect().Intersects(value2))
					{
						Main.projectile[num321].ai[1] = 1f;
						Main.projectile[num321].velocity = (base.Center - Main.projectile[num321].Center) / 5f;
						Main.projectile[num321].netUpdate = true;
					}
				}
				int num322 = NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
				Main.projectile[num322].timeLeft = 30 * Main.rand.Next(2, 6);
				float[] array2 = Main.projectile[num322].localAI;
				SlotId val = SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryCircle, base.Center);
				array2[0] = ((SlotId)(ref val)).ToFloat();
			}
		}
		if (owner != Main.myPlayer && type == 453 && Main.player[owner].mount.AbilityActive)
		{
			Main.player[owner].mount.UseAbility(Main.player[owner], position, toggleOn: false);
		}
		if (type == 441)
		{
			Main.player[owner].mount.StopAbilityCharge();
		}
		if (type == 444)
		{
			SoundEngine.PlaySound(SoundID.Item96, position);
			int num323 = Main.rand.Next(5, 9);
			for (int num324 = 0; num324 < num323; num324++)
			{
				int num325 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
				Dust dust = Main.dust[num325];
				dust.velocity *= 0.8f;
				Main.dust[num325].position = Vector2.Lerp(Main.dust[num325].position, base.Center, 0.5f);
				Main.dust[num325].noGravity = true;
			}
			if (owner == Main.myPlayer)
			{
				Vector2 vector37 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
				if (Main.player[owner].gravDir == -1f)
				{
					vector37.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
				}
				Vector2 vector38 = Vector2.Normalize(vector37 - base.Center);
				vector38 *= localAI[1];
				NewProjectile(base.Center.X, base.Center.Y, vector38.X, vector38.Y, (int)localAI[0], damage, knockBack, owner);
			}
		}
		if (type == 472)
		{
			for (int num326 = 0; num326 < 20; num326++)
			{
				int num327 = Dust.NewDust(position, width, height, 30);
				Main.dust[num327].noGravity = true;
				Dust dust = Main.dust[num327];
				dust.velocity *= 0.45f;
				dust = Main.dust[num327];
				dust.velocity += velocity * 0.9f;
			}
		}
		if (type == 639 || type == 640)
		{
			int num328 = Main.rand.Next(5, 10);
			for (int num329 = 0; num329 < num328; num329++)
			{
				int num330 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust = Main.dust[num330];
				dust.velocity *= 1.6f;
				Main.dust[num330].velocity.Y -= 1f;
				Main.dust[num330].position = Vector2.Lerp(Main.dust[num330].position, base.Center, 0.5f);
				Main.dust[num330].noGravity = true;
			}
			if (owner == Main.myPlayer && type == 639)
			{
				int num331 = num + 1;
				int nextSlot = GetNextSlot();
				if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
				{
					num331++;
				}
				Vector2 vector39 = new Vector2(ai[0], ai[1]);
				NewProjectile(localAI[0], localAI[1], vector39.X, vector39.Y, 640, damage, knockBack, owner, 0f, num331);
			}
		}
		if (type == 684)
		{
			int num332 = Main.rand.Next(15, 25);
			for (int num333 = 0; num333 < num332; num333++)
			{
				int num334 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
				Dust dust = Main.dust[num334];
				dust.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
				Main.dust[num334].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
				Main.dust[num334].noLight = true;
				Main.dust[num334].noGravity = true;
				dust = Main.dust[num334];
				dust.position += Main.dust[num334].velocity * 4f;
			}
		}
		if (type == 435)
		{
			int num335 = Main.rand.Next(5, 10);
			for (int num336 = 0; num336 < num335; num336++)
			{
				int num337 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust = Main.dust[num337];
				dust.velocity *= 1.6f;
				Main.dust[num337].velocity.Y -= 1f;
				Main.dust[num337].position = Vector2.Lerp(Main.dust[num337].position, base.Center, 0.5f);
				Main.dust[num337].noGravity = true;
			}
		}
		if (type == 732)
		{
			int num338 = Main.rand.Next(5, 10);
			for (int num339 = 0; num339 < num338; num339++)
			{
				int num340 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust = Main.dust[num340];
				dust.velocity *= 1.6f;
				Main.dust[num340].velocity.Y -= 1f;
				Main.dust[num340].velocity = Main.dust[num340].velocity * 0.5f + velocity * ((float)num339 / (float)num338) * 0.7f;
				Main.dust[num340].position = Vector2.Lerp(Main.dust[num340].position, base.Center, 0.5f);
				Main.dust[num340].noGravity = true;
			}
		}
		if (type == 682)
		{
			int num341 = 22;
			for (int num342 = 0; num342 < num341; num342++)
			{
				int num343 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
				Dust dust = Main.dust[num343];
				dust.velocity *= 1.6f;
				Main.dust[num343].velocity.Y -= 1f;
				Main.dust[num343].position = Vector2.Lerp(Main.dust[num343].position, base.Center, 0.5f);
			}
		}
		if (type == 436)
		{
			int num344 = Main.rand.Next(5, 10);
			for (int num345 = 0; num345 < num344; num345++)
			{
				int num346 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust = Main.dust[num346];
				dust.velocity *= 1.6f;
				Main.dust[num346].velocity.Y -= 1f;
				Main.dust[num346].position = Vector2.Lerp(Main.dust[num346].position, base.Center, 0.5f);
				Main.dust[num346].noGravity = true;
			}
		}
		if (type == 462)
		{
			int num347 = Main.rand.Next(5, 10);
			for (int num348 = 0; num348 < num347; num348++)
			{
				int num349 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
				Dust dust = Main.dust[num349];
				dust.velocity *= 1.6f;
				Main.dust[num349].velocity.Y -= 1f;
				dust = Main.dust[num349];
				dust.position -= Vector2.One * 4f;
				Main.dust[num349].position = Vector2.Lerp(Main.dust[num349].position, base.Center, 0.5f);
				Main.dust[num349].noGravity = true;
			}
		}
		if (type == 442)
		{
			SoundEngine.PlaySound(SoundID.Item94, position);
			int num350 = Main.rand.Next(3, 7);
			for (int num351 = 0; num351 < num350; num351++)
			{
				int num352 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust = Main.dust[num352];
				dust.velocity *= 2f;
				Main.dust[num352].noGravity = true;
			}
			if (Main.myPlayer == owner)
			{
				Rectangle value3 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
				for (int num353 = 0; num353 < 1000; num353++)
				{
					if (num353 != whoAmI && Main.projectile[num353].active && Main.projectile[num353].owner == owner && Main.projectile[num353].type == 443 && Main.projectile[num353].getRect().Intersects(value3))
					{
						Main.projectile[num353].ai[1] = 1f;
						Main.projectile[num353].velocity = (base.Center - Main.projectile[num353].Center) / 5f;
						Main.projectile[num353].netUpdate = true;
					}
				}
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
			}
		}
		if (type == 440)
		{
			int num354 = Main.rand.Next(3, 7);
			for (int num355 = 0; num355 < num354; num355++)
			{
				int num356 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust = Main.dust[num356];
				dust.velocity *= 2f;
				Main.dust[num356].noGravity = true;
			}
		}
		if (type == 606)
		{
			int num357 = Main.rand.Next(3, 7);
			for (int num358 = 0; num358 < num357; num358++)
			{
				int num359 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
				Dust dust = Main.dust[num359];
				dust.velocity *= 1.5f;
				Main.dust[num359].noGravity = true;
			}
		}
		if (type == 449)
		{
			int num360 = Main.rand.Next(3, 7);
			for (int num361 = 0; num361 < num360; num361++)
			{
				int num362 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
				Dust dust = Main.dust[num362];
				dust.velocity *= 2f;
				Main.dust[num362].noGravity = true;
			}
		}
		if (type == 495)
		{
			for (int num363 = 0; num363 < 15; num363++)
			{
				int num364 = Dust.NewDust(base.Center, 10, 10, 27);
				Main.dust[num364].noGravity = true;
				Dust dust = Main.dust[num364];
				dust.velocity -= oldVelocity * 0.3f;
			}
		}
		if (type == 497)
		{
			for (int num365 = 0; num365 < 15; num365++)
			{
				int num366 = Dust.NewDust(base.Center, 10, 10, 27);
				Main.dust[num366].noGravity = true;
				Dust dust = Main.dust[num366];
				dust.velocity *= 2f;
				dust = Main.dust[num366];
				dust.velocity -= oldVelocity * 0.3f;
				dust = Main.dust[num366];
				dust.scale += (float)Main.rand.Next(150) * 0.001f;
			}
		}
		if (type == 448)
		{
			SoundEngine.PlaySound(SoundID.Item14, position);
			position = base.Center;
			width = (height = 112);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num367 = 0; num367 < 4; num367++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num368 = 0; num368 < 40; num368++)
			{
				int num369 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 0, default(Color), 2.5f);
				Main.dust[num369].noGravity = true;
				Dust dust = Main.dust[num369];
				dust.velocity *= 3f;
				num369 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num369];
				dust.velocity *= 2f;
				Main.dust[num369].noGravity = true;
			}
			for (int num370 = 0; num370 < 1; num370++)
			{
				int num371 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num371];
				gore.velocity *= 0.3f;
				Main.gore[num371].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num371].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		else if (type == 715 || type == 716 || type == 717 || type == 718)
		{
			SoundEngine.PlaySound(SoundID.Item14, position);
			position = base.Center;
			width = (height = 128);
			if (type == 717 || type == 718)
			{
				width = (height = 240);
			}
			position.X -= width / 2;
			position.Y -= height / 2;
			Damage();
			AI_147_Explosion();
		}
		if (type == 616)
		{
			SoundEngine.PlaySound(SoundID.Item14, position);
			position = base.Center;
			width = (height = 80);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num372 = 0; num372 < 4; num372++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num373 = 0; num373 < 40; num373++)
			{
				int num374 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 2.5f);
				Main.dust[num374].noGravity = true;
				Dust dust = Main.dust[num374];
				dust.velocity *= 2f;
				num374 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 1.5f);
				dust = Main.dust[num374];
				dust.velocity *= 1.2f;
				Main.dust[num374].noGravity = true;
			}
			for (int num375 = 0; num375 < 1; num375++)
			{
				int num376 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num376];
				gore.velocity *= 0.3f;
				Main.gore[num376].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num376].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			Damage();
		}
		if (type == 502)
		{
			Vector2 vector40 = new Vector2(width, height) / 2f;
			for (int num377 = 0; num377 < oldPos.Length; num377++)
			{
				if (!(oldPos[num377] == Vector2.Zero))
				{
					int num378 = Dust.NewDust(oldPos[num377] + vector40, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
					Main.dust[num378].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
					Main.dust[num378].noGravity = true;
				}
			}
		}
		if (type == 510)
		{
			SoundEngine.PlaySound(SoundID.Item107, position);
			Gore.NewGore(base.Center, -oldVelocity * 0.2f, 704);
			Gore.NewGore(base.Center, -oldVelocity * 0.2f, 705);
			if (owner == Main.myPlayer)
			{
				int num379 = Main.rand.Next(20, 31);
				for (int num380 = 0; num380 < num379; num380++)
				{
					Vector2 vector41 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					vector41.Normalize();
					vector41 *= (float)Main.rand.Next(10, 201) * 0.01f;
					NewProjectile(base.Center.X, base.Center.Y, vector41.X, vector41.Y, 511 + Main.rand.Next(3), damage, 1f, owner, 0f, Main.rand.Next(-45, 1));
				}
			}
		}
		if (type == 868 || type == 869)
		{
			SoundEngine.PlaySound(SoundID.Item107, position);
			for (int num381 = 0; num381 < 15; num381++)
			{
				Dust.NewDust(position, width, height, 13, 0f, -2f, 0, default(Color), 1.5f);
			}
			if (Main.netMode != 1 && type == 868)
			{
				WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, base.Center);
				NetMessage.SendData(7);
			}
			if (Main.netMode != 1 && type == 869)
			{
				WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[owner]);
				NetMessage.SendData(7);
			}
		}
		else if (type == 836)
		{
			for (int num382 = 0; num382 < 3; num382++)
			{
				int num383 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, Color.White, 0.8f);
				Dust dust = Main.dust[num383];
				dust.velocity *= 0.5f;
				Main.dust[num383].noGravity = true;
			}
		}
		if (type == 408)
		{
			for (int num384 = 0; num384 < 15; num384++)
			{
				int num385 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f);
				Dust dust = Main.dust[num385];
				dust.velocity /= 2f;
			}
			int num386 = 0;
			int num387 = 10;
			num386 = Gore.NewGore(base.Center, velocity * 0.8f, 584);
			Gore gore = Main.gore[num386];
			gore.timeLeft /= num387;
			num386 = Gore.NewGore(base.Center, velocity * 0.9f, 585);
			gore = Main.gore[num386];
			gore.timeLeft /= num387;
			num386 = Gore.NewGore(base.Center, velocity * 1f, 586);
			gore = Main.gore[num386];
			gore.timeLeft /= num387;
		}
		if (type == 385)
		{
			SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
			int num388 = 36;
			for (int num389 = 0; num389 < num388; num389++)
			{
				Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f;
				spinningpoint = spinningpoint.RotatedBy((float)(num389 - (num388 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num388) + base.Center;
				Vector2 vector42 = spinningpoint - base.Center;
				int num390 = Dust.NewDust(spinningpoint + vector42, 0, 0, 172, vector42.X * 2f, vector42.Y * 2f, 100, default(Color), 1.4f);
				Main.dust[num390].noGravity = true;
				Main.dust[num390].noLight = true;
				Main.dust[num390].velocity = vector42;
			}
			if (owner == Main.myPlayer)
			{
				if (ai[1] < 1f)
				{
					int num391 = (Main.expertMode ? 25 : 40);
					int num392 = NewProjectile(base.Center.X - (float)(direction * 30), base.Center.Y - 4f, (float)(-direction) * 0.01f, 0f, 384, num391, 4f, owner, 16f, 15f);
					Main.projectile[num392].netUpdate = true;
				}
				else
				{
					int num393 = (int)(base.Center.Y / 16f);
					int num394 = (int)(base.Center.X / 16f);
					int num395 = 100;
					if (num394 < 10)
					{
						num394 = 10;
					}
					if (num394 > Main.maxTilesX - 10)
					{
						num394 = Main.maxTilesX - 10;
					}
					if (num393 < 10)
					{
						num393 = 10;
					}
					if (num393 > Main.maxTilesY - num395 - 10)
					{
						num393 = Main.maxTilesY - num395 - 10;
					}
					for (int num396 = num393; num396 < num393 + num395; num396++)
					{
						Tile tile = Main.tile[num394, num396];
						if (tile.active() && (Main.tileSolid[tile.type] || tile.liquid != 0))
						{
							num393 = num396;
							break;
						}
					}
					int num397 = (Main.expertMode ? 50 : 80);
					int num398 = NewProjectile(num394 * 16 + 8, num393 * 16 - 24, 0f, 0f, 386, num397, 4f, Main.myPlayer, 16f, 24f);
					Main.projectile[num398].netUpdate = true;
				}
			}
		}
		else if (type >= 424 && type <= 426)
		{
			SoundEngine.PlaySound(SoundID.Item89, position);
			position.X += width / 2;
			position.Y += height / 2;
			width = (int)(128f * scale);
			height = (int)(128f * scale);
			position.X -= width / 2;
			position.Y -= height / 2;
			for (int num399 = 0; num399 < 8; num399++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
			}
			for (int num400 = 0; num400 < 32; num400++)
			{
				int num401 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num401].noGravity = true;
				Dust dust = Main.dust[num401];
				dust.velocity *= 3f;
				num401 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num401];
				dust.velocity *= 2f;
				Main.dust[num401].noGravity = true;
			}
			for (int num402 = 0; num402 < 2; num402++)
			{
				int num403 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num403];
				gore.velocity *= 0.3f;
				Main.gore[num403].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
				Main.gore[num403].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
			}
			if (owner == Main.myPlayer)
			{
				localAI[1] = -1f;
				maxPenetrate = 0;
				Damage();
			}
			for (int num404 = 0; num404 < 5; num404++)
			{
				int num405 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
				int num406 = Dust.NewDust(position, width, height, num405, 2.5f * (float)direction, -2.5f);
				Main.dust[num406].alpha = 200;
				Dust dust = Main.dust[num406];
				dust.velocity *= 2.4f;
				dust = Main.dust[num406];
				dust.scale += Main.rand.NextFloat();
			}
		}
		if (type == 399)
		{
			SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
			Vector2 vector43 = new Vector2(20f, 20f);
			for (int num407 = 0; num407 < 5; num407++)
			{
				Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 12, 0f, 0f, 0, Color.Red);
			}
			for (int num408 = 0; num408 < 10; num408++)
			{
				int num409 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
				Dust dust = Main.dust[num409];
				dust.velocity *= 1.4f;
			}
			for (int num410 = 0; num410 < 20; num410++)
			{
				int num411 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
				Main.dust[num411].noGravity = true;
				Dust dust = Main.dust[num411];
				dust.velocity *= 5f;
				num411 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
				dust = Main.dust[num411];
				dust.velocity *= 3f;
			}
			if (Main.myPlayer == owner)
			{
				for (int num412 = 0; num412 < 6; num412++)
				{
					float num413 = (0f - velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
					float num414 = (0f - Math.Abs(velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
					NewProjectile(base.Center.X + num413, base.Center.Y + num414, num413, num414, 400 + Main.rand.Next(3), (int)((double)damage * 0.5), 0f, owner);
				}
			}
		}
		if (type == 384 || type == 386)
		{
			for (int num415 = 0; num415 < 20; num415++)
			{
				int num416 = Dust.NewDust(position, width, height, 212, direction * 2, 0f, 100, default(Color), 1.4f);
				Dust dust32 = Main.dust[num416];
				dust32.color = Color.CornflowerBlue;
				dust32.color = Color.Lerp(dust32.color, Color.White, 0.3f);
				dust32.noGravity = true;
			}
		}
		if (type == 507 || type == 508)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector44 = position;
			Vector2 vector45 = oldVelocity;
			vector45.Normalize();
			vector44 += vector45 * 16f;
			for (int num417 = 0; num417 < 20; num417++)
			{
				int num418 = Dust.NewDust(vector44, width, height, 81);
				Main.dust[num418].position = (Main.dust[num418].position + base.Center) / 2f;
				Dust dust = Main.dust[num418];
				dust.velocity += oldVelocity * 0.4f;
				dust = Main.dust[num418];
				dust.velocity *= 0.5f;
				Main.dust[num418].noGravity = true;
				vector44 -= vector45 * 8f;
			}
		}
		if (type == 598)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			Vector2 vector46 = position;
			Vector2 vector47 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
			vector46 += vector47 * 16f;
			for (int num419 = 0; num419 < 20; num419++)
			{
				int num420 = Dust.NewDust(vector46, width, height, 81);
				Main.dust[num420].position = (Main.dust[num420].position + base.Center) / 2f;
				Dust dust = Main.dust[num420];
				dust.velocity += vector47 * 2f;
				dust = Main.dust[num420];
				dust.velocity *= 0.5f;
				Main.dust[num420].noGravity = true;
				vector46 -= vector47 * 8f;
			}
		}
		if (type == 1 || type == 81 || type == 98)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num421 = 0; num421 < 10; num421++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		if (type == 336 || type == 345)
		{
			for (int num422 = 0; num422 < 6; num422++)
			{
				int num423 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 196);
				Main.dust[num423].noGravity = true;
				Main.dust[num423].scale = scale;
			}
		}
		if (type == 358)
		{
			velocity = oldVelocity * 0.2f;
			for (int num424 = 0; num424 < 100; num424++)
			{
				int num425 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 211, 0f, 0f, 75, default(Color), 1.2f);
				Dust dust;
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num425];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num425];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num425];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num425].scale = 0.6f;
				}
				else
				{
					Main.dust[num425].noGravity = true;
				}
				dust = Main.dust[num425];
				dust.velocity *= 0.3f;
				dust = Main.dust[num425];
				dust.velocity += velocity;
				dust = Main.dust[num425];
				dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
				Main.dust[num425].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num425].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num425].position = base.Center;
			}
		}
		if (type == 406)
		{
			int num426 = 175;
			Color newColor5 = new Color(0, 80, 255, 100);
			velocity = oldVelocity * 0.2f;
			for (int num427 = 0; num427 < 40; num427++)
			{
				int num428 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, num426, newColor5, 1.6f);
				Dust dust;
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num428];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num428];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					dust = Main.dust[num428];
					dust.alpha += 25;
				}
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num428].scale = 0.6f;
				}
				else
				{
					Main.dust[num428].noGravity = true;
				}
				dust = Main.dust[num428];
				dust.velocity *= 0.3f;
				dust = Main.dust[num428];
				dust.velocity += velocity;
				dust = Main.dust[num428];
				dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
				Main.dust[num428].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num428].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
				Main.dust[num428].position = base.Center;
			}
		}
		if (type == 344)
		{
			for (int num429 = 0; num429 < 3; num429++)
			{
				int num430 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
				Main.dust[num430].noGravity = true;
				Main.dust[num430].scale = scale;
			}
		}
		else if (type == 343)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			for (int num431 = 4; num431 < 31; num431++)
			{
				float num432 = oldVelocity.X * (30f / (float)num431);
				float num433 = oldVelocity.Y * (30f / (float)num431);
				int num434 = Dust.NewDust(new Vector2(oldPosition.X - num432, oldPosition.Y - num433), 8, 8, 197, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.2f);
				Main.dust[num434].noGravity = true;
				Dust dust = Main.dust[num434];
				dust.velocity *= 0.5f;
			}
		}
		else if (type == 349)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			for (int num435 = 0; num435 < 3; num435++)
			{
				int num436 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
				Main.dust[num436].noGravity = true;
				Main.dust[num436].noLight = true;
				Main.dust[num436].scale = 0.7f;
			}
		}
		if (type == 323)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num437 = 0; num437 < 20; num437++)
			{
				int num438 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num438].noGravity = true;
					Main.dust[num438].scale = 1.3f;
					Dust dust = Main.dust[num438];
					dust.velocity *= 1.5f;
					dust = Main.dust[num438];
					dust.velocity -= oldVelocity * 0.5f;
					dust = Main.dust[num438];
					dust.velocity *= 1.5f;
				}
				else
				{
					Dust dust = Main.dust[num438];
					dust.velocity *= 0.75f;
					dust = Main.dust[num438];
					dust.velocity -= oldVelocity * 0.25f;
					Main.dust[num438].scale = 0.8f;
				}
			}
		}
		if (type == 589)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			Color newColor6 = Color.Red;
			if (ai[1] == 1f)
			{
				newColor6 = Color.Green;
			}
			if (ai[1] == 2f)
			{
				newColor6 = Color.Purple;
			}
			if (ai[1] == 3f)
			{
				newColor6 = Color.Gold;
			}
			if (ai[1] == 4f)
			{
				newColor6 = Color.White;
			}
			newColor6.A = 100;
			for (int num439 = 0; num439 < 30; num439++)
			{
				int num440 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11, 0f, 0f, 0, newColor6);
				Dust dust = Main.dust[num440];
				dust.velocity *= 1f + Main.rand.NextFloat() * 1f;
				if (num439 < 10)
				{
					Main.dust[num440].noGravity = true;
					dust = Main.dust[num440];
					dust.velocity *= 0.5f;
				}
			}
		}
		if (type == 346)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			for (int num441 = 0; num441 < 20; num441++)
			{
				int num442 = 10;
				if (ai[1] == 1f)
				{
					num442 = 4;
				}
				int num443 = Dust.NewDust(position, width, height, num442);
				Main.dust[num443].noGravity = true;
			}
		}
		if (type == 335)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			for (int num444 = 0; num444 < 20; num444++)
			{
				int num445 = 90 - (int)ai[1];
				int num446 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num445);
				Main.dust[num446].noLight = true;
				Main.dust[num446].scale = 0.8f;
			}
		}
		if (type == 318)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num447 = 0; num447 < 10; num447++)
			{
				int num448 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num448].noGravity = true;
				}
			}
		}
		if (type == 378)
		{
			for (int num449 = 0; num449 < 10; num449++)
			{
				int num450 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num450].noGravity = true;
				}
			}
		}
		else if (type == 311)
		{
			for (int num451 = 0; num451 < 5; num451++)
			{
				int num452 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 189);
				Main.dust[num452].scale = 0.85f;
				Main.dust[num452].noGravity = true;
				Dust dust = Main.dust[num452];
				dust.velocity += velocity * 0.5f;
			}
		}
		else if (type == 316)
		{
			for (int num453 = 0; num453 < 5; num453++)
			{
				int num454 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 195);
				Main.dust[num454].scale = 0.85f;
				Main.dust[num454].noGravity = true;
				Dust dust = Main.dust[num454];
				dust.velocity += velocity * 0.5f;
			}
		}
		else if (type == 184 || type == 195)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num455 = 0; num455 < 5; num455++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		else if (type == 275 || type == 276)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num456 = 0; num456 < 5; num456++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
			}
		}
		else if (type == 291)
		{
			if (owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 292, damage, knockBack, owner);
			}
		}
		else if (type == 295)
		{
			if (owner == Main.myPlayer)
			{
				NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)damage * 0.65), knockBack, owner);
			}
		}
		else if (type == 270 || type == 837)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
			if (type == 270)
			{
				for (int num457 = 0; num457 < 20; num457++)
				{
					int num458 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
					Main.dust[num458].noGravity = true;
					Dust dust = Main.dust[num458];
					dust.velocity *= 1.2f;
					Main.dust[num458].scale = 1.3f;
					dust = Main.dust[num458];
					dust.velocity -= oldVelocity * 0.3f;
					num458 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num458].noGravity = true;
					dust = Main.dust[num458];
					dust.velocity *= 3f;
				}
			}
			else
			{
				for (int num459 = 0; num459 < 20; num459++)
				{
					int num460 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
					Main.dust[num460].noGravity = true;
					Dust dust = Main.dust[num460];
					dust.velocity *= 1.2f;
					Main.dust[num460].scale = 1.3f;
					dust = Main.dust[num460];
					dust.velocity -= oldVelocity * 0.3f;
					num460 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num460].noGravity = true;
					dust = Main.dust[num460];
					dust.velocity *= 3f;
				}
			}
		}
		else if (type == 265)
		{
			for (int num461 = 0; num461 < 15; num461++)
			{
				int num462 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num462].noGravity = true;
				Dust dust = Main.dust[num462];
				dust.velocity *= 1.2f;
				dust = Main.dust[num462];
				dust.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 355)
		{
			for (int num463 = 0; num463 < 15; num463++)
			{
				int num464 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, 0f, 0f, 100, default(Color), 1.2f);
				Main.dust[num464].noGravity = true;
				Dust dust = Main.dust[num464];
				dust.velocity *= 1.2f;
				dust = Main.dust[num464];
				dust.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 304)
		{
			for (int num465 = 0; num465 < 3; num465++)
			{
				int num466 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 0.8f);
				Main.dust[num466].noGravity = true;
				Dust dust = Main.dust[num466];
				dust.velocity *= 1.2f;
				dust = Main.dust[num466];
				dust.velocity -= oldVelocity * 0.3f;
			}
		}
		else if (type == 263)
		{
			SoundEngine.PlaySound(SoundID.Item27, position);
			for (int num467 = 0; num467 < 15; num467++)
			{
				int num468 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
				Main.dust[num468].noGravity = true;
				Dust dust = Main.dust[num468];
				dust.velocity *= 2f;
			}
		}
		else if (type == 261)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num469 = 0; num469 < 15; num469++)
			{
				Dust dust33 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 148);
				Dust dust = dust33;
				dust.velocity *= 2f;
				dust33.velocity.Y -= 0.4f;
			}
			for (int num470 = 0; num470 < 3; num470++)
			{
				Dust dust34 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 228);
				Dust dust = dust34;
				dust.velocity *= 2f;
				dust34.noLight = true;
				dust = dust34;
				dust.scale *= 0.8f;
				dust34.velocity.Y -= 0.3f;
			}
		}
		else if (type == 928)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num471 = 0; num471 < 25; num471++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, Color.White, 1.3f);
			}
		}
		else if (type == 229)
		{
			for (int num472 = 0; num472 < 25; num472++)
			{
				int num473 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
				Main.dust[num473].noGravity = true;
				Dust dust = Main.dust[num473];
				dust.velocity *= 1.5f;
				Main.dust[num473].scale = 1.5f;
			}
		}
		else if (type == 239)
		{
			int num474 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 154);
			Main.dust[num474].position.X -= 2f;
			Main.dust[num474].alpha = 38;
			Dust dust = Main.dust[num474];
			dust.velocity *= 0.1f;
			dust = Main.dust[num474];
			dust.velocity += -oldVelocity * 0.25f;
			Main.dust[num474].scale = 0.95f;
		}
		else if (type == 245)
		{
			int num475 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 114);
			Main.dust[num475].noGravity = true;
			Main.dust[num475].position.X -= 2f;
			Main.dust[num475].alpha = 38;
			Dust dust = Main.dust[num475];
			dust.velocity *= 0.1f;
			dust = Main.dust[num475];
			dust.velocity += -oldVelocity * 0.25f;
			Main.dust[num475].scale = 0.95f;
		}
		else if (type == 264)
		{
			int num476 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 54);
			Main.dust[num476].noGravity = true;
			Main.dust[num476].position.X -= 2f;
			Main.dust[num476].alpha = 38;
			Dust dust = Main.dust[num476];
			dust.velocity *= 0.1f;
			dust = Main.dust[num476];
			dust.velocity += -oldVelocity * 0.25f;
			Main.dust[num476].scale = 0.95f;
		}
		else if (type == 206 || type == 225)
		{
			SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
			for (int num477 = 0; num477 < 5; num477++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
			}
		}
		else if (type == 227)
		{
			SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
			for (int num478 = 0; num478 < 15; num478++)
			{
				int num479 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
				Main.dust[num479].noGravity = true;
				Dust dust = Main.dust[num479];
				dust.velocity += oldVelocity;
				Main.dust[num479].scale = 1.5f;
			}
		}
		else if (type == 237 && owner == Main.myPlayer)
		{
			NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 238, damage, knockBack, owner);
		}
		else if (type == 243 && owner == Main.myPlayer)
		{
			NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 244, damage, knockBack, owner);
		}
		else if (type == 120)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num480 = 0; num480 < 10; num480++)
			{
				int num481 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100);
				if (num480 < 5)
				{
					Main.dust[num481].noGravity = true;
				}
				Dust dust = Main.dust[num481];
				dust.velocity *= 0.2f;
			}
		}
		else if (type == 181 || type == 189 || type == 566)
		{
			for (int num482 = 0; num482 < 6; num482++)
			{
				int num483 = Dust.NewDust(position, width, height, 150, velocity.X, velocity.Y, 50);
				Main.dust[num483].noGravity = true;
				Main.dust[num483].scale = 1f;
			}
		}
		else if (type == 178)
		{
			for (int num484 = 0; num484 < 85; num484++)
			{
				int num485 = Main.rand.Next(139, 143);
				int num486 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num485, velocity.X, velocity.Y, 0, default(Color), 1.2f);
				Main.dust[num486].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num486].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num486].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num486].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num486].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num486].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Dust dust = Main.dust[num486];
				dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			for (int num487 = 0; num487 < 40; num487++)
			{
				int num488 = Main.rand.Next(276, 283);
				int num489 = Gore.NewGore(position, velocity, num488);
				Main.gore[num489].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num489].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num489].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num489].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Gore gore = Main.gore[num489];
				gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num489].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num489].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (type == 289)
		{
			for (int num490 = 0; num490 < 30; num490++)
			{
				int num491 = Main.rand.Next(139, 143);
				int num492 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num491, velocity.X, velocity.Y, 0, default(Color), 1.2f);
				Main.dust[num492].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num492].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num492].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num492].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num492].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num492].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Dust dust = Main.dust[num492];
				dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			for (int num493 = 0; num493 < 15; num493++)
			{
				int num494 = Main.rand.Next(276, 283);
				int num495 = Gore.NewGore(position, velocity, num494);
				Main.gore[num495].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num495].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num495].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num495].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Gore gore = Main.gore[num495];
				gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num495].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num495].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		else if (type == 475 || type == 505 || type == 506)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[1] < 10f)
			{
				Vector2 vector48 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num496 = 0f - velocity.X;
				float num497 = 0f - velocity.Y;
				float num498 = 1f;
				if (ai[0] <= 17f)
				{
					num498 = ai[0] / 17f;
				}
				int num499 = (int)(30f * num498);
				float num500 = 1f;
				if (ai[0] <= 30f)
				{
					num500 = ai[0] / 30f;
				}
				float num501 = 0.4f * num500;
				float num502 = num501;
				num497 += num502;
				for (int num503 = 0; num503 < num499; num503++)
				{
					float num504 = (float)Math.Sqrt(num496 * num496 + num497 * num497);
					float num505 = 5.6f;
					if (Math.Abs(num496) + Math.Abs(num497) < 1f)
					{
						num505 *= Math.Abs(num496) + Math.Abs(num497) / 1f;
					}
					num504 = num505 / num504;
					num496 *= num504;
					num497 *= num504;
					Math.Atan2(num497, num496);
					int num506 = 3;
					if (type == 506)
					{
						num506 = 30;
					}
					if (type == 505)
					{
						num506 = 239;
					}
					if ((float)num503 > ai[1])
					{
						for (int num507 = 0; num507 < 4; num507++)
						{
							int num508 = Dust.NewDust(vector48, width, height, num506);
							Main.dust[num508].noGravity = true;
							Dust dust = Main.dust[num508];
							dust.velocity *= 0.3f;
						}
					}
					vector48.X += num496;
					vector48.Y += num497;
					num496 = 0f - velocity.X;
					num497 = 0f - velocity.Y;
					num502 += num501;
					num497 += num502;
				}
			}
		}
		else if (type == 171)
		{
			if (ai[1] == 0f)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[1] < 10f)
			{
				Vector2 vector49 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num509 = 0f - velocity.X;
				float num510 = 0f - velocity.Y;
				float num511 = 1f;
				if (ai[0] <= 17f)
				{
					num511 = ai[0] / 17f;
				}
				int num512 = (int)(30f * num511);
				float num513 = 1f;
				if (ai[0] <= 30f)
				{
					num513 = ai[0] / 30f;
				}
				float num514 = 0.4f * num513;
				float num515 = num514;
				num510 += num515;
				for (int num516 = 0; num516 < num512; num516++)
				{
					float num517 = (float)Math.Sqrt(num509 * num509 + num510 * num510);
					float num518 = 5.6f;
					if (Math.Abs(num509) + Math.Abs(num510) < 1f)
					{
						num518 *= Math.Abs(num509) + Math.Abs(num510) / 1f;
					}
					num517 = num518 / num517;
					num509 *= num517;
					num510 *= num517;
					Math.Atan2(num510, num509);
					if ((float)num516 > ai[1])
					{
						for (int num519 = 0; num519 < 4; num519++)
						{
							int num520 = Dust.NewDust(vector49, width, height, 129);
							Main.dust[num520].noGravity = true;
							Dust dust = Main.dust[num520];
							dust.velocity *= 0.3f;
						}
					}
					vector49.X += num509;
					vector49.Y += num510;
					num509 = 0f - velocity.X;
					num510 = 0f - velocity.Y;
					num515 += num514;
					num510 += num515;
				}
			}
		}
		else if (type == 117)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num521 = 0; num521 < 10; num521++)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26);
			}
		}
		else if (type == 166)
		{
			SoundEngine.PlaySound(SoundID.Item51, position);
			for (int num522 = 0; num522 < 10; num522++)
			{
				int num523 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
				Main.dust[num523].noGravity = true;
				Dust dust = Main.dust[num523];
				dust.velocity -= oldVelocity * 0.25f;
			}
		}
		else if (type == 158)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num524 = 0; num524 < 10; num524++)
			{
				int num525 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 9);
				Main.dust[num525].noGravity = true;
				Dust dust = Main.dust[num525];
				dust.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 159)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num526 = 0; num526 < 10; num526++)
			{
				int num527 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
				Main.dust[num527].noGravity = true;
				Dust dust = Main.dust[num527];
				dust.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 160)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num528 = 0; num528 < 10; num528++)
			{
				int num529 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 19);
				Main.dust[num529].noGravity = true;
				Dust dust = Main.dust[num529];
				dust.velocity -= velocity * 0.5f;
			}
		}
		else if (type == 161)
		{
			SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			for (int num530 = 0; num530 < 10; num530++)
			{
				int num531 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
				Main.dust[num531].noGravity = true;
				Dust dust = Main.dust[num531];
				dust.velocity -= velocity * 0.5f;
			}
		}
		else if (type >= 191 && type <= 194)
		{
			int num532 = Gore.NewGore(new Vector2(position.X - (float)(width / 2), position.Y - (float)(height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), scale);
			Gore gore = Main.gore[num532];
			gore.velocity *= 0.1f;
		}
		else if (!Main.projPet[type])
		{
			if (type == 93)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num533 = 0; num533 < 10; num533++)
				{
					int num534 = Dust.NewDust(position, width, height, 57, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num534].velocity.X *= 2f;
					Main.dust[num534].velocity.Y *= 2f;
				}
			}
			else if (type == 99 || type == 727)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num535 = 0; num535 < 30; num535++)
				{
					int num536 = Dust.NewDust(position, width, height, (type == 99) ? 1 : 40);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num536];
						dust.scale *= 1.4f;
					}
					velocity *= 1.9f;
				}
			}
			else if (type == 772)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num537 = 0; num537 < 6; num537++)
				{
					Dust.NewDust(position, width, height, 1);
					velocity *= 1.9f;
				}
				for (int num538 = 0; num538 < 20; num538++)
				{
					Dust dust35 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
					dust35.noGravity = true;
					Dust dust = dust35;
					dust.velocity *= 2.9f;
					dust35.velocity.Y *= 0.8f;
					dust35.fadeIn = 1.1f;
				}
				for (int num539 = 0; num539 < 7; num539++)
				{
					Dust dust36 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
					dust36.noGravity = true;
					Dust dust = dust36;
					dust.velocity *= 2.9f;
					dust36.velocity.Y *= 0.8f;
					dust36.fadeIn = 1.1f;
					dust36.noLight = true;
				}
				if (owner == Main.myPlayer)
				{
					List<int> list = new List<int>();
					list.Add(181);
					list.Add(182);
					list.Add(180);
					list.Add(178);
					list.Add(179);
					list.Add(177);
					list.Add(999);
					List<int> list2 = list;
					int item = list2[Main.rand.Next(list2.Count)];
					list2.Remove(item);
					int stack = Main.rand.Next(3, 7);
					int item2 = list2[Main.rand.Next(list2.Count)];
					list2.Remove(item2);
					int stack2 = Main.rand.Next(3, 7);
					int num540 = Item.NewItem(position, base.Size, item, stack);
					Main.item[num540].noGrabDelay = 0;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num540, 1f);
					}
					num540 = Item.NewItem(position, base.Size, item2, stack2);
					Main.item[num540].noGrabDelay = 0;
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, num540, 1f);
					}
				}
			}
			else if (type == 763)
			{
				for (int num541 = 0; num541 < 4; num541++)
				{
					int num542 = Dust.NewDust(position, width, height, 40);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num542];
						dust.scale *= 0.8f;
					}
					Main.dust[num542].noGravity = true;
					velocity *= 1.9f;
				}
			}
			else if (type == 655)
			{
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
				for (int num543 = 0; num543 < 30; num543++)
				{
					int num544 = Dust.NewDust(position, width, height, 147);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num544];
						dust.scale *= 1.4f;
					}
					velocity *= 1.9f;
				}
				if (Main.netMode != 1 && !wet)
				{
					int num545 = 2;
					if (Main.rand.Next(3) == 0)
					{
						num545++;
					}
					if (Main.rand.Next(3) == 0)
					{
						num545++;
					}
					if (Main.rand.Next(3) == 0)
					{
						num545++;
					}
					int availableAmountOfNPCsToSpawnFromTraps = NPC.GetAvailableAmountOfNPCsToSpawnFromTraps(num545);
					for (int num546 = 0; num546 < availableAmountOfNPCsToSpawnFromTraps; num546++)
					{
						int num547 = Main.rand.Next(210, 212);
						int num548 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, num547, 1);
						Main.npc[num548].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num548].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
						Main.npc[num548].netUpdate = true;
					}
				}
			}
			else if (type == 728)
			{
				SoundEngine.PlaySound(SoundID.Item10, position);
				for (int num549 = 0; num549 < 7; num549++)
				{
					Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
				}
				for (float num550 = 0f; num550 < 1f; num550 += 0.125f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num550 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
				}
				for (float num551 = 0f; num551 < 1f; num551 += 0.25f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num551 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
				}
				Vector2 vector50 = new Vector2(Main.screenWidth, Main.screenHeight);
				if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector50 / 2f, vector50 + new Vector2(400f))))
				{
					for (int num552 = 0; num552 < 7; num552++)
					{
						Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
					}
				}
			}
			else if (type == 729)
			{
				SoundEngine.PlaySound(SoundID.Item10, position);
				for (int num553 = 0; num553 < 10; num553++)
				{
					Dust dust37 = Dust.NewDustDirect(position, width, height, 279, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					dust37.noGravity = true;
					dust37.velocity.X *= 2f;
				}
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726 || type == 907)
			{
				if (type == 723)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num554 = 0; num554 < 10; num554++)
					{
						Dust dust38 = Dust.NewDustDirect(position, width, height, 88, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						dust38.noGravity = true;
						dust38.velocity.X *= 2f;
					}
					for (int num555 = 0; num555 < 3; num555++)
					{
						Gore gore2 = Gore.NewGoreDirect(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, 16, 17, 17));
						Gore gore = gore2;
						gore.velocity *= 2f;
					}
					if (owner == Main.myPlayer && Main.player[owner].starCloakCooldown == 0)
					{
						Main.player[owner].starCloakCooldown = 60;
						int number = Item.NewItem((int)position.X, (int)position.Y, width, height, 4143);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number, 1f);
						}
					}
				}
				else
				{
					if (type == 907)
					{
						SoundEngine.PlaySound(SoundID.Item27, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
					}
					for (int num556 = 0; num556 < 10; num556++)
					{
						Dust dust39 = Main.dust[Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f)];
						if (type == 907)
						{
							Dust dust = dust39;
							dust.velocity *= 0.75f;
						}
					}
					for (int num557 = 0; num557 < 3; num557++)
					{
						Gore gore3 = Main.gore[Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18))];
						if (type == 907)
						{
							Gore gore = gore3;
							gore.velocity *= 0.5f;
						}
					}
				}
			}
			else if (type == 91 || type == 92)
			{
				SoundEngine.PlaySound(SoundID.Item10, position);
				for (int num558 = 0; num558 < 10; num558++)
				{
					Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
				}
				for (int num559 = 0; num559 < 3; num559++)
				{
					Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
				}
				if ((type == 91 || (type == 92 && ai[0] > 0f)) && owner == Main.myPlayer)
				{
					float x = position.X + (float)Main.rand.Next(-400, 400);
					float y = position.Y - (float)Main.rand.Next(600, 900);
					Vector2 vector51 = new Vector2(x, y);
					float num560 = position.X + (float)(width / 2) - vector51.X;
					float num561 = position.Y + (float)(height / 2) - vector51.Y;
					int num562 = 22;
					float num563 = (float)Math.Sqrt(num560 * num560 + num561 * num561);
					num563 = (float)num562 / num563;
					num560 *= num563;
					num561 *= num563;
					int num564 = damage;
					if (type == 91)
					{
						num564 /= 2;
					}
					int num565 = NewProjectile(x, y, num560, num561, 92, num564, knockBack, owner);
					if (type == 91)
					{
						Main.projectile[num565].ai[1] = position.Y;
						Main.projectile[num565].ai[0] = 1f;
					}
					else
					{
						Main.projectile[num565].ai[1] = position.Y;
					}
				}
			}
			else if (type == 89)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num566 = 0; num566 < 5; num566++)
				{
					int num567 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 68);
					Main.dust[num567].noGravity = true;
					Dust dust = Main.dust[num567];
					dust.velocity *= 1.5f;
					dust = Main.dust[num567];
					dust.scale *= 0.9f;
				}
				if (type == 89 && owner == Main.myPlayer)
				{
					for (int num568 = 0; num568 < 2; num568++)
					{
						float num569 = (0f - velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num570 = (0f - velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						NewProjectile(position.X + num569, position.Y + num570, num569, num570, 90, (int)((double)damage * 0.5), 0f, owner);
					}
				}
			}
			else if (type == 177)
			{
				for (int num571 = 0; num571 < 20; num571++)
				{
					int num572 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
					Dust dust = Main.dust[num572];
					dust.velocity -= oldVelocity * 0.2f;
					if (Main.rand.Next(3) == 0)
					{
						dust = Main.dust[num572];
						dust.scale *= 0.8f;
						dust = Main.dust[num572];
						dust.velocity *= 0.5f;
					}
					else
					{
						Main.dust[num572].noGravity = true;
					}
				}
			}
			else if (type == 119 || type == 118 || type == 128 || type == 359)
			{
				int num573 = 10;
				if (type == 119 || type == 359)
				{
					num573 = 20;
				}
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num574 = 0; num574 < num573; num574++)
				{
					int num575 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92);
					if (Main.rand.Next(3) != 0)
					{
						Dust dust = Main.dust[num575];
						dust.velocity *= 2f;
						Main.dust[num575].noGravity = true;
						dust = Main.dust[num575];
						dust.scale *= 1.75f;
					}
					else
					{
						Dust dust = Main.dust[num575];
						dust.scale *= 0.5f;
					}
				}
			}
			else if (type == 309)
			{
				int num576 = 10;
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num577 = 0; num577 < num576; num577++)
				{
					int num578 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 185);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num578];
						dust.velocity *= 2f;
						Main.dust[num578].noGravity = true;
						dust = Main.dust[num578];
						dust.scale *= 1.75f;
					}
				}
			}
			else if (type == 308)
			{
				int num579 = 80;
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num580 = 0; num580 < num579; num580++)
				{
					int num581 = Dust.NewDust(new Vector2(position.X, position.Y + 16f), width, height - 16, 185);
					Dust dust = Main.dust[num581];
					dust.velocity *= 2f;
					Main.dust[num581].noGravity = true;
					dust = Main.dust[num581];
					dust.scale *= 1.15f;
				}
			}
			else if (aiStyle == 29 && type <= 126)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				int num582 = type - 121 + 86;
				for (int num583 = 0; num583 < 15; num583++)
				{
					int num584 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num582, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
					Main.dust[num584].noGravity = true;
					Dust dust = Main.dust[num584];
					dust.scale *= 1.25f;
					dust = Main.dust[num584];
					dust.velocity *= 0.5f;
				}
			}
			else if (type == 597)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num585 = 0; num585 < 15; num585++)
				{
					int num586 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 262, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
					Main.dust[num586].noGravity = true;
					Dust dust = Main.dust[num586];
					dust.scale *= 1.25f;
					dust = Main.dust[num586];
					dust.velocity *= 0.5f;
				}
			}
			else if (type == 731)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num587 = 0; num587 < 15; num587++)
				{
					Dust dust40 = Dust.NewDustDirect(position, width, height, 226, oldVelocity.X * 0.5f, oldVelocity.Y * 0.5f, 50, default(Color), 0.5f);
					if (Main.rand.Next(3) != 0)
					{
						dust40.noGravity = true;
						Dust dust = dust40;
						dust.scale *= 1.5f;
						dust = dust40;
						dust.velocity *= 0.5f;
					}
				}
			}
			else if (type == 337)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num588 = 0; num588 < 10; num588++)
				{
					int num589 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
					Main.dust[num589].noGravity = true;
				}
			}
			else if (type == 379 || type == 377)
			{
				for (int num590 = 0; num590 < 5; num590++)
				{
					int num591 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
					Main.dust[num591].scale = (float)Main.rand.Next(1, 10) * 0.1f;
					Main.dust[num591].noGravity = true;
					Main.dust[num591].fadeIn = 1.5f;
					Dust dust = Main.dust[num591];
					dust.velocity *= 0.75f;
				}
			}
			else if (type == 80)
			{
				if (ai[0] >= 0f)
				{
					SoundEngine.PlaySound(SoundID.Item27, position);
					for (int num592 = 0; num592 < 10; num592++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67);
					}
				}
				int num593 = (int)position.X / 16;
				int num594 = (int)position.Y / 16;
				if (Main.tile[num593, num594] == null)
				{
					Main.tile[num593, num594] = new Tile();
				}
				if (Main.tile[num593, num594].type == 127 && Main.tile[num593, num594].active())
				{
					WorldGen.KillTile(num593, num594);
				}
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				for (int num595 = 0; num595 < 5; num595++)
				{
					int num596 = Dust.NewDust(position, width, height, 27, 0f, 0f, 80, default(Color), 1.5f);
					Main.dust[num596].noGravity = true;
				}
			}
			else if (type == 55 || type == 719)
			{
				for (int num597 = 0; num597 < 5; num597++)
				{
					int num598 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num598].noGravity = true;
				}
			}
			else if (type == 51 || type == 267)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num599 = 0; num599 < 5; num599++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, 0f, 0f, 0, default(Color), 0.7f);
				}
			}
			else if (type == 478)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
				}
			}
			else if (type == 477 || type == 479)
			{
				for (int num600 = 0; num600 < 5; num600++)
				{
				}
				Collision.HitTiles(position, velocity, width, height);
			}
			else if (type == 2 || type == 82)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num601 = 0; num601 < 10; num601++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
				}
			}
			else if (type == 474)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num602 = 0; num602 < 20; num602++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.9f);
				}
			}
			else if (type == 172)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num603 = 0; num603 < 20; num603++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
				}
			}
			else if (type == 103)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num604 = 0; num604 < 20; num604++)
				{
					int num605 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num605];
						dust.scale *= 2.5f;
						Main.dust[num605].noGravity = true;
						dust = Main.dust[num605];
						dust.velocity *= 5f;
					}
				}
			}
			else if (type == 278)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num606 = 0; num606 < 20; num606++)
				{
					int num607 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Main.dust[num607];
						dust.scale *= 1.5f;
						Main.dust[num607].noGravity = true;
						dust = Main.dust[num607];
						dust.velocity *= 5f;
					}
				}
			}
			else if (type == 3 || type == 48 || type == 54 || type == 599 || type == 909)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num608 = 0; num608 < 10; num608++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
				}
			}
			else if (type == 330)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num609 = 0; num609 < 10; num609++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, velocity.X * 0.4f, velocity.Y * 0.4f, 0, default(Color), 0.75f);
				}
			}
			else if (type == 4)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num610 = 0; num610 < 10; num610++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
				}
			}
			else if (type == 5)
			{
				SoundEngine.PlaySound(SoundID.Item10, position);
				for (int num611 = 0; num611 < 60; num611++)
				{
					int num612 = Main.rand.Next(3);
					Dust.NewDust(position, width, height, num612 switch
					{
						0 => 15, 
						1 => 57, 
						_ => 58, 
					}, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
				}
			}
			else if (type == 9 || type == 12 || type == 503)
			{
				SoundEngine.PlaySound(SoundID.Item10, position);
				if (type == 12)
				{
					for (int num613 = 0; num613 < 7; num613++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
					}
					for (float num614 = 0f; num614 < 1f; num614 += 0.125f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num614 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
					}
					for (float num615 = 0f; num615 < 1f; num615 += 0.25f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num615 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
					}
					Vector2 vector52 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector52 / 2f, vector52 + new Vector2(400f))))
					{
						for (int num616 = 0; num616 < 7; num616++)
						{
							Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
						}
					}
				}
				else
				{
					int num617 = 10;
					int num618 = 3;
					if (type == 503)
					{
						num617 = 40;
						num618 = 2;
						velocity /= 2f;
					}
					for (int num619 = 0; num619 < num617; num619++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num620 = 0; num620 < num618; num620++)
					{
						int num621 = Main.rand.Next(16, 18);
						if (type == 503)
						{
							num621 = 16;
						}
						Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), num621);
					}
					if (type == 12 && damage < 100)
					{
						for (int num622 = 0; num622 < 10; num622++)
						{
							Dust.NewDust(position, width, height, 57, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num623 = 0; num623 < 3; num623++)
						{
							Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
						}
					}
				}
			}
			else if (type == 281)
			{
				if (ai[0] != -3f)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
					int num624 = Gore.NewGore(position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76);
					Gore gore = Main.gore[num624];
					gore.velocity -= velocity * 0.5f;
					num624 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77);
					gore = Main.gore[num624];
					gore.velocity -= velocity * 0.5f;
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num625 = 0; num625 < 20; num625++)
					{
						int num626 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num626];
						dust.velocity *= 1.4f;
					}
					for (int num627 = 0; num627 < 10; num627++)
					{
						int num628 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num628].noGravity = true;
						Dust dust = Main.dust[num628];
						dust.velocity *= 5f;
						num628 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num628];
						dust.velocity *= 3f;
					}
					num624 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num624];
					gore.velocity *= 0.4f;
					Main.gore[num624].velocity.X += 1f;
					Main.gore[num624].velocity.Y += 1f;
					num624 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num624];
					gore.velocity *= 0.4f;
					Main.gore[num624].velocity.X -= 1f;
					Main.gore[num624].velocity.Y += 1f;
					num624 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num624];
					gore.velocity *= 0.4f;
					Main.gore[num624].velocity.X += 1f;
					Main.gore[num624].velocity.Y -= 1f;
					num624 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num624];
					gore.velocity *= 0.4f;
					Main.gore[num624].velocity.X -= 1f;
					Main.gore[num624].velocity.Y -= 1f;
					if (damage > 0)
					{
						position.X += width / 2;
						position.Y += height / 2;
						width = 128;
						height = 128;
						position.X -= width / 2;
						position.Y -= height / 2;
						if (ai[0] == -2f)
						{
							hostile = true;
						}
						Damage();
					}
				}
			}
			else if (type == 162)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num629 = 0; num629 < 20; num629++)
				{
					int num630 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num630];
					dust.velocity *= 1.4f;
				}
				for (int num631 = 0; num631 < 10; num631++)
				{
					int num632 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num632].noGravity = true;
					Dust dust = Main.dust[num632];
					dust.velocity *= 5f;
					num632 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num632];
					dust.velocity *= 3f;
				}
				int num633 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num633];
				gore.velocity *= 0.4f;
				Main.gore[num633].velocity.X += 1f;
				Main.gore[num633].velocity.Y += 1f;
				num633 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num633];
				gore.velocity *= 0.4f;
				Main.gore[num633].velocity.X -= 1f;
				Main.gore[num633].velocity.Y += 1f;
				num633 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num633];
				gore.velocity *= 0.4f;
				Main.gore[num633].velocity.X += 1f;
				Main.gore[num633].velocity.Y -= 1f;
				num633 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num633];
				gore.velocity *= 0.4f;
				Main.gore[num633].velocity.X -= 1f;
				Main.gore[num633].velocity.Y -= 1f;
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
			}
			else if (type == 240)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num634 = 0; num634 < 20; num634++)
				{
					int num635 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num635];
					dust.velocity *= 1.4f;
				}
				for (int num636 = 0; num636 < 10; num636++)
				{
					int num637 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num637].noGravity = true;
					Dust dust = Main.dust[num637];
					dust.velocity *= 5f;
					num637 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num637];
					dust.velocity *= 3f;
				}
				int num638 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num638];
				gore.velocity *= 0.4f;
				Main.gore[num638].velocity.X += 1f;
				Main.gore[num638].velocity.Y += 1f;
				num638 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num638];
				gore.velocity *= 0.4f;
				Main.gore[num638].velocity.X -= 1f;
				Main.gore[num638].velocity.Y += 1f;
				num638 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num638];
				gore.velocity *= 0.4f;
				Main.gore[num638].velocity.X += 1f;
				Main.gore[num638].velocity.Y -= 1f;
				num638 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num638];
				gore.velocity *= 0.4f;
				Main.gore[num638].velocity.X -= 1f;
				Main.gore[num638].velocity.Y -= 1f;
				position.X += width / 2;
				position.Y += height / 2;
				width = 96;
				height = 96;
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
			}
			else
			{
				_ = type;
				_ = 162;
				if (type == 283 || type == 282)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num639 = 0; num639 < 10; num639++)
					{
						int num640 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
						Main.dust[num640].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num640].noGravity = true;
						Main.dust[num640].fadeIn = 1.5f;
						Dust dust = Main.dust[num640];
						dust.velocity *= 0.75f;
					}
				}
				else if (type == 284)
				{
					for (int num641 = 0; num641 < 10; num641++)
					{
						int num642 = Main.rand.Next(139, 143);
						int num643 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num642, (0f - velocity.X) * 0.3f, (0f - velocity.Y) * 0.3f, 0, default(Color), 1.2f);
						Main.dust[num643].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num643].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num643].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num643].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num643].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.dust[num643].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
						Dust dust = Main.dust[num643];
						dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
					}
					for (int num644 = 0; num644 < 5; num644++)
					{
						int num645 = Main.rand.Next(276, 283);
						int num646 = Gore.NewGore(position, -velocity * 0.3f, num645);
						Main.gore[num646].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num646].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num646].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.gore[num646].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Gore gore = Main.gore[num646];
						gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						Main.gore[num646].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
						Main.gore[num646].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					}
				}
				else if (type == 286)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num647 = 0; num647 < 7; num647++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num648 = 0; num648 < 3; num648++)
					{
						int num649 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num649].noGravity = true;
						Dust dust = Main.dust[num649];
						dust.velocity *= 3f;
						num649 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num649];
						dust.velocity *= 2f;
					}
					int num650 = Gore.NewGore(new Vector2(position.X - 10f, position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num650];
					gore.velocity *= 0.3f;
					Main.gore[num650].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num650].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					if (owner == Main.myPlayer)
					{
						localAI[1] = -1f;
						maxPenetrate = 0;
						position.X += width / 2;
						position.Y += height / 2;
						width = 80;
						height = 80;
						position.X -= width / 2;
						position.Y -= height / 2;
						Damage();
					}
				}
				else if (type == 14 || type == 20 || type == 36 || type == 83 || type == 84 || type == 389 || type == 104 || type == 279 || type == 100 || type == 110 || type == 180 || type == 207 || type == 357 || type == 242 || type == 302 || type == 257 || type == 259 || type == 285 || type == 287 || type == 576 || type == 577 || type == 876)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(SoundID.Item10, position);
				}
				else if (type == 660)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(SoundID.Item10, position);
					int num651 = Main.rand.Next(4, 10);
					for (int num652 = 0; num652 < num651; num652++)
					{
						int num653 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100);
						Dust dust = Main.dust[num653];
						dust.velocity *= 1.6f;
						Main.dust[num653].velocity.Y -= 1f;
						dust = Main.dust[num653];
						dust.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
						Main.dust[num653].scale = 2f;
						Main.dust[num653].fadeIn = 0.5f;
						Main.dust[num653].noGravity = true;
					}
				}
				else if (type == 761 || type == 762)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					if (owner == Main.myPlayer && !noDropItem)
					{
						int num654 = 4343;
						if (type == 762)
						{
							num654 = 4344;
						}
						int num655 = Item.NewItem((int)position.X, (int)position.Y, width, height, num654);
						Main.item[num655].noGrabDelay = 0;
						if (Main.netMode == 1 && num655 >= 0)
						{
							NetMessage.SendData(21, -1, -1, null, num655, 1f);
						}
					}
				}
				else if (type == 712)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(SoundID.Item10, position);
					int num656 = Main.rand.Next(6, 12);
					for (int num657 = 0; num657 < num656; num657++)
					{
						int num658 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100);
						Dust dust = Main.dust[num658];
						dust.velocity *= 1.6f;
						Main.dust[num658].velocity.Y -= 1f;
						dust = Main.dust[num658];
						dust.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
						Main.dust[num658].scale = 1f;
						Main.dust[num658].fadeIn = 1.5f;
						Main.dust[num658].noGravity = true;
						Main.dust[num658].color = new Color(255, 255, 255, 0) * 0.3f;
						dust = Main.dust[num658];
						dust.velocity *= 0.7f;
						dust = Main.dust[num658];
						dust.position += Main.dust[num658].velocity * 5f;
					}
					for (int num659 = 0; num659 < 3; num659++)
					{
						Gore gore4 = Gore.NewGoreDirect(position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
						Gore gore = gore4;
						gore.velocity *= 4f;
					}
				}
				else if (type == 638)
				{
					Collision.HitTiles(position, velocity, width, height);
					SoundEngine.PlaySound(SoundID.Item10, position);
					int num660 = Main.rand.Next(2, 5);
					for (int num661 = 0; num661 < num660; num661++)
					{
						int num662 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
						Dust dust = Main.dust[num662];
						dust.velocity *= 1.6f;
						Main.dust[num662].velocity.Y -= 1f;
						dust = Main.dust[num662];
						dust.position -= Vector2.One * 4f;
						Main.dust[num662].position = Vector2.Lerp(Main.dust[num662].position, base.Center, 0.5f);
						Main.dust[num662].noGravity = true;
					}
				}
				else if (type == 15 || type == 321)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num663 = 0; num663 < 20; num663++)
					{
						int num664 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num664].noGravity = true;
						Dust dust = Main.dust[num664];
						dust.velocity *= 2f;
						num664 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust = Main.dust[num664];
						dust.velocity *= 2f;
					}
				}
				else if (type == 253)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num665 = 0; num665 < 20; num665++)
					{
						int num666 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
						Main.dust[num666].noGravity = true;
						Dust dust = Main.dust[num666];
						dust.velocity *= 2f;
						num666 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
						dust = Main.dust[num666];
						dust.velocity *= 2f;
					}
				}
				else if (type == 95 || type == 96)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num667 = 0; num667 < 20; num667++)
					{
						int num668 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f * scale);
						Main.dust[num668].noGravity = true;
						Dust dust = Main.dust[num668];
						dust.velocity *= 2f;
						num668 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1f * scale);
						dust = Main.dust[num668];
						dust.velocity *= 2f;
					}
				}
				else if (type == 17)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num669 = 0; num669 < 5; num669++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
					}
				}
				else if (type == 31 || type == 42)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num670 = 0; num670 < 5; num670++)
					{
						int num671 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
						Dust dust = Main.dust[num671];
						dust.velocity *= 0.6f;
					}
				}
				else if (type >= 411 && type <= 414)
				{
					int num672 = 9;
					if (type == 412 || type == 414)
					{
						num672 = 11;
					}
					if (type == 413)
					{
						num672 = 19;
					}
					for (int num673 = 0; num673 < 5; num673++)
					{
						int num674 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num672, 0f, velocity.Y / 2f);
						Main.dust[num674].noGravity = true;
						Dust dust = Main.dust[num674];
						dust.velocity -= velocity * 0.5f;
					}
				}
				else if (type == 109)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num675 = 0; num675 < 5; num675++)
					{
						int num676 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51, 0f, 0f, 0, default(Color), 0.6f);
						Dust dust = Main.dust[num676];
						dust.velocity *= 0.6f;
					}
				}
				else if (type == 39)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num677 = 0; num677 < 5; num677++)
					{
						int num678 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38);
						Dust dust = Main.dust[num678];
						dust.velocity *= 0.6f;
					}
				}
				else if (type == 71)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num679 = 0; num679 < 5; num679++)
					{
						int num680 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
						Dust dust = Main.dust[num680];
						dust.velocity *= 0.6f;
					}
				}
				else if (type == 40)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num681 = 0; num681 < 5; num681++)
					{
						int num682 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
						Dust dust = Main.dust[num682];
						dust.velocity *= 0.6f;
					}
				}
				else if (type == 21 || type == 471 || type == 532)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num683 = 0; num683 < 10; num683++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.8f);
					}
				}
				else if (type == 583)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num684 = 0; num684 < 10; num684++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
					}
				}
				else if (type == 584)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num685 = 0; num685 < 10; num685++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
					}
				}
				else if (type == 24)
				{
					for (int num686 = 0; num686 < 10; num686++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 27)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num687 = 0; num687 < 30; num687++)
					{
						int num688 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
						Main.dust[num688].noGravity = true;
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100, default(Color), 0.5f);
					}
				}
				else if (type == 38)
				{
					for (int num689 = 0; num689 < 10; num689++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 42, velocity.X * 0.1f, velocity.Y * 0.1f);
					}
				}
				else if (type == 44 || type == 45)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num690 = 0; num690 < 30; num690++)
					{
						int num691 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.7f);
						Main.dust[num691].noGravity = true;
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100);
					}
				}
				else if (type == 41)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num692 = 0; num692 < 10; num692++)
					{
						int num693 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num694 = 0; num694 < 5; num694++)
					{
						int num695 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num695].noGravity = true;
						Dust dust = Main.dust[num695];
						dust.velocity *= 3f;
						num695 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num695];
						dust.velocity *= 2f;
					}
					int num696 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num696];
					gore.velocity *= 0.4f;
					Main.gore[num696].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num696].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					num696 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num696];
					gore.velocity *= 0.4f;
					Main.gore[num696].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
					Main.gore[num696].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						position.X += width / 2;
						position.Y += height / 2;
						width = 64;
						height = 64;
						position.X -= width / 2;
						position.Y -= height / 2;
						Damage();
					}
				}
				else if (type == 514)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num697 = 0; num697 < 10; num697++)
					{
						int num698 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.3f);
						Dust dust = Main.dust[num698];
						dust.velocity *= 1.4f;
					}
					for (int num699 = 0; num699 < 6; num699++)
					{
						int num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.1f);
						Main.dust[num700].noGravity = true;
						Dust dust = Main.dust[num700];
						dust.velocity *= 4.6f;
						num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.3f);
						dust = Main.dust[num700];
						dust.velocity *= 3.3f;
						if (Main.rand.Next(2) == 0)
						{
							num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.1f);
							dust = Main.dust[num700];
							dust.velocity *= 2.7f;
						}
					}
					if (owner == Main.myPlayer)
					{
						penetrate = -1;
						position.X += width / 2;
						position.Y += height / 2;
						width = 112;
						height = 112;
						position.X -= width / 2;
						position.Y -= height / 2;
						ai[0] = 2f;
						Damage();
					}
				}
				else if (type == 306)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
					for (int num701 = 0; num701 < 20; num701++)
					{
						int num702 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
						Dust dust = Main.dust[num702];
						dust.scale *= 1.1f;
						Main.dust[num702].noGravity = true;
					}
					for (int num703 = 0; num703 < 30; num703++)
					{
						int num704 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
						Dust dust = Main.dust[num704];
						dust.velocity *= 2.5f;
						dust = Main.dust[num704];
						dust.scale *= 0.8f;
						Main.dust[num704].noGravity = true;
					}
					if (owner == Main.myPlayer)
					{
						int num705 = 2;
						if (Main.rand.Next(3) == 0)
						{
							num705++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num705++;
						}
						for (int num706 = 0; num706 < num705; num706++)
						{
							float num707 = (float)Main.rand.Next(-35, 36) * 0.02f;
							float num708 = (float)Main.rand.Next(-35, 36) * 0.02f;
							num707 *= 10f;
							num708 *= 10f;
							NewProjectile(position.X, position.Y, num707, num708, 307, (int)((double)damage * 0.75), (int)((double)knockBack * 0.35), Main.myPlayer);
						}
					}
				}
				else if (type == 469)
				{
					if (owner == Main.myPlayer)
					{
						int num709 = 6;
						for (int num710 = 0; num710 < num709; num710++)
						{
							if (num710 % 2 != 1 || Main.rand.Next(3) == 0)
							{
								Vector2 vector53 = position;
								Vector2 vector54 = oldVelocity;
								vector54.Normalize();
								vector54 *= 8f;
								float num711 = (float)Main.rand.Next(-35, 36) * 0.01f;
								float num712 = (float)Main.rand.Next(-35, 36) * 0.01f;
								vector53 -= vector54 * num710;
								num711 += oldVelocity.X / 6f;
								num712 += oldVelocity.Y / 6f;
								int num713 = NewProjectile(vector53.X, vector53.Y, num711, num712, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage / 3), Main.player[owner].beeKB(0f), Main.myPlayer);
								Main.projectile[num713].magic = false;
								Main.projectile[num713].ranged = true;
								Main.projectile[num713].penetrate = 2;
							}
						}
					}
				}
				else if (type == 183)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num714 = 0; num714 < 20; num714++)
					{
						int num715 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num715];
						dust.velocity *= 1f;
					}
					int num716 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num716].velocity.X += 1f;
					Main.gore[num716].velocity.Y += 1f;
					Gore gore = Main.gore[num716];
					gore.velocity *= 0.3f;
					num716 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num716].velocity.X -= 1f;
					Main.gore[num716].velocity.Y += 1f;
					gore = Main.gore[num716];
					gore.velocity *= 0.3f;
					num716 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num716].velocity.X += 1f;
					Main.gore[num716].velocity.Y -= 1f;
					gore = Main.gore[num716];
					gore.velocity *= 0.3f;
					num716 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num716].velocity.X -= 1f;
					Main.gore[num716].velocity.Y -= 1f;
					gore = Main.gore[num716];
					gore.velocity *= 0.3f;
					if (owner == Main.myPlayer)
					{
						int num717 = Main.rand.Next(15, 25);
						for (int num718 = 0; num718 < num717; num718++)
						{
							float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
							float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
							NewProjectile(position.X, position.Y, speedX, speedY, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage), Main.player[owner].beeKB(0f), Main.myPlayer);
						}
					}
				}
				else if (aiStyle == 34)
				{
					if (owner != Main.myPlayer)
					{
						timeLeft = 60;
					}
					SoundEngine.PlaySound(SoundID.Item14, position);
					if (type == 167)
					{
						for (int num719 = 0; num719 < 400; num719++)
						{
							float num720 = 16f;
							if (num719 < 300)
							{
								num720 = 12f;
							}
							if (num719 < 200)
							{
								num720 = 8f;
							}
							if (num719 < 100)
							{
								num720 = 4f;
							}
							int num721 = 130;
							int num722 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num721, 0f, 0f, 100);
							float num723 = Main.dust[num722].velocity.X;
							float y2 = Main.dust[num722].velocity.Y;
							if (num723 == 0f && y2 == 0f)
							{
								num723 = 1f;
							}
							float num724 = (float)Math.Sqrt(num723 * num723 + y2 * y2);
							num724 = num720 / num724;
							num723 *= num724;
							y2 *= num724;
							Dust dust = Main.dust[num722];
							dust.velocity *= 0.5f;
							Main.dust[num722].velocity.X += num723;
							Main.dust[num722].velocity.Y += y2;
							Main.dust[num722].scale = 1.3f;
							Main.dust[num722].noGravity = true;
						}
					}
					if (type == 168)
					{
						for (int num725 = 0; num725 < 400; num725++)
						{
							float num726 = 2f * ((float)num725 / 100f);
							if (num725 > 100)
							{
								num726 = 10f;
							}
							if (num725 > 250)
							{
								num726 = 13f;
							}
							int num727 = 131;
							int num728 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num727, 0f, 0f, 100);
							float num729 = Main.dust[num728].velocity.X;
							float y3 = Main.dust[num728].velocity.Y;
							if (num729 == 0f && y3 == 0f)
							{
								num729 = 1f;
							}
							float num730 = (float)Math.Sqrt(num729 * num729 + y3 * y3);
							num730 = num726 / num730;
							if (num725 <= 200)
							{
								num729 *= num730;
								y3 *= num730;
							}
							else
							{
								num729 = num729 * num730 * 1.25f;
								y3 = y3 * num730 * 0.75f;
							}
							Dust dust = Main.dust[num728];
							dust.velocity *= 0.5f;
							Main.dust[num728].velocity.X += num729;
							Main.dust[num728].velocity.Y += y3;
							if (num725 > 100)
							{
								Main.dust[num728].scale = 1.3f;
								Main.dust[num728].noGravity = true;
							}
						}
					}
					if (type == 169)
					{
						Vector2 vector55 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num731 = Main.rand.Next(5, 9);
						float num732 = Main.rand.Next(12, 17);
						float value4 = Main.rand.Next(3, 7);
						float num733 = 20f;
						for (float num734 = 0f; num734 < num731; num734++)
						{
							for (int num735 = 0; num735 < 2; num735++)
							{
								Vector2 value5 = vector55.RotatedBy(((num735 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num731 * 2f));
								for (float num736 = 0f; num736 < num733; num736++)
								{
									Vector2 vector56 = Vector2.Lerp(vector55, value5, num736 / num733);
									float num737 = MathHelper.Lerp(num732, value4, num736 / num733);
									int num738 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust = Main.dust[num738];
									dust.velocity *= 0.1f;
									Main.dust[num738].noGravity = true;
									dust = Main.dust[num738];
									dust.velocity += vector56 * num737;
								}
							}
							vector55 = vector55.RotatedBy((float)Math.PI * 2f / num731);
						}
						for (float num739 = 0f; num739 < num731; num739++)
						{
							for (int num740 = 0; num740 < 2; num740++)
							{
								Vector2 value6 = vector55.RotatedBy(((num740 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num731 * 2f));
								for (float num741 = 0f; num741 < num733; num741++)
								{
									Vector2 vector57 = Vector2.Lerp(vector55, value6, num741 / num733);
									float num742 = MathHelper.Lerp(num732, value4, num741 / num733) / 2f;
									int num743 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust = Main.dust[num743];
									dust.velocity *= 0.1f;
									Main.dust[num743].noGravity = true;
									dust = Main.dust[num743];
									dust.velocity += vector57 * num742;
								}
							}
							vector55 = vector55.RotatedBy((float)Math.PI * 2f / num731);
						}
						for (int num744 = 0; num744 < 100; num744++)
						{
							float num745 = num732;
							int num746 = 132;
							int num747 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num746, 0f, 0f, 100);
							float num748 = Main.dust[num747].velocity.X;
							float y4 = Main.dust[num747].velocity.Y;
							if (num748 == 0f && y4 == 0f)
							{
								num748 = 1f;
							}
							float num749 = (float)Math.Sqrt(num748 * num748 + y4 * y4);
							num749 = num745 / num749;
							num748 *= num749;
							y4 *= num749;
							Dust dust = Main.dust[num747];
							dust.velocity *= 0.5f;
							Main.dust[num747].velocity.X += num748;
							Main.dust[num747].velocity.Y += y4;
							Main.dust[num747].scale = 1.3f;
							Main.dust[num747].noGravity = true;
						}
					}
					if (type == 170)
					{
						for (int num750 = 0; num750 < 400; num750++)
						{
							int num751 = 133;
							float num752 = 16f;
							if (num750 > 100)
							{
								num752 = 11f;
							}
							if (num750 > 100)
							{
								num751 = 134;
							}
							if (num750 > 200)
							{
								num752 = 8f;
							}
							if (num750 > 200)
							{
								num751 = 133;
							}
							if (num750 > 300)
							{
								num752 = 5f;
							}
							if (num750 > 300)
							{
								num751 = 134;
							}
							int num753 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num751, 0f, 0f, 100);
							float num754 = Main.dust[num753].velocity.X;
							float y5 = Main.dust[num753].velocity.Y;
							if (num754 == 0f && y5 == 0f)
							{
								num754 = 1f;
							}
							float num755 = (float)Math.Sqrt(num754 * num754 + y5 * y5);
							num755 = num752 / num755;
							if (num750 > 300)
							{
								num754 = num754 * num755 * 0.7f;
								y5 *= num755;
							}
							else if (num750 > 200)
							{
								num754 *= num755;
								y5 = y5 * num755 * 0.7f;
							}
							else if (num750 > 100)
							{
								num754 = num754 * num755 * 0.7f;
								y5 *= num755;
							}
							else
							{
								num754 *= num755;
								y5 = y5 * num755 * 0.7f;
							}
							Dust dust = Main.dust[num753];
							dust.velocity *= 0.5f;
							Main.dust[num753].velocity.X += num754;
							Main.dust[num753].velocity.Y += y5;
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num753].scale = 1.3f;
								Main.dust[num753].noGravity = true;
							}
						}
					}
					if (type == 415)
					{
						Vector2 vector58 = (vector58 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2());
						float num756 = Main.rand.Next(5, 9);
						float num757 = (float)Main.rand.Next(10, 15) * 0.66f;
						float num758 = (float)Main.rand.Next(4, 7) / 2f;
						int num759 = 30;
						for (int num760 = 0; (float)num760 < (float)num759 * num756; num760++)
						{
							if (num760 % num759 == 0)
							{
								vector58 = vector58.RotatedBy((float)Math.PI * 2f / num756);
							}
							float num761 = MathHelper.Lerp(num758, num757, (float)(num760 % num759) / (float)num759);
							int num762 = 130;
							int num763 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num762, 0f, 0f, 100);
							Dust dust = Main.dust[num763];
							dust.velocity *= 0.1f;
							dust = Main.dust[num763];
							dust.velocity += vector58 * num761;
							Main.dust[num763].scale = 1.3f;
							Main.dust[num763].noGravity = true;
						}
						for (int num764 = 0; num764 < 100; num764++)
						{
							float num765 = num757;
							if (num764 < 30)
							{
								num765 = (num758 + num757) / 2f;
							}
							int num766 = 130;
							int num767 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num766, 0f, 0f, 100);
							float num768 = Main.dust[num767].velocity.X;
							float y6 = Main.dust[num767].velocity.Y;
							if (num768 == 0f && y6 == 0f)
							{
								num768 = 1f;
							}
							float num769 = (float)Math.Sqrt(num768 * num768 + y6 * y6);
							num769 = num765 / num769;
							num768 *= num769;
							y6 *= num769;
							Dust dust = Main.dust[num767];
							dust.velocity *= 0.5f;
							Main.dust[num767].velocity.X += num768;
							Main.dust[num767].velocity.Y += y6;
							Main.dust[num767].scale = 1.3f;
							Main.dust[num767].noGravity = true;
						}
					}
					if (type == 416)
					{
						Vector2 vector59 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						Vector2 vector60 = vector59;
						float num770 = Main.rand.Next(3, 6) * 2;
						int num771 = 20;
						float num772 = ((Main.rand.Next(2) == 0) ? 1f : (-1f));
						bool flag2 = true;
						for (int num773 = 0; (float)num773 < (float)num771 * num770; num773++)
						{
							if (num773 % num771 == 0)
							{
								vector60 = vector60.RotatedBy(num772 * ((float)Math.PI * 2f / num770));
								vector59 = vector60;
								flag2 = !flag2;
							}
							else
							{
								float num774 = (float)Math.PI * 2f / ((float)num771 * num770);
								vector59 = vector59.RotatedBy(num774 * num772 * 3f);
							}
							float num775 = MathHelper.Lerp(1f, 8f, (float)(num773 % num771) / (float)num771);
							int num776 = 131;
							int num777 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num776, 0f, 0f, 100, default(Color), 1.4f);
							Dust dust = Main.dust[num777];
							dust.velocity *= 0.1f;
							dust = Main.dust[num777];
							dust.velocity += vector59 * num775;
							if (flag2)
							{
								Main.dust[num777].scale = 0.9f;
							}
							Main.dust[num777].noGravity = true;
						}
					}
					if (type == 417)
					{
						float num778 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num779 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
						float num780 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num781 = 4f + (float)Main.rand.NextDouble() * 3f;
						float num782 = num780;
						if (num781 > num782)
						{
							num782 = num781;
						}
						for (int num783 = 0; num783 < 150; num783++)
						{
							int num784 = 132;
							float num785 = num782;
							if (num783 > 50)
							{
								num785 = num781;
							}
							if (num783 > 50)
							{
								num784 = 133;
							}
							if (num783 > 100)
							{
								num785 = num780;
							}
							if (num783 > 100)
							{
								num784 = 132;
							}
							int num786 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num784, 0f, 0f, 100);
							Vector2 vector61 = Main.dust[num786].velocity;
							vector61.Normalize();
							vector61 *= num785;
							if (num783 > 100)
							{
								vector61.X *= 0.5f;
								vector61 = vector61.RotatedBy(num778);
							}
							else if (num783 > 50)
							{
								vector61.Y *= 0.5f;
								vector61 = vector61.RotatedBy(num779);
							}
							Dust dust = Main.dust[num786];
							dust.velocity *= 0.2f;
							dust = Main.dust[num786];
							dust.velocity += vector61;
							if (num783 <= 200)
							{
								Main.dust[num786].scale = 1.3f;
								Main.dust[num786].noGravity = true;
							}
						}
					}
					if (type == 418)
					{
						Vector2 vector62 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
						float num787 = Main.rand.Next(5, 12);
						float num788 = (float)Main.rand.Next(9, 14) * 0.66f;
						float num789 = (float)Main.rand.Next(2, 4) * 0.66f;
						float num790 = 15f;
						for (float num791 = 0f; num791 < num787; num791++)
						{
							for (int num792 = 0; num792 < 2; num792++)
							{
								Vector2 value7 = vector62.RotatedBy(((num792 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num787 * 2f));
								for (float num793 = 0f; num793 < num790; num793++)
								{
									Vector2 vector63 = Vector2.SmoothStep(vector62, value7, num793 / num790);
									float num794 = MathHelper.SmoothStep(num788, num789, num793 / num790);
									int num795 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
									Dust dust = Main.dust[num795];
									dust.velocity *= 0.1f;
									Main.dust[num795].noGravity = true;
									dust = Main.dust[num795];
									dust.velocity += vector63 * num794;
								}
							}
							vector62 = vector62.RotatedBy((float)Math.PI * 2f / num787);
						}
						for (int num796 = 0; num796 < 120; num796++)
						{
							float num797 = num788;
							int num798 = 133;
							if (num796 < 80)
							{
								num797 = num789 - 0.5f;
							}
							else
							{
								num798 = 131;
							}
							int num799 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num798, 0f, 0f, 100);
							float num800 = Main.dust[num799].velocity.X;
							float y7 = Main.dust[num799].velocity.Y;
							if (num800 == 0f && y7 == 0f)
							{
								num800 = 1f;
							}
							float num801 = (float)Math.Sqrt(num800 * num800 + y7 * y7);
							num801 = num797 / num801;
							num800 *= num801;
							y7 *= num801;
							Dust dust = Main.dust[num799];
							dust.velocity *= 0.2f;
							Main.dust[num799].velocity.X += num800;
							Main.dust[num799].velocity.Y += y7;
							Main.dust[num799].scale = 1.3f;
							Main.dust[num799].noGravity = true;
						}
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 192;
					height = 192;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 312)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num802 = 0; num802 < 30; num802++)
					{
						int num803 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num803];
						dust.velocity *= 1.4f;
					}
					for (int num804 = 0; num804 < 20; num804++)
					{
						int num805 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num805].noGravity = true;
						Dust dust = Main.dust[num805];
						dust.velocity *= 7f;
						num805 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num805];
						dust.velocity *= 3f;
					}
					for (int num806 = 0; num806 < 2; num806++)
					{
						float num807 = 0.4f;
						if (num806 == 1)
						{
							num807 = 0.8f;
						}
						int num808 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num808];
						gore.velocity *= num807;
						Main.gore[num808].velocity.X += 1f;
						Main.gore[num808].velocity.Y += 1f;
						num808 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num808];
						gore.velocity *= num807;
						Main.gore[num808].velocity.X -= 1f;
						Main.gore[num808].velocity.Y += 1f;
						num808 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num808];
						gore.velocity *= num807;
						Main.gore[num808].velocity.X += 1f;
						Main.gore[num808].velocity.Y -= 1f;
						num808 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num808];
						gore.velocity *= num807;
						Main.gore[num808].velocity.X -= 1f;
						Main.gore[num808].velocity.Y -= 1f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 128;
					height = 128;
					position.X -= width / 2;
					position.Y -= height / 2;
					Damage();
				}
				else if (type == 910 || type == 911)
				{
					Resize(22, 22);
					SoundEngine.PlaySound(SoundID.Item14, position);
					Color transparent = Color.Transparent;
					int num809 = 0;
					for (int num810 = 0; num810 < 30; num810++)
					{
						Dust dust41 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent, 1.5f);
						Dust dust = dust41;
						dust.velocity *= 1.4f;
					}
					for (int num811 = 0; num811 < 80; num811++)
					{
						Dust dust42 = Dust.NewDustDirect(position, width, height, num809, 0f, 0f, 100, transparent, 2.2f);
						dust42.noGravity = true;
						dust42.velocity.Y -= 1.2f;
						Dust dust = dust42;
						dust.velocity *= 4f;
						dust42 = Dust.NewDustDirect(position, width, height, num809, 0f, 0f, 100, transparent, 1.3f);
						dust42.velocity.Y -= 1.2f;
						dust = dust42;
						dust.velocity *= 2f;
					}
					for (int num812 = 1; num812 <= 2; num812++)
					{
						for (int num813 = -1; num813 <= 1; num813 += 2)
						{
							for (int num814 = -1; num814 <= 1; num814 += 2)
							{
								Gore gore5 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore5;
								gore.velocity *= ((num812 == 1) ? 0.4f : 0.8f);
								gore = gore5;
								gore.velocity += new Vector2(num813, num814);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt, 4.2f, DelegateMethods.SpreadDirt);
					}
				}
				else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903)
				{
					Resize(22, 22);
					if (type == 785)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					Color transparent2 = Color.Transparent;
					int num815 = Dust.dustWater();
					for (int num816 = 0; num816 < 30; num816++)
					{
						Dust dust43 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent2, 1.5f);
						Dust dust = dust43;
						dust.velocity *= 1.4f;
					}
					for (int num817 = 0; num817 < 80; num817++)
					{
						Dust dust44 = Dust.NewDustDirect(position, width, height, num815, 0f, 0f, 100, transparent2, 2.2f);
						dust44.noGravity = true;
						dust44.velocity.Y -= 1.2f;
						Dust dust = dust44;
						dust.velocity *= 7f;
						dust44 = Dust.NewDustDirect(position, width, height, num815, 0f, 0f, 100, transparent2, 1.3f);
						dust44.velocity.Y -= 1.2f;
						dust = dust44;
						dust.velocity *= 4f;
					}
					for (int num818 = 1; num818 <= 2; num818++)
					{
						for (int num819 = -1; num819 <= 1; num819 += 2)
						{
							for (int num820 = -1; num820 <= 1; num820 += 2)
							{
								Gore gore6 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore6;
								gore.velocity *= ((num818 == 1) ? 0.4f : 0.8f);
								gore = gore6;
								gore.velocity += new Vector2(num819, num820);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt2 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt2, 3f, DelegateMethods.SpreadWater);
					}
				}
				else if (type == 787 || type == 788 || type == 789 || type == 806 || type == 904)
				{
					Resize(22, 22);
					if (type == 788)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					Color transparent3 = Color.Transparent;
					int num821 = 35;
					for (int num822 = 0; num822 < 30; num822++)
					{
						Dust dust45 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent3, 1.5f);
						Dust dust = dust45;
						dust.velocity *= 1.4f;
					}
					for (int num823 = 0; num823 < 80; num823++)
					{
						Dust dust46 = Dust.NewDustDirect(position, width, height, num821, 0f, 0f, 100, transparent3, 1.2f);
						Dust dust = dust46;
						dust.velocity *= 7f;
						dust46 = Dust.NewDustDirect(position, width, height, num821, 0f, 0f, 100, transparent3, 0.3f);
						dust = dust46;
						dust.velocity *= 4f;
					}
					for (int num824 = 1; num824 <= 2; num824++)
					{
						for (int num825 = -1; num825 <= 1; num825 += 2)
						{
							for (int num826 = -1; num826 <= 1; num826 += 2)
							{
								Gore gore7 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore7;
								gore.velocity *= ((num824 == 1) ? 0.4f : 0.8f);
								gore = gore7;
								gore.velocity += new Vector2(num825, num826);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt3 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt3, 3f, DelegateMethods.SpreadLava);
					}
				}
				else if (type == 790 || type == 791 || type == 792 || type == 807 || type == 905)
				{
					Resize(22, 22);
					if (type == 791)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					Color transparent4 = Color.Transparent;
					int num827 = 152;
					for (int num828 = 0; num828 < 30; num828++)
					{
						Dust dust47 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent4, 1.5f);
						Dust dust = dust47;
						dust.velocity *= 1.4f;
					}
					for (int num829 = 0; num829 < 80; num829++)
					{
						Dust dust48 = Dust.NewDustDirect(position, width, height, num827, 0f, 0f, 100, transparent4, 2.2f);
						Dust dust = dust48;
						dust.velocity *= 7f;
						dust48 = Dust.NewDustDirect(position, width, height, num827, 0f, 0f, 100, transparent4, 1.3f);
						dust = dust48;
						dust.velocity *= 4f;
					}
					for (int num830 = 1; num830 <= 2; num830++)
					{
						for (int num831 = -1; num831 <= 1; num831 += 2)
						{
							for (int num832 = -1; num832 <= 1; num832 += 2)
							{
								Gore gore8 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore8;
								gore.velocity *= ((num830 == 1) ? 0.4f : 0.8f);
								gore = gore8;
								gore.velocity += new Vector2(num831, num832);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt4 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt4, 3f, DelegateMethods.SpreadHoney);
					}
				}
				else if (type == 799 || type == 800 || type == 801 || type == 810 || type == 906)
				{
					Resize(22, 22);
					if (type == 800)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					Color transparent5 = Color.Transparent;
					int num833 = 31;
					for (int num834 = 0; num834 < 30; num834++)
					{
						Dust dust49 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent5, 1.5f);
						Dust dust = dust49;
						dust.velocity *= 1.4f;
					}
					for (int num835 = 0; num835 < 80; num835++)
					{
						Dust dust50 = Dust.NewDustDirect(position, width, height, num833, 0f, 0f, 100, transparent5, 1.2f);
						Dust dust = dust50;
						dust.velocity *= 7f;
						dust50 = Dust.NewDustDirect(position, width, height, num833, 0f, 0f, 100, transparent5, 0.3f);
						dust = dust50;
						dust.velocity *= 4f;
					}
					for (int num836 = 1; num836 <= 2; num836++)
					{
						for (int num837 = -1; num837 <= 1; num837 += 2)
						{
							for (int num838 = -1; num838 <= 1; num838 += 2)
							{
								Gore gore9 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore9;
								gore.velocity *= ((num836 == 1) ? 0.4f : 0.8f);
								gore = gore9;
								gore.velocity += new Vector2(num837, num838);
							}
						}
					}
					if (Main.netMode != 1)
					{
						Point pt5 = base.Center.ToTileCoordinates();
						Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt5, 3.5f, DelegateMethods.SpreadDry);
					}
				}
				else if (type == 793 || type == 796 || type == 794 || type == 797 || type == 795 || type == 798 || type == 808 || type == 809)
				{
					if (type == 794 || type == 797)
					{
						SoundEngine.PlaySound(SoundID.Item62, base.Center);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, base.Center);
					}
					Resize(50, 50);
					float num839 = 3f;
					for (int num840 = 0; num840 < 50; num840++)
					{
						Dust dust51 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
						dust51.velocity = (dust51.position - base.Center).SafeNormalize(Vector2.Zero);
						Dust dust = dust51;
						dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.1f;
						dust51.velocity.Y -= num839 * 0.5f;
						dust51.color = Color.Black * 0.9f;
						if (Main.rand.Next(2) == 0)
						{
							dust51.scale = 0.5f;
							dust51.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							dust51.color = Color.Black * 0.8f;
						}
					}
					for (int num841 = 0; num841 < 30; num841++)
					{
						Dust dust52 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
						dust52.noGravity = true;
						dust52.fadeIn = 1.4f;
						dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
						Dust dust = dust52;
						dust.velocity *= 5.5f + (float)Main.rand.Next(61) * 0.1f;
						dust52.velocity.Y -= num839 * 0.5f;
						dust52 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
						dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
						dust52.velocity.Y -= num839 * 0.25f;
						dust = dust52;
						dust.velocity *= 1.5f + (float)Main.rand.Next(5) * 0.1f;
						dust52.fadeIn = 0f;
						dust52.scale = 0.6f;
						dust52 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust52.noGravity = num841 % 2 == 0;
						dust52.velocity = (dust52.position - base.Center).SafeNormalize(Vector2.Zero);
						dust = dust52;
						dust.velocity *= 3f + (float)Main.rand.Next(21) * 0.2f;
						dust52.velocity.Y -= num839 * 0.5f;
						dust52.fadeIn = 1.2f;
						if (!dust52.noGravity)
						{
							dust52.scale = 0.4f;
							dust52.fadeIn = 0f;
						}
						else
						{
							dust = dust52;
							dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.2f;
							dust52.velocity.Y -= num839 * 0.5f;
						}
					}
					int num842 = 0;
					for (int num843 = 1; num843 <= 3; num843++)
					{
						float num844 = (float)Math.PI * 2f * Main.rand.NextFloat();
						for (float num845 = 0f; num845 < 1f; num845 += 0.09090909f)
						{
							float f = (float)Math.PI * 2f * num845 + num844;
							Vector2 spinningpoint2 = f.ToRotationVector2();
							spinningpoint2 *= new Vector2(1f, 0.4f);
							spinningpoint2 = spinningpoint2.RotatedBy((float)num842 - (float)Math.PI);
							Vector2 vector64 = ((float)num842 - (float)Math.PI / 2f).ToRotationVector2();
							Vector2 vector65 = base.Center + vector64 * 16f * 0f;
							Dust dust53 = Dust.NewDustPerfect(vector65, 6, spinningpoint2);
							dust53.fadeIn = 1.8f;
							dust53.noGravity = true;
							Dust dust = dust53;
							dust.velocity *= (float)num843 * (Main.rand.NextFloat() * 2f + 0.2f);
							dust = dust53;
							dust.velocity += vector64 * 0.8f * num843;
							dust = dust53;
							dust.velocity *= 2f;
						}
					}
					for (int num846 = 1; num846 <= 3; num846++)
					{
						for (int num847 = -1; num847 <= 1; num847 += 2)
						{
							for (int num848 = -1; num848 <= 1; num848 += 2)
							{
								Gore gore10 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore10;
								gore.velocity *= (float)num846 / 3f;
								gore = gore10;
								gore.velocity += new Vector2(num847, num848);
							}
						}
					}
					Resize(10, 10);
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					Resize(22, 22);
					SoundEngine.PlaySound(SoundID.Item62, position);
					Color transparent6 = Color.Transparent;
					for (int num849 = 0; num849 < 15; num849++)
					{
						Dust dust54 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent6, 0.8f);
						dust54.fadeIn = 0f;
						Dust dust = dust54;
						dust.velocity *= 0.5f;
					}
					for (int num850 = 0; num850 < 5; num850++)
					{
						Dust dust55 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent6, 2.5f);
						dust55.noGravity = true;
						Dust dust = dust55;
						dust.velocity *= 2.5f;
						dust55 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent6, 1.1f);
						dust = dust55;
						dust.velocity *= 2f;
						dust55.noGravity = true;
					}
					for (int num851 = 0; num851 < 3; num851++)
					{
						Dust dust56 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent6, 1.1f);
						Dust dust = dust56;
						dust.velocity *= 2f;
						dust56.noGravity = true;
					}
					for (int num852 = -1; num852 <= 1; num852 += 2)
					{
						for (int num853 = -1; num853 <= 1; num853 += 2)
						{
							if (Main.rand.Next(5) == 0)
							{
								Gore gore11 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore11;
								gore.velocity *= 0.2f;
								gore = gore11;
								gore.scale *= 0.65f;
								gore = gore11;
								gore.velocity += new Vector2(num852, num853) * 0.5f;
							}
						}
					}
				}
				else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
				{
					Resize(22, 22);
					if (type == 777 || type == 781)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					Color transparent7 = Color.Transparent;
					for (int num854 = 0; num854 < 30; num854++)
					{
						Dust dust57 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent7, 1.5f);
						Dust dust = dust57;
						dust.velocity *= 1.4f;
					}
					for (int num855 = 0; num855 < 40; num855++)
					{
						Dust dust58 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 3.5f);
						dust58.noGravity = true;
						Dust dust = dust58;
						dust.velocity *= 7f;
						dust58 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 1.3f);
						dust = dust58;
						dust.velocity *= 4f;
						dust58.noGravity = true;
					}
					for (int num856 = 0; num856 < 8; num856++)
					{
						Dust dust59 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent7, 1.3f);
						Dust dust = dust59;
						dust.velocity *= 4f;
						dust59.noGravity = true;
					}
					for (int num857 = 2; num857 <= 2; num857++)
					{
						for (int num858 = -1; num858 <= 1; num858 += 2)
						{
							for (int num859 = -1; num859 <= 1; num859 += 2)
							{
								Gore gore12 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
								Gore gore = gore12;
								gore.velocity *= ((num857 == 1) ? 0.4f : 0.8f);
								gore = gore12;
								gore.velocity += new Vector2(num858, num859);
							}
						}
					}
					if (owner == Main.myPlayer)
					{
						int num860 = 779;
						if (type == 780 || type == 781 || type == 782)
						{
							num860 = 783;
						}
						if (type == 803)
						{
							num860 = 862;
						}
						if (type == 804)
						{
							num860 = 863;
						}
						float num861 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
						for (float num862 = 0f; num862 < 1f; num862 += 355f / (678f * (float)Math.PI))
						{
							float f2 = num861 + num862 * ((float)Math.PI * 2f);
							Vector2 vector66 = f2.ToRotationVector2() * (4f + Main.rand.NextFloat() * 2f);
							vector66 += Vector2.UnitY * -1f;
							int num863 = NewProjectile(base.Center, vector66, num860, damage / 3, 0f, owner);
							Projectile projectile = Main.projectile[num863];
							Projectile projectile2 = projectile;
							projectile2.timeLeft -= Main.rand.Next(30);
						}
					}
				}
				else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 303 || type == 338 || type == 339 || type == 930)
				{
					if (type == 30 || type == 133 || type == 136)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num864 = 0; num864 < 30; num864++)
					{
						int num865 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num865];
						dust.velocity *= 1.4f;
					}
					for (int num866 = 0; num866 < 20; num866++)
					{
						int num867 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
						Main.dust[num867].noGravity = true;
						Dust dust = Main.dust[num867];
						dust.velocity *= 7f;
						num867 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num867];
						dust.velocity *= 3f;
					}
					for (int num868 = 0; num868 < 2; num868++)
					{
						float num869 = 0.4f;
						if (num868 == 1)
						{
							num869 = 0.8f;
						}
						int num870 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num870];
						gore.velocity *= num869;
						Main.gore[num870].velocity.X += 1f;
						Main.gore[num870].velocity.Y += 1f;
						num870 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num870];
						gore.velocity *= num869;
						Main.gore[num870].velocity.X -= 1f;
						Main.gore[num870].velocity.Y += 1f;
						num870 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num870];
						gore.velocity *= num869;
						Main.gore[num870].velocity.X += 1f;
						Main.gore[num870].velocity.Y -= 1f;
						num870 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num870];
						gore.velocity *= num869;
						Main.gore[num870].velocity.X -= 1f;
						Main.gore[num870].velocity.Y -= 1f;
					}
				}
				else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
				{
					if (type == 139)
					{
						SoundEngine.PlaySound(SoundID.Item62, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 80;
					height = 80;
					position.X -= width / 2;
					position.Y -= height / 2;
					for (int num871 = 0; num871 < 40; num871++)
					{
						int num872 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust = Main.dust[num872];
						dust.velocity *= 3f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num872].scale = 0.5f;
							Main.dust[num872].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
						}
					}
					for (int num873 = 0; num873 < 70; num873++)
					{
						int num874 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num874].noGravity = true;
						Dust dust = Main.dust[num874];
						dust.velocity *= 5f;
						num874 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						dust = Main.dust[num874];
						dust.velocity *= 2f;
					}
					for (int num875 = 0; num875 < 3; num875++)
					{
						float num876 = 0.33f;
						if (num875 == 1)
						{
							num876 = 0.66f;
						}
						if (num875 == 2)
						{
							num876 = 1f;
						}
						int num877 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num877];
						gore.velocity *= num876;
						Main.gore[num877].velocity.X += 1f;
						Main.gore[num877].velocity.Y += 1f;
						num877 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num877];
						gore.velocity *= num876;
						Main.gore[num877].velocity.X -= 1f;
						Main.gore[num877].velocity.Y += 1f;
						num877 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num877];
						gore.velocity *= num876;
						Main.gore[num877].velocity.X += 1f;
						Main.gore[num877].velocity.Y -= 1f;
						num877 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num877];
						gore.velocity *= num876;
						Main.gore[num877].velocity.X -= 1f;
						Main.gore[num877].velocity.Y -= 1f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 10;
					height = 10;
					position.X -= width / 2;
					position.Y -= height / 2;
				}
				else if (type == 246)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num878 = 0; num878 < 10; num878++)
					{
						int num879 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num879];
						dust.velocity *= 0.9f;
					}
					for (int num880 = 0; num880 < 5; num880++)
					{
						int num881 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num881].noGravity = true;
						Dust dust = Main.dust[num881];
						dust.velocity *= 3f;
						num881 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num881];
						dust.velocity *= 2f;
					}
					int num882 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num882];
					gore.velocity *= 0.3f;
					Main.gore[num882].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num882].velocity.Y += Main.rand.Next(-1, 2);
					position.X += width / 2;
					position.Y += height / 2;
					width = 150;
					height = 150;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					maxPenetrate = 0;
					Damage();
					if (owner == Main.myPlayer)
					{
						int num883 = Main.rand.Next(2, 6);
						for (int num884 = 0; num884 < num883; num884++)
						{
							float num885 = Main.rand.Next(-100, 101);
							num885 += 0.01f;
							float num886 = Main.rand.Next(-100, 101);
							num885 -= 0.01f;
							float num887 = (float)Math.Sqrt(num885 * num885 + num886 * num886);
							num887 = 8f / num887;
							num885 *= num887;
							num886 *= num887;
							int num888 = NewProjectile(base.Center.X - oldVelocity.X, base.Center.Y - oldVelocity.Y, num885, num886, 249, damage, knockBack, owner);
							Main.projectile[num888].maxPenetrate = 0;
						}
					}
				}
				else if (type == 249)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num889 = 0; num889 < 7; num889++)
					{
						int num890 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num890];
						dust.velocity *= 0.8f;
					}
					for (int num891 = 0; num891 < 2; num891++)
					{
						int num892 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num892].noGravity = true;
						Dust dust = Main.dust[num892];
						dust.velocity *= 2.5f;
						num892 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num892];
						dust.velocity *= 1.5f;
					}
					int num893 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num893];
					gore.velocity *= 0.2f;
					Main.gore[num893].velocity.X += Main.rand.Next(-1, 2);
					Main.gore[num893].velocity.Y += Main.rand.Next(-1, 2);
					position.X += width / 2;
					position.Y += height / 2;
					width = 100;
					height = 100;
					position.X -= width / 2;
					position.Y -= height / 2;
					penetrate = -1;
					Damage();
				}
				else if (type == 588)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					position = base.Center;
					width = (height = 22);
					base.Center = position;
					for (int num894 = 0; num894 < 8; num894++)
					{
						int num895 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 219 + Main.rand.Next(5));
						Dust dust = Main.dust[num895];
						dust.velocity *= 1.4f;
						Main.dust[num895].fadeIn = 1f;
						Main.dust[num895].noGravity = true;
					}
					for (int num896 = 0; num896 < 15; num896++)
					{
						int num897 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
						Main.dust[num897].noGravity = true;
						Dust dust = Main.dust[num897];
						dust.velocity *= 5f;
						num897 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
						dust = Main.dust[num897];
						dust.velocity *= 3f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num898 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
						Gore gore = Main.gore[num898];
						gore.velocity *= 0.4f;
						Main.gore[num898].velocity.X += 1f;
						Main.gore[num898].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num898 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
						Gore gore = Main.gore[num898];
						gore.velocity *= 0.4f;
						Main.gore[num898].velocity.X -= 1f;
						Main.gore[num898].velocity.Y += 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num898 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
						Gore gore = Main.gore[num898];
						gore.velocity *= 0.4f;
						Main.gore[num898].velocity.X += 1f;
						Main.gore[num898].velocity.Y -= 1f;
					}
					if (Main.rand.Next(2) == 0)
					{
						int num898 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
						Gore gore = Main.gore[num898];
						gore.velocity *= 0.4f;
						Main.gore[num898].velocity.X -= 1f;
						Main.gore[num898].velocity.Y -= 1f;
					}
				}
				else if (type == 773)
				{
					Player player2 = Main.player[owner];
					Vector2 v = DirectionTo(player2.Center);
					float num899 = v.ToRotation() + (float)Math.PI / 2f;
					num899 += (float)Math.PI;
					Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
					num899 = scarabBombDigDirectionSnap.ToVector2().ToRotation() + (float)Math.PI / 2f;
					if (type == 794 || type == 797)
					{
						SoundEngine.PlaySound(SoundID.Item62, base.Center);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item14, base.Center);
					}
					Resize(80, 80);
					for (int num900 = 0; num900 < 60; num900++)
					{
						Dust dust60 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
						dust60.velocity.Y -= 0.5f;
						Dust dust = dust60;
						dust.velocity *= 1.2f;
						dust60.color = Color.Black * 0.9f;
						if (Main.rand.Next(2) == 0)
						{
							dust60.scale = 0.5f;
							dust60.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							dust60.color = Color.Black * 0.8f;
						}
					}
					for (int num901 = 0; num901 < 30; num901++)
					{
						Dust dust61 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100);
						dust61.noGravity = true;
						if (Math.Abs(velocity.X) > 0.25f)
						{
							velocity.X *= 0.25f / Math.Abs(velocity.X);
						}
						dust61.velocity.Y -= 0.5f;
						dust61.fadeIn = 1.2f;
						Dust dust = dust61;
						dust.velocity *= 8f;
						dust61.velocity = dust61.velocity.RotatedBy(num899);
						dust61 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
						dust = dust61;
						dust.velocity *= 2f;
						dust61.velocity = dust61.velocity.RotatedBy(num899);
						dust61.velocity.Y -= 1.5f;
						dust61 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
						dust61.noGravity = true;
						dust61.velocity.Y -= 1f;
						dust61.fadeIn = 2f;
						dust = dust61;
						dust.velocity *= 4f;
						dust61.velocity = dust61.velocity.RotatedBy(num899);
					}
					bool flag3 = Math.Abs(scarabBombDigDirectionSnap.X) + Math.Abs(scarabBombDigDirectionSnap.Y) == 1;
					for (int num902 = 1; num902 <= 3; num902++)
					{
						float num903 = (float)Math.PI * 2f * Main.rand.NextFloat();
						for (float num904 = 0f; num904 < 1f; num904 += 0.0833333358f)
						{
							float f3 = (float)Math.PI * 2f * num904 + num903;
							Vector2 value8 = f3.ToRotationVector2();
							value8 *= new Vector2(0.7f, 0.3f);
							Dust dust62 = Dust.NewDustPerfect(base.Center, 59, value8);
							dust62.fadeIn = 2f;
							dust62.noGravity = true;
							Dust dust = dust62;
							dust.velocity *= (float)num902 + Main.rand.NextFloat() * 0.6f;
							dust62.velocity.Y -= (float)num902 * 0.8f;
							dust62.velocity = dust62.velocity.RotatedBy(num899);
							if (flag3)
							{
								dust = dust62;
								dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 11f + 6f);
							}
							else
							{
								dust = dust62;
								dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 7f + 5f);
							}
						}
					}
					Vector2 vector67 = (num899 - (float)Math.PI / 2f).ToRotationVector2();
					for (int num905 = 1; num905 <= 1; num905++)
					{
						for (int num906 = -1; num906 <= 1; num906 += 2)
						{
							for (int num907 = -1; num907 <= 1; num907 += 2)
							{
								Gore gore13 = Gore.NewGoreDirect(base.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64));
								gore13.velocity = gore13.velocity * 0.5f + vector67 * 3f;
								Gore gore = gore13;
								gore.velocity += new Vector2(num906, num907) * 0.2f;
							}
						}
					}
					Resize(10, 10);
					if (owner == Main.myPlayer)
					{
						Point p = base.Center.ToTileCoordinates();
						Vector2 vector68 = p.ToWorldCoordinates();
						bool wallSplode = false;
						int num908 = 15;
						if (scarabBombDigDirectionSnap.X == 0 || scarabBombDigDirectionSnap.Y == 0)
						{
							num908 = (int)((double)num908 * Math.Sqrt(2.0));
						}
						for (int num909 = 0; num909 < num908; num909++)
						{
							Vector2 vec = vector68 + scarabBombDigDirectionSnap.ToVector2() * 16f * num909 * 1f;
							Point p2 = vec.ToTileCoordinates();
							if (ShouldWallExplode(p2.ToWorldCoordinates(), 9999, p2.X - 1, p2.X + 1, p2.Y - 1, p2.Y + 1))
							{
								wallSplode = true;
								break;
							}
						}
						for (int num910 = 0; num910 < num908; num910++)
						{
							Vector2 vec2 = vector68 + scarabBombDigDirectionSnap.ToVector2() * 16f * num910 * 1f;
							Point p3 = vec2.ToTileCoordinates();
							ExplodeTiles(p3.ToWorldCoordinates(), 9999, p3.X - 1, p3.X + 1, p3.Y - 1, p3.Y + 1, wallSplode);
						}
					}
				}
				else if (type == 28 || type == 30 || type == 37 || type == 75 || type == 102 || type == 164 || type == 397 || type == 517 || type == 516 || type == 519 || type == 773)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					position.X += width / 2;
					position.Y += height / 2;
					width = 22;
					height = 22;
					position.X -= width / 2;
					position.Y -= height / 2;
					int num911 = 6;
					if (type == 773)
					{
						num911 = 59;
					}
					for (int num912 = 0; num912 < 20; num912++)
					{
						int num913 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num913];
						dust.velocity *= 1.4f;
					}
					for (int num914 = 0; num914 < 10; num914++)
					{
						int num915 = Dust.NewDust(position, width, height, num911, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num915].noGravity = true;
						Dust dust = Main.dust[num915];
						dust.velocity *= 5f;
						num915 = Dust.NewDust(position, width, height, num911, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num915];
						dust.velocity *= 3f;
					}
					int num916 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num916];
					gore.velocity *= 0.4f;
					Main.gore[num916].velocity.X += 1f;
					Main.gore[num916].velocity.Y += 1f;
					num916 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num916];
					gore.velocity *= 0.4f;
					Main.gore[num916].velocity.X -= 1f;
					Main.gore[num916].velocity.Y += 1f;
					num916 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num916];
					gore.velocity *= 0.4f;
					Main.gore[num916].velocity.X += 1f;
					Main.gore[num916].velocity.Y -= 1f;
					num916 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num916];
					gore.velocity *= 0.4f;
					Main.gore[num916].velocity.X -= 1f;
					Main.gore[num916].velocity.Y -= 1f;
					if (type == 102)
					{
						Vector2 vector69 = position;
						position.X += width / 2;
						position.Y += height / 2;
						width = 128;
						height = 128;
						position.X -= width / 2;
						position.Y -= height / 2;
						damage = 40;
						Damage();
						position = vector69;
						width = 22;
						height = 22;
					}
					if (type == 75)
					{
						Resize(128, 128);
						damage = 80;
						knockBack = 8f;
						Damage();
						Resize(22, 22);
					}
				}
				else if (type == 29 || type == 108 || type == 470 || type == 637)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					if (type == 29)
					{
						position.X += width / 2;
						position.Y += height / 2;
						width = 200;
						height = 200;
						position.X -= width / 2;
						position.Y -= height / 2;
					}
					for (int num917 = 0; num917 < 50; num917++)
					{
						int num918 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Dust dust = Main.dust[num918];
						dust.velocity *= 1.4f;
					}
					for (int num919 = 0; num919 < 80; num919++)
					{
						int num920 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
						Main.dust[num920].noGravity = true;
						Dust dust = Main.dust[num920];
						dust.velocity *= 5f;
						num920 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						dust = Main.dust[num920];
						dust.velocity *= 3f;
					}
					for (int num921 = 0; num921 < 2; num921++)
					{
						int num922 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num922].scale = 1.5f;
						Main.gore[num922].velocity.X += 1.5f;
						Main.gore[num922].velocity.Y += 1.5f;
						num922 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num922].scale = 1.5f;
						Main.gore[num922].velocity.X -= 1.5f;
						Main.gore[num922].velocity.Y += 1.5f;
						num922 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num922].scale = 1.5f;
						Main.gore[num922].velocity.X += 1.5f;
						Main.gore[num922].velocity.Y -= 1.5f;
						num922 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num922].scale = 1.5f;
						Main.gore[num922].velocity.X -= 1.5f;
						Main.gore[num922].velocity.Y -= 1.5f;
					}
					position.X += width / 2;
					position.Y += height / 2;
					width = 10;
					height = 10;
					position.X -= width / 2;
					position.Y -= height / 2;
				}
				else if (type == 69)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num923 = 0; num923 < 5; num923++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num924 = 0; num924 < 30; num924++)
					{
						int num925 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 33, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num925].alpha = 100;
						Main.dust[num925].velocity.X *= 1.5f;
						Dust dust = Main.dust[num925];
						dust.velocity *= 3f;
					}
				}
				else if (type == 70)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num926 = 0; num926 < 5; num926++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num927 = 0; num927 < 30; num927++)
					{
						int num928 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 52, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num928].alpha = 100;
						Main.dust[num928].velocity.X *= 1.5f;
						Dust dust = Main.dust[num928];
						dust.velocity *= 3f;
					}
				}
				else if (type == 621)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					for (int num929 = 0; num929 < 5; num929++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num930 = 0; num930 < 30; num930++)
					{
						int num931 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 266, 0f, -2f, 0, default(Color), 1.1f);
						Main.dust[num931].alpha = 100;
						Main.dust[num931].velocity.X *= 1.5f;
						Dust dust = Main.dust[num931];
						dust.velocity *= 3f;
					}
				}
				else if (type == 114 || type == 115)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num932 = 4; num932 < 31; num932++)
					{
						float num933 = oldVelocity.X * (30f / (float)num932);
						float num934 = oldVelocity.Y * (30f / (float)num932);
						int num935 = Dust.NewDust(new Vector2(position.X - num933, position.Y - num934), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num935].noGravity = true;
						Dust dust = Main.dust[num935];
						dust.velocity *= 0.5f;
						num935 = Dust.NewDust(new Vector2(position.X - num933, position.Y - num934), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
						dust = Main.dust[num935];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 116)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num936 = 4; num936 < 31; num936++)
					{
						float num937 = oldVelocity.X * (30f / (float)num936);
						float num938 = oldVelocity.Y * (30f / (float)num936);
						int num939 = Dust.NewDust(new Vector2(position.X - num937, position.Y - num938), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num939].noGravity = true;
						num939 = Dust.NewDust(new Vector2(position.X - num937, position.Y - num938), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						Main.dust[num939].noGravity = true;
					}
				}
				else if (type == 173)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num940 = 4; num940 < 24; num940++)
					{
						float num941 = oldVelocity.X * (30f / (float)num940);
						float num942 = oldVelocity.Y * (30f / (float)num940);
						int num943 = Main.rand.Next(3);
						int num944 = Dust.NewDust(new Vector2(position.X - num941, position.Y - num942), 8, 8, num943 switch
						{
							0 => 15, 
							1 => 57, 
							_ => 58, 
						}, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
						Dust dust = Main.dust[num944];
						dust.velocity *= 1.5f;
						Main.dust[num944].noGravity = true;
					}
				}
				else if (type == 132)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num945 = 4; num945 < 31; num945++)
					{
						float num946 = oldVelocity.X * (30f / (float)num945);
						float num947 = oldVelocity.Y * (30f / (float)num945);
						int num948 = Dust.NewDust(new Vector2(oldPosition.X - num946, oldPosition.Y - num947), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num948].noGravity = true;
						Dust dust = Main.dust[num948];
						dust.velocity *= 0.5f;
						num948 = Dust.NewDust(new Vector2(oldPosition.X - num946, oldPosition.Y - num947), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
						dust = Main.dust[num948];
						dust.velocity *= 0.05f;
					}
				}
				else if (type == 156)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num949 = 4; num949 < 31; num949++)
					{
						float num950 = oldVelocity.X * (30f / (float)num949);
						float num951 = oldVelocity.Y * (30f / (float)num949);
						int num952 = Dust.NewDust(new Vector2(oldPosition.X - num950, oldPosition.Y - num951), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.8f);
						Main.dust[num952].noGravity = true;
						Dust dust = Main.dust[num952];
						dust.velocity *= 0.5f;
						num952 = Dust.NewDust(new Vector2(oldPosition.X - num950, oldPosition.Y - num951), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.4f);
						dust = Main.dust[num952];
						dust.velocity *= 0.05f;
						Main.dust[num952].noGravity = true;
					}
				}
				else if (type == 157)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num953 = 4; num953 < 31; num953++)
					{
						int num954 = Dust.NewDust(position, width, height, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
						Main.dust[num954].noGravity = true;
						Dust dust = Main.dust[num954];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 370)
				{
					SoundEngine.PlaySound(SoundID.Item4, position);
					for (int num955 = 0; num955 < 5; num955++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num956 = 0; num956 < 30; num956++)
					{
						Vector2 vector70 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						vector70.Normalize();
						int num957 = Gore.NewGore(base.Center + vector70 * 10f, vector70 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
						Main.gore[num957].sticky = false;
					}
				}
				else if (type == 371)
				{
					SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
					SoundEngine.PlaySound(SoundID.Item16, position);
					for (int num958 = 0; num958 < 5; num958++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
					}
					for (int num959 = 0; num959 < 30; num959++)
					{
						Vector2 vector71 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						vector71.Normalize();
						vector71 *= 0.4f;
						int num960 = Gore.NewGore(base.Center + vector71 * 10f, vector71 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
						Main.gore[num960].sticky = false;
					}
				}
				else if (type == 936)
				{
					SoundEngine.PlaySound(SoundID.Item21, position);
					for (int num961 = 0; num961 < 20; num961++)
					{
						Color newColor7 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.7f);
						newColor7.A /= 2;
						int num962 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor7);
						Dust dust = Main.dust[num962];
						dust.velocity *= 1.5f;
						newColor7 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.5f);
						newColor7.A /= 2;
						num962 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor7, 1.8f);
						dust = Main.dust[num962];
						dust.velocity *= 3f;
						Main.dust[num962].noGravity = true;
					}
				}
			}
		}
		if (owner == Main.myPlayer && (type == 370 || type == 371 || type == 936))
		{
			float num963 = 80f;
			int num964 = 119;
			if (type == 371)
			{
				num964 = 120;
			}
			if (type == 936)
			{
				num964 = 320;
			}
			for (int num965 = 0; num965 < 255; num965++)
			{
				Player player3 = Main.player[num965];
				if (player3.active && !player3.dead && Vector2.Distance(base.Center, player3.Center) < num963)
				{
					player3.AddBuff(num964, 1800, quiet: false);
				}
			}
			for (int num966 = 0; num966 < 200; num966++)
			{
				NPC nPC = Main.npc[num966];
				if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num963)
				{
					nPC.AddBuff(num964, 1800);
				}
			}
		}
		if (owner == Main.myPlayer)
		{
			if (type == 30 || type == 517 || type == 397 || type == 588)
			{
				int num967 = 4;
				Vector2 center = base.Center;
				int num968 = (int)(center.X / 16f - (float)num967);
				int num969 = (int)(center.X / 16f + (float)num967);
				int num970 = (int)(center.Y / 16f - (float)num967);
				int num971 = (int)(center.Y / 16f + (float)num967);
				if (num968 < 0)
				{
					num968 = 0;
				}
				if (num969 > Main.maxTilesX)
				{
					num969 = Main.maxTilesX;
				}
				if (num970 < 0)
				{
					num970 = 0;
				}
				if (num971 > Main.maxTilesY)
				{
					num971 = Main.maxTilesY;
				}
				ExplodeCrackedTiles(center, num967, num968, num969, num970, num971);
			}
			if (type == 28 || type == 29 || type == 37 || type == 108 || type == 136 || type == 137 || type == 138 || type == 142 || type == 143 || type == 144 || type == 339 || type == 341 || type == 470 || type == 516 || type == 519 || type == 637 || type == 716 || type == 718 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863 || type == 796 || type == 797 || type == 798 || type == 809 || (type == 102 && Main.getGoodWorld))
			{
				int num972 = 3;
				if (type == 102)
				{
					num972 = 4;
				}
				if (type == 28 || type == 37 || type == 516 || type == 519)
				{
					num972 = 4;
				}
				if (type == 29 || type == 470 || type == 637 || type == 796 || type == 797 || type == 798 || type == 809)
				{
					num972 = 7;
				}
				if (type == 142 || type == 143 || type == 144 || type == 341)
				{
					num972 = 5;
				}
				if (type == 716 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863)
				{
					num972 = 3;
				}
				if (type == 718)
				{
					num972 = 5;
				}
				if (type == 108)
				{
					num972 = 10;
				}
				Vector2 center2 = position;
				if (type == 716 || type == 718 || type == 773)
				{
					center2 = base.Center;
				}
				int num973 = num972;
				int num974 = num972;
				int num975 = (int)(center2.X / 16f - (float)num973);
				int num976 = (int)(center2.X / 16f + (float)num973);
				int num977 = (int)(center2.Y / 16f - (float)num974);
				int num978 = (int)(center2.Y / 16f + (float)num974);
				if (num975 < 0)
				{
					num975 = 0;
				}
				if (num976 > Main.maxTilesX)
				{
					num976 = Main.maxTilesX;
				}
				if (num977 < 0)
				{
					num977 = 0;
				}
				if (num978 > Main.maxTilesY)
				{
					num978 = Main.maxTilesY;
				}
				bool wallSplode2 = ShouldWallExplode(center2, num972, num975, num976, num977, num978);
				ExplodeTiles(center2, num972, num975, num976, num977, num978, wallSplode2);
			}
			if (Main.netMode != 0)
			{
				NetMessage.SendData(29, -1, -1, null, identity, owner);
			}
			if (!noDropItem)
			{
				int num979 = -1;
				if (type >= 736 && type <= 738)
				{
					SoundEngine.PlaySound(SoundID.Item127, position);
					for (int num980 = 0; num980 < 3; num980++)
					{
						Dust.NewDust(position, 16, 16, type - 736 + 275);
					}
					int num981 = (int)(base.Center.X / 16f);
					int num982 = (int)(base.Center.Y / 16f) + 1;
					if (Main.myPlayer == owner && Main.tile[num981, num982].active() && TileID.Sets.CrackedBricks[Main.tile[num981, num982].type] && Main.rand.Next(2) == 0)
					{
						WorldGen.KillTile(num981, num982);
						if (Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 20, num981, num982);
						}
					}
				}
				else if (aiStyle == 10)
				{
					int num983 = (int)(position.X + (float)(width / 2)) / 16;
					int num984 = (int)(position.Y + (float)(width / 2)) / 16;
					int num985 = 0;
					int num986 = 2;
					if (type == 109)
					{
						num985 = 147;
						num986 = 0;
					}
					if (type == 31)
					{
						num985 = 53;
						num986 = 169;
						if (ai[0] == 2f)
						{
							num986 = 0;
						}
					}
					if (type == 42)
					{
						num985 = 53;
						num986 = 0;
					}
					if (type == 56)
					{
						num985 = 112;
						num986 = 370;
					}
					if (type == 65)
					{
						num985 = 112;
						num986 = 0;
					}
					if (type == 67)
					{
						num985 = 116;
						num986 = 408;
					}
					if (type == 68)
					{
						num985 = 116;
						num986 = 0;
					}
					if (type == 71)
					{
						num985 = 123;
						num986 = 424;
					}
					if (type == 39)
					{
						num985 = 59;
						num986 = 0;
					}
					if (type == 40)
					{
						num985 = 57;
						num986 = 0;
					}
					if (type == 179)
					{
						num985 = 224;
						num986 = 1103;
					}
					if (type == 241)
					{
						num985 = 234;
						num986 = 1246;
					}
					if (type == 354)
					{
						num985 = 234;
						num986 = 0;
					}
					if (type == 411)
					{
						num985 = 330;
						num986 = 71;
					}
					if (type == 412)
					{
						num985 = 331;
						num986 = 72;
					}
					if (type == 413)
					{
						num985 = 332;
						num986 = 73;
					}
					if (type == 414)
					{
						num985 = 333;
						num986 = 74;
					}
					if (type == 812)
					{
						num985 = 495;
						num986 = 4090;
					}
					if (type == 109)
					{
						int num987 = Player.FindClosest(position, width, height);
						if ((double)(base.Center - Main.player[num987].Center).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
						{
							num985 = -1;
							num986 = 593;
						}
					}
					if (Main.tile[num983, num984].nactive() && Main.tile[num983, num984].halfBrick() && velocity.Y > 0f && Math.Abs(velocity.Y) > Math.Abs(velocity.X))
					{
						num984--;
					}
					if (!Main.tile[num983, num984].active() && num985 >= 0)
					{
						bool flag4 = false;
						bool flag5 = false;
						if (num984 < Main.maxTilesY - 2)
						{
							Tile tile2 = Main.tile[num983, num984 + 1];
							if (tile2 != null && tile2.active())
							{
								if (tile2.active() && tile2.type == 314)
								{
									flag5 = true;
								}
								if (tile2.active() && WorldGen.BlockBelowMakesSandFall(num983, num984))
								{
									flag5 = true;
								}
							}
						}
						if (!flag5)
						{
							flag4 = WorldGen.PlaceTile(num983, num984, num985, mute: false, forced: true);
						}
						if (!flag5 && Main.tile[num983, num984].active() && Main.tile[num983, num984].type == num985)
						{
							if (Main.tile[num983, num984 + 1].halfBrick() || Main.tile[num983, num984 + 1].slope() != 0)
							{
								WorldGen.SlopeTile(num983, num984 + 1);
								if (Main.netMode == 2)
								{
									NetMessage.SendData(17, -1, -1, null, 14, num983, num984 + 1);
								}
							}
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 1, num983, num984, num985);
							}
						}
						else if (!flag4 && num986 > 0)
						{
							num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, num986);
						}
					}
					else if (num986 > 0)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, num986);
					}
				}
				if (type == 171)
				{
					if (ai[1] == 0f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 985);
						Main.item[num979].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 965, (int)(10f - ai[1]));
						Main.item[num979].noGrabDelay = 0;
					}
				}
				if (type == 475)
				{
					if (ai[1] == 0f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3005);
						Main.item[num979].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 2996, (int)(10f - ai[1]));
						Main.item[num979].noGrabDelay = 0;
					}
				}
				if (type == 505)
				{
					if (ai[1] == 0f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3079);
						Main.item[num979].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3077, (int)(10f - ai[1]));
						Main.item[num979].noGrabDelay = 0;
					}
				}
				if (type == 506)
				{
					if (ai[1] == 0f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3080);
						Main.item[num979].noGrabDelay = 0;
					}
					else if (ai[1] < 10f)
					{
						num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3078, (int)(10f - ai[1]));
						Main.item[num979].noGrabDelay = 0;
					}
				}
				if (type == 12 && damage > 500)
				{
					num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 75);
				}
				if (type == 155)
				{
					num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 859);
				}
				if (type == 861)
				{
					num979 = Item.NewItem((int)position.X, (int)position.Y, width, height, 4743);
				}
				if (Main.netMode == 1 && num979 >= 0)
				{
					NetMessage.SendData(21, -1, -1, null, num979, 1f);
				}
			}
			if (type == 69 || type == 70 || type == 621)
			{
				int i2 = (int)(position.X + (float)(width / 2)) / 16;
				int j2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (type == 69)
				{
					WorldGen.Convert(i2, j2, 2);
				}
				if (type == 70)
				{
					WorldGen.Convert(i2, j2, 1);
				}
				if (type == 621)
				{
					WorldGen.Convert(i2, j2, 4);
				}
			}
			if (type == 378)
			{
				int num988 = Main.rand.Next(2, 4);
				if (Main.rand.Next(5) == 0)
				{
					num988++;
				}
				for (int num989 = 0; num989 < num988; num989++)
				{
					float x2 = velocity.X;
					float y8 = velocity.Y;
					x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					NewProjectile(base.Center.X, base.Center.Y, x2, y8, 379, damage, knockBack, owner);
				}
			}
		}
		active = false;
	}

	private void DoRainbowCrystalStaffExplosion()
	{
		Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
		float num = Main.rand.Next(7, 13);
		Vector2 vector = new Vector2(2.1f, 2f);
		Color newColor = Main.hslToRgb(ai[0], 1f, 0.5f);
		newColor.A = byte.MaxValue;
		for (float num2 = 0f; num2 < num; num2 += 1f)
		{
			int num3 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
			Main.dust[num3].position = base.Center;
			Main.dust[num3].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num2 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
			Main.dust[num3].noGravity = true;
			Main.dust[num3].scale = 2f;
			Main.dust[num3].fadeIn = Main.rand.NextFloat() * 2f;
			if (num3 != 6000)
			{
				Dust dust = Dust.CloneDust(num3);
				dust.scale /= 2f;
				dust.fadeIn /= 2f;
				dust.color = new Color(255, 255, 255, 255);
			}
		}
		for (float num4 = 0f; num4 < num; num4 += 1f)
		{
			int num5 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
			Main.dust[num5].position = base.Center;
			Main.dust[num5].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num4 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
			Main.dust[num5].velocity *= Main.rand.NextFloat() * 0.8f;
			Main.dust[num5].noGravity = true;
			Main.dust[num5].scale = Main.rand.NextFloat() * 1f;
			Main.dust[num5].fadeIn = Main.rand.NextFloat() * 2f;
			if (num5 != 6000)
			{
				Dust dust2 = Dust.CloneDust(num5);
				dust2.scale /= 2f;
				dust2.fadeIn /= 2f;
				dust2.color = new Color(255, 255, 255, 255);
			}
		}
	}

	private bool ShouldWallExplode(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
	{
		bool result = false;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (Math.Sqrt(num * num + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].wall == 0)
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}

	public Color GetFloatingDaggerMinionGlowColor()
	{
		float num = (float)(whoAmI % 6) / 6f;
		return Main.hslToRgb(0.66f + 0.33f * num, 0.7f, 0.6f) * 0.7f;
	}

	private bool CanExplodeTile(int x, int y)
	{
		if (Main.tileDungeon[Main.tile[x, y].type] || TileID.Sets.BasicChest[Main.tile[x, y].type])
		{
			return false;
		}
		switch (Main.tile[x, y].type)
		{
		case 26:
		case 88:
		case 107:
		case 108:
		case 111:
		case 211:
		case 221:
		case 222:
		case 223:
		case 226:
		case 237:
		case 470:
		case 475:
			return false;
		case 37:
		case 58:
			if (!Main.hardMode)
			{
				return false;
			}
			break;
		case 77:
			if (!Main.hardMode && y >= Main.UnderworldLayer)
			{
				return false;
			}
			break;
		case 137:
			if (!NPC.downedGolemBoss)
			{
				int num = Main.tile[x, y].frameY / 18;
				if ((uint)(num - 1) <= 3u)
				{
					return false;
				}
			}
			break;
		}
		return true;
	}

	private void ExplodeTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ, bool wallSplode)
	{
		AchievementsHelper.CurrentlyMining = true;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (!(Math.Sqrt(num * num + num2 * num2) < (double)radius))
				{
					continue;
				}
				bool flag = true;
				if (Main.tile[i, j] != null && Main.tile[i, j].active())
				{
					flag = CanExplodeTile(i, j);
					if (flag)
					{
						WorldGen.KillTile(i, j);
						if (!Main.tile[i, j].active() && Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 0, i, j);
						}
					}
				}
				if (!flag)
				{
					continue;
				}
				for (int k = i - 1; k <= i + 1; k++)
				{
					for (int l = j - 1; l <= j + 1; l++)
					{
						if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode)
						{
							WorldGen.KillWall(k, l);
							if (Main.tile[k, l].wall == 0 && Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 2, k, l);
							}
						}
					}
				}
			}
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	private void ExplodeCrackedTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
	{
		AchievementsHelper.CurrentlyMining = true;
		for (int i = minI; i <= maxI; i++)
		{
			for (int j = minJ; j <= maxJ; j++)
			{
				float num = Math.Abs((float)i - compareSpot.X / 16f);
				float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
				if (Math.Sqrt(num * num + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].active() && TileID.Sets.CrackedBricks[Main.tile[i, j].type])
				{
					WorldGen.KillTile(i, j);
					if (!Main.tile[i, j].active() && Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 20, i, j);
					}
				}
			}
		}
		AchievementsHelper.CurrentlyMining = false;
	}

	public bool TryGetContainerIndex(out int containerIndex)
	{
		containerIndex = -1;
		if (type == 525)
		{
			containerIndex = -2;
			return true;
		}
		if (type == 734)
		{
			containerIndex = -5;
			return true;
		}
		return false;
	}

	public bool IsInteractible()
	{
		int num = type;
		if (num == 525 || num == 734)
		{
			return true;
		}
		return false;
	}

	public Color GetAlpha(Color newColor)
	{
		if (type == 937)
		{
			newColor.A = (byte)((float)(int)newColor.A * 0.75f);
		}
		if (type == 880 || type == 929)
		{
			newColor.A /= 2;
		}
		if (type == 855)
		{
			newColor = Color.Lerp(newColor, new Color(255, 200, 60), 0.5f);
		}
		if (type == 933)
		{
			newColor = Color.White * Opacity;
		}
		if (type == 270)
		{
			return new Color(255, 255, 255, (int)Utils.WrappedLerp(0f, 255f, (float)(timeLeft % 40) / 40f));
		}
		if (type == 837)
		{
			if (alpha > 0)
			{
				return Color.Transparent;
			}
			return new Color(255, 255, 255, 200);
		}
		if (type == 180 || type == 345 || type == 586)
		{
			return Color.Lerp(newColor, Color.White, 0.75f);
		}
		if (type == 764 || type == 856 || type == 857 || type == 864)
		{
			return Color.White;
		}
		if (type == 873 || type == 872 || type == 931 || type == 913 || type == 34)
		{
			return Color.White * Opacity;
		}
		if (type == 756)
		{
			return Color.Lerp(newColor, Color.Black, 0.25f);
		}
		if (type == 895)
		{
			return Color.White * Opacity;
		}
		if (type == 893 || type == 907)
		{
			return new Color(255, 255, 255, 150);
		}
		if (type == 833 || type == 834 || type == 835 || type == 912)
		{
			return Color.Lerp(newColor, Color.White, 0.25f);
		}
		if (type == 351 || type == 350)
		{
			Point point = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point.X, point.Y) && !WorldGen.SolidTile(point.X, point.Y))
			{
				return Color.Lerp(newColor, Color.White, 0.15f);
			}
			return Color.Lerp(newColor, Color.White, 0.05f);
		}
		if (type == 346 || type == 347 || type == 325 || type == 755)
		{
			return Color.Lerp(newColor, Color.White, 0.75f);
		}
		int num;
		int num2;
		int num3;
		if (type == 650)
		{
			num = (int)((double)(int)newColor.R * 1.5);
			num2 = (int)((double)(int)newColor.G * 1.5);
			num3 = (int)((double)(int)newColor.B * 1.5);
			if (num > 255)
			{
				num = 255;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
		}
		else
		{
			if (type == 948)
			{
				return Color.White;
			}
			if (type == 604 || type == 631)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 636)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 64 - alpha / 4);
			}
			if (type == 673 || type == 706)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 180 - alpha / 2 - alpha / 4);
			}
			if (type == 603 || type == 633)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 623 || (type >= 625 && type <= 628) || type == 710)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 645 || type == 643)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 127 - alpha / 2);
			}
			if (type == 611)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 640 || type == 644 || type == 658)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 612 || type == 953)
			{
				return new Color(255, 255, 255, 127);
			}
			if (aiStyle == 105)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 554)
			{
				return new Color(200, 200, 200, 200);
			}
			if (type == 601)
			{
				return PortalHelper.GetPortalColor(owner, (int)ai[0]);
			}
			if (type == 602)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[1]);
				portalColor.A = 227;
				return portalColor;
			}
			if (type == 585)
			{
				byte a = newColor.A;
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				newColor.A = a;
				return newColor;
			}
			if (type == 714)
			{
				byte a2 = newColor.A;
				newColor = Color.Lerp(newColor, Color.White, 0.8f);
				newColor.A = a2;
				newColor *= (float)(int)a2 / 255f;
				return newColor;
			}
			if (type == 573 || type == 578 || type == 579 || type == 617 || type == 641 || type == 707 || type == 813)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 9 || type == 490)
			{
				return Color.White;
			}
			if (type == 575 || type == 596 || type == 659)
			{
				if (timeLeft < 30)
				{
					float num4 = (float)timeLeft / 30f;
					alpha = (int)(255f - 255f * num4);
				}
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 128 - alpha / 2);
			}
			if (type == 546)
			{
				return new Color(255, 200, 255, 200);
			}
			if (type == 553)
			{
				return new Color(255, 255, 200, 200);
			}
			if (type == 540)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
			}
			if (type == 498)
			{
				return new Color(255, 100, 20, 200);
			}
			if (type == 538)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 518)
			{
				float num5 = 1f - (float)alpha / 255f;
				return new Color((int)(200f * num5), (int)(200f * num5), (int)(200f * num5), (int)(100f * num5));
			}
			if (type == 518 || type == 595 || type == 735)
			{
				Color color = Color.Lerp(newColor, Color.White, 0.85f);
				color.A = 128;
				return color * (1f - (float)alpha / 255f);
			}
			if (type == 536 || type == 607)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
			}
			if (type == 591)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
			}
			if (type == 493 || type == 494)
			{
				return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
			}
			if (type == 492)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 491)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 485 || type == 502)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 488)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 477 || type == 478 || type == 479)
			{
				if (alpha == 0)
				{
					return new Color(255, 255, 255, 200);
				}
				return new Color(0, 0, 0, 0);
			}
			if (type == 473)
			{
				return new Color(255, 255, 255, 255);
			}
			if (type == 50 || type == 53 || type == 515 || type == 870)
			{
				return new Color(255, 255, 255, 0);
			}
			if (type == 723 || type == 724 || type == 725 || type == 726 || type == 728)
			{
				return new Color(255, 255, 255, 0) * Opacity;
			}
			if (type == 92)
			{
				return new Color(255, 255, 255, 0);
			}
			if (type == 91)
			{
				return new Color(200, 200, 200, 0);
			}
			if (type == 34 || type == 15 || type == 93 || type == 94 || type == 95 || type == 96 || type == 253 || type == 258 || (type == 102 && alpha < 255))
			{
				return new Color(200, 200, 200, 25);
			}
			if (type == 465)
			{
				return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
			}
			if (type == 503)
			{
				Color value = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)alpha / 255f);
				Color value2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
				float amount = 0.25f + (float)Math.Cos(localAI[0]) * 0.25f;
				return Color.Lerp(value, value2, amount);
			}
			if (type == 467)
			{
				return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
			}
			if (type == 694 || type == 695 || type == 696)
			{
				return new Color(255, 255, 255, 127) * (1f - (float)alpha / 255f);
			}
			if (type == 634 || type == 635)
			{
				return new Color(255, 255, 255, 127) * Opacity;
			}
			if (type == 671)
			{
				return new Color(255, 255, 255, 255) * Opacity;
			}
			if (type == 664 || type == 666 || type == 668)
			{
				newColor = Color.Lerp(newColor, Color.White, 0.5f);
				return new Color(newColor.R, newColor.G, newColor.B, 200) * Opacity;
			}
			if (type == 451)
			{
				return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
			}
			if (type == 684)
			{
				return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
			}
			if (type == 454 || type == 452)
			{
				return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
			}
			if (type == 464)
			{
				return new Color(255, 255, 255, 255) * ((255f - (float)alpha) / 255f);
			}
			if (type == 450)
			{
				return new Color(200, 200, 200, 255 - alpha);
			}
			if (type == 459 || type == 709)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 447)
			{
				return new Color(255, 255, 255, 200);
			}
			if (type == 446)
			{
				return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
			}
			if (type == 691 || type == 692 || type == 693)
			{
				return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)alpha / 255f);
			}
			if (type >= 646 && type <= 649)
			{
				return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
			}
			if (type == 445)
			{
				return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
			}
			if (type == 440 || type == 449 || type == 606)
			{
				num = 255 - alpha;
				num2 = 255 - alpha;
				num3 = 255 - alpha;
			}
			else
			{
				if (type == 444)
				{
					return newColor * (1f - (float)alpha / 255f);
				}
				if (type == 443 || type == 675 || type == 686 || type == 711)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 676)
				{
					return newColor * Opacity;
				}
				if (type == 438)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 592)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 437 || type == 700)
				{
					return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
				}
				if (type == 462)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 352)
				{
					Color color2 = Color.Lerp(newColor, Color.White, 0.5f);
					color2.A = (byte)((float)(int)color2.A * ((float)alpha / 255f));
					return new Color(color2.R, color2.G, color2.B, color2.A);
				}
				if (type == 435 || type == 732 || type == 731)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color(newColor.R, newColor.G, newColor.B, 25);
				}
				if (type == 682)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color(newColor.R, newColor.G, newColor.B, 127);
				}
				if (type == 436)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					return new Color(newColor.R, newColor.G, newColor.B, 25);
				}
				if (type == 409)
				{
					return new Color(250, 250, 250, 200);
				}
				if (type == 348 || type == 349)
				{
					return new Color(200, 200, 200, alpha);
				}
				if (type == 337)
				{
					return new Color(250, 250, 250, 150);
				}
				if (type >= 424 && type <= 426)
				{
					byte b = 150;
					if (newColor.R < b)
					{
						newColor.R = b;
					}
					if (newColor.G < b)
					{
						newColor.G = b;
					}
					if (newColor.B < b)
					{
						newColor.B = b;
					}
					return new Color(newColor.R, newColor.G, newColor.B, 255);
				}
				if (type == 431 || type == 432)
				{
					return new Color(250, 250, 250, 255 - alpha);
				}
				if (type == 343 || type == 344)
				{
					float num6 = 1f - (float)alpha / 255f;
					return new Color((int)(250f * num6), (int)(250f * num6), (int)(250f * num6), (int)(100f * num6));
				}
				if (type == 332)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 329)
				{
					return new Color(200, 200, 200, 50);
				}
				if (type >= 326 && type <= 328)
				{
					return Color.Transparent;
				}
				if (type >= 400 && type <= 402)
				{
					return Color.Transparent;
				}
				if (type == 324 && frame >= 6 && frame <= 9)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 16)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 321)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 76 || type == 77 || type == 78)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 308)
				{
					return new Color(200, 200, 255, 125);
				}
				if (type == 263)
				{
					if (timeLeft < 255)
					{
						return new Color(255, 255, 255, (byte)timeLeft);
					}
					return new Color(255, 255, 255, 255);
				}
				if (type == 274)
				{
					if (timeLeft < 85)
					{
						byte b2 = (byte)(timeLeft * 3);
						byte a3 = (byte)(100f * ((float)(int)b2 / 255f));
						return new Color(b2, b2, b2, a3);
					}
					return new Color(255, 255, 255, 100);
				}
				if (type == 5)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 300 || type == 301)
				{
					return new Color(250, 250, 250, 50);
				}
				if (type == 712)
				{
					return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
				}
				if (type == 304)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, (byte)((float)(255 - alpha) / 3f));
				}
				if (type == 116 || type == 132 || type == 156 || type == 157 || type == 157 || type == 173)
				{
					if (localAI[1] >= 15f)
					{
						return new Color(255, 255, 255, alpha);
					}
					if (localAI[1] < 5f)
					{
						return Color.Transparent;
					}
					int num7 = (int)((localAI[1] - 5f) / 10f * 255f);
					return new Color(num7, num7, num7, num7);
				}
				if (type == 254)
				{
					if (timeLeft < 30)
					{
						float num8 = (float)timeLeft / 30f;
						alpha = (int)(255f - 255f * num8);
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 265 || type == 355)
				{
					if (alpha > 0)
					{
						return Color.Transparent;
					}
					return new Color(255, 255, 255, 0);
				}
				if (type == 257)
				{
					if (alpha > 200)
					{
						return Color.Transparent;
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 259)
				{
					if (alpha > 200)
					{
						return Color.Transparent;
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type >= 150 && type <= 152)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 250)
				{
					return Color.Transparent;
				}
				if (type == 251)
				{
					num = 255 - alpha;
					num2 = 255 - alpha;
					num3 = 255 - alpha;
					return new Color(num, num2, num3, 0);
				}
				if (type == 131)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 211)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 229)
				{
					return new Color(255, 255, 255, 50);
				}
				if (type == 221 || type == 729)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 20)
				{
					if (alpha <= 150)
					{
						return new Color(255, 255, 255, 0);
					}
					return new Color(0, 0, 0, 0);
				}
				if (type == 207)
				{
					num = 255 - alpha;
					num2 = 255 - alpha;
					num3 = 255 - alpha;
				}
				else
				{
					if (type == 242)
					{
						if (alpha < 140)
						{
							return new Color(255, 255, 255, 100);
						}
						return Color.Transparent;
					}
					if (type == 638)
					{
						return new Color(255, 255, 255, 100) * Opacity;
					}
					if (type == 660)
					{
						return new Color(150, 255, 255, 0) * Opacity;
					}
					if (type == 209)
					{
						num = newColor.R - alpha;
						num2 = newColor.G - alpha;
						num3 = newColor.B - alpha / 2;
					}
					else
					{
						if (type == 130)
						{
							return new Color(255, 255, 255, 175);
						}
						if (type == 182)
						{
							return new Color(255, 255, 255, 200);
						}
						if (type == 226)
						{
							num = 255;
							num2 = 255;
							num3 = 255;
							float num9 = (float)(int)Main.mouseTextColor / 200f - 0.3f;
							num = (int)((float)num * num9);
							num2 = (int)((float)num2 * num9);
							num3 = (int)((float)num3 * num9);
							num += 50;
							if (num > 255)
							{
								num = 255;
							}
							num2 += 50;
							if (num2 > 255)
							{
								num2 = 255;
							}
							num3 += 50;
							if (num3 > 255)
							{
								num3 = 255;
							}
							return new Color(num, num2, num3, 200);
						}
						if (type == 227)
						{
							num = (num2 = (num3 = 255));
							float num10 = (float)(int)Main.mouseTextColor / 100f - 1.6f;
							num = (int)((float)num * num10);
							num2 = (int)((float)num2 * num10);
							num3 = (int)((float)num3 * num10);
							int a4 = (int)(100f * num10);
							num += 50;
							if (num > 255)
							{
								num = 255;
							}
							num2 += 50;
							if (num2 > 255)
							{
								num2 = 255;
							}
							num3 += 50;
							if (num3 > 255)
							{
								num3 = 255;
							}
							return new Color(num, num2, num3, a4);
						}
						if (type == 114 || type == 115)
						{
							if (localAI[1] >= 15f)
							{
								return new Color(255, 255, 255, alpha);
							}
							if (localAI[1] < 5f)
							{
								return Color.Transparent;
							}
							int num11 = (int)((localAI[1] - 5f) / 10f * 255f);
							return new Color(num11, num11, num11, num11);
						}
						if (type == 83 || type == 88 || type == 89 || type == 90 || type == 100 || type == 104 || type == 279 || (type >= 283 && type <= 287) || type == 876)
						{
							if (alpha < 200)
							{
								return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
							}
							return Color.Transparent;
						}
						if (type == 34 || type == 35 || type == 15 || type == 19 || type == 44 || type == 45)
						{
							return Color.White;
						}
						if (type == 79)
						{
							num = Main.DiscoR;
							num2 = Main.DiscoG;
							num3 = Main.DiscoB;
							return default(Color);
						}
						if (type == 9 || type == 15 || type == 34 || type == 50 || type == 53 || type == 76 || type == 77 || type == 78 || type == 92 || type == 91)
						{
							num = newColor.R - alpha / 3;
							num2 = newColor.G - alpha / 3;
							num3 = newColor.B - alpha / 3;
						}
						else
						{
							if (type == 18)
							{
								return new Color(255, 255, 255, 50);
							}
							if (type == 16 || type == 44 || type == 45)
							{
								num = newColor.R;
								num2 = newColor.G;
								num3 = newColor.B;
							}
							else if (type == 12 || type == 72 || type == 86 || type == 87)
							{
								return new Color(255, 255, 255, newColor.A - alpha);
							}
						}
					}
				}
			}
		}
		float num12 = (float)(255 - alpha) / 255f;
		num = (int)((float)(int)newColor.R * num12);
		num2 = (int)((float)(int)newColor.G * num12);
		num3 = (int)((float)(int)newColor.B * num12);
		int num13 = newColor.A - alpha;
		if (num13 < 0)
		{
			num13 = 0;
		}
		if (num13 > 255)
		{
			num13 = 255;
		}
		return new Color(num, num2, num3, num13);
	}

	public override string ToString()
	{
		return "type:" + type + "name:" + Name + ", active:" + active.ToString() + ", whoAmI:" + whoAmI + ", identity:" + identity + ", ai0:" + ai[0] + " , uuid:" + projUUID;
	}
}
